# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPhaseCorrelationOperatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPhaseCorrelationOperatorPython', [dirname(__file__)])
        except ImportError:
            import _itkPhaseCorrelationOperatorPython
            return _itkPhaseCorrelationOperatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPhaseCorrelationOperatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPhaseCorrelationOperatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPhaseCorrelationOperatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import stdcomplexPython
import pyBasePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkPhaseCorrelationOperatorD3_New():
  return itkPhaseCorrelationOperatorD3.New()


def itkPhaseCorrelationOperatorF3_New():
  return itkPhaseCorrelationOperatorF3.New()


def itkPhaseCorrelationOperatorD2_New():
  return itkPhaseCorrelationOperatorD2.New()


def itkPhaseCorrelationOperatorF2_New():
  return itkPhaseCorrelationOperatorF2.New()


def itkImageToImageFilterICD3ICD3_New():
  return itkImageToImageFilterICD3ICD3.New()


def itkImageToImageFilterICD2ICD2_New():
  return itkImageToImageFilterICD2ICD2.New()


def itkImageSourceICD3_New():
  return itkImageSourceICD3.New()


def itkImageSourceICD2_New():
  return itkImageSourceICD2.New()


def itkImageCD3_New():
  return itkImageCD3.New()


def itkImageCD2_New():
  return itkImageCD2.New()

class itkImageCD2(itkImagePython.itkImageBase2):
    """Proxy of C++ itkImageCD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCD2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCD2 self) -> itkImageCD2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCD2 self, bool initializePixels=False)
        Allocate(itkImageCD2 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCD2 self, stdcomplexD value)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCD2 self, itkIndex2 index, stdcomplexD value)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCD2 self, itkIndex2 index) -> stdcomplexD
        GetPixel(itkImageCD2 self, itkIndex2 index) -> stdcomplexD
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCD2 self) -> stdcomplexD
        GetBufferPointer(itkImageCD2 self) -> stdcomplexD
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCD2 self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(itkImageCD2 self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCD2 self, itk::ImportImageContainer< unsigned long,std::complex< double > > * container)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixelContainer(self, container)


    def Graft(self, data):
        """
        Graft(itkImageCD2 self, itkImageCD2 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCD2 self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(itkImageCD2 self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,2 > >
        GetNeighborhoodAccessor(itkImageCD2 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,2 > > const
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageCD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCD2"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCD2

        Create a new object of the class itkImageCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCD2.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_Clone, None, itkImageCD2)
itkImageCD2.Allocate = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_Allocate, None, itkImageCD2)
itkImageCD2.FillBuffer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_FillBuffer, None, itkImageCD2)
itkImageCD2.SetPixel = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixel, None, itkImageCD2)
itkImageCD2.GetPixel = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixel, None, itkImageCD2)
itkImageCD2.GetBufferPointer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetBufferPointer, None, itkImageCD2)
itkImageCD2.GetPixelContainer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelContainer, None, itkImageCD2)
itkImageCD2.SetPixelContainer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_SetPixelContainer, None, itkImageCD2)
itkImageCD2.Graft = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_Graft, None, itkImageCD2)
itkImageCD2.GetPixelAccessor = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetPixelAccessor, None, itkImageCD2)
itkImageCD2.GetNeighborhoodAccessor = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD2_GetNeighborhoodAccessor, None, itkImageCD2)
itkImageCD2_swigregister = _itkPhaseCorrelationOperatorPython.itkImageCD2_swigregister
itkImageCD2_swigregister(itkImageCD2)

def itkImageCD2___New_orig__():
    """itkImageCD2___New_orig__() -> itkImageCD2_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkImageCD2___New_orig__()

def itkImageCD2_cast(obj):
    """itkImageCD2_cast(itkLightObject obj) -> itkImageCD2"""
    return _itkPhaseCorrelationOperatorPython.itkImageCD2_cast(obj)

class itkImageCD3(itkImagePython.itkImageBase3):
    """Proxy of C++ itkImageCD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageCD3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageCD3 self) -> itkImageCD3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageCD3 self, bool initializePixels=False)
        Allocate(itkImageCD3 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageCD3 self, stdcomplexD value)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageCD3 self, itkIndex3 index, stdcomplexD value)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageCD3 self, itkIndex3 index) -> stdcomplexD
        GetPixel(itkImageCD3 self, itkIndex3 index) -> stdcomplexD
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageCD3 self) -> stdcomplexD
        GetBufferPointer(itkImageCD3 self) -> stdcomplexD
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageCD3 self) -> itk::ImportImageContainer< unsigned long,std::complex< double > >
        GetPixelContainer(itkImageCD3 self) -> itk::ImportImageContainer< unsigned long,std::complex< double > > const *
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageCD3 self, itk::ImportImageContainer< unsigned long,std::complex< double > > * container)"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixelContainer(self, container)


    def Graft(self, data):
        """
        Graft(itkImageCD3 self, itkImageCD3 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageCD3 self) -> itk::DefaultPixelAccessor< std::complex< double > >
        GetPixelAccessor(itkImageCD3 self) -> itk::DefaultPixelAccessor< std::complex< double > > const
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageCD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,3 > >
        GetNeighborhoodAccessor(itkImageCD3 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< double >,3 > > const
        """
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageCD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageCD3"""
        return _itkPhaseCorrelationOperatorPython.itkImageCD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageCD3

        Create a new object of the class itkImageCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageCD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageCD3.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_Clone, None, itkImageCD3)
itkImageCD3.Allocate = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_Allocate, None, itkImageCD3)
itkImageCD3.FillBuffer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_FillBuffer, None, itkImageCD3)
itkImageCD3.SetPixel = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixel, None, itkImageCD3)
itkImageCD3.GetPixel = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixel, None, itkImageCD3)
itkImageCD3.GetBufferPointer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetBufferPointer, None, itkImageCD3)
itkImageCD3.GetPixelContainer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelContainer, None, itkImageCD3)
itkImageCD3.SetPixelContainer = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_SetPixelContainer, None, itkImageCD3)
itkImageCD3.Graft = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_Graft, None, itkImageCD3)
itkImageCD3.GetPixelAccessor = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetPixelAccessor, None, itkImageCD3)
itkImageCD3.GetNeighborhoodAccessor = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageCD3_GetNeighborhoodAccessor, None, itkImageCD3)
itkImageCD3_swigregister = _itkPhaseCorrelationOperatorPython.itkImageCD3_swigregister
itkImageCD3_swigregister(itkImageCD3)

def itkImageCD3___New_orig__():
    """itkImageCD3___New_orig__() -> itkImageCD3_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkImageCD3___New_orig__()

def itkImageCD3_cast(obj):
    """itkImageCD3_cast(itkLightObject obj) -> itkImageCD3"""
    return _itkPhaseCorrelationOperatorPython.itkImageCD3_cast(obj)

class itkImageSourceICD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceICD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceICD2 self) -> itkImageCD2
        GetOutput(itkImageSourceICD2 self) -> itkImageCD2
        GetOutput(itkImageSourceICD2 self, unsigned int idx) -> itkImageCD2
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceICD2 self, itkDataObject output)
        GraftOutput(itkImageSourceICD2 self, std::string const & key, itkDataObject output)
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceICD2 self, unsigned int idx, itkDataObject output)"""
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceICD2 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceICD2 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_MakeOutput(self, *args)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageSourceICD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceICD2"""
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceICD2

        Create a new object of the class itkImageSourceICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceICD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceICD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceICD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceICD2.GetOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GetOutput, None, itkImageSourceICD2)
itkImageSourceICD2.GraftOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftOutput, None, itkImageSourceICD2)
itkImageSourceICD2.GraftNthOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_GraftNthOutput, None, itkImageSourceICD2)
itkImageSourceICD2.MakeOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD2_MakeOutput, None, itkImageSourceICD2)
itkImageSourceICD2_swigregister = _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_swigregister
itkImageSourceICD2_swigregister(itkImageSourceICD2)

def itkImageSourceICD2_cast(obj):
    """itkImageSourceICD2_cast(itkLightObject obj) -> itkImageSourceICD2"""
    return _itkPhaseCorrelationOperatorPython.itkImageSourceICD2_cast(obj)

class itkImageSourceICD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceICD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceICD3 self) -> itkImageCD3
        GetOutput(itkImageSourceICD3 self) -> itkImageCD3
        GetOutput(itkImageSourceICD3 self, unsigned int idx) -> itkImageCD3
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceICD3 self, itkDataObject output)
        GraftOutput(itkImageSourceICD3 self, std::string const & key, itkDataObject output)
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceICD3 self, unsigned int idx, itkDataObject output)"""
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceICD3 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceICD3 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_MakeOutput(self, *args)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageSourceICD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceICD3"""
        return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceICD3

        Create a new object of the class itkImageSourceICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceICD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceICD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceICD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceICD3.GetOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GetOutput, None, itkImageSourceICD3)
itkImageSourceICD3.GraftOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftOutput, None, itkImageSourceICD3)
itkImageSourceICD3.GraftNthOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_GraftNthOutput, None, itkImageSourceICD3)
itkImageSourceICD3.MakeOutput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageSourceICD3_MakeOutput, None, itkImageSourceICD3)
itkImageSourceICD3_swigregister = _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_swigregister
itkImageSourceICD3_swigregister(itkImageSourceICD3)

def itkImageSourceICD3_cast(obj):
    """itkImageSourceICD3_cast(itkLightObject obj) -> itkImageSourceICD3"""
    return _itkPhaseCorrelationOperatorPython.itkImageSourceICD3_cast(obj)

class itkImageToImageFilterICD2ICD2(itkImageSourceICD2):
    """Proxy of C++ itkImageToImageFilterICD2ICD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterICD2ICD2 self, itkImageCD2 image)
        SetInput(itkImageToImageFilterICD2ICD2 self, unsigned int arg0, itkImageCD2 image)
        """
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterICD2ICD2 self) -> itkImageCD2
        GetInput(itkImageToImageFilterICD2ICD2 self, unsigned int idx) -> itkImageCD2
        """
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterICD2ICD2 self, itkImageCD2 image)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterICD2ICD2 self)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterICD2ICD2 self, itkImageCD2 image)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterICD2ICD2 self)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterICD2ICD2 self, double const _arg)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterICD2ICD2 self) -> double"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterICD2ICD2 self, double const _arg)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterICD2ICD2 self) -> double"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageToImageFilterICD2ICD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterICD2ICD2"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICD2ICD2

        Create a new object of the class itkImageToImageFilterICD2ICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICD2ICD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICD2ICD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICD2ICD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterICD2ICD2.SetInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.GetInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.PushBackInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushBackInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.PopBackInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopBackInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.PushFrontInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PushFrontInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.PopFrontInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_PopFrontInput, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.SetCoordinateTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetCoordinateTolerance, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.GetCoordinateTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetCoordinateTolerance, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.SetDirectionTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_SetDirectionTolerance, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2.GetDirectionTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_GetDirectionTolerance, None, itkImageToImageFilterICD2ICD2)
itkImageToImageFilterICD2ICD2_swigregister = _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_swigregister
itkImageToImageFilterICD2ICD2_swigregister(itkImageToImageFilterICD2ICD2)

def itkImageToImageFilterICD2ICD2_cast(obj):
    """itkImageToImageFilterICD2ICD2_cast(itkLightObject obj) -> itkImageToImageFilterICD2ICD2"""
    return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD2ICD2_cast(obj)

class itkImageToImageFilterICD3ICD3(itkImageSourceICD3):
    """Proxy of C++ itkImageToImageFilterICD3ICD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterICD3ICD3 self, itkImageCD3 image)
        SetInput(itkImageToImageFilterICD3ICD3 self, unsigned int arg0, itkImageCD3 image)
        """
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterICD3ICD3 self) -> itkImageCD3
        GetInput(itkImageToImageFilterICD3ICD3 self, unsigned int idx) -> itkImageCD3
        """
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterICD3ICD3 self, itkImageCD3 image)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterICD3ICD3 self)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterICD3ICD3 self, itkImageCD3 image)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterICD3ICD3 self)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterICD3ICD3 self, double const _arg)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterICD3ICD3 self) -> double"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterICD3ICD3 self, double const _arg)"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterICD3ICD3 self) -> double"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkImageToImageFilterICD3ICD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterICD3ICD3"""
        return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterICD3ICD3

        Create a new object of the class itkImageToImageFilterICD3ICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterICD3ICD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterICD3ICD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterICD3ICD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterICD3ICD3.SetInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.GetInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.PushBackInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushBackInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.PopBackInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopBackInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.PushFrontInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PushFrontInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.PopFrontInput = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_PopFrontInput, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.SetCoordinateTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetCoordinateTolerance, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.GetCoordinateTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetCoordinateTolerance, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.SetDirectionTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_SetDirectionTolerance, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3.GetDirectionTolerance = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_GetDirectionTolerance, None, itkImageToImageFilterICD3ICD3)
itkImageToImageFilterICD3ICD3_swigregister = _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_swigregister
itkImageToImageFilterICD3ICD3_swigregister(itkImageToImageFilterICD3ICD3)

def itkImageToImageFilterICD3ICD3_cast(obj):
    """itkImageToImageFilterICD3ICD3_cast(itkLightObject obj) -> itkImageToImageFilterICD3ICD3"""
    return _itkPhaseCorrelationOperatorPython.itkImageToImageFilterICD3ICD3_cast(obj)

class itkPhaseCorrelationOperatorD2(itkImageToImageFilterICD2ICD2):
    """Proxy of C++ itkPhaseCorrelationOperatorD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkPhaseCorrelationOperatorD2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkPhaseCorrelationOperatorD2 self) -> itkPhaseCorrelationOperatorD2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_Clone(self)


    def SetFixedImage(self, fixedImage):
        """SetFixedImage(itkPhaseCorrelationOperatorD2 self, itkImageCD2 fixedImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetFixedImage(self, fixedImage)


    def SetMovingImage(self, movingImage):
        """SetMovingImage(itkPhaseCorrelationOperatorD2 self, itkImageCD2 movingImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetMovingImage(self, movingImage)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkPhaseCorrelationOperatorD2"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorD2

        Create a new object of the class itkPhaseCorrelationOperatorD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseCorrelationOperatorD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseCorrelationOperatorD2.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_Clone, None, itkPhaseCorrelationOperatorD2)
itkPhaseCorrelationOperatorD2.SetFixedImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetFixedImage, None, itkPhaseCorrelationOperatorD2)
itkPhaseCorrelationOperatorD2.SetMovingImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_SetMovingImage, None, itkPhaseCorrelationOperatorD2)
itkPhaseCorrelationOperatorD2_swigregister = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_swigregister
itkPhaseCorrelationOperatorD2_swigregister(itkPhaseCorrelationOperatorD2)

def itkPhaseCorrelationOperatorD2___New_orig__():
    """itkPhaseCorrelationOperatorD2___New_orig__() -> itkPhaseCorrelationOperatorD2_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2___New_orig__()

def itkPhaseCorrelationOperatorD2_cast(obj):
    """itkPhaseCorrelationOperatorD2_cast(itkLightObject obj) -> itkPhaseCorrelationOperatorD2"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD2_cast(obj)

class itkPhaseCorrelationOperatorD3(itkImageToImageFilterICD3ICD3):
    """Proxy of C++ itkPhaseCorrelationOperatorD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkPhaseCorrelationOperatorD3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkPhaseCorrelationOperatorD3 self) -> itkPhaseCorrelationOperatorD3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_Clone(self)


    def SetFixedImage(self, fixedImage):
        """SetFixedImage(itkPhaseCorrelationOperatorD3 self, itkImageCD3 fixedImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetFixedImage(self, fixedImage)


    def SetMovingImage(self, movingImage):
        """SetMovingImage(itkPhaseCorrelationOperatorD3 self, itkImageCD3 movingImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetMovingImage(self, movingImage)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkPhaseCorrelationOperatorD3"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorD3

        Create a new object of the class itkPhaseCorrelationOperatorD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseCorrelationOperatorD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseCorrelationOperatorD3.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_Clone, None, itkPhaseCorrelationOperatorD3)
itkPhaseCorrelationOperatorD3.SetFixedImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetFixedImage, None, itkPhaseCorrelationOperatorD3)
itkPhaseCorrelationOperatorD3.SetMovingImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_SetMovingImage, None, itkPhaseCorrelationOperatorD3)
itkPhaseCorrelationOperatorD3_swigregister = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_swigregister
itkPhaseCorrelationOperatorD3_swigregister(itkPhaseCorrelationOperatorD3)

def itkPhaseCorrelationOperatorD3___New_orig__():
    """itkPhaseCorrelationOperatorD3___New_orig__() -> itkPhaseCorrelationOperatorD3_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3___New_orig__()

def itkPhaseCorrelationOperatorD3_cast(obj):
    """itkPhaseCorrelationOperatorD3_cast(itkLightObject obj) -> itkPhaseCorrelationOperatorD3"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorD3_cast(obj)

class itkPhaseCorrelationOperatorF2(itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    """Proxy of C++ itkPhaseCorrelationOperatorF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkPhaseCorrelationOperatorF2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkPhaseCorrelationOperatorF2 self) -> itkPhaseCorrelationOperatorF2_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_Clone(self)


    def SetFixedImage(self, fixedImage):
        """SetFixedImage(itkPhaseCorrelationOperatorF2 self, itkImageCF2 fixedImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetFixedImage(self, fixedImage)


    def SetMovingImage(self, movingImage):
        """SetMovingImage(itkPhaseCorrelationOperatorF2 self, itkImageCF2 movingImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetMovingImage(self, movingImage)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkPhaseCorrelationOperatorF2"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorF2

        Create a new object of the class itkPhaseCorrelationOperatorF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseCorrelationOperatorF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseCorrelationOperatorF2.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_Clone, None, itkPhaseCorrelationOperatorF2)
itkPhaseCorrelationOperatorF2.SetFixedImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetFixedImage, None, itkPhaseCorrelationOperatorF2)
itkPhaseCorrelationOperatorF2.SetMovingImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_SetMovingImage, None, itkPhaseCorrelationOperatorF2)
itkPhaseCorrelationOperatorF2_swigregister = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_swigregister
itkPhaseCorrelationOperatorF2_swigregister(itkPhaseCorrelationOperatorF2)

def itkPhaseCorrelationOperatorF2___New_orig__():
    """itkPhaseCorrelationOperatorF2___New_orig__() -> itkPhaseCorrelationOperatorF2_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2___New_orig__()

def itkPhaseCorrelationOperatorF2_cast(obj):
    """itkPhaseCorrelationOperatorF2_cast(itkLightObject obj) -> itkPhaseCorrelationOperatorF2"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF2_cast(obj)

class itkPhaseCorrelationOperatorF3(itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    """Proxy of C++ itkPhaseCorrelationOperatorF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkPhaseCorrelationOperatorF3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkPhaseCorrelationOperatorF3 self) -> itkPhaseCorrelationOperatorF3_Pointer"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_Clone(self)


    def SetFixedImage(self, fixedImage):
        """SetFixedImage(itkPhaseCorrelationOperatorF3 self, itkImageCF3 fixedImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetFixedImage(self, fixedImage)


    def SetMovingImage(self, movingImage):
        """SetMovingImage(itkPhaseCorrelationOperatorF3 self, itkImageCF3 movingImage)"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetMovingImage(self, movingImage)

    __swig_destroy__ = _itkPhaseCorrelationOperatorPython.delete_itkPhaseCorrelationOperatorF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkPhaseCorrelationOperatorF3"""
        return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseCorrelationOperatorF3

        Create a new object of the class itkPhaseCorrelationOperatorF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseCorrelationOperatorF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseCorrelationOperatorF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseCorrelationOperatorF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseCorrelationOperatorF3.Clone = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_Clone, None, itkPhaseCorrelationOperatorF3)
itkPhaseCorrelationOperatorF3.SetFixedImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetFixedImage, None, itkPhaseCorrelationOperatorF3)
itkPhaseCorrelationOperatorF3.SetMovingImage = new_instancemethod(_itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_SetMovingImage, None, itkPhaseCorrelationOperatorF3)
itkPhaseCorrelationOperatorF3_swigregister = _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_swigregister
itkPhaseCorrelationOperatorF3_swigregister(itkPhaseCorrelationOperatorF3)

def itkPhaseCorrelationOperatorF3___New_orig__():
    """itkPhaseCorrelationOperatorF3___New_orig__() -> itkPhaseCorrelationOperatorF3_Pointer"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3___New_orig__()

def itkPhaseCorrelationOperatorF3_cast(obj):
    """itkPhaseCorrelationOperatorF3_cast(itkLightObject obj) -> itkPhaseCorrelationOperatorF3"""
    return _itkPhaseCorrelationOperatorPython.itkPhaseCorrelationOperatorF3_cast(obj)


def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    return itk.ImageToImageFilter.__call__(*args, **kwargs)
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    return itk.ImageSource.__call__(*args, **kwargs)
def phase_correlation_operator(*args, **kwargs):
    """Procedural interface for PhaseCorrelationOperator"""
    import itk
    return itk.PhaseCorrelationOperator.__call__(*args, **kwargs)



