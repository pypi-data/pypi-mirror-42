# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SSL Certificate Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class OAuth2TransferToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expires_in': 'str',
        'refresh_token': 'str',
        'access_token': 'str',
        'scope': 'str',
        'session_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'expires_in': 'expires_in',
        'refresh_token': 'refresh_token',
        'access_token': 'access_token',
        'scope': 'scope',
        'session_id': 'sessionID',
        'user_name': 'userName'
    }

    def __init__(self, expires_in=None, refresh_token=None, access_token=None, scope=None, session_id=None, user_name=None):  # noqa: E501
        """OAuth2TransferToken - a model defined in Swagger"""  # noqa: E501

        self._expires_in = None
        self._refresh_token = None
        self._access_token = None
        self._scope = None
        self._session_id = None
        self._user_name = None
        self.discriminator = None

        if expires_in is not None:
            self.expires_in = expires_in
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if access_token is not None:
            self.access_token = access_token
        if scope is not None:
            self.scope = scope
        if session_id is not None:
            self.session_id = session_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def expires_in(self):
        """Gets the expires_in of this OAuth2TransferToken.  # noqa: E501


        :return: The expires_in of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this OAuth2TransferToken.


        :param expires_in: The expires_in of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._expires_in = expires_in

    @property
    def refresh_token(self):
        """Gets the refresh_token of this OAuth2TransferToken.  # noqa: E501


        :return: The refresh_token of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this OAuth2TransferToken.


        :param refresh_token: The refresh_token of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def access_token(self):
        """Gets the access_token of this OAuth2TransferToken.  # noqa: E501


        :return: The access_token of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this OAuth2TransferToken.


        :param access_token: The access_token of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def scope(self):
        """Gets the scope of this OAuth2TransferToken.  # noqa: E501


        :return: The scope of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this OAuth2TransferToken.


        :param scope: The scope of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def session_id(self):
        """Gets the session_id of this OAuth2TransferToken.  # noqa: E501


        :return: The session_id of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this OAuth2TransferToken.


        :param session_id: The session_id of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def user_name(self):
        """Gets the user_name of this OAuth2TransferToken.  # noqa: E501


        :return: The user_name of this OAuth2TransferToken.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OAuth2TransferToken.


        :param user_name: The user_name of this OAuth2TransferToken.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuth2TransferToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2TransferToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
