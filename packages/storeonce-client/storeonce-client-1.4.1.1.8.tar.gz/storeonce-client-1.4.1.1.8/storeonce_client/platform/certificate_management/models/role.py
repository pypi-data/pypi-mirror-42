# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SSL Certificate Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Role(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'id': 'str',
        'hidden_role': 'bool',
        'permissions': 'PermissionSpecs',
        'groups': 'Groups',
        'users': 'Users',
        'shiro_permission_set': 'list[Permission]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'id': 'id',
        'hidden_role': 'hiddenRole',
        'permissions': 'permissions',
        'groups': 'groups',
        'users': 'users',
        'shiro_permission_set': 'shiroPermissionSet'
    }

    def __init__(self, name=None, description=None, id=None, hidden_role=False, permissions=None, groups=None, users=None, shiro_permission_set=None):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._id = None
        self._hidden_role = None
        self._permissions = None
        self._groups = None
        self._users = None
        self._shiro_permission_set = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if hidden_role is not None:
            self.hidden_role = hidden_role
        if permissions is not None:
            self.permissions = permissions
        if groups is not None:
            self.groups = groups
        if users is not None:
            self.users = users
        if shiro_permission_set is not None:
            self.shiro_permission_set = shiro_permission_set

    @property
    def name(self):
        """Gets the name of this Role.  # noqa: E501


        :return: The name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.


        :param name: The name of this Role.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501


        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Role.  # noqa: E501


        :return: The id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.


        :param id: The id of this Role.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hidden_role(self):
        """Gets the hidden_role of this Role.  # noqa: E501


        :return: The hidden_role of this Role.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_role

    @hidden_role.setter
    def hidden_role(self, hidden_role):
        """Sets the hidden_role of this Role.


        :param hidden_role: The hidden_role of this Role.  # noqa: E501
        :type: bool
        """

        self._hidden_role = hidden_role

    @property
    def permissions(self):
        """Gets the permissions of this Role.  # noqa: E501


        :return: The permissions of this Role.  # noqa: E501
        :rtype: PermissionSpecs
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Role.


        :param permissions: The permissions of this Role.  # noqa: E501
        :type: PermissionSpecs
        """

        self._permissions = permissions

    @property
    def groups(self):
        """Gets the groups of this Role.  # noqa: E501


        :return: The groups of this Role.  # noqa: E501
        :rtype: Groups
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Role.


        :param groups: The groups of this Role.  # noqa: E501
        :type: Groups
        """

        self._groups = groups

    @property
    def users(self):
        """Gets the users of this Role.  # noqa: E501


        :return: The users of this Role.  # noqa: E501
        :rtype: Users
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Role.


        :param users: The users of this Role.  # noqa: E501
        :type: Users
        """

        self._users = users

    @property
    def shiro_permission_set(self):
        """Gets the shiro_permission_set of this Role.  # noqa: E501


        :return: The shiro_permission_set of this Role.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._shiro_permission_set

    @shiro_permission_set.setter
    def shiro_permission_set(self, shiro_permission_set):
        """Sets the shiro_permission_set of this Role.


        :param shiro_permission_set: The shiro_permission_set of this Role.  # noqa: E501
        :type: list[Permission]
        """

        self._shiro_permission_set = shiro_permission_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
