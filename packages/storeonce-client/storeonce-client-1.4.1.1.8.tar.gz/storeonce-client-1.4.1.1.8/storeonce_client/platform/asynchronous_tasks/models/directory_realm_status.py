# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Asynchronous Task Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class DirectoryRealmStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'realm_name': 'str',
        'url': 'str',
        'base_d_ns': 'list[str]',
        'user_naming_attribute': 'str',
        'supported_controls': 'list[str]',
        'supported_ldap_version': 'list[int]',
        'max_connection_count': 'int',
        'cur_connection_count': 'int',
        'failed_connection_attempts': 'int',
        'successful_connection_attempts': 'int',
        'max_connection_age': 'int',
        'errors': 'list[str]'
    }

    attribute_map = {
        'connected': 'connected',
        'realm_name': 'realmName',
        'url': 'url',
        'base_d_ns': 'baseDNs',
        'user_naming_attribute': 'userNamingAttribute',
        'supported_controls': 'supportedControls',
        'supported_ldap_version': 'supportedLDAPVersion',
        'max_connection_count': 'maxConnectionCount',
        'cur_connection_count': 'curConnectionCount',
        'failed_connection_attempts': 'failedConnectionAttempts',
        'successful_connection_attempts': 'successfulConnectionAttempts',
        'max_connection_age': 'maxConnectionAge',
        'errors': 'errors'
    }

    def __init__(self, connected=False, realm_name=None, url=None, base_d_ns=None, user_naming_attribute=None, supported_controls=None, supported_ldap_version=None, max_connection_count=None, cur_connection_count=None, failed_connection_attempts=None, successful_connection_attempts=None, max_connection_age=None, errors=None):  # noqa: E501
        """DirectoryRealmStatus - a model defined in Swagger"""  # noqa: E501

        self._connected = None
        self._realm_name = None
        self._url = None
        self._base_d_ns = None
        self._user_naming_attribute = None
        self._supported_controls = None
        self._supported_ldap_version = None
        self._max_connection_count = None
        self._cur_connection_count = None
        self._failed_connection_attempts = None
        self._successful_connection_attempts = None
        self._max_connection_age = None
        self._errors = None
        self.discriminator = None

        if connected is not None:
            self.connected = connected
        if realm_name is not None:
            self.realm_name = realm_name
        if url is not None:
            self.url = url
        if base_d_ns is not None:
            self.base_d_ns = base_d_ns
        if user_naming_attribute is not None:
            self.user_naming_attribute = user_naming_attribute
        if supported_controls is not None:
            self.supported_controls = supported_controls
        if supported_ldap_version is not None:
            self.supported_ldap_version = supported_ldap_version
        if max_connection_count is not None:
            self.max_connection_count = max_connection_count
        if cur_connection_count is not None:
            self.cur_connection_count = cur_connection_count
        if failed_connection_attempts is not None:
            self.failed_connection_attempts = failed_connection_attempts
        if successful_connection_attempts is not None:
            self.successful_connection_attempts = successful_connection_attempts
        if max_connection_age is not None:
            self.max_connection_age = max_connection_age
        if errors is not None:
            self.errors = errors

    @property
    def connected(self):
        """Gets the connected of this DirectoryRealmStatus.  # noqa: E501


        :return: The connected of this DirectoryRealmStatus.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this DirectoryRealmStatus.


        :param connected: The connected of this DirectoryRealmStatus.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def realm_name(self):
        """Gets the realm_name of this DirectoryRealmStatus.  # noqa: E501


        :return: The realm_name of this DirectoryRealmStatus.  # noqa: E501
        :rtype: str
        """
        return self._realm_name

    @realm_name.setter
    def realm_name(self, realm_name):
        """Sets the realm_name of this DirectoryRealmStatus.


        :param realm_name: The realm_name of this DirectoryRealmStatus.  # noqa: E501
        :type: str
        """

        self._realm_name = realm_name

    @property
    def url(self):
        """Gets the url of this DirectoryRealmStatus.  # noqa: E501


        :return: The url of this DirectoryRealmStatus.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DirectoryRealmStatus.


        :param url: The url of this DirectoryRealmStatus.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def base_d_ns(self):
        """Gets the base_d_ns of this DirectoryRealmStatus.  # noqa: E501


        :return: The base_d_ns of this DirectoryRealmStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_d_ns

    @base_d_ns.setter
    def base_d_ns(self, base_d_ns):
        """Sets the base_d_ns of this DirectoryRealmStatus.


        :param base_d_ns: The base_d_ns of this DirectoryRealmStatus.  # noqa: E501
        :type: list[str]
        """

        self._base_d_ns = base_d_ns

    @property
    def user_naming_attribute(self):
        """Gets the user_naming_attribute of this DirectoryRealmStatus.  # noqa: E501


        :return: The user_naming_attribute of this DirectoryRealmStatus.  # noqa: E501
        :rtype: str
        """
        return self._user_naming_attribute

    @user_naming_attribute.setter
    def user_naming_attribute(self, user_naming_attribute):
        """Sets the user_naming_attribute of this DirectoryRealmStatus.


        :param user_naming_attribute: The user_naming_attribute of this DirectoryRealmStatus.  # noqa: E501
        :type: str
        """

        self._user_naming_attribute = user_naming_attribute

    @property
    def supported_controls(self):
        """Gets the supported_controls of this DirectoryRealmStatus.  # noqa: E501


        :return: The supported_controls of this DirectoryRealmStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_controls

    @supported_controls.setter
    def supported_controls(self, supported_controls):
        """Sets the supported_controls of this DirectoryRealmStatus.


        :param supported_controls: The supported_controls of this DirectoryRealmStatus.  # noqa: E501
        :type: list[str]
        """

        self._supported_controls = supported_controls

    @property
    def supported_ldap_version(self):
        """Gets the supported_ldap_version of this DirectoryRealmStatus.  # noqa: E501


        :return: The supported_ldap_version of this DirectoryRealmStatus.  # noqa: E501
        :rtype: list[int]
        """
        return self._supported_ldap_version

    @supported_ldap_version.setter
    def supported_ldap_version(self, supported_ldap_version):
        """Sets the supported_ldap_version of this DirectoryRealmStatus.


        :param supported_ldap_version: The supported_ldap_version of this DirectoryRealmStatus.  # noqa: E501
        :type: list[int]
        """

        self._supported_ldap_version = supported_ldap_version

    @property
    def max_connection_count(self):
        """Gets the max_connection_count of this DirectoryRealmStatus.  # noqa: E501


        :return: The max_connection_count of this DirectoryRealmStatus.  # noqa: E501
        :rtype: int
        """
        return self._max_connection_count

    @max_connection_count.setter
    def max_connection_count(self, max_connection_count):
        """Sets the max_connection_count of this DirectoryRealmStatus.


        :param max_connection_count: The max_connection_count of this DirectoryRealmStatus.  # noqa: E501
        :type: int
        """

        self._max_connection_count = max_connection_count

    @property
    def cur_connection_count(self):
        """Gets the cur_connection_count of this DirectoryRealmStatus.  # noqa: E501


        :return: The cur_connection_count of this DirectoryRealmStatus.  # noqa: E501
        :rtype: int
        """
        return self._cur_connection_count

    @cur_connection_count.setter
    def cur_connection_count(self, cur_connection_count):
        """Sets the cur_connection_count of this DirectoryRealmStatus.


        :param cur_connection_count: The cur_connection_count of this DirectoryRealmStatus.  # noqa: E501
        :type: int
        """

        self._cur_connection_count = cur_connection_count

    @property
    def failed_connection_attempts(self):
        """Gets the failed_connection_attempts of this DirectoryRealmStatus.  # noqa: E501


        :return: The failed_connection_attempts of this DirectoryRealmStatus.  # noqa: E501
        :rtype: int
        """
        return self._failed_connection_attempts

    @failed_connection_attempts.setter
    def failed_connection_attempts(self, failed_connection_attempts):
        """Sets the failed_connection_attempts of this DirectoryRealmStatus.


        :param failed_connection_attempts: The failed_connection_attempts of this DirectoryRealmStatus.  # noqa: E501
        :type: int
        """

        self._failed_connection_attempts = failed_connection_attempts

    @property
    def successful_connection_attempts(self):
        """Gets the successful_connection_attempts of this DirectoryRealmStatus.  # noqa: E501


        :return: The successful_connection_attempts of this DirectoryRealmStatus.  # noqa: E501
        :rtype: int
        """
        return self._successful_connection_attempts

    @successful_connection_attempts.setter
    def successful_connection_attempts(self, successful_connection_attempts):
        """Sets the successful_connection_attempts of this DirectoryRealmStatus.


        :param successful_connection_attempts: The successful_connection_attempts of this DirectoryRealmStatus.  # noqa: E501
        :type: int
        """

        self._successful_connection_attempts = successful_connection_attempts

    @property
    def max_connection_age(self):
        """Gets the max_connection_age of this DirectoryRealmStatus.  # noqa: E501


        :return: The max_connection_age of this DirectoryRealmStatus.  # noqa: E501
        :rtype: int
        """
        return self._max_connection_age

    @max_connection_age.setter
    def max_connection_age(self, max_connection_age):
        """Sets the max_connection_age of this DirectoryRealmStatus.


        :param max_connection_age: The max_connection_age of this DirectoryRealmStatus.  # noqa: E501
        :type: int
        """

        self._max_connection_age = max_connection_age

    @property
    def errors(self):
        """Gets the errors of this DirectoryRealmStatus.  # noqa: E501


        :return: The errors of this DirectoryRealmStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DirectoryRealmStatus.


        :param errors: The errors of this DirectoryRealmStatus.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryRealmStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryRealmStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
