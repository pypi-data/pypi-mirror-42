# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Asynchronous Task Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class DNameFields(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cn': 'str',
        'ou': 'str',
        'o': 'str',
        'l': 'str',
        'st': 'str',
        'c': 'str'
    }

    attribute_map = {
        'cn': 'cn',
        'ou': 'ou',
        'o': 'o',
        'l': 'l',
        'st': 'st',
        'c': 'c'
    }

    def __init__(self, cn=None, ou=None, o=None, l=None, st=None, c=None):  # noqa: E501
        """DNameFields - a model defined in Swagger"""  # noqa: E501

        self._cn = None
        self._ou = None
        self._o = None
        self._l = None
        self._st = None
        self._c = None
        self.discriminator = None

        if cn is not None:
            self.cn = cn
        if ou is not None:
            self.ou = ou
        if o is not None:
            self.o = o
        if l is not None:
            self.l = l
        if st is not None:
            self.st = st
        if c is not None:
            self.c = c

    @property
    def cn(self):
        """Gets the cn of this DNameFields.  # noqa: E501


        :return: The cn of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._cn

    @cn.setter
    def cn(self, cn):
        """Sets the cn of this DNameFields.


        :param cn: The cn of this DNameFields.  # noqa: E501
        :type: str
        """

        self._cn = cn

    @property
    def ou(self):
        """Gets the ou of this DNameFields.  # noqa: E501


        :return: The ou of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._ou

    @ou.setter
    def ou(self, ou):
        """Sets the ou of this DNameFields.


        :param ou: The ou of this DNameFields.  # noqa: E501
        :type: str
        """

        self._ou = ou

    @property
    def o(self):
        """Gets the o of this DNameFields.  # noqa: E501


        :return: The o of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._o

    @o.setter
    def o(self, o):
        """Sets the o of this DNameFields.


        :param o: The o of this DNameFields.  # noqa: E501
        :type: str
        """

        self._o = o

    @property
    def l(self):
        """Gets the l of this DNameFields.  # noqa: E501


        :return: The l of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._l

    @l.setter
    def l(self, l):
        """Sets the l of this DNameFields.


        :param l: The l of this DNameFields.  # noqa: E501
        :type: str
        """

        self._l = l

    @property
    def st(self):
        """Gets the st of this DNameFields.  # noqa: E501


        :return: The st of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._st

    @st.setter
    def st(self, st):
        """Sets the st of this DNameFields.


        :param st: The st of this DNameFields.  # noqa: E501
        :type: str
        """

        self._st = st

    @property
    def c(self):
        """Gets the c of this DNameFields.  # noqa: E501


        :return: The c of this DNameFields.  # noqa: E501
        :rtype: str
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this DNameFields.


        :param c: The c of this DNameFields.  # noqa: E501
        :type: str
        """

        self._c = c

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DNameFields, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DNameFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
