# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Log Collection

    View and manage log collections for support tickets  # noqa: E501

    Component version: 1.18-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class LogCollectionSupportTicketApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_log_collection(self, body, **kwargs):  # noqa: E501
        """Create a new log collection  # noqa: E501

        Creates a new log collection based on supported collection type (COMPREHENSIVE, SLIM, USAGE or PERFORMANCE), and other properties passed in via the LogCollectionModel class object.  The following properties must be specified in the LogCollectionModel data: name (String), collectionType (COMPREHENSIVE, SLIM, USAGE, PERFORMANCE).  The description (String) is an optional property. The rest of the properties in the LogCollectionModel are ignored even when the values are specified.   To create a collection on a remote cluster or group , specify the remoteGroupId query parameter.  This will initiate a remote collection.  When finished, the remote collection will be copied to the initiating system , and deleted on the remote cluster or group.  The new remote collection can be viewed and retrieved from the initiating system the way a local collection would be.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_log_collection(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param LogCollectionModel body: Used to specify collection properties. (required)
        :param str remote_group_id: Management Group ID or cluster name to get remote collection from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.create_log_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_log_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_log_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new log collection  # noqa: E501

        Creates a new log collection based on supported collection type (COMPREHENSIVE, SLIM, USAGE or PERFORMANCE), and other properties passed in via the LogCollectionModel class object.  The following properties must be specified in the LogCollectionModel data: name (String), collectionType (COMPREHENSIVE, SLIM, USAGE, PERFORMANCE).  The description (String) is an optional property. The rest of the properties in the LogCollectionModel are ignored even when the values are specified.   To create a collection on a remote cluster or group , specify the remoteGroupId query parameter.  This will initiate a remote collection.  When finished, the remote collection will be copied to the initiating system , and deleted on the remote cluster or group.  The new remote collection can be viewed and retrieved from the initiating system the way a local collection would be.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.create_log_collection_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param LogCollectionModel body: Used to specify collection properties. (required)
        :param str remote_group_id: Management Group ID or cluster name to get remote collection from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'remote_group_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_log_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_log_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'remote_group_id' in params:
            query_params.append(('remoteGroupId', params['remote_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_log_collection(self, name, **kwargs):  # noqa: E501
        """Delete a log collection with a specified name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_log_collection(name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str name: Name of logcollection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_log_collection_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_log_collection_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_log_collection_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete a log collection with a specified name  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_log_collection_with_http_info(name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str name: Name of logcollection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_log_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_log_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_collection(self, name, **kwargs):  # noqa: E501
        """Retrieve the metadata associated with a specific log collection  # noqa: E501

        Returns the metadata associated with the log collection with the specified name.  The metadata is returned as a LogCollectionModel class object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_log_collection(name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str name: Name of logcollection (required)
        :return: LogCollectionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_log_collection_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_log_collection_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_log_collection_with_http_info(self, name, **kwargs):  # noqa: E501
        """Retrieve the metadata associated with a specific log collection  # noqa: E501

        Returns the metadata associated with the log collection with the specified name.  The metadata is returned as a LogCollectionModel class object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_log_collection_with_http_info(name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str name: Name of logcollection (required)
        :return: LogCollectionModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_log_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/collections/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogCollectionModel',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_collection_list(self, **kwargs):  # noqa: E501
        """Retrieve metadata associated with all log collections currently available on the system  # noqa: E501

        Returns a list of metadata associated with all existing log collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_log_collection_list(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: LogCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_log_collection_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_log_collection_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_log_collection_list_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve metadata associated with all log collections currently available on the system  # noqa: E501

        Returns a list of metadata associated with all existing log collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_log_collection_list_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: LogCollectionList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_collection_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogCollectionList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
