# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Users and Groups

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class UserEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'roles': 'list[str]',
        'directory_name': 'str',
        'user_name': 'str',
        'full_name': 'str',
        'mobile_phone': 'str',
        'office_phone': 'str',
        'email_address': 'str',
        'password': 'str',
        'uri': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'roles': 'roles',
        'directory_name': 'directory_name',
        'user_name': 'userName',
        'full_name': 'fullName',
        'mobile_phone': 'mobilePhone',
        'office_phone': 'officePhone',
        'email_address': 'emailAddress',
        'password': 'password',
        'uri': 'uri',
        'locked': 'locked'
    }

    def __init__(self, roles=None, directory_name=None, user_name=None, full_name=None, mobile_phone=None, office_phone=None, email_address=None, password=None, uri=None, locked=False):  # noqa: E501
        """UserEntry - a model defined in Swagger"""  # noqa: E501

        self._roles = None
        self._directory_name = None
        self._user_name = None
        self._full_name = None
        self._mobile_phone = None
        self._office_phone = None
        self._email_address = None
        self._password = None
        self._uri = None
        self._locked = None
        self.discriminator = None

        self.roles = roles
        if directory_name is not None:
            self.directory_name = directory_name
        self.user_name = user_name
        if full_name is not None:
            self.full_name = full_name
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if office_phone is not None:
            self.office_phone = office_phone
        if email_address is not None:
            self.email_address = email_address
        if password is not None:
            self.password = password
        if uri is not None:
            self.uri = uri
        if locked is not None:
            self.locked = locked

    @property
    def roles(self):
        """Gets the roles of this UserEntry.  # noqa: E501

        A list of any IDs that this user should be in. (1 is admin's ID, 2 is observer's ID, custom roles are UUIDs)  # noqa: E501

        :return: The roles of this UserEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserEntry.

        A list of any IDs that this user should be in. (1 is admin's ID, 2 is observer's ID, custom roles are UUIDs)  # noqa: E501

        :param roles: The roles of this UserEntry.  # noqa: E501
        :type: list[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def directory_name(self):
        """Gets the directory_name of this UserEntry.  # noqa: E501

        The name of an existing Directory if not a local user.  # noqa: E501

        :return: The directory_name of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._directory_name

    @directory_name.setter
    def directory_name(self, directory_name):
        """Sets the directory_name of this UserEntry.

        The name of an existing Directory if not a local user.  # noqa: E501

        :param directory_name: The directory_name of this UserEntry.  # noqa: E501
        :type: str
        """

        self._directory_name = directory_name

    @property
    def user_name(self):
        """Gets the user_name of this UserEntry.  # noqa: E501

        The user name (login name) of the user account.  The user will be created if the user is local.  Needs to pre-exist if the user is an existing directory account.  # noqa: E501

        :return: The user_name of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserEntry.

        The user name (login name) of the user account.  The user will be created if the user is local.  Needs to pre-exist if the user is an existing directory account.  # noqa: E501

        :param user_name: The user_name of this UserEntry.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def full_name(self):
        """Gets the full_name of this UserEntry.  # noqa: E501

        The full name of the user.  Only configurable for local users.  # noqa: E501

        :return: The full_name of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserEntry.

        The full name of the user.  Only configurable for local users.  # noqa: E501

        :param full_name: The full_name of this UserEntry.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this UserEntry.  # noqa: E501

        The mobile phone number of the user.  Only configurable if the user is local.  # noqa: E501

        :return: The mobile_phone of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this UserEntry.

        The mobile phone number of the user.  Only configurable if the user is local.  # noqa: E501

        :param mobile_phone: The mobile_phone of this UserEntry.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def office_phone(self):
        """Gets the office_phone of this UserEntry.  # noqa: E501

        The office phone number of the user.  Only configurable if the user is local.  # noqa: E501

        :return: The office_phone of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """Sets the office_phone of this UserEntry.

        The office phone number of the user.  Only configurable if the user is local.  # noqa: E501

        :param office_phone: The office_phone of this UserEntry.  # noqa: E501
        :type: str
        """

        self._office_phone = office_phone

    @property
    def email_address(self):
        """Gets the email_address of this UserEntry.  # noqa: E501

        The email address of the user.  Only configurable if the user is local.  # noqa: E501

        :return: The email_address of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserEntry.

        The email address of the user.  Only configurable if the user is local.  # noqa: E501

        :param email_address: The email_address of this UserEntry.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def password(self):
        """Gets the password of this UserEntry.  # noqa: E501

        The password of the user.  Only configurable if the user is local.  Required if the user is local.  # noqa: E501

        :return: The password of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserEntry.

        The password of the user.  Only configurable if the user is local.  Required if the user is local.  # noqa: E501

        :param password: The password of this UserEntry.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def uri(self):
        """Gets the uri of this UserEntry.  # noqa: E501


        :return: The uri of this UserEntry.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this UserEntry.


        :param uri: The uri of this UserEntry.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def locked(self):
        """Gets the locked of this UserEntry.  # noqa: E501


        :return: The locked of this UserEntry.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UserEntry.


        :param locked: The locked of this UserEntry.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
