# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Users and Groups

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ProgressUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status_update': 'str',
        'timestamp': 'datetime',
        'status_update_info': 'MessageInfoWrapper'
    }

    attribute_map = {
        'status_update': 'statusUpdate',
        'timestamp': 'timestamp',
        'status_update_info': 'statusUpdateInfo'
    }

    def __init__(self, status_update=None, timestamp=None, status_update_info=None):  # noqa: E501
        """ProgressUpdate - a model defined in Swagger"""  # noqa: E501

        self._status_update = None
        self._timestamp = None
        self._status_update_info = None
        self.discriminator = None

        if status_update is not None:
            self.status_update = status_update
        if timestamp is not None:
            self.timestamp = timestamp
        if status_update_info is not None:
            self.status_update_info = status_update_info

    @property
    def status_update(self):
        """Gets the status_update of this ProgressUpdate.  # noqa: E501


        :return: The status_update of this ProgressUpdate.  # noqa: E501
        :rtype: str
        """
        return self._status_update

    @status_update.setter
    def status_update(self, status_update):
        """Sets the status_update of this ProgressUpdate.


        :param status_update: The status_update of this ProgressUpdate.  # noqa: E501
        :type: str
        """

        self._status_update = status_update

    @property
    def timestamp(self):
        """Gets the timestamp of this ProgressUpdate.  # noqa: E501


        :return: The timestamp of this ProgressUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ProgressUpdate.


        :param timestamp: The timestamp of this ProgressUpdate.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def status_update_info(self):
        """Gets the status_update_info of this ProgressUpdate.  # noqa: E501


        :return: The status_update_info of this ProgressUpdate.  # noqa: E501
        :rtype: MessageInfoWrapper
        """
        return self._status_update_info

    @status_update_info.setter
    def status_update_info(self, status_update_info):
        """Sets the status_update_info of this ProgressUpdate.


        :param status_update_info: The status_update_info of this ProgressUpdate.  # noqa: E501
        :type: MessageInfoWrapper
        """

        self._status_update_info = status_update_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProgressUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
