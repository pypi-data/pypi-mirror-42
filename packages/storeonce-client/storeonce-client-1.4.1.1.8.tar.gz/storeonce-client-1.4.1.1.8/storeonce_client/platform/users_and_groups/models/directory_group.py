# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Users and Groups

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class DirectoryGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'directory_name': 'str',
        'roles': 'list[str]'
    }

    attribute_map = {
        'group_name': 'groupName',
        'directory_name': 'directory_name',
        'roles': 'roles'
    }

    def __init__(self, group_name=None, directory_name=None, roles=None):  # noqa: E501
        """DirectoryGroup - a model defined in Swagger"""  # noqa: E501

        self._group_name = None
        self._directory_name = None
        self._roles = None
        self.discriminator = None

        if group_name is not None:
            self.group_name = group_name
        if directory_name is not None:
            self.directory_name = directory_name
        if roles is not None:
            self.roles = roles

    @property
    def group_name(self):
        """Gets the group_name of this DirectoryGroup.  # noqa: E501


        :return: The group_name of this DirectoryGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this DirectoryGroup.


        :param group_name: The group_name of this DirectoryGroup.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def directory_name(self):
        """Gets the directory_name of this DirectoryGroup.  # noqa: E501


        :return: The directory_name of this DirectoryGroup.  # noqa: E501
        :rtype: str
        """
        return self._directory_name

    @directory_name.setter
    def directory_name(self, directory_name):
        """Sets the directory_name of this DirectoryGroup.


        :param directory_name: The directory_name of this DirectoryGroup.  # noqa: E501
        :type: str
        """

        self._directory_name = directory_name

    @property
    def roles(self):
        """Gets the roles of this DirectoryGroup.  # noqa: E501


        :return: The roles of this DirectoryGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this DirectoryGroup.


        :param roles: The roles of this DirectoryGroup.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
