# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Alerts

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ChangeLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'notes': 'str',
        'uri': 'str',
        'user_entered': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'created': 'created',
        'notes': 'notes',
        'uri': 'uri',
        'user_entered': 'userEntered',
        'username': 'username'
    }

    def __init__(self, created=None, notes=None, uri=None, user_entered=False, username=None):  # noqa: E501
        """ChangeLog - a model defined in Swagger"""  # noqa: E501

        self._created = None
        self._notes = None
        self._uri = None
        self._user_entered = None
        self._username = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if notes is not None:
            self.notes = notes
        if uri is not None:
            self.uri = uri
        if user_entered is not None:
            self.user_entered = user_entered
        if username is not None:
            self.username = username

    @property
    def created(self):
        """Gets the created of this ChangeLog.  # noqa: E501


        :return: The created of this ChangeLog.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ChangeLog.


        :param created: The created of this ChangeLog.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def notes(self):
        """Gets the notes of this ChangeLog.  # noqa: E501


        :return: The notes of this ChangeLog.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ChangeLog.


        :param notes: The notes of this ChangeLog.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def uri(self):
        """Gets the uri of this ChangeLog.  # noqa: E501


        :return: The uri of this ChangeLog.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ChangeLog.


        :param uri: The uri of this ChangeLog.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def user_entered(self):
        """Gets the user_entered of this ChangeLog.  # noqa: E501


        :return: The user_entered of this ChangeLog.  # noqa: E501
        :rtype: bool
        """
        return self._user_entered

    @user_entered.setter
    def user_entered(self, user_entered):
        """Sets the user_entered of this ChangeLog.


        :param user_entered: The user_entered of this ChangeLog.  # noqa: E501
        :type: bool
        """

        self._user_entered = user_entered

    @property
    def username(self):
        """Gets the username of this ChangeLog.  # noqa: E501


        :return: The username of this ChangeLog.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ChangeLog.


        :param username: The username of this ChangeLog.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
