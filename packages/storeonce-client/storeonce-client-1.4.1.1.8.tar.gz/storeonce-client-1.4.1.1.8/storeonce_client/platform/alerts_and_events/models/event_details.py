# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Alerts

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class EventDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_item_description': 'str',
        'event_item_name': 'str',
        'event_item_snmp_oid': 'str',
        'event_item_value': 'str',
        'is_this_varbind_data': 'bool',
        'var_bind_order_index': 'int'
    }

    attribute_map = {
        'event_item_description': 'eventItemDescription',
        'event_item_name': 'eventItemName',
        'event_item_snmp_oid': 'eventItemSnmpOid',
        'event_item_value': 'eventItemValue',
        'is_this_varbind_data': 'isThisVarbindData',
        'var_bind_order_index': 'varBindOrderIndex'
    }

    def __init__(self, event_item_description=None, event_item_name=None, event_item_snmp_oid=None, event_item_value=None, is_this_varbind_data=False, var_bind_order_index=None):  # noqa: E501
        """EventDetails - a model defined in Swagger"""  # noqa: E501

        self._event_item_description = None
        self._event_item_name = None
        self._event_item_snmp_oid = None
        self._event_item_value = None
        self._is_this_varbind_data = None
        self._var_bind_order_index = None
        self.discriminator = None

        if event_item_description is not None:
            self.event_item_description = event_item_description
        if event_item_name is not None:
            self.event_item_name = event_item_name
        if event_item_snmp_oid is not None:
            self.event_item_snmp_oid = event_item_snmp_oid
        if event_item_value is not None:
            self.event_item_value = event_item_value
        if is_this_varbind_data is not None:
            self.is_this_varbind_data = is_this_varbind_data
        if var_bind_order_index is not None:
            self.var_bind_order_index = var_bind_order_index

    @property
    def event_item_description(self):
        """Gets the event_item_description of this EventDetails.  # noqa: E501


        :return: The event_item_description of this EventDetails.  # noqa: E501
        :rtype: str
        """
        return self._event_item_description

    @event_item_description.setter
    def event_item_description(self, event_item_description):
        """Sets the event_item_description of this EventDetails.


        :param event_item_description: The event_item_description of this EventDetails.  # noqa: E501
        :type: str
        """

        self._event_item_description = event_item_description

    @property
    def event_item_name(self):
        """Gets the event_item_name of this EventDetails.  # noqa: E501


        :return: The event_item_name of this EventDetails.  # noqa: E501
        :rtype: str
        """
        return self._event_item_name

    @event_item_name.setter
    def event_item_name(self, event_item_name):
        """Sets the event_item_name of this EventDetails.


        :param event_item_name: The event_item_name of this EventDetails.  # noqa: E501
        :type: str
        """

        self._event_item_name = event_item_name

    @property
    def event_item_snmp_oid(self):
        """Gets the event_item_snmp_oid of this EventDetails.  # noqa: E501


        :return: The event_item_snmp_oid of this EventDetails.  # noqa: E501
        :rtype: str
        """
        return self._event_item_snmp_oid

    @event_item_snmp_oid.setter
    def event_item_snmp_oid(self, event_item_snmp_oid):
        """Sets the event_item_snmp_oid of this EventDetails.


        :param event_item_snmp_oid: The event_item_snmp_oid of this EventDetails.  # noqa: E501
        :type: str
        """

        self._event_item_snmp_oid = event_item_snmp_oid

    @property
    def event_item_value(self):
        """Gets the event_item_value of this EventDetails.  # noqa: E501


        :return: The event_item_value of this EventDetails.  # noqa: E501
        :rtype: str
        """
        return self._event_item_value

    @event_item_value.setter
    def event_item_value(self, event_item_value):
        """Sets the event_item_value of this EventDetails.


        :param event_item_value: The event_item_value of this EventDetails.  # noqa: E501
        :type: str
        """

        self._event_item_value = event_item_value

    @property
    def is_this_varbind_data(self):
        """Gets the is_this_varbind_data of this EventDetails.  # noqa: E501


        :return: The is_this_varbind_data of this EventDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_this_varbind_data

    @is_this_varbind_data.setter
    def is_this_varbind_data(self, is_this_varbind_data):
        """Sets the is_this_varbind_data of this EventDetails.


        :param is_this_varbind_data: The is_this_varbind_data of this EventDetails.  # noqa: E501
        :type: bool
        """

        self._is_this_varbind_data = is_this_varbind_data

    @property
    def var_bind_order_index(self):
        """Gets the var_bind_order_index of this EventDetails.  # noqa: E501


        :return: The var_bind_order_index of this EventDetails.  # noqa: E501
        :rtype: int
        """
        return self._var_bind_order_index

    @var_bind_order_index.setter
    def var_bind_order_index(self, var_bind_order_index):
        """Sets the var_bind_order_index of this EventDetails.


        :param var_bind_order_index: The var_bind_order_index of this EventDetails.  # noqa: E501
        :type: int
        """

        self._var_bind_order_index = var_bind_order_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
