# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Alerts

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ServiceEventDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'case_id': 'str',
        'remote_support_state': 'str',
        'primary_contact': 'str'
    }

    attribute_map = {
        'case_id': 'caseId',
        'remote_support_state': 'remoteSupportState',
        'primary_contact': 'primaryContact'
    }

    def __init__(self, case_id=None, remote_support_state=None, primary_contact=None):  # noqa: E501
        """ServiceEventDetails - a model defined in Swagger"""  # noqa: E501

        self._case_id = None
        self._remote_support_state = None
        self._primary_contact = None
        self.discriminator = None

        if case_id is not None:
            self.case_id = case_id
        if remote_support_state is not None:
            self.remote_support_state = remote_support_state
        if primary_contact is not None:
            self.primary_contact = primary_contact

    @property
    def case_id(self):
        """Gets the case_id of this ServiceEventDetails.  # noqa: E501


        :return: The case_id of this ServiceEventDetails.  # noqa: E501
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this ServiceEventDetails.


        :param case_id: The case_id of this ServiceEventDetails.  # noqa: E501
        :type: str
        """

        self._case_id = case_id

    @property
    def remote_support_state(self):
        """Gets the remote_support_state of this ServiceEventDetails.  # noqa: E501


        :return: The remote_support_state of this ServiceEventDetails.  # noqa: E501
        :rtype: str
        """
        return self._remote_support_state

    @remote_support_state.setter
    def remote_support_state(self, remote_support_state):
        """Sets the remote_support_state of this ServiceEventDetails.


        :param remote_support_state: The remote_support_state of this ServiceEventDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["Closed", "Error", "None", "Open", "Pending", "Received", "Submitted"]  # noqa: E501
        if remote_support_state not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_support_state` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_support_state, allowed_values)
            )

        self._remote_support_state = remote_support_state

    @property
    def primary_contact(self):
        """Gets the primary_contact of this ServiceEventDetails.  # noqa: E501


        :return: The primary_contact of this ServiceEventDetails.  # noqa: E501
        :rtype: str
        """
        return self._primary_contact

    @primary_contact.setter
    def primary_contact(self, primary_contact):
        """Sets the primary_contact of this ServiceEventDetails.


        :param primary_contact: The primary_contact of this ServiceEventDetails.  # noqa: E501
        :type: str
        """

        self._primary_contact = primary_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceEventDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceEventDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
