# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ManagedUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'realm_name': 'str',
        'user_name': 'str',
        'id': 'str',
        'managed': 'bool',
        'full_name': 'str',
        'password': 'str',
        'email': 'str',
        'office_phone': 'str',
        'mobile_phone': 'str',
        'locked': 'bool',
        'past_passwords': 'list[str]',
        'last_password_date': 'datetime',
        'sha256fingerprint': 'str'
    }

    attribute_map = {
        'realm_name': 'realmName',
        'user_name': 'userName',
        'id': 'id',
        'managed': 'managed',
        'full_name': 'fullName',
        'password': 'password',
        'email': 'email',
        'office_phone': 'officePhone',
        'mobile_phone': 'mobilePhone',
        'locked': 'locked',
        'past_passwords': 'pastPasswords',
        'last_password_date': 'lastPasswordDate',
        'sha256fingerprint': 'sha256fingerprint'
    }

    def __init__(self, realm_name=None, user_name=None, id=None, managed=False, full_name=None, password=None, email=None, office_phone=None, mobile_phone=None, locked=False, past_passwords=None, last_password_date=None, sha256fingerprint=None):  # noqa: E501
        """ManagedUser - a model defined in Swagger"""  # noqa: E501

        self._realm_name = None
        self._user_name = None
        self._id = None
        self._managed = None
        self._full_name = None
        self._password = None
        self._email = None
        self._office_phone = None
        self._mobile_phone = None
        self._locked = None
        self._past_passwords = None
        self._last_password_date = None
        self._sha256fingerprint = None
        self.discriminator = None

        if realm_name is not None:
            self.realm_name = realm_name
        if user_name is not None:
            self.user_name = user_name
        if id is not None:
            self.id = id
        if managed is not None:
            self.managed = managed
        if full_name is not None:
            self.full_name = full_name
        if password is not None:
            self.password = password
        if email is not None:
            self.email = email
        if office_phone is not None:
            self.office_phone = office_phone
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if locked is not None:
            self.locked = locked
        if past_passwords is not None:
            self.past_passwords = past_passwords
        if last_password_date is not None:
            self.last_password_date = last_password_date
        if sha256fingerprint is not None:
            self.sha256fingerprint = sha256fingerprint

    @property
    def realm_name(self):
        """Gets the realm_name of this ManagedUser.  # noqa: E501


        :return: The realm_name of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._realm_name

    @realm_name.setter
    def realm_name(self, realm_name):
        """Sets the realm_name of this ManagedUser.


        :param realm_name: The realm_name of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._realm_name = realm_name

    @property
    def user_name(self):
        """Gets the user_name of this ManagedUser.  # noqa: E501


        :return: The user_name of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ManagedUser.


        :param user_name: The user_name of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def id(self):
        """Gets the id of this ManagedUser.  # noqa: E501


        :return: The id of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagedUser.


        :param id: The id of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def managed(self):
        """Gets the managed of this ManagedUser.  # noqa: E501


        :return: The managed of this ManagedUser.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this ManagedUser.


        :param managed: The managed of this ManagedUser.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def full_name(self):
        """Gets the full_name of this ManagedUser.  # noqa: E501


        :return: The full_name of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ManagedUser.


        :param full_name: The full_name of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def password(self):
        """Gets the password of this ManagedUser.  # noqa: E501


        :return: The password of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ManagedUser.


        :param password: The password of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def email(self):
        """Gets the email of this ManagedUser.  # noqa: E501


        :return: The email of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ManagedUser.


        :param email: The email of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def office_phone(self):
        """Gets the office_phone of this ManagedUser.  # noqa: E501


        :return: The office_phone of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """Sets the office_phone of this ManagedUser.


        :param office_phone: The office_phone of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._office_phone = office_phone

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this ManagedUser.  # noqa: E501


        :return: The mobile_phone of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this ManagedUser.


        :param mobile_phone: The mobile_phone of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def locked(self):
        """Gets the locked of this ManagedUser.  # noqa: E501


        :return: The locked of this ManagedUser.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ManagedUser.


        :param locked: The locked of this ManagedUser.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def past_passwords(self):
        """Gets the past_passwords of this ManagedUser.  # noqa: E501


        :return: The past_passwords of this ManagedUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._past_passwords

    @past_passwords.setter
    def past_passwords(self, past_passwords):
        """Sets the past_passwords of this ManagedUser.


        :param past_passwords: The past_passwords of this ManagedUser.  # noqa: E501
        :type: list[str]
        """

        self._past_passwords = past_passwords

    @property
    def last_password_date(self):
        """Gets the last_password_date of this ManagedUser.  # noqa: E501


        :return: The last_password_date of this ManagedUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_password_date

    @last_password_date.setter
    def last_password_date(self, last_password_date):
        """Sets the last_password_date of this ManagedUser.


        :param last_password_date: The last_password_date of this ManagedUser.  # noqa: E501
        :type: datetime
        """

        self._last_password_date = last_password_date

    @property
    def sha256fingerprint(self):
        """Gets the sha256fingerprint of this ManagedUser.  # noqa: E501


        :return: The sha256fingerprint of this ManagedUser.  # noqa: E501
        :rtype: str
        """
        return self._sha256fingerprint

    @sha256fingerprint.setter
    def sha256fingerprint(self, sha256fingerprint):
        """Sets the sha256fingerprint of this ManagedUser.


        :param sha256fingerprint: The sha256fingerprint of this ManagedUser.  # noqa: E501
        :type: str
        """

        self._sha256fingerprint = sha256fingerprint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagedUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
