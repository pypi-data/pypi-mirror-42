# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class BaseSessionToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'client_host': 'str',
        'origin': 'str',
        'unique_key': 'str',
        'login_domain': 'str',
        'session_id': 'str',
        'last_accessed': 'str',
        'last_heart_beat': 'int',
        'valid': 'bool',
        'shared_token': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'client_host': 'clientHost',
        'origin': 'origin',
        'unique_key': 'uniqueKey',
        'login_domain': 'loginDomain',
        'session_id': 'sessionId',
        'last_accessed': 'lastAccessed',
        'last_heart_beat': 'lastHeartBeat',
        'valid': 'valid',
        'shared_token': 'sharedToken'
    }

    discriminator_value_class_map = {
        
    }

    def __init__(self, username=None, client_host=None, origin=None, unique_key=None, login_domain=None, session_id=None, last_accessed=None, last_heart_beat=None, valid=False, shared_token=False):  # noqa: E501
        """BaseSessionToken - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._client_host = None
        self._origin = None
        self._unique_key = None
        self._login_domain = None
        self._session_id = None
        self._last_accessed = None
        self._last_heart_beat = None
        self._valid = None
        self._shared_token = None
        self.discriminator = 'jsonTypeInfo'

        if username is not None:
            self.username = username
        if client_host is not None:
            self.client_host = client_host
        if origin is not None:
            self.origin = origin
        if unique_key is not None:
            self.unique_key = unique_key
        if login_domain is not None:
            self.login_domain = login_domain
        if session_id is not None:
            self.session_id = session_id
        if last_accessed is not None:
            self.last_accessed = last_accessed
        if last_heart_beat is not None:
            self.last_heart_beat = last_heart_beat
        if valid is not None:
            self.valid = valid
        if shared_token is not None:
            self.shared_token = shared_token

    @property
    def username(self):
        """Gets the username of this BaseSessionToken.  # noqa: E501


        :return: The username of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BaseSessionToken.


        :param username: The username of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def client_host(self):
        """Gets the client_host of this BaseSessionToken.  # noqa: E501


        :return: The client_host of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._client_host

    @client_host.setter
    def client_host(self, client_host):
        """Sets the client_host of this BaseSessionToken.


        :param client_host: The client_host of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._client_host = client_host

    @property
    def origin(self):
        """Gets the origin of this BaseSessionToken.  # noqa: E501


        :return: The origin of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this BaseSessionToken.


        :param origin: The origin of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def unique_key(self):
        """Gets the unique_key of this BaseSessionToken.  # noqa: E501


        :return: The unique_key of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._unique_key

    @unique_key.setter
    def unique_key(self, unique_key):
        """Sets the unique_key of this BaseSessionToken.


        :param unique_key: The unique_key of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._unique_key = unique_key

    @property
    def login_domain(self):
        """Gets the login_domain of this BaseSessionToken.  # noqa: E501


        :return: The login_domain of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._login_domain

    @login_domain.setter
    def login_domain(self, login_domain):
        """Sets the login_domain of this BaseSessionToken.


        :param login_domain: The login_domain of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._login_domain = login_domain

    @property
    def session_id(self):
        """Gets the session_id of this BaseSessionToken.  # noqa: E501


        :return: The session_id of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this BaseSessionToken.


        :param session_id: The session_id of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def last_accessed(self):
        """Gets the last_accessed of this BaseSessionToken.  # noqa: E501


        :return: The last_accessed of this BaseSessionToken.  # noqa: E501
        :rtype: str
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this BaseSessionToken.


        :param last_accessed: The last_accessed of this BaseSessionToken.  # noqa: E501
        :type: str
        """

        self._last_accessed = last_accessed

    @property
    def last_heart_beat(self):
        """Gets the last_heart_beat of this BaseSessionToken.  # noqa: E501


        :return: The last_heart_beat of this BaseSessionToken.  # noqa: E501
        :rtype: int
        """
        return self._last_heart_beat

    @last_heart_beat.setter
    def last_heart_beat(self, last_heart_beat):
        """Sets the last_heart_beat of this BaseSessionToken.


        :param last_heart_beat: The last_heart_beat of this BaseSessionToken.  # noqa: E501
        :type: int
        """

        self._last_heart_beat = last_heart_beat

    @property
    def valid(self):
        """Gets the valid of this BaseSessionToken.  # noqa: E501


        :return: The valid of this BaseSessionToken.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this BaseSessionToken.


        :param valid: The valid of this BaseSessionToken.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def shared_token(self):
        """Gets the shared_token of this BaseSessionToken.  # noqa: E501


        :return: The shared_token of this BaseSessionToken.  # noqa: E501
        :rtype: bool
        """
        return self._shared_token

    @shared_token.setter
    def shared_token(self, shared_token):
        """Sets the shared_token of this BaseSessionToken.


        :param shared_token: The shared_token of this BaseSessionToken.  # noqa: E501
        :type: bool
        """

        self._shared_token = shared_token

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseSessionToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseSessionToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
