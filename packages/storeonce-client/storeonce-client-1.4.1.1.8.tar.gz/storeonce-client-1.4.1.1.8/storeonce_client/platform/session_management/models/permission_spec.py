# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class PermissionSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignable_permission': 'str',
        'origin': 'str',
        'id': 'str',
        'wildcard_permission': 'WildcardPermission'
    }

    attribute_map = {
        'assignable_permission': 'assignablePermission',
        'origin': 'origin',
        'id': 'id',
        'wildcard_permission': 'wildcardPermission'
    }

    def __init__(self, assignable_permission=None, origin=None, id=None, wildcard_permission=None):  # noqa: E501
        """PermissionSpec - a model defined in Swagger"""  # noqa: E501

        self._assignable_permission = None
        self._origin = None
        self._id = None
        self._wildcard_permission = None
        self.discriminator = None

        if assignable_permission is not None:
            self.assignable_permission = assignable_permission
        if origin is not None:
            self.origin = origin
        if id is not None:
            self.id = id
        if wildcard_permission is not None:
            self.wildcard_permission = wildcard_permission

    @property
    def assignable_permission(self):
        """Gets the assignable_permission of this PermissionSpec.  # noqa: E501


        :return: The assignable_permission of this PermissionSpec.  # noqa: E501
        :rtype: str
        """
        return self._assignable_permission

    @assignable_permission.setter
    def assignable_permission(self, assignable_permission):
        """Sets the assignable_permission of this PermissionSpec.


        :param assignable_permission: The assignable_permission of this PermissionSpec.  # noqa: E501
        :type: str
        """

        self._assignable_permission = assignable_permission

    @property
    def origin(self):
        """Gets the origin of this PermissionSpec.  # noqa: E501


        :return: The origin of this PermissionSpec.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this PermissionSpec.


        :param origin: The origin of this PermissionSpec.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def id(self):
        """Gets the id of this PermissionSpec.  # noqa: E501


        :return: The id of this PermissionSpec.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PermissionSpec.


        :param id: The id of this PermissionSpec.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def wildcard_permission(self):
        """Gets the wildcard_permission of this PermissionSpec.  # noqa: E501


        :return: The wildcard_permission of this PermissionSpec.  # noqa: E501
        :rtype: WildcardPermission
        """
        return self._wildcard_permission

    @wildcard_permission.setter
    def wildcard_permission(self, wildcard_permission):
        """Sets the wildcard_permission of this PermissionSpec.


        :param wildcard_permission: The wildcard_permission of this PermissionSpec.  # noqa: E501
        :type: WildcardPermission
        """

        self._wildcard_permission = wildcard_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
