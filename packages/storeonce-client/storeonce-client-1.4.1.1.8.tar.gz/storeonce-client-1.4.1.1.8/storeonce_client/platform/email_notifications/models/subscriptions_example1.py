# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionsExample1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'total': 'int',
        'un_filtered_total': 'int',
        'start': 'int',
        'type': 'str',
        'subscription': 'list[SubscriptionExample5]'
    }

    attribute_map = {
        'count': 'count',
        'total': 'total',
        'un_filtered_total': 'unFilteredTotal',
        'start': 'start',
        'type': 'type',
        'subscription': 'subscription'
    }

    def __init__(self, count=None, total=None, un_filtered_total=None, start=None, type=None, subscription=None):  # noqa: E501
        """SubscriptionsExample1 - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._total = None
        self._un_filtered_total = None
        self._start = None
        self._type = None
        self._subscription = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if total is not None:
            self.total = total
        if un_filtered_total is not None:
            self.un_filtered_total = un_filtered_total
        if start is not None:
            self.start = start
        if type is not None:
            self.type = type
        if subscription is not None:
            self.subscription = subscription

    @property
    def count(self):
        """Gets the count of this SubscriptionsExample1.  # noqa: E501


        :return: The count of this SubscriptionsExample1.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SubscriptionsExample1.


        :param count: The count of this SubscriptionsExample1.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def total(self):
        """Gets the total of this SubscriptionsExample1.  # noqa: E501


        :return: The total of this SubscriptionsExample1.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SubscriptionsExample1.


        :param total: The total of this SubscriptionsExample1.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def un_filtered_total(self):
        """Gets the un_filtered_total of this SubscriptionsExample1.  # noqa: E501


        :return: The un_filtered_total of this SubscriptionsExample1.  # noqa: E501
        :rtype: int
        """
        return self._un_filtered_total

    @un_filtered_total.setter
    def un_filtered_total(self, un_filtered_total):
        """Sets the un_filtered_total of this SubscriptionsExample1.


        :param un_filtered_total: The un_filtered_total of this SubscriptionsExample1.  # noqa: E501
        :type: int
        """

        self._un_filtered_total = un_filtered_total

    @property
    def start(self):
        """Gets the start of this SubscriptionsExample1.  # noqa: E501


        :return: The start of this SubscriptionsExample1.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SubscriptionsExample1.


        :param start: The start of this SubscriptionsExample1.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def type(self):
        """Gets the type of this SubscriptionsExample1.  # noqa: E501


        :return: The type of this SubscriptionsExample1.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionsExample1.


        :param type: The type of this SubscriptionsExample1.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def subscription(self):
        """Gets the subscription of this SubscriptionsExample1.  # noqa: E501


        :return: The subscription of this SubscriptionsExample1.  # noqa: E501
        :rtype: list[SubscriptionExample5]
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this SubscriptionsExample1.


        :param subscription: The subscription of this SubscriptionsExample1.  # noqa: E501
        :type: list[SubscriptionExample5]
        """

        self._subscription = subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionsExample1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionsExample1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
