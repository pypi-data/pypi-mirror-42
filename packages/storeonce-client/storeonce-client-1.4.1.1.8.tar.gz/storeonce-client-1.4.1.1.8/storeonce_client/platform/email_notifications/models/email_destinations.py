# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class EmailDestinations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'destination': 'str',
        'email_format': 'str'
    }

    attribute_map = {
        'id': 'id',
        'destination': 'destination',
        'email_format': 'emailFormat'
    }

    def __init__(self, id=None, destination=None, email_format=None):  # noqa: E501
        """EmailDestinations - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._destination = None
        self._email_format = None
        self.discriminator = None

        self.id = id
        self.destination = destination
        self.email_format = email_format

    @property
    def id(self):
        """Gets the id of this EmailDestinations.  # noqa: E501


        :return: The id of this EmailDestinations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailDestinations.


        :param id: The id of this EmailDestinations.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def destination(self):
        """Gets the destination of this EmailDestinations.  # noqa: E501


        :return: The destination of this EmailDestinations.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this EmailDestinations.


        :param destination: The destination of this EmailDestinations.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def email_format(self):
        """Gets the email_format of this EmailDestinations.  # noqa: E501


        :return: The email_format of this EmailDestinations.  # noqa: E501
        :rtype: str
        """
        return self._email_format

    @email_format.setter
    def email_format(self, email_format):
        """Sets the email_format of this EmailDestinations.


        :param email_format: The email_format of this EmailDestinations.  # noqa: E501
        :type: str
        """
        if email_format is None:
            raise ValueError("Invalid value for `email_format`, must not be `None`")  # noqa: E501
        allowed_values = ["HTML", "PLAIN_TEXT", "RICH_TEXT"]  # noqa: E501
        if email_format not in allowed_values:
            raise ValueError(
                "Invalid value for `email_format` ({0}), must be one of {1}"  # noqa: E501
                .format(email_format, allowed_values)
            )

        self._email_format = email_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailDestinations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailDestinations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
