# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class EmailConfigurationsExample2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sender_email_address': 'str',
        'smtp_server': 'str',
        'smtp_port': 'int',
        'profile': 'str',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'sender_email_address': 'senderEmailAddress',
        'smtp_server': 'smtpServer',
        'smtp_port': 'smtpPort',
        'profile': 'profile',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, sender_email_address=None, smtp_server=None, smtp_port=None, profile=None, enabled=False):  # noqa: E501
        """EmailConfigurationsExample2 - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._sender_email_address = None
        self._smtp_server = None
        self._smtp_port = None
        self._profile = None
        self._enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sender_email_address is not None:
            self.sender_email_address = sender_email_address
        if smtp_server is not None:
            self.smtp_server = smtp_server
        if smtp_port is not None:
            self.smtp_port = smtp_port
        if profile is not None:
            self.profile = profile
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this EmailConfigurationsExample2.  # noqa: E501


        :return: The id of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailConfigurationsExample2.


        :param id: The id of this EmailConfigurationsExample2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sender_email_address(self):
        """Gets the sender_email_address of this EmailConfigurationsExample2.  # noqa: E501


        :return: The sender_email_address of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: str
        """
        return self._sender_email_address

    @sender_email_address.setter
    def sender_email_address(self, sender_email_address):
        """Sets the sender_email_address of this EmailConfigurationsExample2.


        :param sender_email_address: The sender_email_address of this EmailConfigurationsExample2.  # noqa: E501
        :type: str
        """

        self._sender_email_address = sender_email_address

    @property
    def smtp_server(self):
        """Gets the smtp_server of this EmailConfigurationsExample2.  # noqa: E501


        :return: The smtp_server of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: str
        """
        return self._smtp_server

    @smtp_server.setter
    def smtp_server(self, smtp_server):
        """Sets the smtp_server of this EmailConfigurationsExample2.


        :param smtp_server: The smtp_server of this EmailConfigurationsExample2.  # noqa: E501
        :type: str
        """

        self._smtp_server = smtp_server

    @property
    def smtp_port(self):
        """Gets the smtp_port of this EmailConfigurationsExample2.  # noqa: E501


        :return: The smtp_port of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this EmailConfigurationsExample2.


        :param smtp_port: The smtp_port of this EmailConfigurationsExample2.  # noqa: E501
        :type: int
        """

        self._smtp_port = smtp_port

    @property
    def profile(self):
        """Gets the profile of this EmailConfigurationsExample2.  # noqa: E501


        :return: The profile of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this EmailConfigurationsExample2.


        :param profile: The profile of this EmailConfigurationsExample2.  # noqa: E501
        :type: str
        """
        allowed_values = ["PROD"]  # noqa: E501
        if profile not in allowed_values:
            raise ValueError(
                "Invalid value for `profile` ({0}), must be one of {1}"  # noqa: E501
                .format(profile, allowed_values)
            )

        self._profile = profile

    @property
    def enabled(self):
        """Gets the enabled of this EmailConfigurationsExample2.  # noqa: E501


        :return: The enabled of this EmailConfigurationsExample2.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EmailConfigurationsExample2.


        :param enabled: The enabled of this EmailConfigurationsExample2.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailConfigurationsExample2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailConfigurationsExample2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
