# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Members(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'created': 'datetime',
        'created_by': 'str',
        'display_query': 'str',
        'filter': 'AlertsEntry',
        'email_destinations': 'list[EmailDestinations]',
        'enabled': 'bool',
        'filter_text': 'str',
        'id': 'str',
        'index_query': 'str',
        'index_user_query': 'str',
        'modified': 'datetime',
        'type': 'str',
        'uri': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'category': 'category',
        'created': 'created',
        'created_by': 'createdBy',
        'display_query': 'displayQuery',
        'filter': 'filter',
        'email_destinations': 'emailDestinations',
        'enabled': 'enabled',
        'filter_text': 'filterText',
        'id': 'id',
        'index_query': 'indexQuery',
        'index_user_query': 'indexUserQuery',
        'modified': 'modified',
        'type': 'type',
        'uri': 'uri',
        'etag': 'etag'
    }

    def __init__(self, category=None, created=None, created_by=None, display_query=None, filter=None, email_destinations=None, enabled=False, filter_text=None, id=None, index_query=None, index_user_query=None, modified=None, type=None, uri=None, etag=None):  # noqa: E501
        """Members - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._created = None
        self._created_by = None
        self._display_query = None
        self._filter = None
        self._email_destinations = None
        self._enabled = None
        self._filter_text = None
        self._id = None
        self._index_query = None
        self._index_user_query = None
        self._modified = None
        self._type = None
        self._uri = None
        self._etag = None
        self.discriminator = None

        self.category = category
        self.created = created
        self.created_by = created_by
        self.display_query = display_query
        self.filter = filter
        self.email_destinations = email_destinations
        if enabled is not None:
            self.enabled = enabled
        self.filter_text = filter_text
        self.id = id
        self.index_query = index_query
        self.index_user_query = index_user_query
        self.modified = modified
        self.type = type
        self.uri = uri
        if etag is not None:
            self.etag = etag

    @property
    def category(self):
        """Gets the category of this Members.  # noqa: E501


        :return: The category of this Members.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Members.


        :param category: The category of this Members.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def created(self):
        """Gets the created of this Members.  # noqa: E501


        :return: The created of this Members.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Members.


        :param created: The created of this Members.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this Members.  # noqa: E501


        :return: The created_by of this Members.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Members.


        :param created_by: The created_by of this Members.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def display_query(self):
        """Gets the display_query of this Members.  # noqa: E501


        :return: The display_query of this Members.  # noqa: E501
        :rtype: str
        """
        return self._display_query

    @display_query.setter
    def display_query(self, display_query):
        """Sets the display_query of this Members.


        :param display_query: The display_query of this Members.  # noqa: E501
        :type: str
        """
        if display_query is None:
            raise ValueError("Invalid value for `display_query`, must not be `None`")  # noqa: E501

        self._display_query = display_query

    @property
    def filter(self):
        """Gets the filter of this Members.  # noqa: E501


        :return: The filter of this Members.  # noqa: E501
        :rtype: AlertsEntry
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Members.


        :param filter: The filter of this Members.  # noqa: E501
        :type: AlertsEntry
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501

        self._filter = filter

    @property
    def email_destinations(self):
        """Gets the email_destinations of this Members.  # noqa: E501


        :return: The email_destinations of this Members.  # noqa: E501
        :rtype: list[EmailDestinations]
        """
        return self._email_destinations

    @email_destinations.setter
    def email_destinations(self, email_destinations):
        """Sets the email_destinations of this Members.


        :param email_destinations: The email_destinations of this Members.  # noqa: E501
        :type: list[EmailDestinations]
        """
        if email_destinations is None:
            raise ValueError("Invalid value for `email_destinations`, must not be `None`")  # noqa: E501

        self._email_destinations = email_destinations

    @property
    def enabled(self):
        """Gets the enabled of this Members.  # noqa: E501


        :return: The enabled of this Members.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Members.


        :param enabled: The enabled of this Members.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def filter_text(self):
        """Gets the filter_text of this Members.  # noqa: E501


        :return: The filter_text of this Members.  # noqa: E501
        :rtype: str
        """
        return self._filter_text

    @filter_text.setter
    def filter_text(self, filter_text):
        """Sets the filter_text of this Members.


        :param filter_text: The filter_text of this Members.  # noqa: E501
        :type: str
        """
        if filter_text is None:
            raise ValueError("Invalid value for `filter_text`, must not be `None`")  # noqa: E501

        self._filter_text = filter_text

    @property
    def id(self):
        """Gets the id of this Members.  # noqa: E501


        :return: The id of this Members.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Members.


        :param id: The id of this Members.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def index_query(self):
        """Gets the index_query of this Members.  # noqa: E501


        :return: The index_query of this Members.  # noqa: E501
        :rtype: str
        """
        return self._index_query

    @index_query.setter
    def index_query(self, index_query):
        """Sets the index_query of this Members.


        :param index_query: The index_query of this Members.  # noqa: E501
        :type: str
        """
        if index_query is None:
            raise ValueError("Invalid value for `index_query`, must not be `None`")  # noqa: E501

        self._index_query = index_query

    @property
    def index_user_query(self):
        """Gets the index_user_query of this Members.  # noqa: E501


        :return: The index_user_query of this Members.  # noqa: E501
        :rtype: str
        """
        return self._index_user_query

    @index_user_query.setter
    def index_user_query(self, index_user_query):
        """Sets the index_user_query of this Members.


        :param index_user_query: The index_user_query of this Members.  # noqa: E501
        :type: str
        """
        if index_user_query is None:
            raise ValueError("Invalid value for `index_user_query`, must not be `None`")  # noqa: E501

        self._index_user_query = index_user_query

    @property
    def modified(self):
        """Gets the modified of this Members.  # noqa: E501


        :return: The modified of this Members.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Members.


        :param modified: The modified of this Members.  # noqa: E501
        :type: datetime
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def type(self):
        """Gets the type of this Members.  # noqa: E501


        :return: The type of this Members.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Members.


        :param type: The type of this Members.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Members.  # noqa: E501


        :return: The uri of this Members.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Members.


        :param uri: The uri of this Members.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def etag(self):
        """Gets the etag of this Members.  # noqa: E501


        :return: The etag of this Members.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Members.


        :param etag: The etag of this Members.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Members, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Members):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
