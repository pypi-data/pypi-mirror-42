# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category': 'str',
        'createdby': 'str',
        'count': 'int',
        'enabled': 'bool',
        'created': 'datetime',
        'members': 'list[Members]',
        'modified': 'datetime',
        'next_page_uri': 'object',
        'prev_page_uri': 'object',
        'start': 'int',
        'total': 'int',
        'type': 'str',
        'uri': 'str',
        'etag': 'str',
        'email_configuration': 'list[EmailConfiguration]'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'createdby': 'createdby',
        'count': 'count',
        'enabled': 'enabled',
        'created': 'created',
        'members': 'members',
        'modified': 'modified',
        'next_page_uri': 'nextPageUri',
        'prev_page_uri': 'prevPageUri',
        'start': 'start',
        'total': 'total',
        'type': 'type',
        'uri': 'uri',
        'etag': 'etag',
        'email_configuration': 'emailConfiguration'
    }

    def __init__(self, id=None, category=None, createdby=None, count=None, enabled=False, created=None, members=None, modified=None, next_page_uri=None, prev_page_uri=None, start=None, total=None, type=None, uri=None, etag=None, email_configuration=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._category = None
        self._createdby = None
        self._count = None
        self._enabled = None
        self._created = None
        self._members = None
        self._modified = None
        self._next_page_uri = None
        self._prev_page_uri = None
        self._start = None
        self._total = None
        self._type = None
        self._uri = None
        self._etag = None
        self._email_configuration = None
        self.discriminator = None

        self.id = id
        self.category = category
        self.createdby = createdby
        if count is not None:
            self.count = count
        if enabled is not None:
            self.enabled = enabled
        self.created = created
        self.members = members
        self.modified = modified
        self.next_page_uri = next_page_uri
        self.prev_page_uri = prev_page_uri
        if start is not None:
            self.start = start
        if total is not None:
            self.total = total
        self.type = type
        self.uri = uri
        if etag is not None:
            self.etag = etag
        if email_configuration is not None:
            self.email_configuration = email_configuration

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501


        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category(self):
        """Gets the category of this Subscription.  # noqa: E501


        :return: The category of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Subscription.


        :param category: The category of this Subscription.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def createdby(self):
        """Gets the createdby of this Subscription.  # noqa: E501


        :return: The createdby of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._createdby

    @createdby.setter
    def createdby(self, createdby):
        """Sets the createdby of this Subscription.


        :param createdby: The createdby of this Subscription.  # noqa: E501
        :type: str
        """
        if createdby is None:
            raise ValueError("Invalid value for `createdby`, must not be `None`")  # noqa: E501

        self._createdby = createdby

    @property
    def count(self):
        """Gets the count of this Subscription.  # noqa: E501


        :return: The count of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Subscription.


        :param count: The count of this Subscription.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def enabled(self):
        """Gets the enabled of this Subscription.  # noqa: E501


        :return: The enabled of this Subscription.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Subscription.


        :param enabled: The enabled of this Subscription.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def created(self):
        """Gets the created of this Subscription.  # noqa: E501


        :return: The created of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Subscription.


        :param created: The created of this Subscription.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def members(self):
        """Gets the members of this Subscription.  # noqa: E501


        :return: The members of this Subscription.  # noqa: E501
        :rtype: list[Members]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Subscription.


        :param members: The members of this Subscription.  # noqa: E501
        :type: list[Members]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def modified(self):
        """Gets the modified of this Subscription.  # noqa: E501


        :return: The modified of this Subscription.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Subscription.


        :param modified: The modified of this Subscription.  # noqa: E501
        :type: datetime
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")  # noqa: E501

        self._modified = modified

    @property
    def next_page_uri(self):
        """Gets the next_page_uri of this Subscription.  # noqa: E501


        :return: The next_page_uri of this Subscription.  # noqa: E501
        :rtype: object
        """
        return self._next_page_uri

    @next_page_uri.setter
    def next_page_uri(self, next_page_uri):
        """Sets the next_page_uri of this Subscription.


        :param next_page_uri: The next_page_uri of this Subscription.  # noqa: E501
        :type: object
        """
        if next_page_uri is None:
            raise ValueError("Invalid value for `next_page_uri`, must not be `None`")  # noqa: E501

        self._next_page_uri = next_page_uri

    @property
    def prev_page_uri(self):
        """Gets the prev_page_uri of this Subscription.  # noqa: E501


        :return: The prev_page_uri of this Subscription.  # noqa: E501
        :rtype: object
        """
        return self._prev_page_uri

    @prev_page_uri.setter
    def prev_page_uri(self, prev_page_uri):
        """Sets the prev_page_uri of this Subscription.


        :param prev_page_uri: The prev_page_uri of this Subscription.  # noqa: E501
        :type: object
        """
        if prev_page_uri is None:
            raise ValueError("Invalid value for `prev_page_uri`, must not be `None`")  # noqa: E501

        self._prev_page_uri = prev_page_uri

    @property
    def start(self):
        """Gets the start of this Subscription.  # noqa: E501


        :return: The start of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Subscription.


        :param start: The start of this Subscription.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def total(self):
        """Gets the total of this Subscription.  # noqa: E501


        :return: The total of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Subscription.


        :param total: The total of this Subscription.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this Subscription.  # noqa: E501


        :return: The type of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscription.


        :param type: The type of this Subscription.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this Subscription.  # noqa: E501


        :return: The uri of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Subscription.


        :param uri: The uri of this Subscription.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def etag(self):
        """Gets the etag of this Subscription.  # noqa: E501


        :return: The etag of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Subscription.


        :param etag: The etag of this Subscription.  # noqa: E501
        :type: str
        """

        self._etag = etag

    @property
    def email_configuration(self):
        """Gets the email_configuration of this Subscription.  # noqa: E501


        :return: The email_configuration of this Subscription.  # noqa: E501
        :rtype: list[EmailConfiguration]
        """
        return self._email_configuration

    @email_configuration.setter
    def email_configuration(self, email_configuration):
        """Sets the email_configuration of this Subscription.


        :param email_configuration: The email_configuration of this Subscription.  # noqa: E501
        :type: list[EmailConfiguration]
        """

        self._email_configuration = email_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
