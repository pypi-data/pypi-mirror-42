# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class AssociatedResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'association_type': 'str',
        'resource_category': 'str',
        'resource_name': 'str',
        'resource_location': 'str',
        'resource_uri': 'str'
    }

    attribute_map = {
        'association_type': 'associationType',
        'resource_category': 'resourceCategory',
        'resource_name': 'resourceName',
        'resource_location': 'resourceLocation',
        'resource_uri': 'resourceUri'
    }

    def __init__(self, association_type=None, resource_category=None, resource_name=None, resource_location=None, resource_uri=None):  # noqa: E501
        """AssociatedResource - a model defined in Swagger"""  # noqa: E501

        self._association_type = None
        self._resource_category = None
        self._resource_name = None
        self._resource_location = None
        self._resource_uri = None
        self.discriminator = None

        if association_type is not None:
            self.association_type = association_type
        if resource_category is not None:
            self.resource_category = resource_category
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_location is not None:
            self.resource_location = resource_location
        if resource_uri is not None:
            self.resource_uri = resource_uri

    @property
    def association_type(self):
        """Gets the association_type of this AssociatedResource.  # noqa: E501


        :return: The association_type of this AssociatedResource.  # noqa: E501
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this AssociatedResource.


        :param association_type: The association_type of this AssociatedResource.  # noqa: E501
        :type: str
        """

        self._association_type = association_type

    @property
    def resource_category(self):
        """Gets the resource_category of this AssociatedResource.  # noqa: E501


        :return: The resource_category of this AssociatedResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_category

    @resource_category.setter
    def resource_category(self, resource_category):
        """Sets the resource_category of this AssociatedResource.


        :param resource_category: The resource_category of this AssociatedResource.  # noqa: E501
        :type: str
        """

        self._resource_category = resource_category

    @property
    def resource_name(self):
        """Gets the resource_name of this AssociatedResource.  # noqa: E501


        :return: The resource_name of this AssociatedResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AssociatedResource.


        :param resource_name: The resource_name of this AssociatedResource.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_location(self):
        """Gets the resource_location of this AssociatedResource.  # noqa: E501


        :return: The resource_location of this AssociatedResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_location

    @resource_location.setter
    def resource_location(self, resource_location):
        """Sets the resource_location of this AssociatedResource.


        :param resource_location: The resource_location of this AssociatedResource.  # noqa: E501
        :type: str
        """

        self._resource_location = resource_location

    @property
    def resource_uri(self):
        """Gets the resource_uri of this AssociatedResource.  # noqa: E501


        :return: The resource_uri of this AssociatedResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this AssociatedResource.


        :param resource_uri: The resource_uri of this AssociatedResource.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssociatedResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssociatedResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
