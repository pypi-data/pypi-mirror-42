# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class AlertsEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category': 'str',
        'uri': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'description': 'str',
        'status': 'str',
        'state': 'str',
        'type': 'str',
        'data_sender_id': 'str',
        'attributes': 'dict(str, str)',
        'attributes_list': 'list[str]',
        'associations': 'list[Association]',
        'associated_resource': 'AssociatedResource',
        'uuid': 'str',
        'level': 'str',
        'severity': 'str',
        'urgency': 'str',
        'description_info': 'MessageInfo',
        'corrective_action': 'str',
        'corrective_action_info': 'MessageInfo',
        'event_code': 'str',
        'service_event_source': 'bool',
        'service_event_details': 'ServiceEventDetails',
        'clear_matching_alerts': 'bool',
        'list_to_clear': 'list[CatalogKeyPair]',
        'alert_state': 'str',
        'alert_type_id': 'str',
        'associated_event_uris': 'list[str]',
        'assigned_to_user': 'str',
        'change_log': 'list[ChangeLog]',
        'child_alerts': 'list[str]',
        'cleared_by_user': 'str',
        'cleared_time': 'datetime',
        'life_cycle': 'bool',
        'resource_id': 'str',
        'resource_uri': 'str',
        'e_tag': 'str'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'uri': 'uri',
        'created': 'created',
        'modified': 'modified',
        'description': 'description',
        'status': 'status',
        'state': 'state',
        'type': 'type',
        'data_sender_id': 'dataSenderId',
        'attributes': 'attributes',
        'attributes_list': 'attributesList',
        'associations': 'associations',
        'associated_resource': 'associatedResource',
        'uuid': 'uuid',
        'level': 'level',
        'severity': 'severity',
        'urgency': 'urgency',
        'description_info': 'descriptionInfo',
        'corrective_action': 'correctiveAction',
        'corrective_action_info': 'correctiveActionInfo',
        'event_code': 'eventCode',
        'service_event_source': 'serviceEventSource',
        'service_event_details': 'serviceEventDetails',
        'clear_matching_alerts': 'clearMatchingAlerts',
        'list_to_clear': 'listToClear',
        'alert_state': 'alertState',
        'alert_type_id': 'alertTypeID',
        'associated_event_uris': 'associatedEventUris',
        'assigned_to_user': 'assignedToUser',
        'change_log': 'changeLog',
        'child_alerts': 'childAlerts',
        'cleared_by_user': 'clearedByUser',
        'cleared_time': 'clearedTime',
        'life_cycle': 'lifeCycle',
        'resource_id': 'resourceID',
        'resource_uri': 'resourceUri',
        'e_tag': 'eTag'
    }

    def __init__(self, name=None, category=None, uri=None, created=None, modified=None, description=None, status=None, state=None, type=None, data_sender_id=None, attributes=None, attributes_list=None, associations=None, associated_resource=None, uuid=None, level=None, severity=None, urgency=None, description_info=None, corrective_action=None, corrective_action_info=None, event_code=None, service_event_source=False, service_event_details=None, clear_matching_alerts=False, list_to_clear=None, alert_state=None, alert_type_id=None, associated_event_uris=None, assigned_to_user=None, change_log=None, child_alerts=None, cleared_by_user=None, cleared_time=None, life_cycle=False, resource_id=None, resource_uri=None, e_tag=None):  # noqa: E501
        """AlertsEntry - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._category = None
        self._uri = None
        self._created = None
        self._modified = None
        self._description = None
        self._status = None
        self._state = None
        self._type = None
        self._data_sender_id = None
        self._attributes = None
        self._attributes_list = None
        self._associations = None
        self._associated_resource = None
        self._uuid = None
        self._level = None
        self._severity = None
        self._urgency = None
        self._description_info = None
        self._corrective_action = None
        self._corrective_action_info = None
        self._event_code = None
        self._service_event_source = None
        self._service_event_details = None
        self._clear_matching_alerts = None
        self._list_to_clear = None
        self._alert_state = None
        self._alert_type_id = None
        self._associated_event_uris = None
        self._assigned_to_user = None
        self._change_log = None
        self._child_alerts = None
        self._cleared_by_user = None
        self._cleared_time = None
        self._life_cycle = None
        self._resource_id = None
        self._resource_uri = None
        self._e_tag = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if uri is not None:
            self.uri = uri
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if data_sender_id is not None:
            self.data_sender_id = data_sender_id
        if attributes is not None:
            self.attributes = attributes
        if attributes_list is not None:
            self.attributes_list = attributes_list
        if associations is not None:
            self.associations = associations
        if associated_resource is not None:
            self.associated_resource = associated_resource
        if uuid is not None:
            self.uuid = uuid
        if level is not None:
            self.level = level
        if severity is not None:
            self.severity = severity
        if urgency is not None:
            self.urgency = urgency
        if description_info is not None:
            self.description_info = description_info
        if corrective_action is not None:
            self.corrective_action = corrective_action
        if corrective_action_info is not None:
            self.corrective_action_info = corrective_action_info
        if event_code is not None:
            self.event_code = event_code
        if service_event_source is not None:
            self.service_event_source = service_event_source
        if service_event_details is not None:
            self.service_event_details = service_event_details
        if clear_matching_alerts is not None:
            self.clear_matching_alerts = clear_matching_alerts
        if list_to_clear is not None:
            self.list_to_clear = list_to_clear
        if alert_state is not None:
            self.alert_state = alert_state
        if alert_type_id is not None:
            self.alert_type_id = alert_type_id
        if associated_event_uris is not None:
            self.associated_event_uris = associated_event_uris
        if assigned_to_user is not None:
            self.assigned_to_user = assigned_to_user
        if change_log is not None:
            self.change_log = change_log
        if child_alerts is not None:
            self.child_alerts = child_alerts
        if cleared_by_user is not None:
            self.cleared_by_user = cleared_by_user
        if cleared_time is not None:
            self.cleared_time = cleared_time
        if life_cycle is not None:
            self.life_cycle = life_cycle
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if e_tag is not None:
            self.e_tag = e_tag

    @property
    def name(self):
        """Gets the name of this AlertsEntry.  # noqa: E501


        :return: The name of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertsEntry.


        :param name: The name of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this AlertsEntry.  # noqa: E501


        :return: The category of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AlertsEntry.


        :param category: The category of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def uri(self):
        """Gets the uri of this AlertsEntry.  # noqa: E501


        :return: The uri of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AlertsEntry.


        :param uri: The uri of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def created(self):
        """Gets the created of this AlertsEntry.  # noqa: E501


        :return: The created of this AlertsEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AlertsEntry.


        :param created: The created of this AlertsEntry.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this AlertsEntry.  # noqa: E501


        :return: The modified of this AlertsEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this AlertsEntry.


        :param modified: The modified of this AlertsEntry.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def description(self):
        """Gets the description of this AlertsEntry.  # noqa: E501


        :return: The description of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertsEntry.


        :param description: The description of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this AlertsEntry.  # noqa: E501


        :return: The status of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlertsEntry.


        :param status: The status of this AlertsEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Critical", "Warning", "OK", "Unknown", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self):
        """Gets the state of this AlertsEntry.  # noqa: E501


        :return: The state of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertsEntry.


        :param state: The state of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this AlertsEntry.  # noqa: E501


        :return: The type of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlertsEntry.


        :param type: The type of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def data_sender_id(self):
        """Gets the data_sender_id of this AlertsEntry.  # noqa: E501


        :return: The data_sender_id of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._data_sender_id

    @data_sender_id.setter
    def data_sender_id(self, data_sender_id):
        """Sets the data_sender_id of this AlertsEntry.


        :param data_sender_id: The data_sender_id of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._data_sender_id = data_sender_id

    @property
    def attributes(self):
        """Gets the attributes of this AlertsEntry.  # noqa: E501


        :return: The attributes of this AlertsEntry.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AlertsEntry.


        :param attributes: The attributes of this AlertsEntry.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def attributes_list(self):
        """Gets the attributes_list of this AlertsEntry.  # noqa: E501


        :return: The attributes_list of this AlertsEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes_list

    @attributes_list.setter
    def attributes_list(self, attributes_list):
        """Sets the attributes_list of this AlertsEntry.


        :param attributes_list: The attributes_list of this AlertsEntry.  # noqa: E501
        :type: list[str]
        """

        self._attributes_list = attributes_list

    @property
    def associations(self):
        """Gets the associations of this AlertsEntry.  # noqa: E501


        :return: The associations of this AlertsEntry.  # noqa: E501
        :rtype: list[Association]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this AlertsEntry.


        :param associations: The associations of this AlertsEntry.  # noqa: E501
        :type: list[Association]
        """

        self._associations = associations

    @property
    def associated_resource(self):
        """Gets the associated_resource of this AlertsEntry.  # noqa: E501


        :return: The associated_resource of this AlertsEntry.  # noqa: E501
        :rtype: AssociatedResource
        """
        return self._associated_resource

    @associated_resource.setter
    def associated_resource(self, associated_resource):
        """Sets the associated_resource of this AlertsEntry.


        :param associated_resource: The associated_resource of this AlertsEntry.  # noqa: E501
        :type: AssociatedResource
        """

        self._associated_resource = associated_resource

    @property
    def uuid(self):
        """Gets the uuid of this AlertsEntry.  # noqa: E501


        :return: The uuid of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AlertsEntry.


        :param uuid: The uuid of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def level(self):
        """Gets the level of this AlertsEntry.  # noqa: E501


        :return: The level of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AlertsEntry.


        :param level: The level of this AlertsEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "WARN", "ALERT", "ALERT_INFO"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def severity(self):
        """Gets the severity of this AlertsEntry.  # noqa: E501


        :return: The severity of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertsEntry.


        :param severity: The severity of this AlertsEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Critical", "Disabled", "OK", "Unknown", "Warning"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def urgency(self):
        """Gets the urgency of this AlertsEntry.  # noqa: E501


        :return: The urgency of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this AlertsEntry.


        :param urgency: The urgency of this AlertsEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Deferrable", "High", "Immediate", "Medium", "None", "Unknown"]  # noqa: E501
        if urgency not in allowed_values:
            raise ValueError(
                "Invalid value for `urgency` ({0}), must be one of {1}"  # noqa: E501
                .format(urgency, allowed_values)
            )

        self._urgency = urgency

    @property
    def description_info(self):
        """Gets the description_info of this AlertsEntry.  # noqa: E501


        :return: The description_info of this AlertsEntry.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._description_info

    @description_info.setter
    def description_info(self, description_info):
        """Sets the description_info of this AlertsEntry.


        :param description_info: The description_info of this AlertsEntry.  # noqa: E501
        :type: MessageInfo
        """

        self._description_info = description_info

    @property
    def corrective_action(self):
        """Gets the corrective_action of this AlertsEntry.  # noqa: E501


        :return: The corrective_action of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._corrective_action

    @corrective_action.setter
    def corrective_action(self, corrective_action):
        """Sets the corrective_action of this AlertsEntry.


        :param corrective_action: The corrective_action of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._corrective_action = corrective_action

    @property
    def corrective_action_info(self):
        """Gets the corrective_action_info of this AlertsEntry.  # noqa: E501


        :return: The corrective_action_info of this AlertsEntry.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._corrective_action_info

    @corrective_action_info.setter
    def corrective_action_info(self, corrective_action_info):
        """Sets the corrective_action_info of this AlertsEntry.


        :param corrective_action_info: The corrective_action_info of this AlertsEntry.  # noqa: E501
        :type: MessageInfo
        """

        self._corrective_action_info = corrective_action_info

    @property
    def event_code(self):
        """Gets the event_code of this AlertsEntry.  # noqa: E501


        :return: The event_code of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this AlertsEntry.


        :param event_code: The event_code of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._event_code = event_code

    @property
    def service_event_source(self):
        """Gets the service_event_source of this AlertsEntry.  # noqa: E501


        :return: The service_event_source of this AlertsEntry.  # noqa: E501
        :rtype: bool
        """
        return self._service_event_source

    @service_event_source.setter
    def service_event_source(self, service_event_source):
        """Sets the service_event_source of this AlertsEntry.


        :param service_event_source: The service_event_source of this AlertsEntry.  # noqa: E501
        :type: bool
        """

        self._service_event_source = service_event_source

    @property
    def service_event_details(self):
        """Gets the service_event_details of this AlertsEntry.  # noqa: E501


        :return: The service_event_details of this AlertsEntry.  # noqa: E501
        :rtype: ServiceEventDetails
        """
        return self._service_event_details

    @service_event_details.setter
    def service_event_details(self, service_event_details):
        """Sets the service_event_details of this AlertsEntry.


        :param service_event_details: The service_event_details of this AlertsEntry.  # noqa: E501
        :type: ServiceEventDetails
        """

        self._service_event_details = service_event_details

    @property
    def clear_matching_alerts(self):
        """Gets the clear_matching_alerts of this AlertsEntry.  # noqa: E501


        :return: The clear_matching_alerts of this AlertsEntry.  # noqa: E501
        :rtype: bool
        """
        return self._clear_matching_alerts

    @clear_matching_alerts.setter
    def clear_matching_alerts(self, clear_matching_alerts):
        """Sets the clear_matching_alerts of this AlertsEntry.


        :param clear_matching_alerts: The clear_matching_alerts of this AlertsEntry.  # noqa: E501
        :type: bool
        """

        self._clear_matching_alerts = clear_matching_alerts

    @property
    def list_to_clear(self):
        """Gets the list_to_clear of this AlertsEntry.  # noqa: E501


        :return: The list_to_clear of this AlertsEntry.  # noqa: E501
        :rtype: list[CatalogKeyPair]
        """
        return self._list_to_clear

    @list_to_clear.setter
    def list_to_clear(self, list_to_clear):
        """Sets the list_to_clear of this AlertsEntry.


        :param list_to_clear: The list_to_clear of this AlertsEntry.  # noqa: E501
        :type: list[CatalogKeyPair]
        """

        self._list_to_clear = list_to_clear

    @property
    def alert_state(self):
        """Gets the alert_state of this AlertsEntry.  # noqa: E501


        :return: The alert_state of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._alert_state

    @alert_state.setter
    def alert_state(self, alert_state):
        """Sets the alert_state of this AlertsEntry.


        :param alert_state: The alert_state of this AlertsEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Cleared", "Locked", "None"]  # noqa: E501
        if alert_state not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_state` ({0}), must be one of {1}"  # noqa: E501
                .format(alert_state, allowed_values)
            )

        self._alert_state = alert_state

    @property
    def alert_type_id(self):
        """Gets the alert_type_id of this AlertsEntry.  # noqa: E501

        The ...  # noqa: E501

        :return: The alert_type_id of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._alert_type_id

    @alert_type_id.setter
    def alert_type_id(self, alert_type_id):
        """Sets the alert_type_id of this AlertsEntry.

        The ...  # noqa: E501

        :param alert_type_id: The alert_type_id of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._alert_type_id = alert_type_id

    @property
    def associated_event_uris(self):
        """Gets the associated_event_uris of this AlertsEntry.  # noqa: E501


        :return: The associated_event_uris of this AlertsEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_event_uris

    @associated_event_uris.setter
    def associated_event_uris(self, associated_event_uris):
        """Sets the associated_event_uris of this AlertsEntry.


        :param associated_event_uris: The associated_event_uris of this AlertsEntry.  # noqa: E501
        :type: list[str]
        """

        self._associated_event_uris = associated_event_uris

    @property
    def assigned_to_user(self):
        """Gets the assigned_to_user of this AlertsEntry.  # noqa: E501


        :return: The assigned_to_user of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to_user

    @assigned_to_user.setter
    def assigned_to_user(self, assigned_to_user):
        """Sets the assigned_to_user of this AlertsEntry.


        :param assigned_to_user: The assigned_to_user of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._assigned_to_user = assigned_to_user

    @property
    def change_log(self):
        """Gets the change_log of this AlertsEntry.  # noqa: E501


        :return: The change_log of this AlertsEntry.  # noqa: E501
        :rtype: list[ChangeLog]
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this AlertsEntry.


        :param change_log: The change_log of this AlertsEntry.  # noqa: E501
        :type: list[ChangeLog]
        """

        self._change_log = change_log

    @property
    def child_alerts(self):
        """Gets the child_alerts of this AlertsEntry.  # noqa: E501


        :return: The child_alerts of this AlertsEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._child_alerts

    @child_alerts.setter
    def child_alerts(self, child_alerts):
        """Sets the child_alerts of this AlertsEntry.


        :param child_alerts: The child_alerts of this AlertsEntry.  # noqa: E501
        :type: list[str]
        """

        self._child_alerts = child_alerts

    @property
    def cleared_by_user(self):
        """Gets the cleared_by_user of this AlertsEntry.  # noqa: E501


        :return: The cleared_by_user of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._cleared_by_user

    @cleared_by_user.setter
    def cleared_by_user(self, cleared_by_user):
        """Sets the cleared_by_user of this AlertsEntry.


        :param cleared_by_user: The cleared_by_user of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._cleared_by_user = cleared_by_user

    @property
    def cleared_time(self):
        """Gets the cleared_time of this AlertsEntry.  # noqa: E501


        :return: The cleared_time of this AlertsEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._cleared_time

    @cleared_time.setter
    def cleared_time(self, cleared_time):
        """Sets the cleared_time of this AlertsEntry.


        :param cleared_time: The cleared_time of this AlertsEntry.  # noqa: E501
        :type: datetime
        """

        self._cleared_time = cleared_time

    @property
    def life_cycle(self):
        """Gets the life_cycle of this AlertsEntry.  # noqa: E501


        :return: The life_cycle of this AlertsEntry.  # noqa: E501
        :rtype: bool
        """
        return self._life_cycle

    @life_cycle.setter
    def life_cycle(self, life_cycle):
        """Sets the life_cycle of this AlertsEntry.


        :param life_cycle: The life_cycle of this AlertsEntry.  # noqa: E501
        :type: bool
        """

        self._life_cycle = life_cycle

    @property
    def resource_id(self):
        """Gets the resource_id of this AlertsEntry.  # noqa: E501


        :return: The resource_id of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AlertsEntry.


        :param resource_id: The resource_id of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_uri(self):
        """Gets the resource_uri of this AlertsEntry.  # noqa: E501


        :return: The resource_uri of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this AlertsEntry.


        :param resource_uri: The resource_uri of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def e_tag(self):
        """Gets the e_tag of this AlertsEntry.  # noqa: E501


        :return: The e_tag of this AlertsEntry.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this AlertsEntry.


        :param e_tag: The e_tag of this AlertsEntry.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertsEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertsEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
