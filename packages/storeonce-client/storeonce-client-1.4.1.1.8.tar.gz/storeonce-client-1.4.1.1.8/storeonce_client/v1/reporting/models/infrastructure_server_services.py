# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class InfrastructureServerServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'starting': 'bool',
        'shutting_down': 'bool',
        'forced_shutting_down': 'bool',
        'in_no_failover': 'bool',
        'upgrading': 'bool',
        'single_node': 'bool',
        'config_changes_allowed': 'bool',
        'pm_mode': 'str',
        'production': 'bool',
        'rest_client': 'RestClient',
        'active_server': 'Node',
        'i18n_manager': 'I18nManager',
        'standard_bindings': 'dict(str, object)',
        'store_lock': 'object',
        'execute': 'ExecuteServices',
        'notification_manager': 'NotificationManagerServices',
        'current_time_in_msec': 'int',
        'infrastructure_manager': 'InfrastructureManagerServices',
        'task_manager': 'TaskManagerServices',
        'event_factory': 'EventFactory',
        'event_message_read_write': 'EventMessageReadWrite',
        'event_category_service': 'EventCategoryService',
        'authenticator': 'Authenticator',
        'trusted_cluster_manager': 'TrustedClusterManager',
        'active': 'bool',
        'event_dispatcher': 'EventDispatcher',
        'started': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'starting': 'starting',
        'shutting_down': 'shuttingDown',
        'forced_shutting_down': 'forcedShuttingDown',
        'in_no_failover': 'inNoFailover',
        'upgrading': 'upgrading',
        'single_node': 'singleNode',
        'config_changes_allowed': 'configChangesAllowed',
        'pm_mode': 'pmMode',
        'production': 'production',
        'rest_client': 'restClient',
        'active_server': 'activeServer',
        'i18n_manager': 'i18nManager',
        'standard_bindings': 'standardBindings',
        'store_lock': 'storeLock',
        'execute': 'execute',
        'notification_manager': 'notificationManager',
        'current_time_in_msec': 'currentTimeInMsec',
        'infrastructure_manager': 'infrastructureManager',
        'task_manager': 'taskManager',
        'event_factory': 'eventFactory',
        'event_message_read_write': 'eventMessageReadWrite',
        'event_category_service': 'eventCategoryService',
        'authenticator': 'authenticator',
        'trusted_cluster_manager': 'trustedClusterManager',
        'active': 'active',
        'event_dispatcher': 'eventDispatcher',
        'started': 'started',
        'name': 'name'
    }

    def __init__(self, starting=False, shutting_down=False, forced_shutting_down=False, in_no_failover=False, upgrading=False, single_node=False, config_changes_allowed=False, pm_mode=None, production=False, rest_client=None, active_server=None, i18n_manager=None, standard_bindings=None, store_lock=None, execute=None, notification_manager=None, current_time_in_msec=None, infrastructure_manager=None, task_manager=None, event_factory=None, event_message_read_write=None, event_category_service=None, authenticator=None, trusted_cluster_manager=None, active=False, event_dispatcher=None, started=False, name=None):  # noqa: E501
        """InfrastructureServerServices - a model defined in Swagger"""  # noqa: E501

        self._starting = None
        self._shutting_down = None
        self._forced_shutting_down = None
        self._in_no_failover = None
        self._upgrading = None
        self._single_node = None
        self._config_changes_allowed = None
        self._pm_mode = None
        self._production = None
        self._rest_client = None
        self._active_server = None
        self._i18n_manager = None
        self._standard_bindings = None
        self._store_lock = None
        self._execute = None
        self._notification_manager = None
        self._current_time_in_msec = None
        self._infrastructure_manager = None
        self._task_manager = None
        self._event_factory = None
        self._event_message_read_write = None
        self._event_category_service = None
        self._authenticator = None
        self._trusted_cluster_manager = None
        self._active = None
        self._event_dispatcher = None
        self._started = None
        self._name = None
        self.discriminator = None

        if starting is not None:
            self.starting = starting
        if shutting_down is not None:
            self.shutting_down = shutting_down
        if forced_shutting_down is not None:
            self.forced_shutting_down = forced_shutting_down
        if in_no_failover is not None:
            self.in_no_failover = in_no_failover
        if upgrading is not None:
            self.upgrading = upgrading
        if single_node is not None:
            self.single_node = single_node
        if config_changes_allowed is not None:
            self.config_changes_allowed = config_changes_allowed
        if pm_mode is not None:
            self.pm_mode = pm_mode
        if production is not None:
            self.production = production
        if rest_client is not None:
            self.rest_client = rest_client
        if active_server is not None:
            self.active_server = active_server
        if i18n_manager is not None:
            self.i18n_manager = i18n_manager
        if standard_bindings is not None:
            self.standard_bindings = standard_bindings
        if store_lock is not None:
            self.store_lock = store_lock
        if execute is not None:
            self.execute = execute
        if notification_manager is not None:
            self.notification_manager = notification_manager
        if current_time_in_msec is not None:
            self.current_time_in_msec = current_time_in_msec
        if infrastructure_manager is not None:
            self.infrastructure_manager = infrastructure_manager
        if task_manager is not None:
            self.task_manager = task_manager
        if event_factory is not None:
            self.event_factory = event_factory
        if event_message_read_write is not None:
            self.event_message_read_write = event_message_read_write
        if event_category_service is not None:
            self.event_category_service = event_category_service
        if authenticator is not None:
            self.authenticator = authenticator
        if trusted_cluster_manager is not None:
            self.trusted_cluster_manager = trusted_cluster_manager
        if active is not None:
            self.active = active
        if event_dispatcher is not None:
            self.event_dispatcher = event_dispatcher
        if started is not None:
            self.started = started
        if name is not None:
            self.name = name

    @property
    def starting(self):
        """Gets the starting of this InfrastructureServerServices.  # noqa: E501


        :return: The starting of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._starting

    @starting.setter
    def starting(self, starting):
        """Sets the starting of this InfrastructureServerServices.


        :param starting: The starting of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._starting = starting

    @property
    def shutting_down(self):
        """Gets the shutting_down of this InfrastructureServerServices.  # noqa: E501


        :return: The shutting_down of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._shutting_down

    @shutting_down.setter
    def shutting_down(self, shutting_down):
        """Sets the shutting_down of this InfrastructureServerServices.


        :param shutting_down: The shutting_down of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._shutting_down = shutting_down

    @property
    def forced_shutting_down(self):
        """Gets the forced_shutting_down of this InfrastructureServerServices.  # noqa: E501


        :return: The forced_shutting_down of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._forced_shutting_down

    @forced_shutting_down.setter
    def forced_shutting_down(self, forced_shutting_down):
        """Sets the forced_shutting_down of this InfrastructureServerServices.


        :param forced_shutting_down: The forced_shutting_down of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._forced_shutting_down = forced_shutting_down

    @property
    def in_no_failover(self):
        """Gets the in_no_failover of this InfrastructureServerServices.  # noqa: E501


        :return: The in_no_failover of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._in_no_failover

    @in_no_failover.setter
    def in_no_failover(self, in_no_failover):
        """Sets the in_no_failover of this InfrastructureServerServices.


        :param in_no_failover: The in_no_failover of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._in_no_failover = in_no_failover

    @property
    def upgrading(self):
        """Gets the upgrading of this InfrastructureServerServices.  # noqa: E501


        :return: The upgrading of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._upgrading

    @upgrading.setter
    def upgrading(self, upgrading):
        """Sets the upgrading of this InfrastructureServerServices.


        :param upgrading: The upgrading of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._upgrading = upgrading

    @property
    def single_node(self):
        """Gets the single_node of this InfrastructureServerServices.  # noqa: E501


        :return: The single_node of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._single_node

    @single_node.setter
    def single_node(self, single_node):
        """Sets the single_node of this InfrastructureServerServices.


        :param single_node: The single_node of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._single_node = single_node

    @property
    def config_changes_allowed(self):
        """Gets the config_changes_allowed of this InfrastructureServerServices.  # noqa: E501


        :return: The config_changes_allowed of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._config_changes_allowed

    @config_changes_allowed.setter
    def config_changes_allowed(self, config_changes_allowed):
        """Sets the config_changes_allowed of this InfrastructureServerServices.


        :param config_changes_allowed: The config_changes_allowed of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._config_changes_allowed = config_changes_allowed

    @property
    def pm_mode(self):
        """Gets the pm_mode of this InfrastructureServerServices.  # noqa: E501


        :return: The pm_mode of this InfrastructureServerServices.  # noqa: E501
        :rtype: str
        """
        return self._pm_mode

    @pm_mode.setter
    def pm_mode(self, pm_mode):
        """Sets the pm_mode of this InfrastructureServerServices.


        :param pm_mode: The pm_mode of this InfrastructureServerServices.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "BecomingActive", "Passive", "NoPmFailover", "NotConfigured", "Unknown"]  # noqa: E501
        if pm_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pm_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(pm_mode, allowed_values)
            )

        self._pm_mode = pm_mode

    @property
    def production(self):
        """Gets the production of this InfrastructureServerServices.  # noqa: E501


        :return: The production of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._production

    @production.setter
    def production(self, production):
        """Sets the production of this InfrastructureServerServices.


        :param production: The production of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._production = production

    @property
    def rest_client(self):
        """Gets the rest_client of this InfrastructureServerServices.  # noqa: E501


        :return: The rest_client of this InfrastructureServerServices.  # noqa: E501
        :rtype: RestClient
        """
        return self._rest_client

    @rest_client.setter
    def rest_client(self, rest_client):
        """Sets the rest_client of this InfrastructureServerServices.


        :param rest_client: The rest_client of this InfrastructureServerServices.  # noqa: E501
        :type: RestClient
        """

        self._rest_client = rest_client

    @property
    def active_server(self):
        """Gets the active_server of this InfrastructureServerServices.  # noqa: E501


        :return: The active_server of this InfrastructureServerServices.  # noqa: E501
        :rtype: Node
        """
        return self._active_server

    @active_server.setter
    def active_server(self, active_server):
        """Sets the active_server of this InfrastructureServerServices.


        :param active_server: The active_server of this InfrastructureServerServices.  # noqa: E501
        :type: Node
        """

        self._active_server = active_server

    @property
    def i18n_manager(self):
        """Gets the i18n_manager of this InfrastructureServerServices.  # noqa: E501


        :return: The i18n_manager of this InfrastructureServerServices.  # noqa: E501
        :rtype: I18nManager
        """
        return self._i18n_manager

    @i18n_manager.setter
    def i18n_manager(self, i18n_manager):
        """Sets the i18n_manager of this InfrastructureServerServices.


        :param i18n_manager: The i18n_manager of this InfrastructureServerServices.  # noqa: E501
        :type: I18nManager
        """

        self._i18n_manager = i18n_manager

    @property
    def standard_bindings(self):
        """Gets the standard_bindings of this InfrastructureServerServices.  # noqa: E501


        :return: The standard_bindings of this InfrastructureServerServices.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._standard_bindings

    @standard_bindings.setter
    def standard_bindings(self, standard_bindings):
        """Sets the standard_bindings of this InfrastructureServerServices.


        :param standard_bindings: The standard_bindings of this InfrastructureServerServices.  # noqa: E501
        :type: dict(str, object)
        """

        self._standard_bindings = standard_bindings

    @property
    def store_lock(self):
        """Gets the store_lock of this InfrastructureServerServices.  # noqa: E501


        :return: The store_lock of this InfrastructureServerServices.  # noqa: E501
        :rtype: object
        """
        return self._store_lock

    @store_lock.setter
    def store_lock(self, store_lock):
        """Sets the store_lock of this InfrastructureServerServices.


        :param store_lock: The store_lock of this InfrastructureServerServices.  # noqa: E501
        :type: object
        """

        self._store_lock = store_lock

    @property
    def execute(self):
        """Gets the execute of this InfrastructureServerServices.  # noqa: E501


        :return: The execute of this InfrastructureServerServices.  # noqa: E501
        :rtype: ExecuteServices
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this InfrastructureServerServices.


        :param execute: The execute of this InfrastructureServerServices.  # noqa: E501
        :type: ExecuteServices
        """

        self._execute = execute

    @property
    def notification_manager(self):
        """Gets the notification_manager of this InfrastructureServerServices.  # noqa: E501


        :return: The notification_manager of this InfrastructureServerServices.  # noqa: E501
        :rtype: NotificationManagerServices
        """
        return self._notification_manager

    @notification_manager.setter
    def notification_manager(self, notification_manager):
        """Sets the notification_manager of this InfrastructureServerServices.


        :param notification_manager: The notification_manager of this InfrastructureServerServices.  # noqa: E501
        :type: NotificationManagerServices
        """

        self._notification_manager = notification_manager

    @property
    def current_time_in_msec(self):
        """Gets the current_time_in_msec of this InfrastructureServerServices.  # noqa: E501


        :return: The current_time_in_msec of this InfrastructureServerServices.  # noqa: E501
        :rtype: int
        """
        return self._current_time_in_msec

    @current_time_in_msec.setter
    def current_time_in_msec(self, current_time_in_msec):
        """Sets the current_time_in_msec of this InfrastructureServerServices.


        :param current_time_in_msec: The current_time_in_msec of this InfrastructureServerServices.  # noqa: E501
        :type: int
        """

        self._current_time_in_msec = current_time_in_msec

    @property
    def infrastructure_manager(self):
        """Gets the infrastructure_manager of this InfrastructureServerServices.  # noqa: E501


        :return: The infrastructure_manager of this InfrastructureServerServices.  # noqa: E501
        :rtype: InfrastructureManagerServices
        """
        return self._infrastructure_manager

    @infrastructure_manager.setter
    def infrastructure_manager(self, infrastructure_manager):
        """Sets the infrastructure_manager of this InfrastructureServerServices.


        :param infrastructure_manager: The infrastructure_manager of this InfrastructureServerServices.  # noqa: E501
        :type: InfrastructureManagerServices
        """

        self._infrastructure_manager = infrastructure_manager

    @property
    def task_manager(self):
        """Gets the task_manager of this InfrastructureServerServices.  # noqa: E501


        :return: The task_manager of this InfrastructureServerServices.  # noqa: E501
        :rtype: TaskManagerServices
        """
        return self._task_manager

    @task_manager.setter
    def task_manager(self, task_manager):
        """Sets the task_manager of this InfrastructureServerServices.


        :param task_manager: The task_manager of this InfrastructureServerServices.  # noqa: E501
        :type: TaskManagerServices
        """

        self._task_manager = task_manager

    @property
    def event_factory(self):
        """Gets the event_factory of this InfrastructureServerServices.  # noqa: E501


        :return: The event_factory of this InfrastructureServerServices.  # noqa: E501
        :rtype: EventFactory
        """
        return self._event_factory

    @event_factory.setter
    def event_factory(self, event_factory):
        """Sets the event_factory of this InfrastructureServerServices.


        :param event_factory: The event_factory of this InfrastructureServerServices.  # noqa: E501
        :type: EventFactory
        """

        self._event_factory = event_factory

    @property
    def event_message_read_write(self):
        """Gets the event_message_read_write of this InfrastructureServerServices.  # noqa: E501


        :return: The event_message_read_write of this InfrastructureServerServices.  # noqa: E501
        :rtype: EventMessageReadWrite
        """
        return self._event_message_read_write

    @event_message_read_write.setter
    def event_message_read_write(self, event_message_read_write):
        """Sets the event_message_read_write of this InfrastructureServerServices.


        :param event_message_read_write: The event_message_read_write of this InfrastructureServerServices.  # noqa: E501
        :type: EventMessageReadWrite
        """

        self._event_message_read_write = event_message_read_write

    @property
    def event_category_service(self):
        """Gets the event_category_service of this InfrastructureServerServices.  # noqa: E501


        :return: The event_category_service of this InfrastructureServerServices.  # noqa: E501
        :rtype: EventCategoryService
        """
        return self._event_category_service

    @event_category_service.setter
    def event_category_service(self, event_category_service):
        """Sets the event_category_service of this InfrastructureServerServices.


        :param event_category_service: The event_category_service of this InfrastructureServerServices.  # noqa: E501
        :type: EventCategoryService
        """

        self._event_category_service = event_category_service

    @property
    def authenticator(self):
        """Gets the authenticator of this InfrastructureServerServices.  # noqa: E501


        :return: The authenticator of this InfrastructureServerServices.  # noqa: E501
        :rtype: Authenticator
        """
        return self._authenticator

    @authenticator.setter
    def authenticator(self, authenticator):
        """Sets the authenticator of this InfrastructureServerServices.


        :param authenticator: The authenticator of this InfrastructureServerServices.  # noqa: E501
        :type: Authenticator
        """

        self._authenticator = authenticator

    @property
    def trusted_cluster_manager(self):
        """Gets the trusted_cluster_manager of this InfrastructureServerServices.  # noqa: E501


        :return: The trusted_cluster_manager of this InfrastructureServerServices.  # noqa: E501
        :rtype: TrustedClusterManager
        """
        return self._trusted_cluster_manager

    @trusted_cluster_manager.setter
    def trusted_cluster_manager(self, trusted_cluster_manager):
        """Sets the trusted_cluster_manager of this InfrastructureServerServices.


        :param trusted_cluster_manager: The trusted_cluster_manager of this InfrastructureServerServices.  # noqa: E501
        :type: TrustedClusterManager
        """

        self._trusted_cluster_manager = trusted_cluster_manager

    @property
    def active(self):
        """Gets the active of this InfrastructureServerServices.  # noqa: E501


        :return: The active of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InfrastructureServerServices.


        :param active: The active of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def event_dispatcher(self):
        """Gets the event_dispatcher of this InfrastructureServerServices.  # noqa: E501


        :return: The event_dispatcher of this InfrastructureServerServices.  # noqa: E501
        :rtype: EventDispatcher
        """
        return self._event_dispatcher

    @event_dispatcher.setter
    def event_dispatcher(self, event_dispatcher):
        """Sets the event_dispatcher of this InfrastructureServerServices.


        :param event_dispatcher: The event_dispatcher of this InfrastructureServerServices.  # noqa: E501
        :type: EventDispatcher
        """

        self._event_dispatcher = event_dispatcher

    @property
    def started(self):
        """Gets the started of this InfrastructureServerServices.  # noqa: E501


        :return: The started of this InfrastructureServerServices.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this InfrastructureServerServices.


        :param started: The started of this InfrastructureServerServices.  # noqa: E501
        :type: bool
        """

        self._started = started

    @property
    def name(self):
        """Gets the name of this InfrastructureServerServices.  # noqa: E501


        :return: The name of this InfrastructureServerServices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InfrastructureServerServices.


        :param name: The name of this InfrastructureServerServices.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfrastructureServerServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfrastructureServerServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
