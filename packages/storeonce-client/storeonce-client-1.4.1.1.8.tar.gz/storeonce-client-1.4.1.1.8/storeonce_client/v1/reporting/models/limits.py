# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Limits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name_length': 'int',
        'file_pathname_length': 'int',
        'share_name_length': 'int',
        'shares_per_host': 'int',
        'nfs_shares': 'int',
        'nfs_clients': 'int',
        'max_storage_pool_size': 'StoragePoolSize',
        'mount_point_name_length': 'int',
        'storage_pool_name_length': 'int',
        'storage_pools_per_host': 'int',
        'virtual_servers_per_storage_pool': 'int',
        'file_stores_per_virtual_server': 'int',
        'snaps_per_file_store': 'int',
        'ips_per_virtual_server': 'int',
        'condition_timeout_seconds': 'int',
        'system_directories': 'list[str]'
    }

    attribute_map = {
        'file_name_length': 'FileNameLength',
        'file_pathname_length': 'FilePathnameLength',
        'share_name_length': 'ShareNameLength',
        'shares_per_host': 'SharesPerHost',
        'nfs_shares': 'NFSShares',
        'nfs_clients': 'NFSClients',
        'max_storage_pool_size': 'MaxStoragePoolSize',
        'mount_point_name_length': 'MountPointNameLength',
        'storage_pool_name_length': 'StoragePoolNameLength',
        'storage_pools_per_host': 'StoragePoolsPerHost',
        'virtual_servers_per_storage_pool': 'VirtualServersPerStoragePool',
        'file_stores_per_virtual_server': 'FileStoresPerVirtualServer',
        'snaps_per_file_store': 'SnapsPerFileStore',
        'ips_per_virtual_server': 'IpsPerVirtualServer',
        'condition_timeout_seconds': 'ConditionTimeoutSeconds',
        'system_directories': 'SystemDirectories'
    }

    def __init__(self, file_name_length=None, file_pathname_length=None, share_name_length=None, shares_per_host=None, nfs_shares=None, nfs_clients=None, max_storage_pool_size=None, mount_point_name_length=None, storage_pool_name_length=None, storage_pools_per_host=None, virtual_servers_per_storage_pool=None, file_stores_per_virtual_server=None, snaps_per_file_store=None, ips_per_virtual_server=None, condition_timeout_seconds=None, system_directories=None):  # noqa: E501
        """Limits - a model defined in Swagger"""  # noqa: E501

        self._file_name_length = None
        self._file_pathname_length = None
        self._share_name_length = None
        self._shares_per_host = None
        self._nfs_shares = None
        self._nfs_clients = None
        self._max_storage_pool_size = None
        self._mount_point_name_length = None
        self._storage_pool_name_length = None
        self._storage_pools_per_host = None
        self._virtual_servers_per_storage_pool = None
        self._file_stores_per_virtual_server = None
        self._snaps_per_file_store = None
        self._ips_per_virtual_server = None
        self._condition_timeout_seconds = None
        self._system_directories = None
        self.discriminator = None

        if file_name_length is not None:
            self.file_name_length = file_name_length
        if file_pathname_length is not None:
            self.file_pathname_length = file_pathname_length
        if share_name_length is not None:
            self.share_name_length = share_name_length
        if shares_per_host is not None:
            self.shares_per_host = shares_per_host
        if nfs_shares is not None:
            self.nfs_shares = nfs_shares
        if nfs_clients is not None:
            self.nfs_clients = nfs_clients
        if max_storage_pool_size is not None:
            self.max_storage_pool_size = max_storage_pool_size
        if mount_point_name_length is not None:
            self.mount_point_name_length = mount_point_name_length
        if storage_pool_name_length is not None:
            self.storage_pool_name_length = storage_pool_name_length
        if storage_pools_per_host is not None:
            self.storage_pools_per_host = storage_pools_per_host
        if virtual_servers_per_storage_pool is not None:
            self.virtual_servers_per_storage_pool = virtual_servers_per_storage_pool
        if file_stores_per_virtual_server is not None:
            self.file_stores_per_virtual_server = file_stores_per_virtual_server
        if snaps_per_file_store is not None:
            self.snaps_per_file_store = snaps_per_file_store
        if ips_per_virtual_server is not None:
            self.ips_per_virtual_server = ips_per_virtual_server
        if condition_timeout_seconds is not None:
            self.condition_timeout_seconds = condition_timeout_seconds
        if system_directories is not None:
            self.system_directories = system_directories

    @property
    def file_name_length(self):
        """Gets the file_name_length of this Limits.  # noqa: E501


        :return: The file_name_length of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._file_name_length

    @file_name_length.setter
    def file_name_length(self, file_name_length):
        """Sets the file_name_length of this Limits.


        :param file_name_length: The file_name_length of this Limits.  # noqa: E501
        :type: int
        """

        self._file_name_length = file_name_length

    @property
    def file_pathname_length(self):
        """Gets the file_pathname_length of this Limits.  # noqa: E501


        :return: The file_pathname_length of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._file_pathname_length

    @file_pathname_length.setter
    def file_pathname_length(self, file_pathname_length):
        """Sets the file_pathname_length of this Limits.


        :param file_pathname_length: The file_pathname_length of this Limits.  # noqa: E501
        :type: int
        """

        self._file_pathname_length = file_pathname_length

    @property
    def share_name_length(self):
        """Gets the share_name_length of this Limits.  # noqa: E501


        :return: The share_name_length of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._share_name_length

    @share_name_length.setter
    def share_name_length(self, share_name_length):
        """Sets the share_name_length of this Limits.


        :param share_name_length: The share_name_length of this Limits.  # noqa: E501
        :type: int
        """

        self._share_name_length = share_name_length

    @property
    def shares_per_host(self):
        """Gets the shares_per_host of this Limits.  # noqa: E501


        :return: The shares_per_host of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._shares_per_host

    @shares_per_host.setter
    def shares_per_host(self, shares_per_host):
        """Sets the shares_per_host of this Limits.


        :param shares_per_host: The shares_per_host of this Limits.  # noqa: E501
        :type: int
        """

        self._shares_per_host = shares_per_host

    @property
    def nfs_shares(self):
        """Gets the nfs_shares of this Limits.  # noqa: E501


        :return: The nfs_shares of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._nfs_shares

    @nfs_shares.setter
    def nfs_shares(self, nfs_shares):
        """Sets the nfs_shares of this Limits.


        :param nfs_shares: The nfs_shares of this Limits.  # noqa: E501
        :type: int
        """

        self._nfs_shares = nfs_shares

    @property
    def nfs_clients(self):
        """Gets the nfs_clients of this Limits.  # noqa: E501


        :return: The nfs_clients of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._nfs_clients

    @nfs_clients.setter
    def nfs_clients(self, nfs_clients):
        """Sets the nfs_clients of this Limits.


        :param nfs_clients: The nfs_clients of this Limits.  # noqa: E501
        :type: int
        """

        self._nfs_clients = nfs_clients

    @property
    def max_storage_pool_size(self):
        """Gets the max_storage_pool_size of this Limits.  # noqa: E501


        :return: The max_storage_pool_size of this Limits.  # noqa: E501
        :rtype: StoragePoolSize
        """
        return self._max_storage_pool_size

    @max_storage_pool_size.setter
    def max_storage_pool_size(self, max_storage_pool_size):
        """Sets the max_storage_pool_size of this Limits.


        :param max_storage_pool_size: The max_storage_pool_size of this Limits.  # noqa: E501
        :type: StoragePoolSize
        """

        self._max_storage_pool_size = max_storage_pool_size

    @property
    def mount_point_name_length(self):
        """Gets the mount_point_name_length of this Limits.  # noqa: E501


        :return: The mount_point_name_length of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._mount_point_name_length

    @mount_point_name_length.setter
    def mount_point_name_length(self, mount_point_name_length):
        """Sets the mount_point_name_length of this Limits.


        :param mount_point_name_length: The mount_point_name_length of this Limits.  # noqa: E501
        :type: int
        """

        self._mount_point_name_length = mount_point_name_length

    @property
    def storage_pool_name_length(self):
        """Gets the storage_pool_name_length of this Limits.  # noqa: E501


        :return: The storage_pool_name_length of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._storage_pool_name_length

    @storage_pool_name_length.setter
    def storage_pool_name_length(self, storage_pool_name_length):
        """Sets the storage_pool_name_length of this Limits.


        :param storage_pool_name_length: The storage_pool_name_length of this Limits.  # noqa: E501
        :type: int
        """

        self._storage_pool_name_length = storage_pool_name_length

    @property
    def storage_pools_per_host(self):
        """Gets the storage_pools_per_host of this Limits.  # noqa: E501


        :return: The storage_pools_per_host of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._storage_pools_per_host

    @storage_pools_per_host.setter
    def storage_pools_per_host(self, storage_pools_per_host):
        """Sets the storage_pools_per_host of this Limits.


        :param storage_pools_per_host: The storage_pools_per_host of this Limits.  # noqa: E501
        :type: int
        """

        self._storage_pools_per_host = storage_pools_per_host

    @property
    def virtual_servers_per_storage_pool(self):
        """Gets the virtual_servers_per_storage_pool of this Limits.  # noqa: E501


        :return: The virtual_servers_per_storage_pool of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._virtual_servers_per_storage_pool

    @virtual_servers_per_storage_pool.setter
    def virtual_servers_per_storage_pool(self, virtual_servers_per_storage_pool):
        """Sets the virtual_servers_per_storage_pool of this Limits.


        :param virtual_servers_per_storage_pool: The virtual_servers_per_storage_pool of this Limits.  # noqa: E501
        :type: int
        """

        self._virtual_servers_per_storage_pool = virtual_servers_per_storage_pool

    @property
    def file_stores_per_virtual_server(self):
        """Gets the file_stores_per_virtual_server of this Limits.  # noqa: E501


        :return: The file_stores_per_virtual_server of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._file_stores_per_virtual_server

    @file_stores_per_virtual_server.setter
    def file_stores_per_virtual_server(self, file_stores_per_virtual_server):
        """Sets the file_stores_per_virtual_server of this Limits.


        :param file_stores_per_virtual_server: The file_stores_per_virtual_server of this Limits.  # noqa: E501
        :type: int
        """

        self._file_stores_per_virtual_server = file_stores_per_virtual_server

    @property
    def snaps_per_file_store(self):
        """Gets the snaps_per_file_store of this Limits.  # noqa: E501


        :return: The snaps_per_file_store of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._snaps_per_file_store

    @snaps_per_file_store.setter
    def snaps_per_file_store(self, snaps_per_file_store):
        """Sets the snaps_per_file_store of this Limits.


        :param snaps_per_file_store: The snaps_per_file_store of this Limits.  # noqa: E501
        :type: int
        """

        self._snaps_per_file_store = snaps_per_file_store

    @property
    def ips_per_virtual_server(self):
        """Gets the ips_per_virtual_server of this Limits.  # noqa: E501


        :return: The ips_per_virtual_server of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._ips_per_virtual_server

    @ips_per_virtual_server.setter
    def ips_per_virtual_server(self, ips_per_virtual_server):
        """Sets the ips_per_virtual_server of this Limits.


        :param ips_per_virtual_server: The ips_per_virtual_server of this Limits.  # noqa: E501
        :type: int
        """

        self._ips_per_virtual_server = ips_per_virtual_server

    @property
    def condition_timeout_seconds(self):
        """Gets the condition_timeout_seconds of this Limits.  # noqa: E501


        :return: The condition_timeout_seconds of this Limits.  # noqa: E501
        :rtype: int
        """
        return self._condition_timeout_seconds

    @condition_timeout_seconds.setter
    def condition_timeout_seconds(self, condition_timeout_seconds):
        """Sets the condition_timeout_seconds of this Limits.


        :param condition_timeout_seconds: The condition_timeout_seconds of this Limits.  # noqa: E501
        :type: int
        """

        self._condition_timeout_seconds = condition_timeout_seconds

    @property
    def system_directories(self):
        """Gets the system_directories of this Limits.  # noqa: E501


        :return: The system_directories of this Limits.  # noqa: E501
        :rtype: list[str]
        """
        return self._system_directories

    @system_directories.setter
    def system_directories(self, system_directories):
        """Sets the system_directories of this Limits.


        :param system_directories: The system_directories of this Limits.  # noqa: E501
        :type: list[str]
        """

        self._system_directories = system_directories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Limits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Limits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
