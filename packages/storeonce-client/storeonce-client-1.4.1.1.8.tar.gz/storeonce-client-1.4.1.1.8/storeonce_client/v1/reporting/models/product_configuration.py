# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ProductConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product': 'str',
        'version': 'str',
        'limits': 'Limits',
        'http_server_configuration': 'HTTPServerConfiguration'
    }

    attribute_map = {
        'product': 'product',
        'version': 'version',
        'limits': 'Limits',
        'http_server_configuration': 'HTTPServerConfiguration'
    }

    def __init__(self, product=None, version=None, limits=None, http_server_configuration=None):  # noqa: E501
        """ProductConfiguration - a model defined in Swagger"""  # noqa: E501

        self._product = None
        self._version = None
        self._limits = None
        self._http_server_configuration = None
        self.discriminator = None

        if product is not None:
            self.product = product
        if version is not None:
            self.version = version
        if limits is not None:
            self.limits = limits
        if http_server_configuration is not None:
            self.http_server_configuration = http_server_configuration

    @property
    def product(self):
        """Gets the product of this ProductConfiguration.  # noqa: E501


        :return: The product of this ProductConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductConfiguration.


        :param product: The product of this ProductConfiguration.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def version(self):
        """Gets the version of this ProductConfiguration.  # noqa: E501


        :return: The version of this ProductConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ProductConfiguration.


        :param version: The version of this ProductConfiguration.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def limits(self):
        """Gets the limits of this ProductConfiguration.  # noqa: E501


        :return: The limits of this ProductConfiguration.  # noqa: E501
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this ProductConfiguration.


        :param limits: The limits of this ProductConfiguration.  # noqa: E501
        :type: Limits
        """

        self._limits = limits

    @property
    def http_server_configuration(self):
        """Gets the http_server_configuration of this ProductConfiguration.  # noqa: E501


        :return: The http_server_configuration of this ProductConfiguration.  # noqa: E501
        :rtype: HTTPServerConfiguration
        """
        return self._http_server_configuration

    @http_server_configuration.setter
    def http_server_configuration(self, http_server_configuration):
        """Sets the http_server_configuration of this ProductConfiguration.


        :param http_server_configuration: The http_server_configuration of this ProductConfiguration.  # noqa: E501
        :type: HTTPServerConfiguration
        """

        self._http_server_configuration = http_server_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
