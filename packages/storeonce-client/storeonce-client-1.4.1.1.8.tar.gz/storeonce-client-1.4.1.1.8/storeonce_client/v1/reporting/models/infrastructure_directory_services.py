# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class InfrastructureDirectoryServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i18n_path': 'str',
        'real_bin_path': 'str',
        'real_log_path': 'str',
        'server_keystore_pathname': 'str',
        'fsck_log_path': 'str',
        'ade_bin_path': 'str',
        'real_conf_path': 'str',
        'archive_name': 'str',
        'stores_pathname': 'str',
        'client_keystore_pathname': 'str',
        'client_truststore_pathname': 'str',
        'server_truststore_pathname': 'str',
        'backup_pathname': 'str',
        'csrpath': 'str',
        'real_execute_script_path': 'str',
        'runtime_path': 'str',
        'real_sbin_path': 'str',
        'home_path': 'str',
        'keystore_pathname': 'str'
    }

    attribute_map = {
        'i18n_path': 'i18nPath',
        'real_bin_path': 'realBinPath',
        'real_log_path': 'realLogPath',
        'server_keystore_pathname': 'serverKeystorePathname',
        'fsck_log_path': 'fsckLogPath',
        'ade_bin_path': 'adeBinPath',
        'real_conf_path': 'realConfPath',
        'archive_name': 'archiveName',
        'stores_pathname': 'storesPathname',
        'client_keystore_pathname': 'clientKeystorePathname',
        'client_truststore_pathname': 'clientTruststorePathname',
        'server_truststore_pathname': 'serverTruststorePathname',
        'backup_pathname': 'backupPathname',
        'csrpath': 'csrpath',
        'real_execute_script_path': 'realExecuteScriptPath',
        'runtime_path': 'runtimePath',
        'real_sbin_path': 'realSbinPath',
        'home_path': 'homePath',
        'keystore_pathname': 'keystorePathname'
    }

    def __init__(self, i18n_path=None, real_bin_path=None, real_log_path=None, server_keystore_pathname=None, fsck_log_path=None, ade_bin_path=None, real_conf_path=None, archive_name=None, stores_pathname=None, client_keystore_pathname=None, client_truststore_pathname=None, server_truststore_pathname=None, backup_pathname=None, csrpath=None, real_execute_script_path=None, runtime_path=None, real_sbin_path=None, home_path=None, keystore_pathname=None):  # noqa: E501
        """InfrastructureDirectoryServices - a model defined in Swagger"""  # noqa: E501

        self._i18n_path = None
        self._real_bin_path = None
        self._real_log_path = None
        self._server_keystore_pathname = None
        self._fsck_log_path = None
        self._ade_bin_path = None
        self._real_conf_path = None
        self._archive_name = None
        self._stores_pathname = None
        self._client_keystore_pathname = None
        self._client_truststore_pathname = None
        self._server_truststore_pathname = None
        self._backup_pathname = None
        self._csrpath = None
        self._real_execute_script_path = None
        self._runtime_path = None
        self._real_sbin_path = None
        self._home_path = None
        self._keystore_pathname = None
        self.discriminator = None

        if i18n_path is not None:
            self.i18n_path = i18n_path
        if real_bin_path is not None:
            self.real_bin_path = real_bin_path
        if real_log_path is not None:
            self.real_log_path = real_log_path
        if server_keystore_pathname is not None:
            self.server_keystore_pathname = server_keystore_pathname
        if fsck_log_path is not None:
            self.fsck_log_path = fsck_log_path
        if ade_bin_path is not None:
            self.ade_bin_path = ade_bin_path
        if real_conf_path is not None:
            self.real_conf_path = real_conf_path
        if archive_name is not None:
            self.archive_name = archive_name
        if stores_pathname is not None:
            self.stores_pathname = stores_pathname
        if client_keystore_pathname is not None:
            self.client_keystore_pathname = client_keystore_pathname
        if client_truststore_pathname is not None:
            self.client_truststore_pathname = client_truststore_pathname
        if server_truststore_pathname is not None:
            self.server_truststore_pathname = server_truststore_pathname
        if backup_pathname is not None:
            self.backup_pathname = backup_pathname
        if csrpath is not None:
            self.csrpath = csrpath
        if real_execute_script_path is not None:
            self.real_execute_script_path = real_execute_script_path
        if runtime_path is not None:
            self.runtime_path = runtime_path
        if real_sbin_path is not None:
            self.real_sbin_path = real_sbin_path
        if home_path is not None:
            self.home_path = home_path
        if keystore_pathname is not None:
            self.keystore_pathname = keystore_pathname

    @property
    def i18n_path(self):
        """Gets the i18n_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The i18n_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._i18n_path

    @i18n_path.setter
    def i18n_path(self, i18n_path):
        """Sets the i18n_path of this InfrastructureDirectoryServices.


        :param i18n_path: The i18n_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._i18n_path = i18n_path

    @property
    def real_bin_path(self):
        """Gets the real_bin_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The real_bin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._real_bin_path

    @real_bin_path.setter
    def real_bin_path(self, real_bin_path):
        """Sets the real_bin_path of this InfrastructureDirectoryServices.


        :param real_bin_path: The real_bin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._real_bin_path = real_bin_path

    @property
    def real_log_path(self):
        """Gets the real_log_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The real_log_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._real_log_path

    @real_log_path.setter
    def real_log_path(self, real_log_path):
        """Sets the real_log_path of this InfrastructureDirectoryServices.


        :param real_log_path: The real_log_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._real_log_path = real_log_path

    @property
    def server_keystore_pathname(self):
        """Gets the server_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The server_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._server_keystore_pathname

    @server_keystore_pathname.setter
    def server_keystore_pathname(self, server_keystore_pathname):
        """Sets the server_keystore_pathname of this InfrastructureDirectoryServices.


        :param server_keystore_pathname: The server_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._server_keystore_pathname = server_keystore_pathname

    @property
    def fsck_log_path(self):
        """Gets the fsck_log_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The fsck_log_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._fsck_log_path

    @fsck_log_path.setter
    def fsck_log_path(self, fsck_log_path):
        """Sets the fsck_log_path of this InfrastructureDirectoryServices.


        :param fsck_log_path: The fsck_log_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._fsck_log_path = fsck_log_path

    @property
    def ade_bin_path(self):
        """Gets the ade_bin_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The ade_bin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._ade_bin_path

    @ade_bin_path.setter
    def ade_bin_path(self, ade_bin_path):
        """Sets the ade_bin_path of this InfrastructureDirectoryServices.


        :param ade_bin_path: The ade_bin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._ade_bin_path = ade_bin_path

    @property
    def real_conf_path(self):
        """Gets the real_conf_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The real_conf_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._real_conf_path

    @real_conf_path.setter
    def real_conf_path(self, real_conf_path):
        """Sets the real_conf_path of this InfrastructureDirectoryServices.


        :param real_conf_path: The real_conf_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._real_conf_path = real_conf_path

    @property
    def archive_name(self):
        """Gets the archive_name of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The archive_name of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._archive_name

    @archive_name.setter
    def archive_name(self, archive_name):
        """Sets the archive_name of this InfrastructureDirectoryServices.


        :param archive_name: The archive_name of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._archive_name = archive_name

    @property
    def stores_pathname(self):
        """Gets the stores_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The stores_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._stores_pathname

    @stores_pathname.setter
    def stores_pathname(self, stores_pathname):
        """Sets the stores_pathname of this InfrastructureDirectoryServices.


        :param stores_pathname: The stores_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._stores_pathname = stores_pathname

    @property
    def client_keystore_pathname(self):
        """Gets the client_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The client_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._client_keystore_pathname

    @client_keystore_pathname.setter
    def client_keystore_pathname(self, client_keystore_pathname):
        """Sets the client_keystore_pathname of this InfrastructureDirectoryServices.


        :param client_keystore_pathname: The client_keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._client_keystore_pathname = client_keystore_pathname

    @property
    def client_truststore_pathname(self):
        """Gets the client_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The client_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._client_truststore_pathname

    @client_truststore_pathname.setter
    def client_truststore_pathname(self, client_truststore_pathname):
        """Sets the client_truststore_pathname of this InfrastructureDirectoryServices.


        :param client_truststore_pathname: The client_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._client_truststore_pathname = client_truststore_pathname

    @property
    def server_truststore_pathname(self):
        """Gets the server_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The server_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._server_truststore_pathname

    @server_truststore_pathname.setter
    def server_truststore_pathname(self, server_truststore_pathname):
        """Sets the server_truststore_pathname of this InfrastructureDirectoryServices.


        :param server_truststore_pathname: The server_truststore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._server_truststore_pathname = server_truststore_pathname

    @property
    def backup_pathname(self):
        """Gets the backup_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The backup_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._backup_pathname

    @backup_pathname.setter
    def backup_pathname(self, backup_pathname):
        """Sets the backup_pathname of this InfrastructureDirectoryServices.


        :param backup_pathname: The backup_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._backup_pathname = backup_pathname

    @property
    def csrpath(self):
        """Gets the csrpath of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The csrpath of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._csrpath

    @csrpath.setter
    def csrpath(self, csrpath):
        """Sets the csrpath of this InfrastructureDirectoryServices.


        :param csrpath: The csrpath of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._csrpath = csrpath

    @property
    def real_execute_script_path(self):
        """Gets the real_execute_script_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The real_execute_script_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._real_execute_script_path

    @real_execute_script_path.setter
    def real_execute_script_path(self, real_execute_script_path):
        """Sets the real_execute_script_path of this InfrastructureDirectoryServices.


        :param real_execute_script_path: The real_execute_script_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._real_execute_script_path = real_execute_script_path

    @property
    def runtime_path(self):
        """Gets the runtime_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The runtime_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._runtime_path

    @runtime_path.setter
    def runtime_path(self, runtime_path):
        """Sets the runtime_path of this InfrastructureDirectoryServices.


        :param runtime_path: The runtime_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._runtime_path = runtime_path

    @property
    def real_sbin_path(self):
        """Gets the real_sbin_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The real_sbin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._real_sbin_path

    @real_sbin_path.setter
    def real_sbin_path(self, real_sbin_path):
        """Sets the real_sbin_path of this InfrastructureDirectoryServices.


        :param real_sbin_path: The real_sbin_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._real_sbin_path = real_sbin_path

    @property
    def home_path(self):
        """Gets the home_path of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The home_path of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._home_path

    @home_path.setter
    def home_path(self, home_path):
        """Sets the home_path of this InfrastructureDirectoryServices.


        :param home_path: The home_path of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._home_path = home_path

    @property
    def keystore_pathname(self):
        """Gets the keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501


        :return: The keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :rtype: str
        """
        return self._keystore_pathname

    @keystore_pathname.setter
    def keystore_pathname(self, keystore_pathname):
        """Sets the keystore_pathname of this InfrastructureDirectoryServices.


        :param keystore_pathname: The keystore_pathname of this InfrastructureDirectoryServices.  # noqa: E501
        :type: str
        """

        self._keystore_pathname = keystore_pathname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfrastructureDirectoryServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfrastructureDirectoryServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
