# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SSLContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'dict(str, object)',
        'protocol': 'str',
        'server_socket_factory': 'SSLServerSocketFactory',
        'server_session_context': 'SSLSessionContext',
        'client_session_context': 'SSLSessionContext',
        'default_ssl_parameters': 'SSLParameters',
        'supported_ssl_parameters': 'SSLParameters',
        'socket_factory': 'SSLSocketFactory'
    }

    attribute_map = {
        'provider': 'provider',
        'protocol': 'protocol',
        'server_socket_factory': 'serverSocketFactory',
        'server_session_context': 'serverSessionContext',
        'client_session_context': 'clientSessionContext',
        'default_ssl_parameters': 'defaultSSLParameters',
        'supported_ssl_parameters': 'supportedSSLParameters',
        'socket_factory': 'socketFactory'
    }

    def __init__(self, provider=None, protocol=None, server_socket_factory=None, server_session_context=None, client_session_context=None, default_ssl_parameters=None, supported_ssl_parameters=None, socket_factory=None):  # noqa: E501
        """SSLContext - a model defined in Swagger"""  # noqa: E501

        self._provider = None
        self._protocol = None
        self._server_socket_factory = None
        self._server_session_context = None
        self._client_session_context = None
        self._default_ssl_parameters = None
        self._supported_ssl_parameters = None
        self._socket_factory = None
        self.discriminator = None

        if provider is not None:
            self.provider = provider
        if protocol is not None:
            self.protocol = protocol
        if server_socket_factory is not None:
            self.server_socket_factory = server_socket_factory
        if server_session_context is not None:
            self.server_session_context = server_session_context
        if client_session_context is not None:
            self.client_session_context = client_session_context
        if default_ssl_parameters is not None:
            self.default_ssl_parameters = default_ssl_parameters
        if supported_ssl_parameters is not None:
            self.supported_ssl_parameters = supported_ssl_parameters
        if socket_factory is not None:
            self.socket_factory = socket_factory

    @property
    def provider(self):
        """Gets the provider of this SSLContext.  # noqa: E501


        :return: The provider of this SSLContext.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SSLContext.


        :param provider: The provider of this SSLContext.  # noqa: E501
        :type: dict(str, object)
        """

        self._provider = provider

    @property
    def protocol(self):
        """Gets the protocol of this SSLContext.  # noqa: E501


        :return: The protocol of this SSLContext.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SSLContext.


        :param protocol: The protocol of this SSLContext.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def server_socket_factory(self):
        """Gets the server_socket_factory of this SSLContext.  # noqa: E501


        :return: The server_socket_factory of this SSLContext.  # noqa: E501
        :rtype: SSLServerSocketFactory
        """
        return self._server_socket_factory

    @server_socket_factory.setter
    def server_socket_factory(self, server_socket_factory):
        """Sets the server_socket_factory of this SSLContext.


        :param server_socket_factory: The server_socket_factory of this SSLContext.  # noqa: E501
        :type: SSLServerSocketFactory
        """

        self._server_socket_factory = server_socket_factory

    @property
    def server_session_context(self):
        """Gets the server_session_context of this SSLContext.  # noqa: E501


        :return: The server_session_context of this SSLContext.  # noqa: E501
        :rtype: SSLSessionContext
        """
        return self._server_session_context

    @server_session_context.setter
    def server_session_context(self, server_session_context):
        """Sets the server_session_context of this SSLContext.


        :param server_session_context: The server_session_context of this SSLContext.  # noqa: E501
        :type: SSLSessionContext
        """

        self._server_session_context = server_session_context

    @property
    def client_session_context(self):
        """Gets the client_session_context of this SSLContext.  # noqa: E501


        :return: The client_session_context of this SSLContext.  # noqa: E501
        :rtype: SSLSessionContext
        """
        return self._client_session_context

    @client_session_context.setter
    def client_session_context(self, client_session_context):
        """Sets the client_session_context of this SSLContext.


        :param client_session_context: The client_session_context of this SSLContext.  # noqa: E501
        :type: SSLSessionContext
        """

        self._client_session_context = client_session_context

    @property
    def default_ssl_parameters(self):
        """Gets the default_ssl_parameters of this SSLContext.  # noqa: E501


        :return: The default_ssl_parameters of this SSLContext.  # noqa: E501
        :rtype: SSLParameters
        """
        return self._default_ssl_parameters

    @default_ssl_parameters.setter
    def default_ssl_parameters(self, default_ssl_parameters):
        """Sets the default_ssl_parameters of this SSLContext.


        :param default_ssl_parameters: The default_ssl_parameters of this SSLContext.  # noqa: E501
        :type: SSLParameters
        """

        self._default_ssl_parameters = default_ssl_parameters

    @property
    def supported_ssl_parameters(self):
        """Gets the supported_ssl_parameters of this SSLContext.  # noqa: E501


        :return: The supported_ssl_parameters of this SSLContext.  # noqa: E501
        :rtype: SSLParameters
        """
        return self._supported_ssl_parameters

    @supported_ssl_parameters.setter
    def supported_ssl_parameters(self, supported_ssl_parameters):
        """Sets the supported_ssl_parameters of this SSLContext.


        :param supported_ssl_parameters: The supported_ssl_parameters of this SSLContext.  # noqa: E501
        :type: SSLParameters
        """

        self._supported_ssl_parameters = supported_ssl_parameters

    @property
    def socket_factory(self):
        """Gets the socket_factory of this SSLContext.  # noqa: E501


        :return: The socket_factory of this SSLContext.  # noqa: E501
        :rtype: SSLSocketFactory
        """
        return self._socket_factory

    @socket_factory.setter
    def socket_factory(self, socket_factory):
        """Sets the socket_factory of this SSLContext.


        :param socket_factory: The socket_factory of this SSLContext.  # noqa: E501
        :type: SSLSocketFactory
        """

        self._socket_factory = socket_factory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSLContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSLContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
