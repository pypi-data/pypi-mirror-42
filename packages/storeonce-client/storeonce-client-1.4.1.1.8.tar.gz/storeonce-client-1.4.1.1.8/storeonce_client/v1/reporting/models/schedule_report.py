# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ScheduleReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'description': 'str',
        'enabled': 'bool',
        'appliance_report_type': 'int',
        'appliance_report_type_string': 'str',
        'device_report_type': 'int',
        'device_report_type_string': 'str',
        'time_period': 'int',
        'time_period_string': 'str',
        'email_addresses': 'list[str]',
        'schedule_frequency': 'int',
        'schedule_frequency_string': 'str',
        'frequency': 'str',
        'target_type': 'int',
        'target_type_string': 'str',
        'target_appliances': 'list[ApplianceDetails]',
        'target_devices': 'list[TargetDevices]',
        'start_date': 'datetime',
        'end_date': 'datetime'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'enabled': 'enabled',
        'appliance_report_type': 'applianceReportType',
        'appliance_report_type_string': 'applianceReportTypeString',
        'device_report_type': 'deviceReportType',
        'device_report_type_string': 'deviceReportTypeString',
        'time_period': 'timePeriod',
        'time_period_string': 'timePeriodString',
        'email_addresses': 'emailAddresses',
        'schedule_frequency': 'scheduleFrequency',
        'schedule_frequency_string': 'scheduleFrequencyString',
        'frequency': 'frequency',
        'target_type': 'targetType',
        'target_type_string': 'targetTypeString',
        'target_appliances': 'targetAppliances',
        'target_devices': 'targetDevices',
        'start_date': 'startDate',
        'end_date': 'endDate'
    }

    def __init__(self, uuid=None, name=None, description=None, enabled=False, appliance_report_type=None, appliance_report_type_string=None, device_report_type=None, device_report_type_string=None, time_period=None, time_period_string=None, email_addresses=None, schedule_frequency=None, schedule_frequency_string=None, frequency=None, target_type=None, target_type_string=None, target_appliances=None, target_devices=None, start_date=None, end_date=None):  # noqa: E501
        """ScheduleReport - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._name = None
        self._description = None
        self._enabled = None
        self._appliance_report_type = None
        self._appliance_report_type_string = None
        self._device_report_type = None
        self._device_report_type_string = None
        self._time_period = None
        self._time_period_string = None
        self._email_addresses = None
        self._schedule_frequency = None
        self._schedule_frequency_string = None
        self._frequency = None
        self._target_type = None
        self._target_type_string = None
        self._target_appliances = None
        self._target_devices = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if appliance_report_type is not None:
            self.appliance_report_type = appliance_report_type
        if appliance_report_type_string is not None:
            self.appliance_report_type_string = appliance_report_type_string
        if device_report_type is not None:
            self.device_report_type = device_report_type
        if device_report_type_string is not None:
            self.device_report_type_string = device_report_type_string
        if time_period is not None:
            self.time_period = time_period
        if time_period_string is not None:
            self.time_period_string = time_period_string
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if schedule_frequency is not None:
            self.schedule_frequency = schedule_frequency
        if schedule_frequency_string is not None:
            self.schedule_frequency_string = schedule_frequency_string
        if frequency is not None:
            self.frequency = frequency
        if target_type is not None:
            self.target_type = target_type
        if target_type_string is not None:
            self.target_type_string = target_type_string
        if target_appliances is not None:
            self.target_appliances = target_appliances
        if target_devices is not None:
            self.target_devices = target_devices
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def uuid(self):
        """Gets the uuid of this ScheduleReport.  # noqa: E501

        UUID of the Schedule Report  # noqa: E501

        :return: The uuid of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ScheduleReport.

        UUID of the Schedule Report  # noqa: E501

        :param uuid: The uuid of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this ScheduleReport.  # noqa: E501

        Name of the Scheduled Report  # noqa: E501

        :return: The name of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScheduleReport.

        Name of the Scheduled Report  # noqa: E501

        :param name: The name of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ScheduleReport.  # noqa: E501

        Description of the Scheduled Report  # noqa: E501

        :return: The description of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScheduleReport.

        Description of the Scheduled Report  # noqa: E501

        :param description: The description of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this ScheduleReport.  # noqa: E501

        This is a localise text for report type  # noqa: E501

        :return: The enabled of this ScheduleReport.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ScheduleReport.

        This is a localise text for report type  # noqa: E501

        :param enabled: The enabled of this ScheduleReport.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def appliance_report_type(self):
        """Gets the appliance_report_type of this ScheduleReport.  # noqa: E501

        Report to be sent as part of this schedule. Only valid if target type is Appliances.  # noqa: E501

        :return: The appliance_report_type of this ScheduleReport.  # noqa: E501
        :rtype: int
        """
        return self._appliance_report_type

    @appliance_report_type.setter
    def appliance_report_type(self, appliance_report_type):
        """Sets the appliance_report_type of this ScheduleReport.

        Report to be sent as part of this schedule. Only valid if target type is Appliances.  # noqa: E501

        :param appliance_report_type: The appliance_report_type of this ScheduleReport.  # noqa: E501
        :type: int
        """

        self._appliance_report_type = appliance_report_type

    @property
    def appliance_report_type_string(self):
        """Gets the appliance_report_type_string of this ScheduleReport.  # noqa: E501

        This is a localise text for report type. Only valid if target type is Appliances  # noqa: E501

        :return: The appliance_report_type_string of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._appliance_report_type_string

    @appliance_report_type_string.setter
    def appliance_report_type_string(self, appliance_report_type_string):
        """Sets the appliance_report_type_string of this ScheduleReport.

        This is a localise text for report type. Only valid if target type is Appliances  # noqa: E501

        :param appliance_report_type_string: The appliance_report_type_string of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._appliance_report_type_string = appliance_report_type_string

    @property
    def device_report_type(self):
        """Gets the device_report_type of this ScheduleReport.  # noqa: E501

        Report to be sent as part of this schedule. Only valid if target type is Devices.  # noqa: E501

        :return: The device_report_type of this ScheduleReport.  # noqa: E501
        :rtype: int
        """
        return self._device_report_type

    @device_report_type.setter
    def device_report_type(self, device_report_type):
        """Sets the device_report_type of this ScheduleReport.

        Report to be sent as part of this schedule. Only valid if target type is Devices.  # noqa: E501

        :param device_report_type: The device_report_type of this ScheduleReport.  # noqa: E501
        :type: int
        """

        self._device_report_type = device_report_type

    @property
    def device_report_type_string(self):
        """Gets the device_report_type_string of this ScheduleReport.  # noqa: E501

        This is a localise text for report type. Only valid if target type is Devices.  # noqa: E501

        :return: The device_report_type_string of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._device_report_type_string

    @device_report_type_string.setter
    def device_report_type_string(self, device_report_type_string):
        """Sets the device_report_type_string of this ScheduleReport.

        This is a localise text for report type. Only valid if target type is Devices.  # noqa: E501

        :param device_report_type_string: The device_report_type_string of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._device_report_type_string = device_report_type_string

    @property
    def time_period(self):
        """Gets the time_period of this ScheduleReport.  # noqa: E501

        Time Period for which the report would be generated  # noqa: E501

        :return: The time_period of this ScheduleReport.  # noqa: E501
        :rtype: int
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this ScheduleReport.

        Time Period for which the report would be generated  # noqa: E501

        :param time_period: The time_period of this ScheduleReport.  # noqa: E501
        :type: int
        """

        self._time_period = time_period

    @property
    def time_period_string(self):
        """Gets the time_period_string of this ScheduleReport.  # noqa: E501

        Time Period for which the report would be generated.  # noqa: E501

        :return: The time_period_string of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._time_period_string

    @time_period_string.setter
    def time_period_string(self, time_period_string):
        """Sets the time_period_string of this ScheduleReport.

        Time Period for which the report would be generated.  # noqa: E501

        :param time_period_string: The time_period_string of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._time_period_string = time_period_string

    @property
    def email_addresses(self):
        """Gets the email_addresses of this ScheduleReport.  # noqa: E501

        List of email addresses.  # noqa: E501

        :return: The email_addresses of this ScheduleReport.  # noqa: E501
        :rtype: list[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this ScheduleReport.

        List of email addresses.  # noqa: E501

        :param email_addresses: The email_addresses of this ScheduleReport.  # noqa: E501
        :type: list[str]
        """

        self._email_addresses = email_addresses

    @property
    def schedule_frequency(self):
        """Gets the schedule_frequency of this ScheduleReport.  # noqa: E501

        It is the frequency of the schedule.  # noqa: E501

        :return: The schedule_frequency of this ScheduleReport.  # noqa: E501
        :rtype: int
        """
        return self._schedule_frequency

    @schedule_frequency.setter
    def schedule_frequency(self, schedule_frequency):
        """Sets the schedule_frequency of this ScheduleReport.

        It is the frequency of the schedule.  # noqa: E501

        :param schedule_frequency: The schedule_frequency of this ScheduleReport.  # noqa: E501
        :type: int
        """

        self._schedule_frequency = schedule_frequency

    @property
    def schedule_frequency_string(self):
        """Gets the schedule_frequency_string of this ScheduleReport.  # noqa: E501

        This is a localise text for schedule frequency  # noqa: E501

        :return: The schedule_frequency_string of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._schedule_frequency_string

    @schedule_frequency_string.setter
    def schedule_frequency_string(self, schedule_frequency_string):
        """Sets the schedule_frequency_string of this ScheduleReport.

        This is a localise text for schedule frequency  # noqa: E501

        :param schedule_frequency_string: The schedule_frequency_string of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._schedule_frequency_string = schedule_frequency_string

    @property
    def frequency(self):
        """Gets the frequency of this ScheduleReport.  # noqa: E501

        Quartz cron expression used to create this schedule.  # noqa: E501

        :return: The frequency of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ScheduleReport.

        Quartz cron expression used to create this schedule.  # noqa: E501

        :param frequency: The frequency of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def target_type(self):
        """Gets the target_type of this ScheduleReport.  # noqa: E501

        Target of this report either Appliances or Devices  # noqa: E501

        :return: The target_type of this ScheduleReport.  # noqa: E501
        :rtype: int
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this ScheduleReport.

        Target of this report either Appliances or Devices  # noqa: E501

        :param target_type: The target_type of this ScheduleReport.  # noqa: E501
        :type: int
        """

        self._target_type = target_type

    @property
    def target_type_string(self):
        """Gets the target_type_string of this ScheduleReport.  # noqa: E501

        This is a localise text for report target  # noqa: E501

        :return: The target_type_string of this ScheduleReport.  # noqa: E501
        :rtype: str
        """
        return self._target_type_string

    @target_type_string.setter
    def target_type_string(self, target_type_string):
        """Sets the target_type_string of this ScheduleReport.

        This is a localise text for report target  # noqa: E501

        :param target_type_string: The target_type_string of this ScheduleReport.  # noqa: E501
        :type: str
        """

        self._target_type_string = target_type_string

    @property
    def target_appliances(self):
        """Gets the target_appliances of this ScheduleReport.  # noqa: E501

        Appliances for which the report is to be generated. Only applicable if targetType is APPLIANCES_TARGET  # noqa: E501

        :return: The target_appliances of this ScheduleReport.  # noqa: E501
        :rtype: list[ApplianceDetails]
        """
        return self._target_appliances

    @target_appliances.setter
    def target_appliances(self, target_appliances):
        """Sets the target_appliances of this ScheduleReport.

        Appliances for which the report is to be generated. Only applicable if targetType is APPLIANCES_TARGET  # noqa: E501

        :param target_appliances: The target_appliances of this ScheduleReport.  # noqa: E501
        :type: list[ApplianceDetails]
        """

        self._target_appliances = target_appliances

    @property
    def target_devices(self):
        """Gets the target_devices of this ScheduleReport.  # noqa: E501

        Device for which the report is to be generated. Only applicable if targetType is DEVICES_TARGET  # noqa: E501

        :return: The target_devices of this ScheduleReport.  # noqa: E501
        :rtype: list[TargetDevices]
        """
        return self._target_devices

    @target_devices.setter
    def target_devices(self, target_devices):
        """Sets the target_devices of this ScheduleReport.

        Device for which the report is to be generated. Only applicable if targetType is DEVICES_TARGET  # noqa: E501

        :param target_devices: The target_devices of this ScheduleReport.  # noqa: E501
        :type: list[TargetDevices]
        """

        self._target_devices = target_devices

    @property
    def start_date(self):
        """Gets the start_date of this ScheduleReport.  # noqa: E501

        Start date of schedule  # noqa: E501

        :return: The start_date of this ScheduleReport.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ScheduleReport.

        Start date of schedule  # noqa: E501

        :param start_date: The start_date of this ScheduleReport.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ScheduleReport.  # noqa: E501

        End date of schedule  # noqa: E501

        :return: The end_date of this ScheduleReport.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ScheduleReport.

        End date of schedule  # noqa: E501

        :param end_date: The end_date of this ScheduleReport.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduleReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
