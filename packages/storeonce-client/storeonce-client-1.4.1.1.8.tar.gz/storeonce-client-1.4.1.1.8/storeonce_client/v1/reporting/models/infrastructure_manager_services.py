# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class InfrastructureManagerServices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_name': 'str',
        'active_node': 'Node',
        'cluster_vif_address': 'str',
        'cluster_vif_device': 'str',
        'server_port': 'int',
        'server_secure_port': 'int',
        'product_configuration': 'ProductConfiguration',
        'infrastructure_directory_services': 'InfrastructureDirectoryServices',
        'registered_cluster_nodes': 'list[Node]',
        'local_node': 'Node',
        'product_configuration_manager': 'ProductConfigurationManager'
    }

    attribute_map = {
        'cluster_name': 'clusterName',
        'active_node': 'activeNode',
        'cluster_vif_address': 'clusterVifAddress',
        'cluster_vif_device': 'clusterVifDevice',
        'server_port': 'serverPort',
        'server_secure_port': 'serverSecurePort',
        'product_configuration': 'productConfiguration',
        'infrastructure_directory_services': 'infrastructureDirectoryServices',
        'registered_cluster_nodes': 'registeredClusterNodes',
        'local_node': 'localNode',
        'product_configuration_manager': 'productConfigurationManager'
    }

    def __init__(self, cluster_name=None, active_node=None, cluster_vif_address=None, cluster_vif_device=None, server_port=None, server_secure_port=None, product_configuration=None, infrastructure_directory_services=None, registered_cluster_nodes=None, local_node=None, product_configuration_manager=None):  # noqa: E501
        """InfrastructureManagerServices - a model defined in Swagger"""  # noqa: E501

        self._cluster_name = None
        self._active_node = None
        self._cluster_vif_address = None
        self._cluster_vif_device = None
        self._server_port = None
        self._server_secure_port = None
        self._product_configuration = None
        self._infrastructure_directory_services = None
        self._registered_cluster_nodes = None
        self._local_node = None
        self._product_configuration_manager = None
        self.discriminator = None

        if cluster_name is not None:
            self.cluster_name = cluster_name
        if active_node is not None:
            self.active_node = active_node
        if cluster_vif_address is not None:
            self.cluster_vif_address = cluster_vif_address
        if cluster_vif_device is not None:
            self.cluster_vif_device = cluster_vif_device
        if server_port is not None:
            self.server_port = server_port
        if server_secure_port is not None:
            self.server_secure_port = server_secure_port
        if product_configuration is not None:
            self.product_configuration = product_configuration
        if infrastructure_directory_services is not None:
            self.infrastructure_directory_services = infrastructure_directory_services
        if registered_cluster_nodes is not None:
            self.registered_cluster_nodes = registered_cluster_nodes
        if local_node is not None:
            self.local_node = local_node
        if product_configuration_manager is not None:
            self.product_configuration_manager = product_configuration_manager

    @property
    def cluster_name(self):
        """Gets the cluster_name of this InfrastructureManagerServices.  # noqa: E501


        :return: The cluster_name of this InfrastructureManagerServices.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this InfrastructureManagerServices.


        :param cluster_name: The cluster_name of this InfrastructureManagerServices.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def active_node(self):
        """Gets the active_node of this InfrastructureManagerServices.  # noqa: E501


        :return: The active_node of this InfrastructureManagerServices.  # noqa: E501
        :rtype: Node
        """
        return self._active_node

    @active_node.setter
    def active_node(self, active_node):
        """Sets the active_node of this InfrastructureManagerServices.


        :param active_node: The active_node of this InfrastructureManagerServices.  # noqa: E501
        :type: Node
        """

        self._active_node = active_node

    @property
    def cluster_vif_address(self):
        """Gets the cluster_vif_address of this InfrastructureManagerServices.  # noqa: E501


        :return: The cluster_vif_address of this InfrastructureManagerServices.  # noqa: E501
        :rtype: str
        """
        return self._cluster_vif_address

    @cluster_vif_address.setter
    def cluster_vif_address(self, cluster_vif_address):
        """Sets the cluster_vif_address of this InfrastructureManagerServices.


        :param cluster_vif_address: The cluster_vif_address of this InfrastructureManagerServices.  # noqa: E501
        :type: str
        """

        self._cluster_vif_address = cluster_vif_address

    @property
    def cluster_vif_device(self):
        """Gets the cluster_vif_device of this InfrastructureManagerServices.  # noqa: E501


        :return: The cluster_vif_device of this InfrastructureManagerServices.  # noqa: E501
        :rtype: str
        """
        return self._cluster_vif_device

    @cluster_vif_device.setter
    def cluster_vif_device(self, cluster_vif_device):
        """Sets the cluster_vif_device of this InfrastructureManagerServices.


        :param cluster_vif_device: The cluster_vif_device of this InfrastructureManagerServices.  # noqa: E501
        :type: str
        """

        self._cluster_vif_device = cluster_vif_device

    @property
    def server_port(self):
        """Gets the server_port of this InfrastructureManagerServices.  # noqa: E501


        :return: The server_port of this InfrastructureManagerServices.  # noqa: E501
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this InfrastructureManagerServices.


        :param server_port: The server_port of this InfrastructureManagerServices.  # noqa: E501
        :type: int
        """

        self._server_port = server_port

    @property
    def server_secure_port(self):
        """Gets the server_secure_port of this InfrastructureManagerServices.  # noqa: E501


        :return: The server_secure_port of this InfrastructureManagerServices.  # noqa: E501
        :rtype: int
        """
        return self._server_secure_port

    @server_secure_port.setter
    def server_secure_port(self, server_secure_port):
        """Sets the server_secure_port of this InfrastructureManagerServices.


        :param server_secure_port: The server_secure_port of this InfrastructureManagerServices.  # noqa: E501
        :type: int
        """

        self._server_secure_port = server_secure_port

    @property
    def product_configuration(self):
        """Gets the product_configuration of this InfrastructureManagerServices.  # noqa: E501


        :return: The product_configuration of this InfrastructureManagerServices.  # noqa: E501
        :rtype: ProductConfiguration
        """
        return self._product_configuration

    @product_configuration.setter
    def product_configuration(self, product_configuration):
        """Sets the product_configuration of this InfrastructureManagerServices.


        :param product_configuration: The product_configuration of this InfrastructureManagerServices.  # noqa: E501
        :type: ProductConfiguration
        """

        self._product_configuration = product_configuration

    @property
    def infrastructure_directory_services(self):
        """Gets the infrastructure_directory_services of this InfrastructureManagerServices.  # noqa: E501


        :return: The infrastructure_directory_services of this InfrastructureManagerServices.  # noqa: E501
        :rtype: InfrastructureDirectoryServices
        """
        return self._infrastructure_directory_services

    @infrastructure_directory_services.setter
    def infrastructure_directory_services(self, infrastructure_directory_services):
        """Sets the infrastructure_directory_services of this InfrastructureManagerServices.


        :param infrastructure_directory_services: The infrastructure_directory_services of this InfrastructureManagerServices.  # noqa: E501
        :type: InfrastructureDirectoryServices
        """

        self._infrastructure_directory_services = infrastructure_directory_services

    @property
    def registered_cluster_nodes(self):
        """Gets the registered_cluster_nodes of this InfrastructureManagerServices.  # noqa: E501


        :return: The registered_cluster_nodes of this InfrastructureManagerServices.  # noqa: E501
        :rtype: list[Node]
        """
        return self._registered_cluster_nodes

    @registered_cluster_nodes.setter
    def registered_cluster_nodes(self, registered_cluster_nodes):
        """Sets the registered_cluster_nodes of this InfrastructureManagerServices.


        :param registered_cluster_nodes: The registered_cluster_nodes of this InfrastructureManagerServices.  # noqa: E501
        :type: list[Node]
        """

        self._registered_cluster_nodes = registered_cluster_nodes

    @property
    def local_node(self):
        """Gets the local_node of this InfrastructureManagerServices.  # noqa: E501


        :return: The local_node of this InfrastructureManagerServices.  # noqa: E501
        :rtype: Node
        """
        return self._local_node

    @local_node.setter
    def local_node(self, local_node):
        """Sets the local_node of this InfrastructureManagerServices.


        :param local_node: The local_node of this InfrastructureManagerServices.  # noqa: E501
        :type: Node
        """

        self._local_node = local_node

    @property
    def product_configuration_manager(self):
        """Gets the product_configuration_manager of this InfrastructureManagerServices.  # noqa: E501


        :return: The product_configuration_manager of this InfrastructureManagerServices.  # noqa: E501
        :rtype: ProductConfigurationManager
        """
        return self._product_configuration_manager

    @product_configuration_manager.setter
    def product_configuration_manager(self, product_configuration_manager):
        """Sets the product_configuration_manager of this InfrastructureManagerServices.


        :param product_configuration_manager: The product_configuration_manager of this InfrastructureManagerServices.  # noqa: E501
        :type: ProductConfigurationManager
        """

        self._product_configuration_manager = product_configuration_manager

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfrastructureManagerServices, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfrastructureManagerServices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
