# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class ScheduledReportSubresourceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_schedule_report(self, body, **kwargs):  # noqa: E501
        """Create a new Schedule Report  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_schedule_report(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param ScheduleReport body: New Schedule Report to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.create_schedule_report_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_schedule_report_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_schedule_report_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new Schedule Report  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.create_schedule_report_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param ScheduleReport body: New Schedule Report to be created (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_schedule_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_schedule_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/reporting/scheduled-reports/configs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_scheduled_report(self, config_id, **kwargs):  # noqa: E501
        """Delete a Scheduled Report with the given uuid  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_scheduled_report(config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str config_id: UUID of the Scheduled Report to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_scheduled_report_with_http_info(config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scheduled_report_with_http_info(config_id, **kwargs)  # noqa: E501
            return data

    def delete_scheduled_report_with_http_info(self, config_id, **kwargs):  # noqa: E501
        """Delete a Scheduled Report with the given uuid  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_scheduled_report_with_http_info(config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str config_id: UUID of the Scheduled Report to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `delete_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/reporting/scheduled-reports/configs/config/{config-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_scheduled_reports(self, **kwargs):  # noqa: E501
        """Get all Scheduled Reports  # noqa: E501

        Gets all Scheduled Reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_scheduled_reports(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_all_scheduled_reports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_scheduled_reports_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_scheduled_reports_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Scheduled Reports  # noqa: E501

        Gets all Scheduled Reports  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_all_scheduled_reports_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_scheduled_reports" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/reporting/scheduled-reports/configs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Collection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scheduled_report(self, config_id, **kwargs):  # noqa: E501
        """Retrieve a Scheduled Report with the given uuid  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scheduled_report(config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str config_id: UUID of the Scheduled Report to be retrieved (required)
        :return: ScheduleReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_scheduled_report_with_http_info(config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scheduled_report_with_http_info(config_id, **kwargs)  # noqa: E501
            return data

    def get_scheduled_report_with_http_info(self, config_id, **kwargs):  # noqa: E501
        """Retrieve a Scheduled Report with the given uuid  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_scheduled_report_with_http_info(config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str config_id: UUID of the Scheduled Report to be retrieved (required)
        :return: ScheduleReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `get_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/reporting/scheduled-reports/configs/config/{config-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScheduleReport',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_scheduled_report(self, body, config_id, **kwargs):  # noqa: E501
        """Modify the specififed Scheduled Report  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_scheduled_report(body, config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param ScheduleReport body: Updated Scheduled Report (required)
        :param str config_id: UUID of the Scheduled Report to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.update_scheduled_report_with_http_info(body, config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_scheduled_report_with_http_info(body, config_id, **kwargs)  # noqa: E501
            return data

    def update_scheduled_report_with_http_info(self, body, config_id, **kwargs):  # noqa: E501
        """Modify the specififed Scheduled Report  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.update_scheduled_report_with_http_info(body, config_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param ScheduleReport body: Updated Scheduled Report (required)
        :param str config_id: UUID of the Scheduled Report to be updated (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'config_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scheduled_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_scheduled_report`")  # noqa: E501
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `update_scheduled_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'config_id' in params:
            path_params['config-id'] = params['config_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/reporting/scheduled-reports/configs/config/{config-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
