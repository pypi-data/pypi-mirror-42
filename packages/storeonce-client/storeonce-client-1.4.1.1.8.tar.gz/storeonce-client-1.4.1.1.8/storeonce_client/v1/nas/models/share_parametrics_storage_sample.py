# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ShareParametricsStorageSample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'int',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'num_inodes': 'int',
        'dedupe_ratio': 'float',
        'timestamp': 'str'
    }

    attribute_map = {
        'period': 'period',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'num_inodes': 'numInodes',
        'dedupe_ratio': 'dedupeRatio',
        'timestamp': 'timestamp'
    }

    def __init__(self, period=None, user_bytes=None, disk_bytes=None, num_inodes=None, dedupe_ratio=None, timestamp=None):  # noqa: E501
        """ShareParametricsStorageSample - a model defined in Swagger"""  # noqa: E501

        self._period = None
        self._user_bytes = None
        self._disk_bytes = None
        self._num_inodes = None
        self._dedupe_ratio = None
        self._timestamp = None
        self.discriminator = None

        if period is not None:
            self.period = period
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if num_inodes is not None:
            self.num_inodes = num_inodes
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def period(self):
        """Gets the period of this ShareParametricsStorageSample.  # noqa: E501

        Period this sample represents, in seconds  # noqa: E501

        :return: The period of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ShareParametricsStorageSample.

        Period this sample represents, in seconds  # noqa: E501

        :param period: The period of this ShareParametricsStorageSample.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def user_bytes(self):
        """Gets the user_bytes of this ShareParametricsStorageSample.  # noqa: E501

        Amount of user data stored in Bytes  # noqa: E501

        :return: The user_bytes of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this ShareParametricsStorageSample.

        Amount of user data stored in Bytes  # noqa: E501

        :param user_bytes: The user_bytes of this ShareParametricsStorageSample.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this ShareParametricsStorageSample.  # noqa: E501

        Amount of disk capacity used in Bytes  # noqa: E501

        :return: The disk_bytes of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this ShareParametricsStorageSample.

        Amount of disk capacity used in Bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this ShareParametricsStorageSample.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def num_inodes(self):
        """Gets the num_inodes of this ShareParametricsStorageSample.  # noqa: E501

        Number of files and directories (inodes).  # noqa: E501

        :return: The num_inodes of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: int
        """
        return self._num_inodes

    @num_inodes.setter
    def num_inodes(self, num_inodes):
        """Sets the num_inodes of this ShareParametricsStorageSample.

        Number of files and directories (inodes).  # noqa: E501

        :param num_inodes: The num_inodes of this ShareParametricsStorageSample.  # noqa: E501
        :type: int
        """

        self._num_inodes = num_inodes

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this ShareParametricsStorageSample.  # noqa: E501

        The dedupe ratio of share.  # noqa: E501

        :return: The dedupe_ratio of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this ShareParametricsStorageSample.

        The dedupe ratio of share.  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this ShareParametricsStorageSample.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def timestamp(self):
        """Gets the timestamp of this ShareParametricsStorageSample.  # noqa: E501

        Timestamp for the metric sample  # noqa: E501

        :return: The timestamp of this ShareParametricsStorageSample.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ShareParametricsStorageSample.

        Timestamp for the metric sample  # noqa: E501

        :param timestamp: The timestamp of this ShareParametricsStorageSample.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareParametricsStorageSample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareParametricsStorageSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
