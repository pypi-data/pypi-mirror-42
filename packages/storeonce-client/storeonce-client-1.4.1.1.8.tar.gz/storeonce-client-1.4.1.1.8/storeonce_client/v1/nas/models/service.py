# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'health_level': 'int',
        'health_level_string': 'L10nStringStruct',
        'nas_status': 'int',
        'nas_status_string': 'L10nStringStruct',
        'rep_health_level': 'int',
        'rep_health_level_string': 'L10nStringStruct',
        'rep_status': 'int',
        'rep_status_string': 'L10nStringStruct',
        'max_shares': 'int',
        'num_remaining_shares': 'int'
    }

    attribute_map = {
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'nas_status': 'nasStatus',
        'nas_status_string': 'nasStatusString',
        'rep_health_level': 'repHealthLevel',
        'rep_health_level_string': 'repHealthLevelString',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'max_shares': 'maxShares',
        'num_remaining_shares': 'numRemainingShares'
    }

    def __init__(self, health_level=None, health_level_string=None, nas_status=None, nas_status_string=None, rep_health_level=None, rep_health_level_string=None, rep_status=None, rep_status_string=None, max_shares=None, num_remaining_shares=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._health_level = None
        self._health_level_string = None
        self._nas_status = None
        self._nas_status_string = None
        self._rep_health_level = None
        self._rep_health_level_string = None
        self._rep_status = None
        self._rep_status_string = None
        self._max_shares = None
        self._num_remaining_shares = None
        self.discriminator = None

        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if nas_status is not None:
            self.nas_status = nas_status
        if nas_status_string is not None:
            self.nas_status_string = nas_status_string
        if rep_health_level is not None:
            self.rep_health_level = rep_health_level
        if rep_health_level_string is not None:
            self.rep_health_level_string = rep_health_level_string
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if max_shares is not None:
            self.max_shares = max_shares
        if num_remaining_shares is not None:
            self.num_remaining_shares = num_remaining_shares

    @property
    def health_level(self):
        """Gets the health_level of this Service.  # noqa: E501

        The health level of the service  # noqa: E501

        :return: The health_level of this Service.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Service.

        The health level of the service  # noqa: E501

        :param health_level: The health_level of this Service.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Service.  # noqa: E501

        Localized representation of the service health  # noqa: E501

        :return: The health_level_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Service.

        Localized representation of the service health  # noqa: E501

        :param health_level_string: The health_level_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._health_level_string = health_level_string

    @property
    def nas_status(self):
        """Gets the nas_status of this Service.  # noqa: E501

        Enumeration of the status of the service  # noqa: E501

        :return: The nas_status of this Service.  # noqa: E501
        :rtype: int
        """
        return self._nas_status

    @nas_status.setter
    def nas_status(self, nas_status):
        """Sets the nas_status of this Service.

        Enumeration of the status of the service  # noqa: E501

        :param nas_status: The nas_status of this Service.  # noqa: E501
        :type: int
        """

        self._nas_status = nas_status

    @property
    def nas_status_string(self):
        """Gets the nas_status_string of this Service.  # noqa: E501

        Localized string detailing the status of the service  # noqa: E501

        :return: The nas_status_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._nas_status_string

    @nas_status_string.setter
    def nas_status_string(self, nas_status_string):
        """Sets the nas_status_string of this Service.

        Localized string detailing the status of the service  # noqa: E501

        :param nas_status_string: The nas_status_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._nas_status_string = nas_status_string

    @property
    def rep_health_level(self):
        """Gets the rep_health_level of this Service.  # noqa: E501

        Represents the rolled up replication health level of the service  # noqa: E501

        :return: The rep_health_level of this Service.  # noqa: E501
        :rtype: int
        """
        return self._rep_health_level

    @rep_health_level.setter
    def rep_health_level(self, rep_health_level):
        """Sets the rep_health_level of this Service.

        Represents the rolled up replication health level of the service  # noqa: E501

        :param rep_health_level: The rep_health_level of this Service.  # noqa: E501
        :type: int
        """

        self._rep_health_level = rep_health_level

    @property
    def rep_health_level_string(self):
        """Gets the rep_health_level_string of this Service.  # noqa: E501

        Localized representation of the replication health level of the service  # noqa: E501

        :return: The rep_health_level_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._rep_health_level_string

    @rep_health_level_string.setter
    def rep_health_level_string(self, rep_health_level_string):
        """Sets the rep_health_level_string of this Service.

        Localized representation of the replication health level of the service  # noqa: E501

        :param rep_health_level_string: The rep_health_level_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._rep_health_level_string = rep_health_level_string

    @property
    def rep_status(self):
        """Gets the rep_status of this Service.  # noqa: E501

        Enumeration of the rolled up replication status of the service  # noqa: E501

        :return: The rep_status of this Service.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this Service.

        Enumeration of the rolled up replication status of the service  # noqa: E501

        :param rep_status: The rep_status of this Service.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this Service.  # noqa: E501

        Localized string detailing the replication status of the service  # noqa: E501

        :return: The rep_status_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this Service.

        Localized string detailing the replication status of the service  # noqa: E501

        :param rep_status_string: The rep_status_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._rep_status_string = rep_status_string

    @property
    def max_shares(self):
        """Gets the max_shares of this Service.  # noqa: E501

        Maximum number of shares that can be created in this service  # noqa: E501

        :return: The max_shares of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_shares

    @max_shares.setter
    def max_shares(self, max_shares):
        """Sets the max_shares of this Service.

        Maximum number of shares that can be created in this service  # noqa: E501

        :param max_shares: The max_shares of this Service.  # noqa: E501
        :type: int
        """

        self._max_shares = max_shares

    @property
    def num_remaining_shares(self):
        """Gets the num_remaining_shares of this Service.  # noqa: E501

        Number of new shares that could be created before hitting the max shares limit  # noqa: E501

        :return: The num_remaining_shares of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_remaining_shares

    @num_remaining_shares.setter
    def num_remaining_shares(self, num_remaining_shares):
        """Sets the num_remaining_shares of this Service.

        Number of new shares that could be created before hitting the max shares limit  # noqa: E501

        :param num_remaining_shares: The num_remaining_shares of this Service.  # noqa: E501
        :type: int
        """

        self._num_remaining_shares = num_remaining_shares

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
