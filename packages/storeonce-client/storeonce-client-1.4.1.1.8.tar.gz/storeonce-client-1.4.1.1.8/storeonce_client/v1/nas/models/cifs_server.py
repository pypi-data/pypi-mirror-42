# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CifsServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_mode': 'int',
        'authentication_mode_string': 'L10nStringStruct',
        'smb_signing_required': 'bool',
        'cifs_friendly_name': 'str',
        'cifs_workgroup': 'str',
        'ad_domain': 'str',
        'ad_domain_status': 'int',
        'ad_domain_status_string': 'L10nStringStruct',
        'ad_domain_controller': 'str',
        'ad_domain_controller_address': 'str'
    }

    attribute_map = {
        'authentication_mode': 'authenticationMode',
        'authentication_mode_string': 'authenticationModeString',
        'smb_signing_required': 'smbSigningRequired',
        'cifs_friendly_name': 'cifsFriendlyName',
        'cifs_workgroup': 'cifsWorkgroup',
        'ad_domain': 'adDomain',
        'ad_domain_status': 'adDomainStatus',
        'ad_domain_status_string': 'adDomainStatusString',
        'ad_domain_controller': 'adDomainController',
        'ad_domain_controller_address': 'adDomainControllerAddress'
    }

    def __init__(self, authentication_mode=None, authentication_mode_string=None, smb_signing_required=False, cifs_friendly_name=None, cifs_workgroup=None, ad_domain=None, ad_domain_status=None, ad_domain_status_string=None, ad_domain_controller=None, ad_domain_controller_address=None):  # noqa: E501
        """CifsServer - a model defined in Swagger"""  # noqa: E501

        self._authentication_mode = None
        self._authentication_mode_string = None
        self._smb_signing_required = None
        self._cifs_friendly_name = None
        self._cifs_workgroup = None
        self._ad_domain = None
        self._ad_domain_status = None
        self._ad_domain_status_string = None
        self._ad_domain_controller = None
        self._ad_domain_controller_address = None
        self.discriminator = None

        if authentication_mode is not None:
            self.authentication_mode = authentication_mode
        if authentication_mode_string is not None:
            self.authentication_mode_string = authentication_mode_string
        if smb_signing_required is not None:
            self.smb_signing_required = smb_signing_required
        if cifs_friendly_name is not None:
            self.cifs_friendly_name = cifs_friendly_name
        if cifs_workgroup is not None:
            self.cifs_workgroup = cifs_workgroup
        if ad_domain is not None:
            self.ad_domain = ad_domain
        if ad_domain_status is not None:
            self.ad_domain_status = ad_domain_status
        if ad_domain_status_string is not None:
            self.ad_domain_status_string = ad_domain_status_string
        if ad_domain_controller is not None:
            self.ad_domain_controller = ad_domain_controller
        if ad_domain_controller_address is not None:
            self.ad_domain_controller_address = ad_domain_controller_address

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this CifsServer.  # noqa: E501

        Enumeration of Authentication mode of the CIFS server  # noqa: E501

        :return: The authentication_mode of this CifsServer.  # noqa: E501
        :rtype: int
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this CifsServer.

        Enumeration of Authentication mode of the CIFS server  # noqa: E501

        :param authentication_mode: The authentication_mode of this CifsServer.  # noqa: E501
        :type: int
        """

        self._authentication_mode = authentication_mode

    @property
    def authentication_mode_string(self):
        """Gets the authentication_mode_string of this CifsServer.  # noqa: E501

        Localized representation of the authentication model  # noqa: E501

        :return: The authentication_mode_string of this CifsServer.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._authentication_mode_string

    @authentication_mode_string.setter
    def authentication_mode_string(self, authentication_mode_string):
        """Sets the authentication_mode_string of this CifsServer.

        Localized representation of the authentication model  # noqa: E501

        :param authentication_mode_string: The authentication_mode_string of this CifsServer.  # noqa: E501
        :type: L10nStringStruct
        """

        self._authentication_mode_string = authentication_mode_string

    @property
    def smb_signing_required(self):
        """Gets the smb_signing_required of this CifsServer.  # noqa: E501

        True if the server must require SMB signing from clients else optional field.  # noqa: E501

        :return: The smb_signing_required of this CifsServer.  # noqa: E501
        :rtype: bool
        """
        return self._smb_signing_required

    @smb_signing_required.setter
    def smb_signing_required(self, smb_signing_required):
        """Sets the smb_signing_required of this CifsServer.

        True if the server must require SMB signing from clients else optional field.  # noqa: E501

        :param smb_signing_required: The smb_signing_required of this CifsServer.  # noqa: E501
        :type: bool
        """

        self._smb_signing_required = smb_signing_required

    @property
    def cifs_friendly_name(self):
        """Gets the cifs_friendly_name of this CifsServer.  # noqa: E501

        If the authentication mode is None or User. CIFS friendly name of the server  # noqa: E501

        :return: The cifs_friendly_name of this CifsServer.  # noqa: E501
        :rtype: str
        """
        return self._cifs_friendly_name

    @cifs_friendly_name.setter
    def cifs_friendly_name(self, cifs_friendly_name):
        """Sets the cifs_friendly_name of this CifsServer.

        If the authentication mode is None or User. CIFS friendly name of the server  # noqa: E501

        :param cifs_friendly_name: The cifs_friendly_name of this CifsServer.  # noqa: E501
        :type: str
        """

        self._cifs_friendly_name = cifs_friendly_name

    @property
    def cifs_workgroup(self):
        """Gets the cifs_workgroup of this CifsServer.  # noqa: E501

        If the authentication mode is None or User. Workgroup the server belongs to  # noqa: E501

        :return: The cifs_workgroup of this CifsServer.  # noqa: E501
        :rtype: str
        """
        return self._cifs_workgroup

    @cifs_workgroup.setter
    def cifs_workgroup(self, cifs_workgroup):
        """Sets the cifs_workgroup of this CifsServer.

        If the authentication mode is None or User. Workgroup the server belongs to  # noqa: E501

        :param cifs_workgroup: The cifs_workgroup of this CifsServer.  # noqa: E501
        :type: str
        """

        self._cifs_workgroup = cifs_workgroup

    @property
    def ad_domain(self):
        """Gets the ad_domain of this CifsServer.  # noqa: E501

        If the authenticationMode is AD. The active directory domain  # noqa: E501

        :return: The ad_domain of this CifsServer.  # noqa: E501
        :rtype: str
        """
        return self._ad_domain

    @ad_domain.setter
    def ad_domain(self, ad_domain):
        """Sets the ad_domain of this CifsServer.

        If the authenticationMode is AD. The active directory domain  # noqa: E501

        :param ad_domain: The ad_domain of this CifsServer.  # noqa: E501
        :type: str
        """

        self._ad_domain = ad_domain

    @property
    def ad_domain_status(self):
        """Gets the ad_domain_status of this CifsServer.  # noqa: E501

        Enumeration of Status of the AD domain connection  # noqa: E501

        :return: The ad_domain_status of this CifsServer.  # noqa: E501
        :rtype: int
        """
        return self._ad_domain_status

    @ad_domain_status.setter
    def ad_domain_status(self, ad_domain_status):
        """Sets the ad_domain_status of this CifsServer.

        Enumeration of Status of the AD domain connection  # noqa: E501

        :param ad_domain_status: The ad_domain_status of this CifsServer.  # noqa: E501
        :type: int
        """

        self._ad_domain_status = ad_domain_status

    @property
    def ad_domain_status_string(self):
        """Gets the ad_domain_status_string of this CifsServer.  # noqa: E501

        Localized representation of the AD domain connection status  # noqa: E501

        :return: The ad_domain_status_string of this CifsServer.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._ad_domain_status_string

    @ad_domain_status_string.setter
    def ad_domain_status_string(self, ad_domain_status_string):
        """Sets the ad_domain_status_string of this CifsServer.

        Localized representation of the AD domain connection status  # noqa: E501

        :param ad_domain_status_string: The ad_domain_status_string of this CifsServer.  # noqa: E501
        :type: L10nStringStruct
        """

        self._ad_domain_status_string = ad_domain_status_string

    @property
    def ad_domain_controller(self):
        """Gets the ad_domain_controller of this CifsServer.  # noqa: E501

        If the authentication mode is AD and the domain status is connected. The Domain controller  # noqa: E501

        :return: The ad_domain_controller of this CifsServer.  # noqa: E501
        :rtype: str
        """
        return self._ad_domain_controller

    @ad_domain_controller.setter
    def ad_domain_controller(self, ad_domain_controller):
        """Sets the ad_domain_controller of this CifsServer.

        If the authentication mode is AD and the domain status is connected. The Domain controller  # noqa: E501

        :param ad_domain_controller: The ad_domain_controller of this CifsServer.  # noqa: E501
        :type: str
        """

        self._ad_domain_controller = ad_domain_controller

    @property
    def ad_domain_controller_address(self):
        """Gets the ad_domain_controller_address of this CifsServer.  # noqa: E501

        If the authentication mode is AD .The network address of the AD domain controller  # noqa: E501

        :return: The ad_domain_controller_address of this CifsServer.  # noqa: E501
        :rtype: str
        """
        return self._ad_domain_controller_address

    @ad_domain_controller_address.setter
    def ad_domain_controller_address(self, ad_domain_controller_address):
        """Sets the ad_domain_controller_address of this CifsServer.

        If the authentication mode is AD .The network address of the AD domain controller  # noqa: E501

        :param ad_domain_controller_address: The ad_domain_controller_address of this CifsServer.  # noqa: E501
        :type: str
        """

        self._ad_domain_controller_address = ad_domain_controller_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CifsServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CifsServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
