# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Share(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'health_level': 'int',
        'health_level_string': 'L10nStringStruct',
        'share_status': 'int',
        'share_status_string': 'L10nStringStruct',
        'filesystem_initialisation_percent': 'float',
        'access_protocol': 'int',
        'access_protocol_string': 'L10nStringStruct',
        'authentication_mode_string': 'L10nStringStruct',
        'write_protection_enabled': 'bool',
        'encryption_enabled': 'bool',
        'deduplication_enabled': 'bool',
        'share_version': 'int',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'dedupe_ratio': 'float',
        'num_files': 'int',
        'num_directories': 'int',
        'secure_erase_mode': 'int',
        'secure_erase_mode_string': 'L10nStringStruct',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'backup_application': 'int',
        'backup_application_string': 'L10nStringStruct',
        'backup_application_other': 'str',
        'backup_data_type': 'int',
        'backup_data_type_string': 'L10nStringStruct',
        'backup_data_type_other': 'str',
        'replication': 'Replication',
        'network_path': 'str',
        'dedupe_store_id': 'int',
        'authentication_mode': 'int',
        'created_date': 'datetime',
        'modified_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'share_status': 'shareStatus',
        'share_status_string': 'shareStatusString',
        'filesystem_initialisation_percent': 'filesystemInitialisationPercent',
        'access_protocol': 'accessProtocol',
        'access_protocol_string': 'accessProtocolString',
        'authentication_mode_string': 'authenticationModeString',
        'write_protection_enabled': 'writeProtectionEnabled',
        'encryption_enabled': 'encryptionEnabled',
        'deduplication_enabled': 'deduplicationEnabled',
        'share_version': 'shareVersion',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'dedupe_ratio': 'dedupeRatio',
        'num_files': 'numFiles',
        'num_directories': 'numDirectories',
        'secure_erase_mode': 'secureEraseMode',
        'secure_erase_mode_string': 'secureEraseModeString',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'backup_application': 'backupApplication',
        'backup_application_string': 'backupApplicationString',
        'backup_application_other': 'backupApplicationOther',
        'backup_data_type': 'backupDataType',
        'backup_data_type_string': 'backupDataTypeString',
        'backup_data_type_other': 'backupDataTypeOther',
        'replication': 'replication',
        'network_path': 'networkPath',
        'dedupe_store_id': 'dedupeStoreId',
        'authentication_mode': 'authenticationMode',
        'created_date': 'createdDate',
        'modified_date': 'modifiedDate'
    }

    def __init__(self, id=None, name=None, description=None, health_level=None, health_level_string=None, share_status=None, share_status_string=None, filesystem_initialisation_percent=None, access_protocol=None, access_protocol_string=None, authentication_mode_string=None, write_protection_enabled=False, encryption_enabled=False, deduplication_enabled=False, share_version=None, user_bytes=None, disk_bytes=None, dedupe_ratio=None, num_files=None, num_directories=None, secure_erase_mode=None, secure_erase_mode_string=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, backup_application=None, backup_application_string=None, backup_application_other=None, backup_data_type=None, backup_data_type_string=None, backup_data_type_other=None, replication=None, network_path=None, dedupe_store_id=None, authentication_mode=None, created_date=None, modified_date=None):  # noqa: E501
        """Share - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._health_level = None
        self._health_level_string = None
        self._share_status = None
        self._share_status_string = None
        self._filesystem_initialisation_percent = None
        self._access_protocol = None
        self._access_protocol_string = None
        self._authentication_mode_string = None
        self._write_protection_enabled = None
        self._encryption_enabled = None
        self._deduplication_enabled = None
        self._share_version = None
        self._user_bytes = None
        self._disk_bytes = None
        self._dedupe_ratio = None
        self._num_files = None
        self._num_directories = None
        self._secure_erase_mode = None
        self._secure_erase_mode_string = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._backup_application = None
        self._backup_application_string = None
        self._backup_application_other = None
        self._backup_data_type = None
        self._backup_data_type_string = None
        self._backup_data_type_other = None
        self._replication = None
        self._network_path = None
        self._dedupe_store_id = None
        self._authentication_mode = None
        self._created_date = None
        self._modified_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if share_status is not None:
            self.share_status = share_status
        if share_status_string is not None:
            self.share_status_string = share_status_string
        if filesystem_initialisation_percent is not None:
            self.filesystem_initialisation_percent = filesystem_initialisation_percent
        if access_protocol is not None:
            self.access_protocol = access_protocol
        if access_protocol_string is not None:
            self.access_protocol_string = access_protocol_string
        if authentication_mode_string is not None:
            self.authentication_mode_string = authentication_mode_string
        if write_protection_enabled is not None:
            self.write_protection_enabled = write_protection_enabled
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if deduplication_enabled is not None:
            self.deduplication_enabled = deduplication_enabled
        if share_version is not None:
            self.share_version = share_version
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if num_files is not None:
            self.num_files = num_files
        if num_directories is not None:
            self.num_directories = num_directories
        if secure_erase_mode is not None:
            self.secure_erase_mode = secure_erase_mode
        if secure_erase_mode_string is not None:
            self.secure_erase_mode_string = secure_erase_mode_string
        if size_on_disk_quota_enabled is not None:
            self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        if size_on_disk_quota_bytes is not None:
            self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        if user_data_stored_quota_enabled is not None:
            self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        if user_data_stored_quota_bytes is not None:
            self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        if backup_application is not None:
            self.backup_application = backup_application
        if backup_application_string is not None:
            self.backup_application_string = backup_application_string
        if backup_application_other is not None:
            self.backup_application_other = backup_application_other
        if backup_data_type is not None:
            self.backup_data_type = backup_data_type
        if backup_data_type_string is not None:
            self.backup_data_type_string = backup_data_type_string
        if backup_data_type_other is not None:
            self.backup_data_type_other = backup_data_type_other
        if replication is not None:
            self.replication = replication
        if network_path is not None:
            self.network_path = network_path
        if dedupe_store_id is not None:
            self.dedupe_store_id = dedupe_store_id
        if authentication_mode is not None:
            self.authentication_mode = authentication_mode
        if created_date is not None:
            self.created_date = created_date
        if modified_date is not None:
            self.modified_date = modified_date

    @property
    def id(self):
        """Gets the id of this Share.  # noqa: E501

        Unique Id of NAS Share  # noqa: E501

        :return: The id of this Share.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Share.

        Unique Id of NAS Share  # noqa: E501

        :param id: The id of this Share.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Share.  # noqa: E501

        Name of NAS Share  # noqa: E501

        :return: The name of this Share.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Share.

        Name of NAS Share  # noqa: E501

        :param name: The name of this Share.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Share.  # noqa: E501

        Description of NAS Share  # noqa: E501

        :return: The description of this Share.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Share.

        Description of NAS Share  # noqa: E501

        :param description: The description of this Share.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def health_level(self):
        """Gets the health_level of this Share.  # noqa: E501

        Enumeration of the health level of a share  # noqa: E501

        :return: The health_level of this Share.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Share.

        Enumeration of the health level of a share  # noqa: E501

        :param health_level: The health_level of this Share.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Share.  # noqa: E501

        Localized representation of the share health  # noqa: E501

        :return: The health_level_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Share.

        Localized representation of the share health  # noqa: E501

        :param health_level_string: The health_level_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._health_level_string = health_level_string

    @property
    def share_status(self):
        """Gets the share_status of this Share.  # noqa: E501

        Enumeration of the status of a NAS Share  # noqa: E501

        :return: The share_status of this Share.  # noqa: E501
        :rtype: int
        """
        return self._share_status

    @share_status.setter
    def share_status(self, share_status):
        """Sets the share_status of this Share.

        Enumeration of the status of a NAS Share  # noqa: E501

        :param share_status: The share_status of this Share.  # noqa: E501
        :type: int
        """

        self._share_status = share_status

    @property
    def share_status_string(self):
        """Gets the share_status_string of this Share.  # noqa: E501

        Localized string detailing the status of the share  # noqa: E501

        :return: The share_status_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._share_status_string

    @share_status_string.setter
    def share_status_string(self, share_status_string):
        """Sets the share_status_string of this Share.

        Localized string detailing the status of the share  # noqa: E501

        :param share_status_string: The share_status_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._share_status_string = share_status_string

    @property
    def filesystem_initialisation_percent(self):
        """Gets the filesystem_initialisation_percent of this Share.  # noqa: E501

        Progress of filesystem metadata Initialisation as a percentage value  # noqa: E501

        :return: The filesystem_initialisation_percent of this Share.  # noqa: E501
        :rtype: float
        """
        return self._filesystem_initialisation_percent

    @filesystem_initialisation_percent.setter
    def filesystem_initialisation_percent(self, filesystem_initialisation_percent):
        """Sets the filesystem_initialisation_percent of this Share.

        Progress of filesystem metadata Initialisation as a percentage value  # noqa: E501

        :param filesystem_initialisation_percent: The filesystem_initialisation_percent of this Share.  # noqa: E501
        :type: float
        """

        self._filesystem_initialisation_percent = filesystem_initialisation_percent

    @property
    def access_protocol(self):
        """Gets the access_protocol of this Share.  # noqa: E501

        Enumeration of Access Data Protocol of the share  # noqa: E501

        :return: The access_protocol of this Share.  # noqa: E501
        :rtype: int
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this Share.

        Enumeration of Access Data Protocol of the share  # noqa: E501

        :param access_protocol: The access_protocol of this Share.  # noqa: E501
        :type: int
        """

        self._access_protocol = access_protocol

    @property
    def access_protocol_string(self):
        """Gets the access_protocol_string of this Share.  # noqa: E501

        Localized representation of the access protocol  # noqa: E501

        :return: The access_protocol_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._access_protocol_string

    @access_protocol_string.setter
    def access_protocol_string(self, access_protocol_string):
        """Sets the access_protocol_string of this Share.

        Localized representation of the access protocol  # noqa: E501

        :param access_protocol_string: The access_protocol_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._access_protocol_string = access_protocol_string

    @property
    def authentication_mode_string(self):
        """Gets the authentication_mode_string of this Share.  # noqa: E501

        Localized representation of the authentication mode  # noqa: E501

        :return: The authentication_mode_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._authentication_mode_string

    @authentication_mode_string.setter
    def authentication_mode_string(self, authentication_mode_string):
        """Sets the authentication_mode_string of this Share.

        Localized representation of the authentication mode  # noqa: E501

        :param authentication_mode_string: The authentication_mode_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._authentication_mode_string = authentication_mode_string

    @property
    def write_protection_enabled(self):
        """Gets the write_protection_enabled of this Share.  # noqa: E501

        True if the share is read-only  # noqa: E501

        :return: The write_protection_enabled of this Share.  # noqa: E501
        :rtype: bool
        """
        return self._write_protection_enabled

    @write_protection_enabled.setter
    def write_protection_enabled(self, write_protection_enabled):
        """Sets the write_protection_enabled of this Share.

        True if the share is read-only  # noqa: E501

        :param write_protection_enabled: The write_protection_enabled of this Share.  # noqa: E501
        :type: bool
        """

        self._write_protection_enabled = write_protection_enabled

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this Share.  # noqa: E501

        True if the shares data should be written to disk encrypted  # noqa: E501

        :return: The encryption_enabled of this Share.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this Share.

        True if the shares data should be written to disk encrypted  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this Share.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def deduplication_enabled(self):
        """Gets the deduplication_enabled of this Share.  # noqa: E501

        True if the share data should be deduped  # noqa: E501

        :return: The deduplication_enabled of this Share.  # noqa: E501
        :rtype: bool
        """
        return self._deduplication_enabled

    @deduplication_enabled.setter
    def deduplication_enabled(self, deduplication_enabled):
        """Sets the deduplication_enabled of this Share.

        True if the share data should be deduped  # noqa: E501

        :param deduplication_enabled: The deduplication_enabled of this Share.  # noqa: E501
        :type: bool
        """

        self._deduplication_enabled = deduplication_enabled

    @property
    def share_version(self):
        """Gets the share_version of this Share.  # noqa: E501

        Version of the NAS Share  # noqa: E501

        :return: The share_version of this Share.  # noqa: E501
        :rtype: int
        """
        return self._share_version

    @share_version.setter
    def share_version(self, share_version):
        """Sets the share_version of this Share.

        Version of the NAS Share  # noqa: E501

        :param share_version: The share_version of this Share.  # noqa: E501
        :type: int
        """

        self._share_version = share_version

    @property
    def user_bytes(self):
        """Gets the user_bytes of this Share.  # noqa: E501

        The total size of the user data that has been stored in the share before dedupe  # noqa: E501

        :return: The user_bytes of this Share.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this Share.

        The total size of the user data that has been stored in the share before dedupe  # noqa: E501

        :param user_bytes: The user_bytes of this Share.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this Share.  # noqa: E501

        The actual size of the data stored in the share after dedupe  # noqa: E501

        :return: The disk_bytes of this Share.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this Share.

        The actual size of the data stored in the share after dedupe  # noqa: E501

        :param disk_bytes: The disk_bytes of this Share.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this Share.  # noqa: E501

        The dedupe ratio of the data stored in the share  # noqa: E501

        :return: The dedupe_ratio of this Share.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this Share.

        The dedupe ratio of the data stored in the share  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this Share.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def num_files(self):
        """Gets the num_files of this Share.  # noqa: E501

        The number of files in the share  # noqa: E501

        :return: The num_files of this Share.  # noqa: E501
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """Sets the num_files of this Share.

        The number of files in the share  # noqa: E501

        :param num_files: The num_files of this Share.  # noqa: E501
        :type: int
        """

        self._num_files = num_files

    @property
    def num_directories(self):
        """Gets the num_directories of this Share.  # noqa: E501

        The number of directories in the share  # noqa: E501

        :return: The num_directories of this Share.  # noqa: E501
        :rtype: int
        """
        return self._num_directories

    @num_directories.setter
    def num_directories(self, num_directories):
        """Sets the num_directories of this Share.

        The number of directories in the share  # noqa: E501

        :param num_directories: The num_directories of this Share.  # noqa: E501
        :type: int
        """

        self._num_directories = num_directories

    @property
    def secure_erase_mode(self):
        """Gets the secure_erase_mode of this Share.  # noqa: E501

        Enumeration of secure erase mode of the share  # noqa: E501

        :return: The secure_erase_mode of this Share.  # noqa: E501
        :rtype: int
        """
        return self._secure_erase_mode

    @secure_erase_mode.setter
    def secure_erase_mode(self, secure_erase_mode):
        """Sets the secure_erase_mode of this Share.

        Enumeration of secure erase mode of the share  # noqa: E501

        :param secure_erase_mode: The secure_erase_mode of this Share.  # noqa: E501
        :type: int
        """

        self._secure_erase_mode = secure_erase_mode

    @property
    def secure_erase_mode_string(self):
        """Gets the secure_erase_mode_string of this Share.  # noqa: E501

        Localized representation of the secure erase mode  # noqa: E501

        :return: The secure_erase_mode_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._secure_erase_mode_string

    @secure_erase_mode_string.setter
    def secure_erase_mode_string(self, secure_erase_mode_string):
        """Sets the secure_erase_mode_string of this Share.

        Localized representation of the secure erase mode  # noqa: E501

        :param secure_erase_mode_string: The secure_erase_mode_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._secure_erase_mode_string = secure_erase_mode_string

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this Share.  # noqa: E501

        Check if Quota policy for size on disk is enabled  # noqa: E501

        :return: The size_on_disk_quota_enabled of this Share.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this Share.

        Check if Quota policy for size on disk is enabled  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this Share.  # noqa: E501
        :type: bool
        """

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this Share.  # noqa: E501

        Size on disk Quota limit policy  # noqa: E501

        :return: The size_on_disk_quota_bytes of this Share.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this Share.

        Size on disk Quota limit policy  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this Share.  # noqa: E501
        :type: int
        """

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this Share.  # noqa: E501

        Check if Quota policy for user data is enabled  # noqa: E501

        :return: The user_data_stored_quota_enabled of this Share.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this Share.

        Check if Quota policy for user data is enabled  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this Share.  # noqa: E501
        :type: bool
        """

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this Share.  # noqa: E501

        User data quota limit policy  # noqa: E501

        :return: The user_data_stored_quota_bytes of this Share.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this Share.

        User data quota limit policy  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this Share.  # noqa: E501
        :type: int
        """

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def backup_application(self):
        """Gets the backup_application of this Share.  # noqa: E501

        Enumeration of backup Application used for this share  # noqa: E501

        :return: The backup_application of this Share.  # noqa: E501
        :rtype: int
        """
        return self._backup_application

    @backup_application.setter
    def backup_application(self, backup_application):
        """Sets the backup_application of this Share.

        Enumeration of backup Application used for this share  # noqa: E501

        :param backup_application: The backup_application of this Share.  # noqa: E501
        :type: int
        """

        self._backup_application = backup_application

    @property
    def backup_application_string(self):
        """Gets the backup_application_string of this Share.  # noqa: E501

        Localized representation of the backup Application  # noqa: E501

        :return: The backup_application_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._backup_application_string

    @backup_application_string.setter
    def backup_application_string(self, backup_application_string):
        """Sets the backup_application_string of this Share.

        Localized representation of the backup Application  # noqa: E501

        :param backup_application_string: The backup_application_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._backup_application_string = backup_application_string

    @property
    def backup_application_other(self):
        """Gets the backup_application_other of this Share.  # noqa: E501

        User provided value of the backup application if set to Other  # noqa: E501

        :return: The backup_application_other of this Share.  # noqa: E501
        :rtype: str
        """
        return self._backup_application_other

    @backup_application_other.setter
    def backup_application_other(self, backup_application_other):
        """Sets the backup_application_other of this Share.

        User provided value of the backup application if set to Other  # noqa: E501

        :param backup_application_other: The backup_application_other of this Share.  # noqa: E501
        :type: str
        """

        self._backup_application_other = backup_application_other

    @property
    def backup_data_type(self):
        """Gets the backup_data_type of this Share.  # noqa: E501

        Enumeration of type of backup data stored in this share  # noqa: E501

        :return: The backup_data_type of this Share.  # noqa: E501
        :rtype: int
        """
        return self._backup_data_type

    @backup_data_type.setter
    def backup_data_type(self, backup_data_type):
        """Sets the backup_data_type of this Share.

        Enumeration of type of backup data stored in this share  # noqa: E501

        :param backup_data_type: The backup_data_type of this Share.  # noqa: E501
        :type: int
        """

        self._backup_data_type = backup_data_type

    @property
    def backup_data_type_string(self):
        """Gets the backup_data_type_string of this Share.  # noqa: E501

        Localized representation of the backup data type  # noqa: E501

        :return: The backup_data_type_string of this Share.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._backup_data_type_string

    @backup_data_type_string.setter
    def backup_data_type_string(self, backup_data_type_string):
        """Sets the backup_data_type_string of this Share.

        Localized representation of the backup data type  # noqa: E501

        :param backup_data_type_string: The backup_data_type_string of this Share.  # noqa: E501
        :type: L10nStringStruct
        """

        self._backup_data_type_string = backup_data_type_string

    @property
    def backup_data_type_other(self):
        """Gets the backup_data_type_other of this Share.  # noqa: E501

        User provided value of the backup data type if set to Other  # noqa: E501

        :return: The backup_data_type_other of this Share.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_type_other

    @backup_data_type_other.setter
    def backup_data_type_other(self, backup_data_type_other):
        """Sets the backup_data_type_other of this Share.

        User provided value of the backup data type if set to Other  # noqa: E501

        :param backup_data_type_other: The backup_data_type_other of this Share.  # noqa: E501
        :type: str
        """

        self._backup_data_type_other = backup_data_type_other

    @property
    def replication(self):
        """Gets the replication of this Share.  # noqa: E501

        Replication information for share  # noqa: E501

        :return: The replication of this Share.  # noqa: E501
        :rtype: Replication
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this Share.

        Replication information for share  # noqa: E501

        :param replication: The replication of this Share.  # noqa: E501
        :type: Replication
        """

        self._replication = replication

    @property
    def network_path(self):
        """Gets the network_path of this Share.  # noqa: E501

        Network for share  # noqa: E501

        :return: The network_path of this Share.  # noqa: E501
        :rtype: str
        """
        return self._network_path

    @network_path.setter
    def network_path(self, network_path):
        """Sets the network_path of this Share.

        Network for share  # noqa: E501

        :param network_path: The network_path of this Share.  # noqa: E501
        :type: str
        """

        self._network_path = network_path

    @property
    def dedupe_store_id(self):
        """Gets the dedupe_store_id of this Share.  # noqa: E501

        Unique identifier for dedupe store.  # noqa: E501

        :return: The dedupe_store_id of this Share.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_store_id

    @dedupe_store_id.setter
    def dedupe_store_id(self, dedupe_store_id):
        """Sets the dedupe_store_id of this Share.

        Unique identifier for dedupe store.  # noqa: E501

        :param dedupe_store_id: The dedupe_store_id of this Share.  # noqa: E501
        :type: int
        """

        self._dedupe_store_id = dedupe_store_id

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this Share.  # noqa: E501

        Enumertaion of authentication mode used for the share  # noqa: E501

        :return: The authentication_mode of this Share.  # noqa: E501
        :rtype: int
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this Share.

        Enumertaion of authentication mode used for the share  # noqa: E501

        :param authentication_mode: The authentication_mode of this Share.  # noqa: E501
        :type: int
        """

        self._authentication_mode = authentication_mode

    @property
    def created_date(self):
        """Gets the created_date of this Share.  # noqa: E501

        NAS Share creation date  # noqa: E501

        :return: The created_date of this Share.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Share.

        NAS Share creation date  # noqa: E501

        :param created_date: The created_date of this Share.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this Share.  # noqa: E501

        NAS Share last modified date  # noqa: E501

        :return: The modified_date of this Share.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Share.

        NAS Share last modified date  # noqa: E501

        :param modified_date: The modified_date of this Share.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Share, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Share):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
