# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Thresholds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_thresholds': 'list[ThresholdProperties]',
        'system_thresholds': 'list[ThresholdProperties]',
        'num_user_thresholds': 'int',
        'num_system_thresholds': 'int'
    }

    attribute_map = {
        'user_thresholds': 'userThresholds',
        'system_thresholds': 'systemThresholds',
        'num_user_thresholds': 'numUserThresholds',
        'num_system_thresholds': 'numSystemThresholds'
    }

    def __init__(self, user_thresholds=None, system_thresholds=None, num_user_thresholds=None, num_system_thresholds=None):  # noqa: E501
        """Thresholds - a model defined in Swagger"""  # noqa: E501

        self._user_thresholds = None
        self._system_thresholds = None
        self._num_user_thresholds = None
        self._num_system_thresholds = None
        self.discriminator = None

        self.user_thresholds = user_thresholds
        if system_thresholds is not None:
            self.system_thresholds = system_thresholds
        if num_user_thresholds is not None:
            self.num_user_thresholds = num_user_thresholds
        if num_system_thresholds is not None:
            self.num_system_thresholds = num_system_thresholds

    @property
    def user_thresholds(self):
        """Gets the user_thresholds of this Thresholds.  # noqa: E501

        List of user thresholds  # noqa: E501

        :return: The user_thresholds of this Thresholds.  # noqa: E501
        :rtype: list[ThresholdProperties]
        """
        return self._user_thresholds

    @user_thresholds.setter
    def user_thresholds(self, user_thresholds):
        """Sets the user_thresholds of this Thresholds.

        List of user thresholds  # noqa: E501

        :param user_thresholds: The user_thresholds of this Thresholds.  # noqa: E501
        :type: list[ThresholdProperties]
        """
        if user_thresholds is None:
            raise ValueError("Invalid value for `user_thresholds`, must not be `None`")  # noqa: E501

        self._user_thresholds = user_thresholds

    @property
    def system_thresholds(self):
        """Gets the system_thresholds of this Thresholds.  # noqa: E501

        List of system thresholds  # noqa: E501

        :return: The system_thresholds of this Thresholds.  # noqa: E501
        :rtype: list[ThresholdProperties]
        """
        return self._system_thresholds

    @system_thresholds.setter
    def system_thresholds(self, system_thresholds):
        """Sets the system_thresholds of this Thresholds.

        List of system thresholds  # noqa: E501

        :param system_thresholds: The system_thresholds of this Thresholds.  # noqa: E501
        :type: list[ThresholdProperties]
        """

        self._system_thresholds = system_thresholds

    @property
    def num_user_thresholds(self):
        """Gets the num_user_thresholds of this Thresholds.  # noqa: E501

        Number of user thresholds  # noqa: E501

        :return: The num_user_thresholds of this Thresholds.  # noqa: E501
        :rtype: int
        """
        return self._num_user_thresholds

    @num_user_thresholds.setter
    def num_user_thresholds(self, num_user_thresholds):
        """Sets the num_user_thresholds of this Thresholds.

        Number of user thresholds  # noqa: E501

        :param num_user_thresholds: The num_user_thresholds of this Thresholds.  # noqa: E501
        :type: int
        """

        self._num_user_thresholds = num_user_thresholds

    @property
    def num_system_thresholds(self):
        """Gets the num_system_thresholds of this Thresholds.  # noqa: E501

        Number of system thresholds  # noqa: E501

        :return: The num_system_thresholds of this Thresholds.  # noqa: E501
        :rtype: int
        """
        return self._num_system_thresholds

    @num_system_thresholds.setter
    def num_system_thresholds(self, num_system_thresholds):
        """Sets the num_system_thresholds of this Thresholds.

        Number of system thresholds  # noqa: E501

        :param num_system_thresholds: The num_system_thresholds of this Thresholds.  # noqa: E501
        :type: int
        """

        self._num_system_thresholds = num_system_thresholds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Thresholds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thresholds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
