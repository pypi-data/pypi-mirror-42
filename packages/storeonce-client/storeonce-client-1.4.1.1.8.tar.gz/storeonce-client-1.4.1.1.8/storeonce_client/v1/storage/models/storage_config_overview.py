# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorageConfigOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_health': 'int',
        'storage_health_string': 'str',
        'simplified_status': 'int',
        'simplified_status_string': 'str',
        'unconfigured_storage_bytes': 'int',
        'configured_storage_bytes': 'int',
        'used_bytes': 'int',
        'free_bytes': 'int',
        'capacity_licensed_bytes': 'int',
        'capacity_unlicensed_bytes': 'int',
        'max_capacity_bytes': 'int',
        'max_expansions': 'int'
    }

    attribute_map = {
        'storage_health': 'storageHealth',
        'storage_health_string': 'storageHealthString',
        'simplified_status': 'simplifiedStatus',
        'simplified_status_string': 'simplifiedStatusString',
        'unconfigured_storage_bytes': 'unconfiguredStorageBytes',
        'configured_storage_bytes': 'configuredStorageBytes',
        'used_bytes': 'usedBytes',
        'free_bytes': 'freeBytes',
        'capacity_licensed_bytes': 'capacityLicensedBytes',
        'capacity_unlicensed_bytes': 'capacityUnlicensedBytes',
        'max_capacity_bytes': 'maxCapacityBytes',
        'max_expansions': 'maxExpansions'
    }

    def __init__(self, storage_health=None, storage_health_string=None, simplified_status=None, simplified_status_string=None, unconfigured_storage_bytes=None, configured_storage_bytes=None, used_bytes=None, free_bytes=None, capacity_licensed_bytes=None, capacity_unlicensed_bytes=None, max_capacity_bytes=None, max_expansions=None):  # noqa: E501
        """StorageConfigOverview - a model defined in Swagger"""  # noqa: E501

        self._storage_health = None
        self._storage_health_string = None
        self._simplified_status = None
        self._simplified_status_string = None
        self._unconfigured_storage_bytes = None
        self._configured_storage_bytes = None
        self._used_bytes = None
        self._free_bytes = None
        self._capacity_licensed_bytes = None
        self._capacity_unlicensed_bytes = None
        self._max_capacity_bytes = None
        self._max_expansions = None
        self.discriminator = None

        self.storage_health = storage_health
        if storage_health_string is not None:
            self.storage_health_string = storage_health_string
        self.simplified_status = simplified_status
        self.simplified_status_string = simplified_status_string
        self.unconfigured_storage_bytes = unconfigured_storage_bytes
        self.configured_storage_bytes = configured_storage_bytes
        self.used_bytes = used_bytes
        self.free_bytes = free_bytes
        self.capacity_licensed_bytes = capacity_licensed_bytes
        self.capacity_unlicensed_bytes = capacity_unlicensed_bytes
        self.max_capacity_bytes = max_capacity_bytes
        self.max_expansions = max_expansions

    @property
    def storage_health(self):
        """Gets the storage_health of this StorageConfigOverview.  # noqa: E501

        Storage Health  # noqa: E501

        :return: The storage_health of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._storage_health

    @storage_health.setter
    def storage_health(self, storage_health):
        """Sets the storage_health of this StorageConfigOverview.

        Storage Health  # noqa: E501

        :param storage_health: The storage_health of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if storage_health is None:
            raise ValueError("Invalid value for `storage_health`, must not be `None`")  # noqa: E501

        self._storage_health = storage_health

    @property
    def storage_health_string(self):
        """Gets the storage_health_string of this StorageConfigOverview.  # noqa: E501

        Storage Health String  # noqa: E501

        :return: The storage_health_string of this StorageConfigOverview.  # noqa: E501
        :rtype: str
        """
        return self._storage_health_string

    @storage_health_string.setter
    def storage_health_string(self, storage_health_string):
        """Sets the storage_health_string of this StorageConfigOverview.

        Storage Health String  # noqa: E501

        :param storage_health_string: The storage_health_string of this StorageConfigOverview.  # noqa: E501
        :type: str
        """

        self._storage_health_string = storage_health_string

    @property
    def simplified_status(self):
        """Gets the simplified_status of this StorageConfigOverview.  # noqa: E501

        Storage health simplified status  # noqa: E501

        :return: The simplified_status of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._simplified_status

    @simplified_status.setter
    def simplified_status(self, simplified_status):
        """Sets the simplified_status of this StorageConfigOverview.

        Storage health simplified status  # noqa: E501

        :param simplified_status: The simplified_status of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if simplified_status is None:
            raise ValueError("Invalid value for `simplified_status`, must not be `None`")  # noqa: E501

        self._simplified_status = simplified_status

    @property
    def simplified_status_string(self):
        """Gets the simplified_status_string of this StorageConfigOverview.  # noqa: E501

        Storage health simplified status string  # noqa: E501

        :return: The simplified_status_string of this StorageConfigOverview.  # noqa: E501
        :rtype: str
        """
        return self._simplified_status_string

    @simplified_status_string.setter
    def simplified_status_string(self, simplified_status_string):
        """Sets the simplified_status_string of this StorageConfigOverview.

        Storage health simplified status string  # noqa: E501

        :param simplified_status_string: The simplified_status_string of this StorageConfigOverview.  # noqa: E501
        :type: str
        """
        if simplified_status_string is None:
            raise ValueError("Invalid value for `simplified_status_string`, must not be `None`")  # noqa: E501

        self._simplified_status_string = simplified_status_string

    @property
    def unconfigured_storage_bytes(self):
        """Gets the unconfigured_storage_bytes of this StorageConfigOverview.  # noqa: E501

        Storage unconfigured bytes  # noqa: E501

        :return: The unconfigured_storage_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._unconfigured_storage_bytes

    @unconfigured_storage_bytes.setter
    def unconfigured_storage_bytes(self, unconfigured_storage_bytes):
        """Sets the unconfigured_storage_bytes of this StorageConfigOverview.

        Storage unconfigured bytes  # noqa: E501

        :param unconfigured_storage_bytes: The unconfigured_storage_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if unconfigured_storage_bytes is None:
            raise ValueError("Invalid value for `unconfigured_storage_bytes`, must not be `None`")  # noqa: E501

        self._unconfigured_storage_bytes = unconfigured_storage_bytes

    @property
    def configured_storage_bytes(self):
        """Gets the configured_storage_bytes of this StorageConfigOverview.  # noqa: E501

        Storage configured bytes  # noqa: E501

        :return: The configured_storage_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._configured_storage_bytes

    @configured_storage_bytes.setter
    def configured_storage_bytes(self, configured_storage_bytes):
        """Sets the configured_storage_bytes of this StorageConfigOverview.

        Storage configured bytes  # noqa: E501

        :param configured_storage_bytes: The configured_storage_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if configured_storage_bytes is None:
            raise ValueError("Invalid value for `configured_storage_bytes`, must not be `None`")  # noqa: E501

        self._configured_storage_bytes = configured_storage_bytes

    @property
    def used_bytes(self):
        """Gets the used_bytes of this StorageConfigOverview.  # noqa: E501

        Storage used bytes  # noqa: E501

        :return: The used_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._used_bytes

    @used_bytes.setter
    def used_bytes(self, used_bytes):
        """Sets the used_bytes of this StorageConfigOverview.

        Storage used bytes  # noqa: E501

        :param used_bytes: The used_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if used_bytes is None:
            raise ValueError("Invalid value for `used_bytes`, must not be `None`")  # noqa: E501

        self._used_bytes = used_bytes

    @property
    def free_bytes(self):
        """Gets the free_bytes of this StorageConfigOverview.  # noqa: E501

        Storage free bytes  # noqa: E501

        :return: The free_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):
        """Sets the free_bytes of this StorageConfigOverview.

        Storage free bytes  # noqa: E501

        :param free_bytes: The free_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if free_bytes is None:
            raise ValueError("Invalid value for `free_bytes`, must not be `None`")  # noqa: E501

        self._free_bytes = free_bytes

    @property
    def capacity_licensed_bytes(self):
        """Gets the capacity_licensed_bytes of this StorageConfigOverview.  # noqa: E501

        The total available licensed storage capacity in bytes (accuracy is TB).  # noqa: E501

        :return: The capacity_licensed_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._capacity_licensed_bytes

    @capacity_licensed_bytes.setter
    def capacity_licensed_bytes(self, capacity_licensed_bytes):
        """Sets the capacity_licensed_bytes of this StorageConfigOverview.

        The total available licensed storage capacity in bytes (accuracy is TB).  # noqa: E501

        :param capacity_licensed_bytes: The capacity_licensed_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if capacity_licensed_bytes is None:
            raise ValueError("Invalid value for `capacity_licensed_bytes`, must not be `None`")  # noqa: E501

        self._capacity_licensed_bytes = capacity_licensed_bytes

    @property
    def capacity_unlicensed_bytes(self):
        """Gets the capacity_unlicensed_bytes of this StorageConfigOverview.  # noqa: E501

        The total configured storage capacity not covered by a license, in bytes  # noqa: E501

        :return: The capacity_unlicensed_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._capacity_unlicensed_bytes

    @capacity_unlicensed_bytes.setter
    def capacity_unlicensed_bytes(self, capacity_unlicensed_bytes):
        """Sets the capacity_unlicensed_bytes of this StorageConfigOverview.

        The total configured storage capacity not covered by a license, in bytes  # noqa: E501

        :param capacity_unlicensed_bytes: The capacity_unlicensed_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if capacity_unlicensed_bytes is None:
            raise ValueError("Invalid value for `capacity_unlicensed_bytes`, must not be `None`")  # noqa: E501

        self._capacity_unlicensed_bytes = capacity_unlicensed_bytes

    @property
    def max_capacity_bytes(self):
        """Gets the max_capacity_bytes of this StorageConfigOverview.  # noqa: E501

        The maximum supported capacity in bytes  # noqa: E501

        :return: The max_capacity_bytes of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity_bytes

    @max_capacity_bytes.setter
    def max_capacity_bytes(self, max_capacity_bytes):
        """Sets the max_capacity_bytes of this StorageConfigOverview.

        The maximum supported capacity in bytes  # noqa: E501

        :param max_capacity_bytes: The max_capacity_bytes of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if max_capacity_bytes is None:
            raise ValueError("Invalid value for `max_capacity_bytes`, must not be `None`")  # noqa: E501

        self._max_capacity_bytes = max_capacity_bytes

    @property
    def max_expansions(self):
        """Gets the max_expansions of this StorageConfigOverview.  # noqa: E501

        The maximum supported number of expansions  # noqa: E501

        :return: The max_expansions of this StorageConfigOverview.  # noqa: E501
        :rtype: int
        """
        return self._max_expansions

    @max_expansions.setter
    def max_expansions(self, max_expansions):
        """Sets the max_expansions of this StorageConfigOverview.

        The maximum supported number of expansions  # noqa: E501

        :param max_expansions: The max_expansions of this StorageConfigOverview.  # noqa: E501
        :type: int
        """
        if max_expansions is None:
            raise ValueError("Invalid value for `max_expansions`, must not be `None`")  # noqa: E501

        self._max_expansions = max_expansions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageConfigOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageConfigOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
