# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorageVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size_bytes': 'int',
        'status': 'str',
        'status_string': 'str',
        'beacon_enabled': 'bool',
        'volume_uuid': 'str',
        'pool_uuid': 'str',
        'pool_name': 'str',
        'pool_status': 'str',
        'pool_status_string': 'str',
        'job_description': 'str',
        'job_percentage_complete': 'int',
        'attached': 'bool',
        'enclosure_serial_number': 'str',
        'license_type': 'str',
        'disk_locations': 'list[str]',
        'status_reasons': 'list[StatusEvent]',
        'actual_connection': 'StorageLocation',
        'expected_connection': 'StorageLocation',
        'spare_disk_locations': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'size_bytes': 'sizeBytes',
        'status': 'status',
        'status_string': 'statusString',
        'beacon_enabled': 'beaconEnabled',
        'volume_uuid': 'volumeUUID',
        'pool_uuid': 'poolUUID',
        'pool_name': 'poolName',
        'pool_status': 'poolStatus',
        'pool_status_string': 'poolStatusString',
        'job_description': 'jobDescription',
        'job_percentage_complete': 'jobPercentageComplete',
        'attached': 'attached',
        'enclosure_serial_number': 'enclosureSerialNumber',
        'license_type': 'licenseType',
        'disk_locations': 'diskLocations',
        'status_reasons': 'statusReasons',
        'actual_connection': 'actualConnection',
        'expected_connection': 'expectedConnection',
        'spare_disk_locations': 'spareDiskLocations'
    }

    def __init__(self, name=None, size_bytes=None, status=None, status_string=None, beacon_enabled=False, volume_uuid=None, pool_uuid=None, pool_name=None, pool_status=None, pool_status_string=None, job_description=None, job_percentage_complete=None, attached=False, enclosure_serial_number=None, license_type=None, disk_locations=None, status_reasons=None, actual_connection=None, expected_connection=None, spare_disk_locations=None):  # noqa: E501
        """StorageVolume - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._size_bytes = None
        self._status = None
        self._status_string = None
        self._beacon_enabled = None
        self._volume_uuid = None
        self._pool_uuid = None
        self._pool_name = None
        self._pool_status = None
        self._pool_status_string = None
        self._job_description = None
        self._job_percentage_complete = None
        self._attached = None
        self._enclosure_serial_number = None
        self._license_type = None
        self._disk_locations = None
        self._status_reasons = None
        self._actual_connection = None
        self._expected_connection = None
        self._spare_disk_locations = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if status is not None:
            self.status = status
        if status_string is not None:
            self.status_string = status_string
        if beacon_enabled is not None:
            self.beacon_enabled = beacon_enabled
        if volume_uuid is not None:
            self.volume_uuid = volume_uuid
        if pool_uuid is not None:
            self.pool_uuid = pool_uuid
        if pool_name is not None:
            self.pool_name = pool_name
        if pool_status is not None:
            self.pool_status = pool_status
        if pool_status_string is not None:
            self.pool_status_string = pool_status_string
        if job_description is not None:
            self.job_description = job_description
        if job_percentage_complete is not None:
            self.job_percentage_complete = job_percentage_complete
        if attached is not None:
            self.attached = attached
        if enclosure_serial_number is not None:
            self.enclosure_serial_number = enclosure_serial_number
        if license_type is not None:
            self.license_type = license_type
        if disk_locations is not None:
            self.disk_locations = disk_locations
        if status_reasons is not None:
            self.status_reasons = status_reasons
        if actual_connection is not None:
            self.actual_connection = actual_connection
        if expected_connection is not None:
            self.expected_connection = expected_connection
        if spare_disk_locations is not None:
            self.spare_disk_locations = spare_disk_locations

    @property
    def name(self):
        """Gets the name of this StorageVolume.  # noqa: E501

        Volume Name  # noqa: E501

        :return: The name of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageVolume.

        Volume Name  # noqa: E501

        :param name: The name of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size_bytes(self):
        """Gets the size_bytes of this StorageVolume.  # noqa: E501

        Volume size in bytes  # noqa: E501

        :return: The size_bytes of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this StorageVolume.

        Volume size in bytes  # noqa: E501

        :param size_bytes: The size_bytes of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def status(self):
        """Gets the status of this StorageVolume.  # noqa: E501

        Volume status enum name  # noqa: E501

        :return: The status of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorageVolume.

        Volume status enum name  # noqa: E501

        :param status: The status of this StorageVolume.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNUSED", "OK", "OFFLINE", "UNAUTHORIZED", "DEGRADED", "FAILED", "UNKNOWN", "MISSING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this StorageVolume.  # noqa: E501

        Volume status localized string  # noqa: E501

        :return: The status_string of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this StorageVolume.

        Volume status localized string  # noqa: E501

        :param status_string: The status_string of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._status_string = status_string

    @property
    def beacon_enabled(self):
        """Gets the beacon_enabled of this StorageVolume.  # noqa: E501

        True if beacon enabled (on or flashing)  # noqa: E501

        :return: The beacon_enabled of this StorageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._beacon_enabled

    @beacon_enabled.setter
    def beacon_enabled(self, beacon_enabled):
        """Sets the beacon_enabled of this StorageVolume.

        True if beacon enabled (on or flashing)  # noqa: E501

        :param beacon_enabled: The beacon_enabled of this StorageVolume.  # noqa: E501
        :type: bool
        """

        self._beacon_enabled = beacon_enabled

    @property
    def volume_uuid(self):
        """Gets the volume_uuid of this StorageVolume.  # noqa: E501

        Volume UUID  # noqa: E501

        :return: The volume_uuid of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._volume_uuid

    @volume_uuid.setter
    def volume_uuid(self, volume_uuid):
        """Sets the volume_uuid of this StorageVolume.

        Volume UUID  # noqa: E501

        :param volume_uuid: The volume_uuid of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._volume_uuid = volume_uuid

    @property
    def pool_uuid(self):
        """Gets the pool_uuid of this StorageVolume.  # noqa: E501

        Pool UUID  # noqa: E501

        :return: The pool_uuid of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._pool_uuid

    @pool_uuid.setter
    def pool_uuid(self, pool_uuid):
        """Sets the pool_uuid of this StorageVolume.

        Pool UUID  # noqa: E501

        :param pool_uuid: The pool_uuid of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._pool_uuid = pool_uuid

    @property
    def pool_name(self):
        """Gets the pool_name of this StorageVolume.  # noqa: E501

        Pool name  # noqa: E501

        :return: The pool_name of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this StorageVolume.

        Pool name  # noqa: E501

        :param pool_name: The pool_name of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def pool_status(self):
        """Gets the pool_status of this StorageVolume.  # noqa: E501

        Pool status enum name  # noqa: E501

        :return: The pool_status of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._pool_status

    @pool_status.setter
    def pool_status(self, pool_status):
        """Sets the pool_status of this StorageVolume.

        Pool status enum name  # noqa: E501

        :param pool_status: The pool_status of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._pool_status = pool_status

    @property
    def pool_status_string(self):
        """Gets the pool_status_string of this StorageVolume.  # noqa: E501

        Localized pool status string  # noqa: E501

        :return: The pool_status_string of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._pool_status_string

    @pool_status_string.setter
    def pool_status_string(self, pool_status_string):
        """Sets the pool_status_string of this StorageVolume.

        Localized pool status string  # noqa: E501

        :param pool_status_string: The pool_status_string of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._pool_status_string = pool_status_string

    @property
    def job_description(self):
        """Gets the job_description of this StorageVolume.  # noqa: E501

        Job description, null if not jobs  # noqa: E501

        :return: The job_description of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._job_description

    @job_description.setter
    def job_description(self, job_description):
        """Sets the job_description of this StorageVolume.

        Job description, null if not jobs  # noqa: E501

        :param job_description: The job_description of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._job_description = job_description

    @property
    def job_percentage_complete(self):
        """Gets the job_percentage_complete of this StorageVolume.  # noqa: E501

        Job percent complete, null if not jobs  # noqa: E501

        :return: The job_percentage_complete of this StorageVolume.  # noqa: E501
        :rtype: int
        """
        return self._job_percentage_complete

    @job_percentage_complete.setter
    def job_percentage_complete(self, job_percentage_complete):
        """Sets the job_percentage_complete of this StorageVolume.

        Job percent complete, null if not jobs  # noqa: E501

        :param job_percentage_complete: The job_percentage_complete of this StorageVolume.  # noqa: E501
        :type: int
        """

        self._job_percentage_complete = job_percentage_complete

    @property
    def attached(self):
        """Gets the attached of this StorageVolume.  # noqa: E501

        True is volume is attached  # noqa: E501

        :return: The attached of this StorageVolume.  # noqa: E501
        :rtype: bool
        """
        return self._attached

    @attached.setter
    def attached(self, attached):
        """Sets the attached of this StorageVolume.

        True is volume is attached  # noqa: E501

        :param attached: The attached of this StorageVolume.  # noqa: E501
        :type: bool
        """

        self._attached = attached

    @property
    def enclosure_serial_number(self):
        """Gets the enclosure_serial_number of this StorageVolume.  # noqa: E501

        Enclosure serial number.  # noqa: E501

        :return: The enclosure_serial_number of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_serial_number

    @enclosure_serial_number.setter
    def enclosure_serial_number(self, enclosure_serial_number):
        """Sets the enclosure_serial_number of this StorageVolume.

        Enclosure serial number.  # noqa: E501

        :param enclosure_serial_number: The enclosure_serial_number of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._enclosure_serial_number = enclosure_serial_number

    @property
    def license_type(self):
        """Gets the license_type of this StorageVolume.  # noqa: E501

        License type required for this volume  # noqa: E501

        :return: The license_type of this StorageVolume.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this StorageVolume.

        License type required for this volume  # noqa: E501

        :param license_type: The license_type of this StorageVolume.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def disk_locations(self):
        """Gets the disk_locations of this StorageVolume.  # noqa: E501

        List of disk locations  # noqa: E501

        :return: The disk_locations of this StorageVolume.  # noqa: E501
        :rtype: list[str]
        """
        return self._disk_locations

    @disk_locations.setter
    def disk_locations(self, disk_locations):
        """Sets the disk_locations of this StorageVolume.

        List of disk locations  # noqa: E501

        :param disk_locations: The disk_locations of this StorageVolume.  # noqa: E501
        :type: list[str]
        """

        self._disk_locations = disk_locations

    @property
    def status_reasons(self):
        """Gets the status_reasons of this StorageVolume.  # noqa: E501

        List of events or empty if none.  # noqa: E501

        :return: The status_reasons of this StorageVolume.  # noqa: E501
        :rtype: list[StatusEvent]
        """
        return self._status_reasons

    @status_reasons.setter
    def status_reasons(self, status_reasons):
        """Sets the status_reasons of this StorageVolume.

        List of events or empty if none.  # noqa: E501

        :param status_reasons: The status_reasons of this StorageVolume.  # noqa: E501
        :type: list[StatusEvent]
        """

        self._status_reasons = status_reasons

    @property
    def actual_connection(self):
        """Gets the actual_connection of this StorageVolume.  # noqa: E501

        Actual location of the associated pool  # noqa: E501

        :return: The actual_connection of this StorageVolume.  # noqa: E501
        :rtype: StorageLocation
        """
        return self._actual_connection

    @actual_connection.setter
    def actual_connection(self, actual_connection):
        """Sets the actual_connection of this StorageVolume.

        Actual location of the associated pool  # noqa: E501

        :param actual_connection: The actual_connection of this StorageVolume.  # noqa: E501
        :type: StorageLocation
        """

        self._actual_connection = actual_connection

    @property
    def expected_connection(self):
        """Gets the expected_connection of this StorageVolume.  # noqa: E501

        Expected location of the associated pool (if different from actual)  # noqa: E501

        :return: The expected_connection of this StorageVolume.  # noqa: E501
        :rtype: StorageLocation
        """
        return self._expected_connection

    @expected_connection.setter
    def expected_connection(self, expected_connection):
        """Sets the expected_connection of this StorageVolume.

        Expected location of the associated pool (if different from actual)  # noqa: E501

        :param expected_connection: The expected_connection of this StorageVolume.  # noqa: E501
        :type: StorageLocation
        """

        self._expected_connection = expected_connection

    @property
    def spare_disk_locations(self):
        """Gets the spare_disk_locations of this StorageVolume.  # noqa: E501

        List of spare disk locations  # noqa: E501

        :return: The spare_disk_locations of this StorageVolume.  # noqa: E501
        :rtype: list[str]
        """
        return self._spare_disk_locations

    @spare_disk_locations.setter
    def spare_disk_locations(self, spare_disk_locations):
        """Sets the spare_disk_locations of this StorageVolume.

        List of spare disk locations  # noqa: E501

        :param spare_disk_locations: The spare_disk_locations of this StorageVolume.  # noqa: E501
        :type: list[str]
        """

        self._spare_disk_locations = spare_disk_locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
