# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FsckProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repair': 'bool'
    }

    attribute_map = {
        'repair': 'repair'
    }

    def __init__(self, repair=False):  # noqa: E501
        """FsckProperties - a model defined in Swagger"""  # noqa: E501

        self._repair = None
        self.discriminator = None

        if repair is not None:
            self.repair = repair

    @property
    def repair(self):
        """Gets the repair of this FsckProperties.  # noqa: E501

        True if check and repair is to be initiated, false if check only is to be initiated  # noqa: E501

        :return: The repair of this FsckProperties.  # noqa: E501
        :rtype: bool
        """
        return self._repair

    @repair.setter
    def repair(self, repair):
        """Sets the repair of this FsckProperties.

        True if check and repair is to be initiated, false if check only is to be initiated  # noqa: E501

        :param repair: The repair of this FsckProperties.  # noqa: E501
        :type: bool
        """

        self._repair = repair

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FsckProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FsckProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
