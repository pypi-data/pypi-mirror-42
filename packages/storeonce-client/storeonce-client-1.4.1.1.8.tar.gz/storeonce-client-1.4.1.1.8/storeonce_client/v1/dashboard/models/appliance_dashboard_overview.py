# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Dashboard

    unused  # noqa: E501

    Component version: 6.1.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ApplianceDashboardOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'hostname': 'str',
        'platform_type': 'str',
        'software_version': 'str',
        'software_update_recommended': 'bool',
        'recommended_software_version': 'str',
        'local_disk_bytes': 'int',
        'local_user_bytes': 'int',
        'local_free_bytes': 'int',
        'local_capacity_bytes': 'int',
        'cloud_disk_bytes': 'int',
        'cloud_user_bytes': 'int',
        'cloud_free_bytes': 'int',
        'cloud_capacity_bytes': 'int',
        'catalyst_data_job_sessions': 'int',
        'nas_num_dedupe_sessions': 'int',
        'vtl_num_active_sessions': 'int',
        'catalyst_inbound_copy_job_sessions': 'int',
        'catalyst_outbound_copy_job_sessions': 'int',
        'rep_num_source_jobs': 'int',
        'rep_num_target_jobs': 'int',
        'max_streams_limit': 'int',
        'metrics_cpu_total': 'float',
        'metrics_memory_total_physical': 'int',
        'metrics_memory_used_percent': 'float',
        'metrics_data_disk_utilisation_percent': 'float',
        'appliance_status': 'str',
        'appliance_status_string': 'str',
        'data_services_status': 'str',
        'data_services_status_string': 'str',
        'license_status': 'str',
        'license_status_string': 'str',
        'user_storage_status': 'str',
        'user_storage_status_string': 'str',
        'hardware_status': 'str',
        'hardware_status_string': 'str',
        'remote_support_status': 'str',
        'remote_support_status_string': 'str',
        'cat_stores_summary': 'ServiceSummary',
        'cloud_bank_stores_summary': 'ServiceSummary',
        'nas_shares_summary': 'ServiceSummary',
        'vtl_libraries_summary': 'ServiceSummary',
        'nas_rep_mapping_summary': 'ServiceSummary',
        'vtl_rep_mapping_summary': 'ServiceSummary',
        'system_location': 'str',
        'contact_name': 'str',
        'contact_number': 'str',
        'contact_email': 'str',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'total_active_sessions': 'int',
        'dedupe_ratio': 'float',
        'capacity_saved_bytes': 'int',
        'capacity_saved_percent': 'float'
    }

    attribute_map = {
        'uuid': 'uuid',
        'hostname': 'hostname',
        'platform_type': 'platformType',
        'software_version': 'softwareVersion',
        'software_update_recommended': 'softwareUpdateRecommended',
        'recommended_software_version': 'recommendedSoftwareVersion',
        'local_disk_bytes': 'localDiskBytes',
        'local_user_bytes': 'localUserBytes',
        'local_free_bytes': 'localFreeBytes',
        'local_capacity_bytes': 'localCapacityBytes',
        'cloud_disk_bytes': 'cloudDiskBytes',
        'cloud_user_bytes': 'cloudUserBytes',
        'cloud_free_bytes': 'cloudFreeBytes',
        'cloud_capacity_bytes': 'cloudCapacityBytes',
        'catalyst_data_job_sessions': 'catalystDataJobSessions',
        'nas_num_dedupe_sessions': 'nasNumDedupeSessions',
        'vtl_num_active_sessions': 'vtlNumActiveSessions',
        'catalyst_inbound_copy_job_sessions': 'catalystInboundCopyJobSessions',
        'catalyst_outbound_copy_job_sessions': 'catalystOutboundCopyJobSessions',
        'rep_num_source_jobs': 'repNumSourceJobs',
        'rep_num_target_jobs': 'repNumTargetJobs',
        'max_streams_limit': 'maxStreamsLimit',
        'metrics_cpu_total': 'metricsCpuTotal',
        'metrics_memory_total_physical': 'metricsMemoryTotalPhysical',
        'metrics_memory_used_percent': 'metricsMemoryUsedPercent',
        'metrics_data_disk_utilisation_percent': 'metricsDataDiskUtilisationPercent',
        'appliance_status': 'applianceStatus',
        'appliance_status_string': 'applianceStatusString',
        'data_services_status': 'dataServicesStatus',
        'data_services_status_string': 'dataServicesStatusString',
        'license_status': 'licenseStatus',
        'license_status_string': 'licenseStatusString',
        'user_storage_status': 'userStorageStatus',
        'user_storage_status_string': 'userStorageStatusString',
        'hardware_status': 'hardwareStatus',
        'hardware_status_string': 'hardwareStatusString',
        'remote_support_status': 'remoteSupportStatus',
        'remote_support_status_string': 'remoteSupportStatusString',
        'cat_stores_summary': 'catStoresSummary',
        'cloud_bank_stores_summary': 'cloudBankStoresSummary',
        'nas_shares_summary': 'nasSharesSummary',
        'vtl_libraries_summary': 'vtlLibrariesSummary',
        'nas_rep_mapping_summary': 'nasRepMappingSummary',
        'vtl_rep_mapping_summary': 'vtlRepMappingSummary',
        'system_location': 'systemLocation',
        'contact_name': 'contactName',
        'contact_number': 'contactNumber',
        'contact_email': 'contactEmail',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'total_active_sessions': 'totalActiveSessions',
        'dedupe_ratio': 'dedupeRatio',
        'capacity_saved_bytes': 'capacitySavedBytes',
        'capacity_saved_percent': 'capacitySavedPercent'
    }

    def __init__(self, uuid=None, hostname=None, platform_type=None, software_version=None, software_update_recommended=False, recommended_software_version=None, local_disk_bytes=None, local_user_bytes=None, local_free_bytes=None, local_capacity_bytes=None, cloud_disk_bytes=None, cloud_user_bytes=None, cloud_free_bytes=None, cloud_capacity_bytes=None, catalyst_data_job_sessions=None, nas_num_dedupe_sessions=None, vtl_num_active_sessions=None, catalyst_inbound_copy_job_sessions=None, catalyst_outbound_copy_job_sessions=None, rep_num_source_jobs=None, rep_num_target_jobs=None, max_streams_limit=None, metrics_cpu_total=None, metrics_memory_total_physical=None, metrics_memory_used_percent=None, metrics_data_disk_utilisation_percent=None, appliance_status=None, appliance_status_string=None, data_services_status=None, data_services_status_string=None, license_status=None, license_status_string=None, user_storage_status=None, user_storage_status_string=None, hardware_status=None, hardware_status_string=None, remote_support_status=None, remote_support_status_string=None, cat_stores_summary=None, cloud_bank_stores_summary=None, nas_shares_summary=None, vtl_libraries_summary=None, nas_rep_mapping_summary=None, vtl_rep_mapping_summary=None, system_location=None, contact_name=None, contact_number=None, contact_email=None, user_bytes=None, disk_bytes=None, total_active_sessions=None, dedupe_ratio=None, capacity_saved_bytes=None, capacity_saved_percent=None):  # noqa: E501
        """ApplianceDashboardOverview - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._hostname = None
        self._platform_type = None
        self._software_version = None
        self._software_update_recommended = None
        self._recommended_software_version = None
        self._local_disk_bytes = None
        self._local_user_bytes = None
        self._local_free_bytes = None
        self._local_capacity_bytes = None
        self._cloud_disk_bytes = None
        self._cloud_user_bytes = None
        self._cloud_free_bytes = None
        self._cloud_capacity_bytes = None
        self._catalyst_data_job_sessions = None
        self._nas_num_dedupe_sessions = None
        self._vtl_num_active_sessions = None
        self._catalyst_inbound_copy_job_sessions = None
        self._catalyst_outbound_copy_job_sessions = None
        self._rep_num_source_jobs = None
        self._rep_num_target_jobs = None
        self._max_streams_limit = None
        self._metrics_cpu_total = None
        self._metrics_memory_total_physical = None
        self._metrics_memory_used_percent = None
        self._metrics_data_disk_utilisation_percent = None
        self._appliance_status = None
        self._appliance_status_string = None
        self._data_services_status = None
        self._data_services_status_string = None
        self._license_status = None
        self._license_status_string = None
        self._user_storage_status = None
        self._user_storage_status_string = None
        self._hardware_status = None
        self._hardware_status_string = None
        self._remote_support_status = None
        self._remote_support_status_string = None
        self._cat_stores_summary = None
        self._cloud_bank_stores_summary = None
        self._nas_shares_summary = None
        self._vtl_libraries_summary = None
        self._nas_rep_mapping_summary = None
        self._vtl_rep_mapping_summary = None
        self._system_location = None
        self._contact_name = None
        self._contact_number = None
        self._contact_email = None
        self._user_bytes = None
        self._disk_bytes = None
        self._total_active_sessions = None
        self._dedupe_ratio = None
        self._capacity_saved_bytes = None
        self._capacity_saved_percent = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if hostname is not None:
            self.hostname = hostname
        if platform_type is not None:
            self.platform_type = platform_type
        if software_version is not None:
            self.software_version = software_version
        if software_update_recommended is not None:
            self.software_update_recommended = software_update_recommended
        if recommended_software_version is not None:
            self.recommended_software_version = recommended_software_version
        if local_disk_bytes is not None:
            self.local_disk_bytes = local_disk_bytes
        if local_user_bytes is not None:
            self.local_user_bytes = local_user_bytes
        if local_free_bytes is not None:
            self.local_free_bytes = local_free_bytes
        if local_capacity_bytes is not None:
            self.local_capacity_bytes = local_capacity_bytes
        if cloud_disk_bytes is not None:
            self.cloud_disk_bytes = cloud_disk_bytes
        if cloud_user_bytes is not None:
            self.cloud_user_bytes = cloud_user_bytes
        if cloud_free_bytes is not None:
            self.cloud_free_bytes = cloud_free_bytes
        if cloud_capacity_bytes is not None:
            self.cloud_capacity_bytes = cloud_capacity_bytes
        if catalyst_data_job_sessions is not None:
            self.catalyst_data_job_sessions = catalyst_data_job_sessions
        if nas_num_dedupe_sessions is not None:
            self.nas_num_dedupe_sessions = nas_num_dedupe_sessions
        if vtl_num_active_sessions is not None:
            self.vtl_num_active_sessions = vtl_num_active_sessions
        if catalyst_inbound_copy_job_sessions is not None:
            self.catalyst_inbound_copy_job_sessions = catalyst_inbound_copy_job_sessions
        if catalyst_outbound_copy_job_sessions is not None:
            self.catalyst_outbound_copy_job_sessions = catalyst_outbound_copy_job_sessions
        if rep_num_source_jobs is not None:
            self.rep_num_source_jobs = rep_num_source_jobs
        if rep_num_target_jobs is not None:
            self.rep_num_target_jobs = rep_num_target_jobs
        if max_streams_limit is not None:
            self.max_streams_limit = max_streams_limit
        if metrics_cpu_total is not None:
            self.metrics_cpu_total = metrics_cpu_total
        if metrics_memory_total_physical is not None:
            self.metrics_memory_total_physical = metrics_memory_total_physical
        if metrics_memory_used_percent is not None:
            self.metrics_memory_used_percent = metrics_memory_used_percent
        if metrics_data_disk_utilisation_percent is not None:
            self.metrics_data_disk_utilisation_percent = metrics_data_disk_utilisation_percent
        if appliance_status is not None:
            self.appliance_status = appliance_status
        if appliance_status_string is not None:
            self.appliance_status_string = appliance_status_string
        if data_services_status is not None:
            self.data_services_status = data_services_status
        if data_services_status_string is not None:
            self.data_services_status_string = data_services_status_string
        if license_status is not None:
            self.license_status = license_status
        if license_status_string is not None:
            self.license_status_string = license_status_string
        if user_storage_status is not None:
            self.user_storage_status = user_storage_status
        if user_storage_status_string is not None:
            self.user_storage_status_string = user_storage_status_string
        if hardware_status is not None:
            self.hardware_status = hardware_status
        if hardware_status_string is not None:
            self.hardware_status_string = hardware_status_string
        if remote_support_status is not None:
            self.remote_support_status = remote_support_status
        if remote_support_status_string is not None:
            self.remote_support_status_string = remote_support_status_string
        if cat_stores_summary is not None:
            self.cat_stores_summary = cat_stores_summary
        if cloud_bank_stores_summary is not None:
            self.cloud_bank_stores_summary = cloud_bank_stores_summary
        if nas_shares_summary is not None:
            self.nas_shares_summary = nas_shares_summary
        if vtl_libraries_summary is not None:
            self.vtl_libraries_summary = vtl_libraries_summary
        if nas_rep_mapping_summary is not None:
            self.nas_rep_mapping_summary = nas_rep_mapping_summary
        if vtl_rep_mapping_summary is not None:
            self.vtl_rep_mapping_summary = vtl_rep_mapping_summary
        if system_location is not None:
            self.system_location = system_location
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_number is not None:
            self.contact_number = contact_number
        if contact_email is not None:
            self.contact_email = contact_email
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if total_active_sessions is not None:
            self.total_active_sessions = total_active_sessions
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if capacity_saved_bytes is not None:
            self.capacity_saved_bytes = capacity_saved_bytes
        if capacity_saved_percent is not None:
            self.capacity_saved_percent = capacity_saved_percent

    @property
    def uuid(self):
        """Gets the uuid of this ApplianceDashboardOverview.  # noqa: E501

        UUID of the appliance  # noqa: E501

        :return: The uuid of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ApplianceDashboardOverview.

        UUID of the appliance  # noqa: E501

        :param uuid: The uuid of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def hostname(self):
        """Gets the hostname of this ApplianceDashboardOverview.  # noqa: E501

        hostname of the appliance  # noqa: E501

        :return: The hostname of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ApplianceDashboardOverview.

        hostname of the appliance  # noqa: E501

        :param hostname: The hostname of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def platform_type(self):
        """Gets the platform_type of this ApplianceDashboardOverview.  # noqa: E501

        product platform name of the appliance  # noqa: E501

        :return: The platform_type of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this ApplianceDashboardOverview.

        product platform name of the appliance  # noqa: E501

        :param platform_type: The platform_type of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._platform_type = platform_type

    @property
    def software_version(self):
        """Gets the software_version of this ApplianceDashboardOverview.  # noqa: E501

        software version of the appliance  # noqa: E501

        :return: The software_version of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this ApplianceDashboardOverview.

        software version of the appliance  # noqa: E501

        :param software_version: The software_version of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def software_update_recommended(self):
        """Gets the software_update_recommended of this ApplianceDashboardOverview.  # noqa: E501

        software update is recommended  # noqa: E501

        :return: The software_update_recommended of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: bool
        """
        return self._software_update_recommended

    @software_update_recommended.setter
    def software_update_recommended(self, software_update_recommended):
        """Sets the software_update_recommended of this ApplianceDashboardOverview.

        software update is recommended  # noqa: E501

        :param software_update_recommended: The software_update_recommended of this ApplianceDashboardOverview.  # noqa: E501
        :type: bool
        """

        self._software_update_recommended = software_update_recommended

    @property
    def recommended_software_version(self):
        """Gets the recommended_software_version of this ApplianceDashboardOverview.  # noqa: E501

        recommended software version to update to  # noqa: E501

        :return: The recommended_software_version of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._recommended_software_version

    @recommended_software_version.setter
    def recommended_software_version(self, recommended_software_version):
        """Sets the recommended_software_version of this ApplianceDashboardOverview.

        recommended software version to update to  # noqa: E501

        :param recommended_software_version: The recommended_software_version of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._recommended_software_version = recommended_software_version

    @property
    def local_disk_bytes(self):
        """Gets the local_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total stored on local disk for the appliance in bytes  # noqa: E501

        :return: The local_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._local_disk_bytes

    @local_disk_bytes.setter
    def local_disk_bytes(self, local_disk_bytes):
        """Sets the local_disk_bytes of this ApplianceDashboardOverview.

        total stored on local disk for the appliance in bytes  # noqa: E501

        :param local_disk_bytes: The local_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._local_disk_bytes = local_disk_bytes

    @property
    def local_user_bytes(self):
        """Gets the local_user_bytes of this ApplianceDashboardOverview.  # noqa: E501

        user data stored on the appliance in bytes  # noqa: E501

        :return: The local_user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._local_user_bytes

    @local_user_bytes.setter
    def local_user_bytes(self, local_user_bytes):
        """Sets the local_user_bytes of this ApplianceDashboardOverview.

        user data stored on the appliance in bytes  # noqa: E501

        :param local_user_bytes: The local_user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._local_user_bytes = local_user_bytes

    @property
    def local_free_bytes(self):
        """Gets the local_free_bytes of this ApplianceDashboardOverview.  # noqa: E501

        available storage on the appliance in bytes  # noqa: E501

        :return: The local_free_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._local_free_bytes

    @local_free_bytes.setter
    def local_free_bytes(self, local_free_bytes):
        """Sets the local_free_bytes of this ApplianceDashboardOverview.

        available storage on the appliance in bytes  # noqa: E501

        :param local_free_bytes: The local_free_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._local_free_bytes = local_free_bytes

    @property
    def local_capacity_bytes(self):
        """Gets the local_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total storage capacity of the appliance in bytes  # noqa: E501

        :return: The local_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._local_capacity_bytes

    @local_capacity_bytes.setter
    def local_capacity_bytes(self, local_capacity_bytes):
        """Sets the local_capacity_bytes of this ApplianceDashboardOverview.

        total storage capacity of the appliance in bytes  # noqa: E501

        :param local_capacity_bytes: The local_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._local_capacity_bytes = local_capacity_bytes

    @property
    def cloud_disk_bytes(self):
        """Gets the cloud_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total stored in the cloud for the appliance in bytes  # noqa: E501

        :return: The cloud_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._cloud_disk_bytes

    @cloud_disk_bytes.setter
    def cloud_disk_bytes(self, cloud_disk_bytes):
        """Sets the cloud_disk_bytes of this ApplianceDashboardOverview.

        total stored in the cloud for the appliance in bytes  # noqa: E501

        :param cloud_disk_bytes: The cloud_disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._cloud_disk_bytes = cloud_disk_bytes

    @property
    def cloud_user_bytes(self):
        """Gets the cloud_user_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total user data stored in the cloud for the appliance in bytes  # noqa: E501

        :return: The cloud_user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._cloud_user_bytes

    @cloud_user_bytes.setter
    def cloud_user_bytes(self, cloud_user_bytes):
        """Sets the cloud_user_bytes of this ApplianceDashboardOverview.

        total user data stored in the cloud for the appliance in bytes  # noqa: E501

        :param cloud_user_bytes: The cloud_user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._cloud_user_bytes = cloud_user_bytes

    @property
    def cloud_free_bytes(self):
        """Gets the cloud_free_bytes of this ApplianceDashboardOverview.  # noqa: E501

        available cloud storage for the appliance in bytes  # noqa: E501

        :return: The cloud_free_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._cloud_free_bytes

    @cloud_free_bytes.setter
    def cloud_free_bytes(self, cloud_free_bytes):
        """Sets the cloud_free_bytes of this ApplianceDashboardOverview.

        available cloud storage for the appliance in bytes  # noqa: E501

        :param cloud_free_bytes: The cloud_free_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._cloud_free_bytes = cloud_free_bytes

    @property
    def cloud_capacity_bytes(self):
        """Gets the cloud_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total capacity of cloud storage for the appliance in bytes  # noqa: E501

        :return: The cloud_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._cloud_capacity_bytes

    @cloud_capacity_bytes.setter
    def cloud_capacity_bytes(self, cloud_capacity_bytes):
        """Sets the cloud_capacity_bytes of this ApplianceDashboardOverview.

        total capacity of cloud storage for the appliance in bytes  # noqa: E501

        :param cloud_capacity_bytes: The cloud_capacity_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._cloud_capacity_bytes = cloud_capacity_bytes

    @property
    def catalyst_data_job_sessions(self):
        """Gets the catalyst_data_job_sessions of this ApplianceDashboardOverview.  # noqa: E501

        catalyst number of data job sessions  # noqa: E501

        :return: The catalyst_data_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._catalyst_data_job_sessions

    @catalyst_data_job_sessions.setter
    def catalyst_data_job_sessions(self, catalyst_data_job_sessions):
        """Sets the catalyst_data_job_sessions of this ApplianceDashboardOverview.

        catalyst number of data job sessions  # noqa: E501

        :param catalyst_data_job_sessions: The catalyst_data_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._catalyst_data_job_sessions = catalyst_data_job_sessions

    @property
    def nas_num_dedupe_sessions(self):
        """Gets the nas_num_dedupe_sessions of this ApplianceDashboardOverview.  # noqa: E501

        nas numbler of open dedupe sessions  # noqa: E501

        :return: The nas_num_dedupe_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._nas_num_dedupe_sessions

    @nas_num_dedupe_sessions.setter
    def nas_num_dedupe_sessions(self, nas_num_dedupe_sessions):
        """Sets the nas_num_dedupe_sessions of this ApplianceDashboardOverview.

        nas numbler of open dedupe sessions  # noqa: E501

        :param nas_num_dedupe_sessions: The nas_num_dedupe_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._nas_num_dedupe_sessions = nas_num_dedupe_sessions

    @property
    def vtl_num_active_sessions(self):
        """Gets the vtl_num_active_sessions of this ApplianceDashboardOverview.  # noqa: E501

        vtl number of active sessions  # noqa: E501

        :return: The vtl_num_active_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._vtl_num_active_sessions

    @vtl_num_active_sessions.setter
    def vtl_num_active_sessions(self, vtl_num_active_sessions):
        """Sets the vtl_num_active_sessions of this ApplianceDashboardOverview.

        vtl number of active sessions  # noqa: E501

        :param vtl_num_active_sessions: The vtl_num_active_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._vtl_num_active_sessions = vtl_num_active_sessions

    @property
    def catalyst_inbound_copy_job_sessions(self):
        """Gets the catalyst_inbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501

        catalyst number of inbound copy job sessions  # noqa: E501

        :return: The catalyst_inbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._catalyst_inbound_copy_job_sessions

    @catalyst_inbound_copy_job_sessions.setter
    def catalyst_inbound_copy_job_sessions(self, catalyst_inbound_copy_job_sessions):
        """Sets the catalyst_inbound_copy_job_sessions of this ApplianceDashboardOverview.

        catalyst number of inbound copy job sessions  # noqa: E501

        :param catalyst_inbound_copy_job_sessions: The catalyst_inbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._catalyst_inbound_copy_job_sessions = catalyst_inbound_copy_job_sessions

    @property
    def catalyst_outbound_copy_job_sessions(self):
        """Gets the catalyst_outbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501

        catalyst number of outbound copy job sessions  # noqa: E501

        :return: The catalyst_outbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._catalyst_outbound_copy_job_sessions

    @catalyst_outbound_copy_job_sessions.setter
    def catalyst_outbound_copy_job_sessions(self, catalyst_outbound_copy_job_sessions):
        """Sets the catalyst_outbound_copy_job_sessions of this ApplianceDashboardOverview.

        catalyst number of outbound copy job sessions  # noqa: E501

        :param catalyst_outbound_copy_job_sessions: The catalyst_outbound_copy_job_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._catalyst_outbound_copy_job_sessions = catalyst_outbound_copy_job_sessions

    @property
    def rep_num_source_jobs(self):
        """Gets the rep_num_source_jobs of this ApplianceDashboardOverview.  # noqa: E501

        replication number of source jobs  # noqa: E501

        :return: The rep_num_source_jobs of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._rep_num_source_jobs

    @rep_num_source_jobs.setter
    def rep_num_source_jobs(self, rep_num_source_jobs):
        """Sets the rep_num_source_jobs of this ApplianceDashboardOverview.

        replication number of source jobs  # noqa: E501

        :param rep_num_source_jobs: The rep_num_source_jobs of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._rep_num_source_jobs = rep_num_source_jobs

    @property
    def rep_num_target_jobs(self):
        """Gets the rep_num_target_jobs of this ApplianceDashboardOverview.  # noqa: E501

        replication number of target jobs  # noqa: E501

        :return: The rep_num_target_jobs of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._rep_num_target_jobs

    @rep_num_target_jobs.setter
    def rep_num_target_jobs(self, rep_num_target_jobs):
        """Sets the rep_num_target_jobs of this ApplianceDashboardOverview.

        replication number of target jobs  # noqa: E501

        :param rep_num_target_jobs: The rep_num_target_jobs of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._rep_num_target_jobs = rep_num_target_jobs

    @property
    def max_streams_limit(self):
        """Gets the max_streams_limit of this ApplianceDashboardOverview.  # noqa: E501

        smm number of maximum streams limit  # noqa: E501

        :return: The max_streams_limit of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._max_streams_limit

    @max_streams_limit.setter
    def max_streams_limit(self, max_streams_limit):
        """Sets the max_streams_limit of this ApplianceDashboardOverview.

        smm number of maximum streams limit  # noqa: E501

        :param max_streams_limit: The max_streams_limit of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._max_streams_limit = max_streams_limit

    @property
    def metrics_cpu_total(self):
        """Gets the metrics_cpu_total of this ApplianceDashboardOverview.  # noqa: E501

        total cpu  # noqa: E501

        :return: The metrics_cpu_total of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._metrics_cpu_total

    @metrics_cpu_total.setter
    def metrics_cpu_total(self, metrics_cpu_total):
        """Sets the metrics_cpu_total of this ApplianceDashboardOverview.

        total cpu  # noqa: E501

        :param metrics_cpu_total: The metrics_cpu_total of this ApplianceDashboardOverview.  # noqa: E501
        :type: float
        """

        self._metrics_cpu_total = metrics_cpu_total

    @property
    def metrics_memory_total_physical(self):
        """Gets the metrics_memory_total_physical of this ApplianceDashboardOverview.  # noqa: E501

        total physical memory  # noqa: E501

        :return: The metrics_memory_total_physical of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._metrics_memory_total_physical

    @metrics_memory_total_physical.setter
    def metrics_memory_total_physical(self, metrics_memory_total_physical):
        """Sets the metrics_memory_total_physical of this ApplianceDashboardOverview.

        total physical memory  # noqa: E501

        :param metrics_memory_total_physical: The metrics_memory_total_physical of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._metrics_memory_total_physical = metrics_memory_total_physical

    @property
    def metrics_memory_used_percent(self):
        """Gets the metrics_memory_used_percent of this ApplianceDashboardOverview.  # noqa: E501

        used memory percentage  # noqa: E501

        :return: The metrics_memory_used_percent of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._metrics_memory_used_percent

    @metrics_memory_used_percent.setter
    def metrics_memory_used_percent(self, metrics_memory_used_percent):
        """Sets the metrics_memory_used_percent of this ApplianceDashboardOverview.

        used memory percentage  # noqa: E501

        :param metrics_memory_used_percent: The metrics_memory_used_percent of this ApplianceDashboardOverview.  # noqa: E501
        :type: float
        """

        self._metrics_memory_used_percent = metrics_memory_used_percent

    @property
    def metrics_data_disk_utilisation_percent(self):
        """Gets the metrics_data_disk_utilisation_percent of this ApplianceDashboardOverview.  # noqa: E501

        disk utilisation percentage  # noqa: E501

        :return: The metrics_data_disk_utilisation_percent of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._metrics_data_disk_utilisation_percent

    @metrics_data_disk_utilisation_percent.setter
    def metrics_data_disk_utilisation_percent(self, metrics_data_disk_utilisation_percent):
        """Sets the metrics_data_disk_utilisation_percent of this ApplianceDashboardOverview.

        disk utilisation percentage  # noqa: E501

        :param metrics_data_disk_utilisation_percent: The metrics_data_disk_utilisation_percent of this ApplianceDashboardOverview.  # noqa: E501
        :type: float
        """

        self._metrics_data_disk_utilisation_percent = metrics_data_disk_utilisation_percent

    @property
    def appliance_status(self):
        """Gets the appliance_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of the appliance  # noqa: E501

        :return: The appliance_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._appliance_status

    @appliance_status.setter
    def appliance_status(self, appliance_status):
        """Sets the appliance_status of this ApplianceDashboardOverview.

        enum simplified status of the appliance  # noqa: E501

        :param appliance_status: The appliance_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if appliance_status not in allowed_values:
            raise ValueError(
                "Invalid value for `appliance_status` ({0}), must be one of {1}"  # noqa: E501
                .format(appliance_status, allowed_values)
            )

        self._appliance_status = appliance_status

    @property
    def appliance_status_string(self):
        """Gets the appliance_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of the appliance  # noqa: E501

        :return: The appliance_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._appliance_status_string

    @appliance_status_string.setter
    def appliance_status_string(self, appliance_status_string):
        """Sets the appliance_status_string of this ApplianceDashboardOverview.

        localised simplified status of the appliance  # noqa: E501

        :param appliance_status_string: The appliance_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._appliance_status_string = appliance_status_string

    @property
    def data_services_status(self):
        """Gets the data_services_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of the data services  # noqa: E501

        :return: The data_services_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._data_services_status

    @data_services_status.setter
    def data_services_status(self, data_services_status):
        """Sets the data_services_status of this ApplianceDashboardOverview.

        enum simplified status of the data services  # noqa: E501

        :param data_services_status: The data_services_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if data_services_status not in allowed_values:
            raise ValueError(
                "Invalid value for `data_services_status` ({0}), must be one of {1}"  # noqa: E501
                .format(data_services_status, allowed_values)
            )

        self._data_services_status = data_services_status

    @property
    def data_services_status_string(self):
        """Gets the data_services_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of the data services  # noqa: E501

        :return: The data_services_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._data_services_status_string

    @data_services_status_string.setter
    def data_services_status_string(self, data_services_status_string):
        """Sets the data_services_status_string of this ApplianceDashboardOverview.

        localised simplified status of the data services  # noqa: E501

        :param data_services_status_string: The data_services_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._data_services_status_string = data_services_status_string

    @property
    def license_status(self):
        """Gets the license_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of the licencing  # noqa: E501

        :return: The license_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._license_status

    @license_status.setter
    def license_status(self, license_status):
        """Sets the license_status of this ApplianceDashboardOverview.

        enum simplified status of the licencing  # noqa: E501

        :param license_status: The license_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if license_status not in allowed_values:
            raise ValueError(
                "Invalid value for `license_status` ({0}), must be one of {1}"  # noqa: E501
                .format(license_status, allowed_values)
            )

        self._license_status = license_status

    @property
    def license_status_string(self):
        """Gets the license_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of the licencing  # noqa: E501

        :return: The license_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._license_status_string

    @license_status_string.setter
    def license_status_string(self, license_status_string):
        """Sets the license_status_string of this ApplianceDashboardOverview.

        localised simplified status of the licencing  # noqa: E501

        :param license_status_string: The license_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._license_status_string = license_status_string

    @property
    def user_storage_status(self):
        """Gets the user_storage_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of the user storage  # noqa: E501

        :return: The user_storage_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._user_storage_status

    @user_storage_status.setter
    def user_storage_status(self, user_storage_status):
        """Sets the user_storage_status of this ApplianceDashboardOverview.

        enum simplified status of the user storage  # noqa: E501

        :param user_storage_status: The user_storage_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if user_storage_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_storage_status` ({0}), must be one of {1}"  # noqa: E501
                .format(user_storage_status, allowed_values)
            )

        self._user_storage_status = user_storage_status

    @property
    def user_storage_status_string(self):
        """Gets the user_storage_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of the user storage  # noqa: E501

        :return: The user_storage_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._user_storage_status_string

    @user_storage_status_string.setter
    def user_storage_status_string(self, user_storage_status_string):
        """Sets the user_storage_status_string of this ApplianceDashboardOverview.

        localised simplified status of the user storage  # noqa: E501

        :param user_storage_status_string: The user_storage_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._user_storage_status_string = user_storage_status_string

    @property
    def hardware_status(self):
        """Gets the hardware_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of the hardware  # noqa: E501

        :return: The hardware_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._hardware_status

    @hardware_status.setter
    def hardware_status(self, hardware_status):
        """Sets the hardware_status of this ApplianceDashboardOverview.

        enum simplified status of the hardware  # noqa: E501

        :param hardware_status: The hardware_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if hardware_status not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_status` ({0}), must be one of {1}"  # noqa: E501
                .format(hardware_status, allowed_values)
            )

        self._hardware_status = hardware_status

    @property
    def hardware_status_string(self):
        """Gets the hardware_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of the hardware  # noqa: E501

        :return: The hardware_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._hardware_status_string

    @hardware_status_string.setter
    def hardware_status_string(self, hardware_status_string):
        """Sets the hardware_status_string of this ApplianceDashboardOverview.

        localised simplified status of the hardware  # noqa: E501

        :param hardware_status_string: The hardware_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._hardware_status_string = hardware_status_string

    @property
    def remote_support_status(self):
        """Gets the remote_support_status of this ApplianceDashboardOverview.  # noqa: E501

        enum simplified status of remote support  # noqa: E501

        :return: The remote_support_status of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._remote_support_status

    @remote_support_status.setter
    def remote_support_status(self, remote_support_status):
        """Sets the remote_support_status of this ApplianceDashboardOverview.

        enum simplified status of remote support  # noqa: E501

        :param remote_support_status: The remote_support_status of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "WARNING", "CRITICAL", "NOT_HARDWARE"]  # noqa: E501
        if remote_support_status not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_support_status` ({0}), must be one of {1}"  # noqa: E501
                .format(remote_support_status, allowed_values)
            )

        self._remote_support_status = remote_support_status

    @property
    def remote_support_status_string(self):
        """Gets the remote_support_status_string of this ApplianceDashboardOverview.  # noqa: E501

        localised simplified status of remote support  # noqa: E501

        :return: The remote_support_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._remote_support_status_string

    @remote_support_status_string.setter
    def remote_support_status_string(self, remote_support_status_string):
        """Sets the remote_support_status_string of this ApplianceDashboardOverview.

        localised simplified status of remote support  # noqa: E501

        :param remote_support_status_string: The remote_support_status_string of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._remote_support_status_string = remote_support_status_string

    @property
    def cat_stores_summary(self):
        """Gets the cat_stores_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of catalyst (non cloud bank) stores for the appliance  # noqa: E501

        :return: The cat_stores_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._cat_stores_summary

    @cat_stores_summary.setter
    def cat_stores_summary(self, cat_stores_summary):
        """Sets the cat_stores_summary of this ApplianceDashboardOverview.

        summary of catalyst (non cloud bank) stores for the appliance  # noqa: E501

        :param cat_stores_summary: The cat_stores_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._cat_stores_summary = cat_stores_summary

    @property
    def cloud_bank_stores_summary(self):
        """Gets the cloud_bank_stores_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of catalyst cloud bank stores for the appliance  # noqa: E501

        :return: The cloud_bank_stores_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._cloud_bank_stores_summary

    @cloud_bank_stores_summary.setter
    def cloud_bank_stores_summary(self, cloud_bank_stores_summary):
        """Sets the cloud_bank_stores_summary of this ApplianceDashboardOverview.

        summary of catalyst cloud bank stores for the appliance  # noqa: E501

        :param cloud_bank_stores_summary: The cloud_bank_stores_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._cloud_bank_stores_summary = cloud_bank_stores_summary

    @property
    def nas_shares_summary(self):
        """Gets the nas_shares_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of nas shares for the appliance  # noqa: E501

        :return: The nas_shares_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._nas_shares_summary

    @nas_shares_summary.setter
    def nas_shares_summary(self, nas_shares_summary):
        """Sets the nas_shares_summary of this ApplianceDashboardOverview.

        summary of nas shares for the appliance  # noqa: E501

        :param nas_shares_summary: The nas_shares_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._nas_shares_summary = nas_shares_summary

    @property
    def vtl_libraries_summary(self):
        """Gets the vtl_libraries_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of vtl libraries for the appliance  # noqa: E501

        :return: The vtl_libraries_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._vtl_libraries_summary

    @vtl_libraries_summary.setter
    def vtl_libraries_summary(self, vtl_libraries_summary):
        """Sets the vtl_libraries_summary of this ApplianceDashboardOverview.

        summary of vtl libraries for the appliance  # noqa: E501

        :param vtl_libraries_summary: The vtl_libraries_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._vtl_libraries_summary = vtl_libraries_summary

    @property
    def nas_rep_mapping_summary(self):
        """Gets the nas_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of nas replication mappings for the appliance  # noqa: E501

        :return: The nas_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._nas_rep_mapping_summary

    @nas_rep_mapping_summary.setter
    def nas_rep_mapping_summary(self, nas_rep_mapping_summary):
        """Sets the nas_rep_mapping_summary of this ApplianceDashboardOverview.

        summary of nas replication mappings for the appliance  # noqa: E501

        :param nas_rep_mapping_summary: The nas_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._nas_rep_mapping_summary = nas_rep_mapping_summary

    @property
    def vtl_rep_mapping_summary(self):
        """Gets the vtl_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501

        summary of vtl replication mappings for the appliance  # noqa: E501

        :return: The vtl_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._vtl_rep_mapping_summary

    @vtl_rep_mapping_summary.setter
    def vtl_rep_mapping_summary(self, vtl_rep_mapping_summary):
        """Sets the vtl_rep_mapping_summary of this ApplianceDashboardOverview.

        summary of vtl replication mappings for the appliance  # noqa: E501

        :param vtl_rep_mapping_summary: The vtl_rep_mapping_summary of this ApplianceDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._vtl_rep_mapping_summary = vtl_rep_mapping_summary

    @property
    def system_location(self):
        """Gets the system_location of this ApplianceDashboardOverview.  # noqa: E501

        location of the appliance  # noqa: E501

        :return: The system_location of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._system_location

    @system_location.setter
    def system_location(self, system_location):
        """Sets the system_location of this ApplianceDashboardOverview.

        location of the appliance  # noqa: E501

        :param system_location: The system_location of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._system_location = system_location

    @property
    def contact_name(self):
        """Gets the contact_name of this ApplianceDashboardOverview.  # noqa: E501

        contact name for the appliance  # noqa: E501

        :return: The contact_name of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ApplianceDashboardOverview.

        contact name for the appliance  # noqa: E501

        :param contact_name: The contact_name of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_number(self):
        """Gets the contact_number of this ApplianceDashboardOverview.  # noqa: E501

        contact number for the appliance  # noqa: E501

        :return: The contact_number of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this ApplianceDashboardOverview.

        contact number for the appliance  # noqa: E501

        :param contact_number: The contact_number of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def contact_email(self):
        """Gets the contact_email of this ApplianceDashboardOverview.  # noqa: E501

        contact email for the appliance  # noqa: E501

        :return: The contact_email of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this ApplianceDashboardOverview.

        contact email for the appliance  # noqa: E501

        :param contact_email: The contact_email of this ApplianceDashboardOverview.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def user_bytes(self):
        """Gets the user_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total user data stored (both locally and in cloud) for the appliance in bytes  # noqa: E501

        :return: The user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this ApplianceDashboardOverview.

        total user data stored (both locally and in cloud) for the appliance in bytes  # noqa: E501

        :param user_bytes: The user_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total data stored (both locally and in cloud) for the appliance in bytes  # noqa: E501

        :return: The disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this ApplianceDashboardOverview.

        total data stored (both locally and in cloud) for the appliance in bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def total_active_sessions(self):
        """Gets the total_active_sessions of this ApplianceDashboardOverview.  # noqa: E501

        total number of active sessions  # noqa: E501

        :return: The total_active_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._total_active_sessions

    @total_active_sessions.setter
    def total_active_sessions(self, total_active_sessions):
        """Sets the total_active_sessions of this ApplianceDashboardOverview.

        total number of active sessions  # noqa: E501

        :param total_active_sessions: The total_active_sessions of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._total_active_sessions = total_active_sessions

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this ApplianceDashboardOverview.  # noqa: E501

        overall dedupe ratio for the appliance  # noqa: E501

        :return: The dedupe_ratio of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this ApplianceDashboardOverview.

        overall dedupe ratio for the appliance  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this ApplianceDashboardOverview.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def capacity_saved_bytes(self):
        """Gets the capacity_saved_bytes of this ApplianceDashboardOverview.  # noqa: E501

        total saving in bytes through deduplication of user data for the appliance  # noqa: E501

        :return: The capacity_saved_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._capacity_saved_bytes

    @capacity_saved_bytes.setter
    def capacity_saved_bytes(self, capacity_saved_bytes):
        """Sets the capacity_saved_bytes of this ApplianceDashboardOverview.

        total saving in bytes through deduplication of user data for the appliance  # noqa: E501

        :param capacity_saved_bytes: The capacity_saved_bytes of this ApplianceDashboardOverview.  # noqa: E501
        :type: int
        """

        self._capacity_saved_bytes = capacity_saved_bytes

    @property
    def capacity_saved_percent(self):
        """Gets the capacity_saved_percent of this ApplianceDashboardOverview.  # noqa: E501

        percentage saving due to deduplication of user data for the appliance  # noqa: E501

        :return: The capacity_saved_percent of this ApplianceDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._capacity_saved_percent

    @capacity_saved_percent.setter
    def capacity_saved_percent(self, capacity_saved_percent):
        """Sets the capacity_saved_percent of this ApplianceDashboardOverview.

        percentage saving due to deduplication of user data for the appliance  # noqa: E501

        :param capacity_saved_percent: The capacity_saved_percent of this ApplianceDashboardOverview.  # noqa: E501
        :type: float
        """

        self._capacity_saved_percent = capacity_saved_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplianceDashboardOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplianceDashboardOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
