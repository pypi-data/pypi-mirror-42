# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Dashboard

    unused  # noqa: E501

    Component version: 6.1.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class UnknownStatusSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_unreachable': 'int',
        'num_synchronising': 'int',
        'total': 'int',
        'num_ok': 'int',
        'num_warning': 'int',
        'num_critical': 'int',
        'num_unknown': 'int'
    }

    attribute_map = {
        'num_unreachable': 'numUnreachable',
        'num_synchronising': 'numSynchronising',
        'total': 'total',
        'num_ok': 'numOk',
        'num_warning': 'numWarning',
        'num_critical': 'numCritical',
        'num_unknown': 'numUnknown'
    }

    def __init__(self, num_unreachable=None, num_synchronising=None, total=None, num_ok=None, num_warning=None, num_critical=None, num_unknown=None):  # noqa: E501
        """UnknownStatusSummary - a model defined in Swagger"""  # noqa: E501

        self._num_unreachable = None
        self._num_synchronising = None
        self._total = None
        self._num_ok = None
        self._num_warning = None
        self._num_critical = None
        self._num_unknown = None
        self.discriminator = None

        if num_unreachable is not None:
            self.num_unreachable = num_unreachable
        if num_synchronising is not None:
            self.num_synchronising = num_synchronising
        if total is not None:
            self.total = total
        if num_ok is not None:
            self.num_ok = num_ok
        if num_warning is not None:
            self.num_warning = num_warning
        if num_critical is not None:
            self.num_critical = num_critical
        if num_unknown is not None:
            self.num_unknown = num_unknown

    @property
    def num_unreachable(self):
        """Gets the num_unreachable of this UnknownStatusSummary.  # noqa: E501


        :return: The num_unreachable of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_unreachable

    @num_unreachable.setter
    def num_unreachable(self, num_unreachable):
        """Sets the num_unreachable of this UnknownStatusSummary.


        :param num_unreachable: The num_unreachable of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_unreachable = num_unreachable

    @property
    def num_synchronising(self):
        """Gets the num_synchronising of this UnknownStatusSummary.  # noqa: E501


        :return: The num_synchronising of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_synchronising

    @num_synchronising.setter
    def num_synchronising(self, num_synchronising):
        """Sets the num_synchronising of this UnknownStatusSummary.


        :param num_synchronising: The num_synchronising of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_synchronising = num_synchronising

    @property
    def total(self):
        """Gets the total of this UnknownStatusSummary.  # noqa: E501


        :return: The total of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UnknownStatusSummary.


        :param total: The total of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def num_ok(self):
        """Gets the num_ok of this UnknownStatusSummary.  # noqa: E501


        :return: The num_ok of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_ok

    @num_ok.setter
    def num_ok(self, num_ok):
        """Sets the num_ok of this UnknownStatusSummary.


        :param num_ok: The num_ok of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_ok = num_ok

    @property
    def num_warning(self):
        """Gets the num_warning of this UnknownStatusSummary.  # noqa: E501


        :return: The num_warning of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_warning

    @num_warning.setter
    def num_warning(self, num_warning):
        """Sets the num_warning of this UnknownStatusSummary.


        :param num_warning: The num_warning of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_warning = num_warning

    @property
    def num_critical(self):
        """Gets the num_critical of this UnknownStatusSummary.  # noqa: E501


        :return: The num_critical of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_critical

    @num_critical.setter
    def num_critical(self, num_critical):
        """Sets the num_critical of this UnknownStatusSummary.


        :param num_critical: The num_critical of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_critical = num_critical

    @property
    def num_unknown(self):
        """Gets the num_unknown of this UnknownStatusSummary.  # noqa: E501


        :return: The num_unknown of this UnknownStatusSummary.  # noqa: E501
        :rtype: int
        """
        return self._num_unknown

    @num_unknown.setter
    def num_unknown(self, num_unknown):
        """Sets the num_unknown of this UnknownStatusSummary.


        :param num_unknown: The num_unknown of this UnknownStatusSummary.  # noqa: E501
        :type: int
        """

        self._num_unknown = num_unknown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnknownStatusSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnknownStatusSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
