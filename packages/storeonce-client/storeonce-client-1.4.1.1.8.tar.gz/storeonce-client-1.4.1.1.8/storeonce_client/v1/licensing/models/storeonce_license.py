# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreonceLicense(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'name_string': 'str',
        'description_string': 'str',
        'start_date': 'datetime',
        'expiry_date': 'datetime',
        'demo_remaining': 'int',
        'license_ltu': 'int',
        'capacity_bytes': 'int',
        'license_defined_capacity': 'int',
        'password_type_string': 'str',
        'password_type': 'int',
        'feature_string': 'str',
        'feature_type_enum': 'str',
        'feature_type': 'int',
        'category_string': 'str',
        'license_category_enum': 'str',
        'category': 'int',
        'validation_result': 'str',
        'valid': 'bool',
        'on_grace_period': 'bool',
        'triallicense': 'bool',
        'allow_removal': 'bool',
        'feature_id': 'int'
    }

    attribute_map = {
        'uid': 'uid',
        'name_string': 'nameString',
        'description_string': 'descriptionString',
        'start_date': 'startDate',
        'expiry_date': 'expiryDate',
        'demo_remaining': 'demoRemaining',
        'license_ltu': 'licenseLTU',
        'capacity_bytes': 'capacityBytes',
        'license_defined_capacity': 'licenseDefinedCapacity',
        'password_type_string': 'passwordTypeString',
        'password_type': 'passwordType',
        'feature_string': 'featureString',
        'feature_type_enum': 'featureTypeEnum',
        'feature_type': 'featureType',
        'category_string': 'categoryString',
        'license_category_enum': 'licenseCategoryEnum',
        'category': 'category',
        'validation_result': 'validationResult',
        'valid': 'valid',
        'on_grace_period': 'onGracePeriod',
        'triallicense': 'triallicense',
        'allow_removal': 'allowRemoval',
        'feature_id': 'featureId'
    }

    def __init__(self, uid=None, name_string=None, description_string=None, start_date=None, expiry_date=None, demo_remaining=None, license_ltu=None, capacity_bytes=None, license_defined_capacity=None, password_type_string=None, password_type=None, feature_string=None, feature_type_enum=None, feature_type=None, category_string=None, license_category_enum=None, category=None, validation_result=None, valid=False, on_grace_period=False, triallicense=False, allow_removal=False, feature_id=None):  # noqa: E501
        """StoreonceLicense - a model defined in Swagger"""  # noqa: E501

        self._uid = None
        self._name_string = None
        self._description_string = None
        self._start_date = None
        self._expiry_date = None
        self._demo_remaining = None
        self._license_ltu = None
        self._capacity_bytes = None
        self._license_defined_capacity = None
        self._password_type_string = None
        self._password_type = None
        self._feature_string = None
        self._feature_type_enum = None
        self._feature_type = None
        self._category_string = None
        self._license_category_enum = None
        self._category = None
        self._validation_result = None
        self._valid = None
        self._on_grace_period = None
        self._triallicense = None
        self._allow_removal = None
        self._feature_id = None
        self.discriminator = None

        self.uid = uid
        self.name_string = name_string
        self.description_string = description_string
        self.start_date = start_date
        self.expiry_date = expiry_date
        if demo_remaining is not None:
            self.demo_remaining = demo_remaining
        self.license_ltu = license_ltu
        if capacity_bytes is not None:
            self.capacity_bytes = capacity_bytes
        if license_defined_capacity is not None:
            self.license_defined_capacity = license_defined_capacity
        self.password_type_string = password_type_string
        self.password_type = password_type
        self.feature_string = feature_string
        self.feature_type_enum = feature_type_enum
        self.feature_type = feature_type
        self.category_string = category_string
        self.license_category_enum = license_category_enum
        self.category = category
        if validation_result is not None:
            self.validation_result = validation_result
        self.valid = valid
        self.on_grace_period = on_grace_period
        if triallicense is not None:
            self.triallicense = triallicense
        if allow_removal is not None:
            self.allow_removal = allow_removal
        self.feature_id = feature_id

    @property
    def uid(self):
        """Gets the uid of this StoreonceLicense.  # noqa: E501

        License UID  # noqa: E501

        :return: The uid of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this StoreonceLicense.

        License UID  # noqa: E501

        :param uid: The uid of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def name_string(self):
        """Gets the name_string of this StoreonceLicense.  # noqa: E501

        Name  # noqa: E501

        :return: The name_string of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._name_string

    @name_string.setter
    def name_string(self, name_string):
        """Sets the name_string of this StoreonceLicense.

        Name  # noqa: E501

        :param name_string: The name_string of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if name_string is None:
            raise ValueError("Invalid value for `name_string`, must not be `None`")  # noqa: E501

        self._name_string = name_string

    @property
    def description_string(self):
        """Gets the description_string of this StoreonceLicense.  # noqa: E501

        Description  # noqa: E501

        :return: The description_string of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._description_string

    @description_string.setter
    def description_string(self, description_string):
        """Sets the description_string of this StoreonceLicense.

        Description  # noqa: E501

        :param description_string: The description_string of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if description_string is None:
            raise ValueError("Invalid value for `description_string`, must not be `None`")  # noqa: E501

        self._description_string = description_string

    @property
    def start_date(self):
        """Gets the start_date of this StoreonceLicense.  # noqa: E501

        Start date  # noqa: E501

        :return: The start_date of this StoreonceLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StoreonceLicense.

        Start date  # noqa: E501

        :param start_date: The start_date of this StoreonceLicense.  # noqa: E501
        :type: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def expiry_date(self):
        """Gets the expiry_date of this StoreonceLicense.  # noqa: E501

        Expiry date  # noqa: E501

        :return: The expiry_date of this StoreonceLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this StoreonceLicense.

        Expiry date  # noqa: E501

        :param expiry_date: The expiry_date of this StoreonceLicense.  # noqa: E501
        :type: datetime
        """
        if expiry_date is None:
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    @property
    def demo_remaining(self):
        """Gets the demo_remaining of this StoreonceLicense.  # noqa: E501

        Demo license days remaining  # noqa: E501

        :return: The demo_remaining of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._demo_remaining

    @demo_remaining.setter
    def demo_remaining(self, demo_remaining):
        """Sets the demo_remaining of this StoreonceLicense.

        Demo license days remaining  # noqa: E501

        :param demo_remaining: The demo_remaining of this StoreonceLicense.  # noqa: E501
        :type: int
        """

        self._demo_remaining = demo_remaining

    @property
    def license_ltu(self):
        """Gets the license_ltu of this StoreonceLicense.  # noqa: E501

        Calculated LTU  # noqa: E501

        :return: The license_ltu of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._license_ltu

    @license_ltu.setter
    def license_ltu(self, license_ltu):
        """Sets the license_ltu of this StoreonceLicense.

        Calculated LTU  # noqa: E501

        :param license_ltu: The license_ltu of this StoreonceLicense.  # noqa: E501
        :type: int
        """
        if license_ltu is None:
            raise ValueError("Invalid value for `license_ltu`, must not be `None`")  # noqa: E501

        self._license_ltu = license_ltu

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this StoreonceLicense.  # noqa: E501

        Capacity License Bytes  # noqa: E501

        :return: The capacity_bytes of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this StoreonceLicense.

        Capacity License Bytes  # noqa: E501

        :param capacity_bytes: The capacity_bytes of this StoreonceLicense.  # noqa: E501
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    @property
    def license_defined_capacity(self):
        """Gets the license_defined_capacity of this StoreonceLicense.  # noqa: E501

        The capacity value as defined by the license.  # noqa: E501

        :return: The license_defined_capacity of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._license_defined_capacity

    @license_defined_capacity.setter
    def license_defined_capacity(self, license_defined_capacity):
        """Sets the license_defined_capacity of this StoreonceLicense.

        The capacity value as defined by the license.  # noqa: E501

        :param license_defined_capacity: The license_defined_capacity of this StoreonceLicense.  # noqa: E501
        :type: int
        """

        self._license_defined_capacity = license_defined_capacity

    @property
    def password_type_string(self):
        """Gets the password_type_string of this StoreonceLicense.  # noqa: E501

        Password Type  # noqa: E501

        :return: The password_type_string of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._password_type_string

    @password_type_string.setter
    def password_type_string(self, password_type_string):
        """Sets the password_type_string of this StoreonceLicense.

        Password Type  # noqa: E501

        :param password_type_string: The password_type_string of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if password_type_string is None:
            raise ValueError("Invalid value for `password_type_string`, must not be `None`")  # noqa: E501

        self._password_type_string = password_type_string

    @property
    def password_type(self):
        """Gets the password_type of this StoreonceLicense.  # noqa: E501

        Passwrod Type  # noqa: E501

        :return: The password_type of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._password_type

    @password_type.setter
    def password_type(self, password_type):
        """Sets the password_type of this StoreonceLicense.

        Passwrod Type  # noqa: E501

        :param password_type: The password_type of this StoreonceLicense.  # noqa: E501
        :type: int
        """
        if password_type is None:
            raise ValueError("Invalid value for `password_type`, must not be `None`")  # noqa: E501

        self._password_type = password_type

    @property
    def feature_string(self):
        """Gets the feature_string of this StoreonceLicense.  # noqa: E501

        License Feature type  # noqa: E501

        :return: The feature_string of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._feature_string

    @feature_string.setter
    def feature_string(self, feature_string):
        """Sets the feature_string of this StoreonceLicense.

        License Feature type  # noqa: E501

        :param feature_string: The feature_string of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if feature_string is None:
            raise ValueError("Invalid value for `feature_string`, must not be `None`")  # noqa: E501

        self._feature_string = feature_string

    @property
    def feature_type_enum(self):
        """Gets the feature_type_enum of this StoreonceLicense.  # noqa: E501

        License Feature type  # noqa: E501

        :return: The feature_type_enum of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._feature_type_enum

    @feature_type_enum.setter
    def feature_type_enum(self, feature_type_enum):
        """Sets the feature_type_enum of this StoreonceLicense.

        License Feature type  # noqa: E501

        :param feature_type_enum: The feature_type_enum of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if feature_type_enum is None:
            raise ValueError("Invalid value for `feature_type_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "BASE", "CAPACITY", "ENCRYPTION", "CLOUD", "CLOUD_ARCHIVE", "SERVICE", "FLEXIO_FC", "FLEXIO_NIC", "UPGRADE", "CATALYST", "REPLICATION", "DEMO", "MEMORY", "ARCHIVE"]  # noqa: E501
        if feature_type_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_type_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_type_enum, allowed_values)
            )

        self._feature_type_enum = feature_type_enum

    @property
    def feature_type(self):
        """Gets the feature_type of this StoreonceLicense.  # noqa: E501

        License Feature Type  # noqa: E501

        :return: The feature_type of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this StoreonceLicense.

        License Feature Type  # noqa: E501

        :param feature_type: The feature_type of this StoreonceLicense.  # noqa: E501
        :type: int
        """
        if feature_type is None:
            raise ValueError("Invalid value for `feature_type`, must not be `None`")  # noqa: E501

        self._feature_type = feature_type

    @property
    def category_string(self):
        """Gets the category_string of this StoreonceLicense.  # noqa: E501

        License category  # noqa: E501

        :return: The category_string of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._category_string

    @category_string.setter
    def category_string(self, category_string):
        """Sets the category_string of this StoreonceLicense.

        License category  # noqa: E501

        :param category_string: The category_string of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if category_string is None:
            raise ValueError("Invalid value for `category_string`, must not be `None`")  # noqa: E501

        self._category_string = category_string

    @property
    def license_category_enum(self):
        """Gets the license_category_enum of this StoreonceLicense.  # noqa: E501

        License category  # noqa: E501

        :return: The license_category_enum of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._license_category_enum

    @license_category_enum.setter
    def license_category_enum(self, license_category_enum):
        """Sets the license_category_enum of this StoreonceLicense.

        License category  # noqa: E501

        :param license_category_enum: The license_category_enum of this StoreonceLicense.  # noqa: E501
        :type: str
        """
        if license_category_enum is None:
            raise ValueError("Invalid value for `license_category_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "SOFTWARE", "STORAGE", "HARDWARE", "SYSTEM"]  # noqa: E501
        if license_category_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `license_category_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(license_category_enum, allowed_values)
            )

        self._license_category_enum = license_category_enum

    @property
    def category(self):
        """Gets the category of this StoreonceLicense.  # noqa: E501

        License category  # noqa: E501

        :return: The category of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StoreonceLicense.

        License category  # noqa: E501

        :param category: The category of this StoreonceLicense.  # noqa: E501
        :type: int
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def validation_result(self):
        """Gets the validation_result of this StoreonceLicense.  # noqa: E501

        validation result  # noqa: E501

        :return: The validation_result of this StoreonceLicense.  # noqa: E501
        :rtype: str
        """
        return self._validation_result

    @validation_result.setter
    def validation_result(self, validation_result):
        """Sets the validation_result of this StoreonceLicense.

        validation result  # noqa: E501

        :param validation_result: The validation_result of this StoreonceLicense.  # noqa: E501
        :type: str
        """

        self._validation_result = validation_result

    @property
    def valid(self):
        """Gets the valid of this StoreonceLicense.  # noqa: E501

        License Valid flag.  # noqa: E501

        :return: The valid of this StoreonceLicense.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this StoreonceLicense.

        License Valid flag.  # noqa: E501

        :param valid: The valid of this StoreonceLicense.  # noqa: E501
        :type: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid

    @property
    def on_grace_period(self):
        """Gets the on_grace_period of this StoreonceLicense.  # noqa: E501


        :return: The on_grace_period of this StoreonceLicense.  # noqa: E501
        :rtype: bool
        """
        return self._on_grace_period

    @on_grace_period.setter
    def on_grace_period(self, on_grace_period):
        """Sets the on_grace_period of this StoreonceLicense.


        :param on_grace_period: The on_grace_period of this StoreonceLicense.  # noqa: E501
        :type: bool
        """
        if on_grace_period is None:
            raise ValueError("Invalid value for `on_grace_period`, must not be `None`")  # noqa: E501

        self._on_grace_period = on_grace_period

    @property
    def triallicense(self):
        """Gets the triallicense of this StoreonceLicense.  # noqa: E501

        Trial License flag.  # noqa: E501

        :return: The triallicense of this StoreonceLicense.  # noqa: E501
        :rtype: bool
        """
        return self._triallicense

    @triallicense.setter
    def triallicense(self, triallicense):
        """Sets the triallicense of this StoreonceLicense.

        Trial License flag.  # noqa: E501

        :param triallicense: The triallicense of this StoreonceLicense.  # noqa: E501
        :type: bool
        """

        self._triallicense = triallicense

    @property
    def allow_removal(self):
        """Gets the allow_removal of this StoreonceLicense.  # noqa: E501

        True if this can be removed.  # noqa: E501

        :return: The allow_removal of this StoreonceLicense.  # noqa: E501
        :rtype: bool
        """
        return self._allow_removal

    @allow_removal.setter
    def allow_removal(self, allow_removal):
        """Sets the allow_removal of this StoreonceLicense.

        True if this can be removed.  # noqa: E501

        :param allow_removal: The allow_removal of this StoreonceLicense.  # noqa: E501
        :type: bool
        """

        self._allow_removal = allow_removal

    @property
    def feature_id(self):
        """Gets the feature_id of this StoreonceLicense.  # noqa: E501

        Feature id for key.  # noqa: E501

        :return: The feature_id of this StoreonceLicense.  # noqa: E501
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this StoreonceLicense.

        Feature id for key.  # noqa: E501

        :param feature_id: The feature_id of this StoreonceLicense.  # noqa: E501
        :type: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreonceLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreonceLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
