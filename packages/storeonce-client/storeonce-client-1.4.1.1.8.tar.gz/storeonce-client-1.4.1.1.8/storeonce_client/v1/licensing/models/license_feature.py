# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LicenseFeature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_string': 'str',
        'category': 'int',
        'feature_type_string': 'str',
        'feature_type': 'int',
        'tokens': 'int',
        'feature_id': 'int'
    }

    attribute_map = {
        'category_string': 'categoryString',
        'category': 'category',
        'feature_type_string': 'featureTypeString',
        'feature_type': 'featureType',
        'tokens': 'tokens',
        'feature_id': 'featureId'
    }

    def __init__(self, category_string=None, category=None, feature_type_string=None, feature_type=None, tokens=None, feature_id=None):  # noqa: E501
        """LicenseFeature - a model defined in Swagger"""  # noqa: E501

        self._category_string = None
        self._category = None
        self._feature_type_string = None
        self._feature_type = None
        self._tokens = None
        self._feature_id = None
        self.discriminator = None

        if category_string is not None:
            self.category_string = category_string
        if category is not None:
            self.category = category
        if feature_type_string is not None:
            self.feature_type_string = feature_type_string
        if feature_type is not None:
            self.feature_type = feature_type
        self.tokens = tokens
        self.feature_id = feature_id

    @property
    def category_string(self):
        """Gets the category_string of this LicenseFeature.  # noqa: E501

        Category  # noqa: E501

        :return: The category_string of this LicenseFeature.  # noqa: E501
        :rtype: str
        """
        return self._category_string

    @category_string.setter
    def category_string(self, category_string):
        """Sets the category_string of this LicenseFeature.

        Category  # noqa: E501

        :param category_string: The category_string of this LicenseFeature.  # noqa: E501
        :type: str
        """

        self._category_string = category_string

    @property
    def category(self):
        """Gets the category of this LicenseFeature.  # noqa: E501

        Category  # noqa: E501

        :return: The category of this LicenseFeature.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LicenseFeature.

        Category  # noqa: E501

        :param category: The category of this LicenseFeature.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def feature_type_string(self):
        """Gets the feature_type_string of this LicenseFeature.  # noqa: E501

        Feature Type  # noqa: E501

        :return: The feature_type_string of this LicenseFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature_type_string

    @feature_type_string.setter
    def feature_type_string(self, feature_type_string):
        """Sets the feature_type_string of this LicenseFeature.

        Feature Type  # noqa: E501

        :param feature_type_string: The feature_type_string of this LicenseFeature.  # noqa: E501
        :type: str
        """

        self._feature_type_string = feature_type_string

    @property
    def feature_type(self):
        """Gets the feature_type of this LicenseFeature.  # noqa: E501

        Feature type  # noqa: E501

        :return: The feature_type of this LicenseFeature.  # noqa: E501
        :rtype: int
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this LicenseFeature.

        Feature type  # noqa: E501

        :param feature_type: The feature_type of this LicenseFeature.  # noqa: E501
        :type: int
        """

        self._feature_type = feature_type

    @property
    def tokens(self):
        """Gets the tokens of this LicenseFeature.  # noqa: E501

        Number of Tokens (capacity)  # noqa: E501

        :return: The tokens of this LicenseFeature.  # noqa: E501
        :rtype: int
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this LicenseFeature.

        Number of Tokens (capacity)  # noqa: E501

        :param tokens: The tokens of this LicenseFeature.  # noqa: E501
        :type: int
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def feature_id(self):
        """Gets the feature_id of this LicenseFeature.  # noqa: E501

        Feature ID  # noqa: E501

        :return: The feature_id of this LicenseFeature.  # noqa: E501
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this LicenseFeature.

        Feature ID  # noqa: E501

        :param feature_id: The feature_id of this LicenseFeature.  # noqa: E501
        :type: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseFeature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseFeature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
