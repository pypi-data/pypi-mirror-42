# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreonceLicenseServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'status_string': 'str',
        'base_license_id': 'str',
        'license_server_config': 'LicenseServerConfig'
    }

    attribute_map = {
        'status': 'status',
        'status_string': 'statusString',
        'base_license_id': 'baseLicenseId',
        'license_server_config': 'LicenseServerConfig'
    }

    def __init__(self, status=None, status_string=None, base_license_id=None, license_server_config=None):  # noqa: E501
        """StoreonceLicenseServer - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._status_string = None
        self._base_license_id = None
        self._license_server_config = None
        self.discriminator = None

        self.status = status
        self.status_string = status_string
        if base_license_id is not None:
            self.base_license_id = base_license_id
        if license_server_config is not None:
            self.license_server_config = license_server_config

    @property
    def status(self):
        """Gets the status of this StoreonceLicenseServer.  # noqa: E501

        Server status  # noqa: E501

        :return: The status of this StoreonceLicenseServer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoreonceLicenseServer.

        Server status  # noqa: E501

        :param status: The status of this StoreonceLicenseServer.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this StoreonceLicenseServer.  # noqa: E501

        Localised status  # noqa: E501

        :return: The status_string of this StoreonceLicenseServer.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this StoreonceLicenseServer.

        Localised status  # noqa: E501

        :param status_string: The status_string of this StoreonceLicenseServer.  # noqa: E501
        :type: str
        """
        if status_string is None:
            raise ValueError("Invalid value for `status_string`, must not be `None`")  # noqa: E501

        self._status_string = status_string

    @property
    def base_license_id(self):
        """Gets the base_license_id of this StoreonceLicenseServer.  # noqa: E501

        Base license UID  # noqa: E501

        :return: The base_license_id of this StoreonceLicenseServer.  # noqa: E501
        :rtype: str
        """
        return self._base_license_id

    @base_license_id.setter
    def base_license_id(self, base_license_id):
        """Sets the base_license_id of this StoreonceLicenseServer.

        Base license UID  # noqa: E501

        :param base_license_id: The base_license_id of this StoreonceLicenseServer.  # noqa: E501
        :type: str
        """

        self._base_license_id = base_license_id

    @property
    def license_server_config(self):
        """Gets the license_server_config of this StoreonceLicenseServer.  # noqa: E501

        Server Config data  # noqa: E501

        :return: The license_server_config of this StoreonceLicenseServer.  # noqa: E501
        :rtype: LicenseServerConfig
        """
        return self._license_server_config

    @license_server_config.setter
    def license_server_config(self, license_server_config):
        """Sets the license_server_config of this StoreonceLicenseServer.

        Server Config data  # noqa: E501

        :param license_server_config: The license_server_config of this StoreonceLicenseServer.  # noqa: E501
        :type: LicenseServerConfig
        """

        self._license_server_config = license_server_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreonceLicenseServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreonceLicenseServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
