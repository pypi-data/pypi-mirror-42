# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LicenseServerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'port': 'int',
        'server_enabled': 'bool',
        'secondary': 'str',
        'valid': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'port': 'port',
        'server_enabled': 'serverEnabled',
        'secondary': 'secondary',
        'valid': 'valid'
    }

    def __init__(self, address=None, port=None, server_enabled=False, secondary=None, valid=False):  # noqa: E501
        """LicenseServerConfig - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._port = None
        self._server_enabled = None
        self._secondary = None
        self._valid = None
        self.discriminator = None

        self.address = address
        self.port = port
        self.server_enabled = server_enabled
        self.secondary = secondary
        self.valid = valid

    @property
    def address(self):
        """Gets the address of this LicenseServerConfig.  # noqa: E501

        Server address  # noqa: E501

        :return: The address of this LicenseServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LicenseServerConfig.

        Server address  # noqa: E501

        :param address: The address of this LicenseServerConfig.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def port(self):
        """Gets the port of this LicenseServerConfig.  # noqa: E501

        Server port  # noqa: E501

        :return: The port of this LicenseServerConfig.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LicenseServerConfig.

        Server port  # noqa: E501

        :param port: The port of this LicenseServerConfig.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def server_enabled(self):
        """Gets the server_enabled of this LicenseServerConfig.  # noqa: E501

        Server enabled flag  # noqa: E501

        :return: The server_enabled of this LicenseServerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._server_enabled

    @server_enabled.setter
    def server_enabled(self, server_enabled):
        """Sets the server_enabled of this LicenseServerConfig.

        Server enabled flag  # noqa: E501

        :param server_enabled: The server_enabled of this LicenseServerConfig.  # noqa: E501
        :type: bool
        """
        if server_enabled is None:
            raise ValueError("Invalid value for `server_enabled`, must not be `None`")  # noqa: E501

        self._server_enabled = server_enabled

    @property
    def secondary(self):
        """Gets the secondary of this LicenseServerConfig.  # noqa: E501

        Secondary Server address  # noqa: E501

        :return: The secondary of this LicenseServerConfig.  # noqa: E501
        :rtype: str
        """
        return self._secondary

    @secondary.setter
    def secondary(self, secondary):
        """Sets the secondary of this LicenseServerConfig.

        Secondary Server address  # noqa: E501

        :param secondary: The secondary of this LicenseServerConfig.  # noqa: E501
        :type: str
        """
        if secondary is None:
            raise ValueError("Invalid value for `secondary`, must not be `None`")  # noqa: E501

        self._secondary = secondary

    @property
    def valid(self):
        """Gets the valid of this LicenseServerConfig.  # noqa: E501

        Server config valid  # noqa: E501

        :return: The valid of this LicenseServerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this LicenseServerConfig.

        Server config valid  # noqa: E501

        :param valid: The valid of this LicenseServerConfig.  # noqa: E501
        :type: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")  # noqa: E501

        self._valid = valid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseServerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseServerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
