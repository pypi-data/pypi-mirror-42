# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SMM

    unused  # noqa: E501

    Component version: 2.0.9-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreSecureSettingsGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'store_id': 'int',
        'store_state': 'int',
        'encryption_enabled': 'bool',
        'overwrite_count': 'int',
        'overwrite_mode_string': 'L10nStringStruct',
        'key_name': 'str'
    }

    attribute_map = {
        'store_id': 'storeId',
        'store_state': 'storeState',
        'encryption_enabled': 'encryptionEnabled',
        'overwrite_count': 'overwriteCount',
        'overwrite_mode_string': 'overwriteModeString',
        'key_name': 'keyName'
    }

    def __init__(self, store_id=None, store_state=None, encryption_enabled=False, overwrite_count=None, overwrite_mode_string=None, key_name=None):  # noqa: E501
        """StoreSecureSettingsGet - a model defined in Swagger"""  # noqa: E501

        self._store_id = None
        self._store_state = None
        self._encryption_enabled = None
        self._overwrite_count = None
        self._overwrite_mode_string = None
        self._key_name = None
        self.discriminator = None

        if store_id is not None:
            self.store_id = store_id
        if store_state is not None:
            self.store_state = store_state
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if overwrite_count is not None:
            self.overwrite_count = overwrite_count
        if overwrite_mode_string is not None:
            self.overwrite_mode_string = overwrite_mode_string
        if key_name is not None:
            self.key_name = key_name

    @property
    def store_id(self):
        """Gets the store_id of this StoreSecureSettingsGet.  # noqa: E501

        store id  # noqa: E501

        :return: The store_id of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this StoreSecureSettingsGet.

        store id  # noqa: E501

        :param store_id: The store_id of this StoreSecureSettingsGet.  # noqa: E501
        :type: int
        """

        self._store_id = store_id

    @property
    def store_state(self):
        """Gets the store_state of this StoreSecureSettingsGet.  # noqa: E501

        The state of the store  # noqa: E501

        :return: The store_state of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: int
        """
        return self._store_state

    @store_state.setter
    def store_state(self, store_state):
        """Sets the store_state of this StoreSecureSettingsGet.

        The state of the store  # noqa: E501

        :param store_state: The store_state of this StoreSecureSettingsGet.  # noqa: E501
        :type: int
        """

        self._store_state = store_state

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this StoreSecureSettingsGet.  # noqa: E501

        Indicates if the store has encrypted data  # noqa: E501

        :return: The encryption_enabled of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this StoreSecureSettingsGet.

        Indicates if the store has encrypted data  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this StoreSecureSettingsGet.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def overwrite_count(self):
        """Gets the overwrite_count of this StoreSecureSettingsGet.  # noqa: E501

        The secure erase overwrite count of the store  # noqa: E501

        :return: The overwrite_count of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: int
        """
        return self._overwrite_count

    @overwrite_count.setter
    def overwrite_count(self, overwrite_count):
        """Sets the overwrite_count of this StoreSecureSettingsGet.

        The secure erase overwrite count of the store  # noqa: E501

        :param overwrite_count: The overwrite_count of this StoreSecureSettingsGet.  # noqa: E501
        :type: int
        """

        self._overwrite_count = overwrite_count

    @property
    def overwrite_mode_string(self):
        """Gets the overwrite_mode_string of this StoreSecureSettingsGet.  # noqa: E501

        The secure erase overwrite mode of the store  # noqa: E501

        :return: The overwrite_mode_string of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._overwrite_mode_string

    @overwrite_mode_string.setter
    def overwrite_mode_string(self, overwrite_mode_string):
        """Sets the overwrite_mode_string of this StoreSecureSettingsGet.

        The secure erase overwrite mode of the store  # noqa: E501

        :param overwrite_mode_string: The overwrite_mode_string of this StoreSecureSettingsGet.  # noqa: E501
        :type: L10nStringStruct
        """

        self._overwrite_mode_string = overwrite_mode_string

    @property
    def key_name(self):
        """Gets the key_name of this StoreSecureSettingsGet.  # noqa: E501

        The encryption keyname  # noqa: E501

        :return: The key_name of this StoreSecureSettingsGet.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this StoreSecureSettingsGet.

        The encryption keyname  # noqa: E501

        :param key_name: The key_name of this StoreSecureSettingsGet.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreSecureSettingsGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreSecureSettingsGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
