# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class AServerSku(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'str',
        'part_number': 'str',
        'disk_pack_uuid': 'str',
        'enclosure_uuid': 'str',
        'volume_uuid': 'str',
        'box_number': 'int',
        'bay_number': 'int',
        'server_uuid': 'str'
    }

    attribute_map = {
        'serial_number': 'serialNumber',
        'part_number': 'partNumber',
        'disk_pack_uuid': 'diskPackUuid',
        'enclosure_uuid': 'enclosureUuid',
        'volume_uuid': 'volumeUuid',
        'box_number': 'boxNumber',
        'bay_number': 'bayNumber',
        'server_uuid': 'serverUuid'
    }

    def __init__(self, serial_number=None, part_number=None, disk_pack_uuid=None, enclosure_uuid=None, volume_uuid=None, box_number=None, bay_number=None, server_uuid=None):  # noqa: E501
        """AServerSku - a model defined in Swagger"""  # noqa: E501

        self._serial_number = None
        self._part_number = None
        self._disk_pack_uuid = None
        self._enclosure_uuid = None
        self._volume_uuid = None
        self._box_number = None
        self._bay_number = None
        self._server_uuid = None
        self.discriminator = None

        if serial_number is not None:
            self.serial_number = serial_number
        if part_number is not None:
            self.part_number = part_number
        if disk_pack_uuid is not None:
            self.disk_pack_uuid = disk_pack_uuid
        if enclosure_uuid is not None:
            self.enclosure_uuid = enclosure_uuid
        if volume_uuid is not None:
            self.volume_uuid = volume_uuid
        if box_number is not None:
            self.box_number = box_number
        if bay_number is not None:
            self.bay_number = bay_number
        if server_uuid is not None:
            self.server_uuid = server_uuid

    @property
    def serial_number(self):
        """Gets the serial_number of this AServerSku.  # noqa: E501

        The serial number  # noqa: E501

        :return: The serial_number of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AServerSku.

        The serial number  # noqa: E501

        :param serial_number: The serial_number of this AServerSku.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def part_number(self):
        """Gets the part_number of this AServerSku.  # noqa: E501

        The part number  # noqa: E501

        :return: The part_number of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this AServerSku.

        The part number  # noqa: E501

        :param part_number: The part_number of this AServerSku.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def disk_pack_uuid(self):
        """Gets the disk_pack_uuid of this AServerSku.  # noqa: E501

        The disk pack uuid  # noqa: E501

        :return: The disk_pack_uuid of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._disk_pack_uuid

    @disk_pack_uuid.setter
    def disk_pack_uuid(self, disk_pack_uuid):
        """Sets the disk_pack_uuid of this AServerSku.

        The disk pack uuid  # noqa: E501

        :param disk_pack_uuid: The disk_pack_uuid of this AServerSku.  # noqa: E501
        :type: str
        """

        self._disk_pack_uuid = disk_pack_uuid

    @property
    def enclosure_uuid(self):
        """Gets the enclosure_uuid of this AServerSku.  # noqa: E501

        The enclosure uuid  # noqa: E501

        :return: The enclosure_uuid of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._enclosure_uuid

    @enclosure_uuid.setter
    def enclosure_uuid(self, enclosure_uuid):
        """Sets the enclosure_uuid of this AServerSku.

        The enclosure uuid  # noqa: E501

        :param enclosure_uuid: The enclosure_uuid of this AServerSku.  # noqa: E501
        :type: str
        """

        self._enclosure_uuid = enclosure_uuid

    @property
    def volume_uuid(self):
        """Gets the volume_uuid of this AServerSku.  # noqa: E501

        The volume uuid  # noqa: E501

        :return: The volume_uuid of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._volume_uuid

    @volume_uuid.setter
    def volume_uuid(self, volume_uuid):
        """Sets the volume_uuid of this AServerSku.

        The volume uuid  # noqa: E501

        :param volume_uuid: The volume_uuid of this AServerSku.  # noqa: E501
        :type: str
        """

        self._volume_uuid = volume_uuid

    @property
    def box_number(self):
        """Gets the box_number of this AServerSku.  # noqa: E501

        The physical box number  # noqa: E501

        :return: The box_number of this AServerSku.  # noqa: E501
        :rtype: int
        """
        return self._box_number

    @box_number.setter
    def box_number(self, box_number):
        """Sets the box_number of this AServerSku.

        The physical box number  # noqa: E501

        :param box_number: The box_number of this AServerSku.  # noqa: E501
        :type: int
        """

        self._box_number = box_number

    @property
    def bay_number(self):
        """Gets the bay_number of this AServerSku.  # noqa: E501

        The physical bay number  # noqa: E501

        :return: The bay_number of this AServerSku.  # noqa: E501
        :rtype: int
        """
        return self._bay_number

    @bay_number.setter
    def bay_number(self, bay_number):
        """Sets the bay_number of this AServerSku.

        The physical bay number  # noqa: E501

        :param bay_number: The bay_number of this AServerSku.  # noqa: E501
        :type: int
        """

        self._bay_number = bay_number

    @property
    def server_uuid(self):
        """Gets the server_uuid of this AServerSku.  # noqa: E501

        The server uuid  # noqa: E501

        :return: The server_uuid of this AServerSku.  # noqa: E501
        :rtype: str
        """
        return self._server_uuid

    @server_uuid.setter
    def server_uuid(self, server_uuid):
        """Sets the server_uuid of this AServerSku.

        The server uuid  # noqa: E501

        :param server_uuid: The server_uuid of this AServerSku.  # noqa: E501
        :type: str
        """

        self._server_uuid = server_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AServerSku, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AServerSku):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
