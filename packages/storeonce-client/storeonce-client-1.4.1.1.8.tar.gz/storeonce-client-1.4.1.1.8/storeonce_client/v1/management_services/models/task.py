# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'start_time': 'datetime',
        'scheduled_start_time': 'datetime',
        'end_time': 'datetime',
        'status': 'list[ActionStatus]',
        'data': 'str',
        'extended_error': 'ExtendedError',
        'location': 'str',
        'resource_category': 'str',
        'resource_name': 'str',
        'id': 'str',
        'purpose': 'str',
        'routing_selector': 'str',
        'type': 'str',
        'extended_info': 'ExtendedInfo',
        'extended_err': 'ExtendedError',
        'response': 'str'
    }

    attribute_map = {
        'state': 'state',
        'start_time': 'startTime',
        'scheduled_start_time': 'scheduledStartTime',
        'end_time': 'endTime',
        'status': 'status',
        'data': 'data',
        'extended_error': 'extendedError',
        'location': 'location',
        'resource_category': 'resourceCategory',
        'resource_name': 'resourceName',
        'id': 'id',
        'purpose': 'purpose',
        'routing_selector': 'routingSelector',
        'type': 'type',
        'extended_info': 'extendedInfo',
        'extended_err': 'extendedErr',
        'response': 'response'
    }

    def __init__(self, state=None, start_time=None, scheduled_start_time=None, end_time=None, status=None, data=None, extended_error=None, location=None, resource_category=None, resource_name=None, id=None, purpose=None, routing_selector=None, type=None, extended_info=None, extended_err=None, response=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._start_time = None
        self._scheduled_start_time = None
        self._end_time = None
        self._status = None
        self._data = None
        self._extended_error = None
        self._location = None
        self._resource_category = None
        self._resource_name = None
        self._id = None
        self._purpose = None
        self._routing_selector = None
        self._type = None
        self._extended_info = None
        self._extended_err = None
        self._response = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if start_time is not None:
            self.start_time = start_time
        if scheduled_start_time is not None:
            self.scheduled_start_time = scheduled_start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status
        if data is not None:
            self.data = data
        if extended_error is not None:
            self.extended_error = extended_error
        if location is not None:
            self.location = location
        if resource_category is not None:
            self.resource_category = resource_category
        if resource_name is not None:
            self.resource_name = resource_name
        if id is not None:
            self.id = id
        if purpose is not None:
            self.purpose = purpose
        if routing_selector is not None:
            self.routing_selector = routing_selector
        if type is not None:
            self.type = type
        if extended_info is not None:
            self.extended_info = extended_info
        if extended_err is not None:
            self.extended_err = extended_err
        if response is not None:
            self.response = response

    @property
    def state(self):
        """Gets the state of this Task.  # noqa: E501


        :return: The state of this Task.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Task.


        :param state: The state of this Task.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "STARTING", "RUNNING", "SUSPENDED", "COMPLETED", "KILLED", "EXCEPTION", "TIMEOUT", "STOPPED", "INFAILOVER", "STALE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this Task.  # noqa: E501


        :return: The start_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Task.


        :param start_time: The start_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def scheduled_start_time(self):
        """Gets the scheduled_start_time of this Task.  # noqa: E501


        :return: The scheduled_start_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """Sets the scheduled_start_time of this Task.


        :param scheduled_start_time: The scheduled_start_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._scheduled_start_time = scheduled_start_time

    @property
    def end_time(self):
        """Gets the end_time of this Task.  # noqa: E501


        :return: The end_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Task.


        :param end_time: The end_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: list[ActionStatus]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: list[ActionStatus]
        """

        self._status = status

    @property
    def data(self):
        """Gets the data of this Task.  # noqa: E501


        :return: The data of this Task.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Task.


        :param data: The data of this Task.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def extended_error(self):
        """Gets the extended_error of this Task.  # noqa: E501


        :return: The extended_error of this Task.  # noqa: E501
        :rtype: ExtendedError
        """
        return self._extended_error

    @extended_error.setter
    def extended_error(self, extended_error):
        """Sets the extended_error of this Task.


        :param extended_error: The extended_error of this Task.  # noqa: E501
        :type: ExtendedError
        """

        self._extended_error = extended_error

    @property
    def location(self):
        """Gets the location of this Task.  # noqa: E501


        :return: The location of this Task.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Task.


        :param location: The location of this Task.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def resource_category(self):
        """Gets the resource_category of this Task.  # noqa: E501


        :return: The resource_category of this Task.  # noqa: E501
        :rtype: str
        """
        return self._resource_category

    @resource_category.setter
    def resource_category(self, resource_category):
        """Sets the resource_category of this Task.


        :param resource_category: The resource_category of this Task.  # noqa: E501
        :type: str
        """

        self._resource_category = resource_category

    @property
    def resource_name(self):
        """Gets the resource_name of this Task.  # noqa: E501


        :return: The resource_name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this Task.


        :param resource_name: The resource_name of this Task.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501


        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.


        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def purpose(self):
        """Gets the purpose of this Task.  # noqa: E501


        :return: The purpose of this Task.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Task.


        :param purpose: The purpose of this Task.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def routing_selector(self):
        """Gets the routing_selector of this Task.  # noqa: E501


        :return: The routing_selector of this Task.  # noqa: E501
        :rtype: str
        """
        return self._routing_selector

    @routing_selector.setter
    def routing_selector(self, routing_selector):
        """Sets the routing_selector of this Task.


        :param routing_selector: The routing_selector of this Task.  # noqa: E501
        :type: str
        """

        self._routing_selector = routing_selector

    @property
    def type(self):
        """Gets the type of this Task.  # noqa: E501


        :return: The type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Task.


        :param type: The type of this Task.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def extended_info(self):
        """Gets the extended_info of this Task.  # noqa: E501


        :return: The extended_info of this Task.  # noqa: E501
        :rtype: ExtendedInfo
        """
        return self._extended_info

    @extended_info.setter
    def extended_info(self, extended_info):
        """Sets the extended_info of this Task.


        :param extended_info: The extended_info of this Task.  # noqa: E501
        :type: ExtendedInfo
        """

        self._extended_info = extended_info

    @property
    def extended_err(self):
        """Gets the extended_err of this Task.  # noqa: E501


        :return: The extended_err of this Task.  # noqa: E501
        :rtype: ExtendedError
        """
        return self._extended_err

    @extended_err.setter
    def extended_err(self, extended_err):
        """Sets the extended_err of this Task.


        :param extended_err: The extended_err of this Task.  # noqa: E501
        :type: ExtendedError
        """

        self._extended_err = extended_err

    @property
    def response(self):
        """Gets the response of this Task.  # noqa: E501


        :return: The response of this Task.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this Task.


        :param response: The response of this Task.  # noqa: E501
        :type: str
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
