# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class WarrantyStatusSku(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hardware_type': 'str',
        'hardware_type_string': 'str',
        'serial_number': 'str',
        'part_number': 'str',
        'product_name': 'str',
        'short_product_name': 'str',
        'hardware_status': 'str',
        'hardware_status_string': 'str'
    }

    attribute_map = {
        'hardware_type': 'hardwareType',
        'hardware_type_string': 'hardwareTypeString',
        'serial_number': 'serialNumber',
        'part_number': 'partNumber',
        'product_name': 'productName',
        'short_product_name': 'shortProductName',
        'hardware_status': 'hardwareStatus',
        'hardware_status_string': 'hardwareStatusString'
    }

    def __init__(self, hardware_type=None, hardware_type_string=None, serial_number=None, part_number=None, product_name=None, short_product_name=None, hardware_status=None, hardware_status_string=None):  # noqa: E501
        """WarrantyStatusSku - a model defined in Swagger"""  # noqa: E501

        self._hardware_type = None
        self._hardware_type_string = None
        self._serial_number = None
        self._part_number = None
        self._product_name = None
        self._short_product_name = None
        self._hardware_status = None
        self._hardware_status_string = None
        self.discriminator = None

        if hardware_type is not None:
            self.hardware_type = hardware_type
        if hardware_type_string is not None:
            self.hardware_type_string = hardware_type_string
        if serial_number is not None:
            self.serial_number = serial_number
        if part_number is not None:
            self.part_number = part_number
        if product_name is not None:
            self.product_name = product_name
        if short_product_name is not None:
            self.short_product_name = short_product_name
        if hardware_status is not None:
            self.hardware_status = hardware_status
        if hardware_status_string is not None:
            self.hardware_status_string = hardware_status_string

    @property
    def hardware_type(self):
        """Gets the hardware_type of this WarrantyStatusSku.  # noqa: E501

        The warranty type  # noqa: E501

        :return: The hardware_type of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this WarrantyStatusSku.

        The warranty type  # noqa: E501

        :param hardware_type: The hardware_type of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """
        allowed_values = ["BASE", "ENCLOSURE", "DISKPACK"]  # noqa: E501
        if hardware_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_type` ({0}), must be one of {1}"  # noqa: E501
                .format(hardware_type, allowed_values)
            )

        self._hardware_type = hardware_type

    @property
    def hardware_type_string(self):
        """Gets the hardware_type_string of this WarrantyStatusSku.  # noqa: E501

        Localized warranty type  # noqa: E501

        :return: The hardware_type_string of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._hardware_type_string

    @hardware_type_string.setter
    def hardware_type_string(self, hardware_type_string):
        """Sets the hardware_type_string of this WarrantyStatusSku.

        Localized warranty type  # noqa: E501

        :param hardware_type_string: The hardware_type_string of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._hardware_type_string = hardware_type_string

    @property
    def serial_number(self):
        """Gets the serial_number of this WarrantyStatusSku.  # noqa: E501

        The serial number  # noqa: E501

        :return: The serial_number of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this WarrantyStatusSku.

        The serial number  # noqa: E501

        :param serial_number: The serial_number of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def part_number(self):
        """Gets the part_number of this WarrantyStatusSku.  # noqa: E501

        The part number  # noqa: E501

        :return: The part_number of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this WarrantyStatusSku.

        The part number  # noqa: E501

        :param part_number: The part_number of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def product_name(self):
        """Gets the product_name of this WarrantyStatusSku.  # noqa: E501

        Product name  # noqa: E501

        :return: The product_name of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this WarrantyStatusSku.

        Product name  # noqa: E501

        :param product_name: The product_name of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def short_product_name(self):
        """Gets the short_product_name of this WarrantyStatusSku.  # noqa: E501

        Short product name  # noqa: E501

        :return: The short_product_name of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._short_product_name

    @short_product_name.setter
    def short_product_name(self, short_product_name):
        """Sets the short_product_name of this WarrantyStatusSku.

        Short product name  # noqa: E501

        :param short_product_name: The short_product_name of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._short_product_name = short_product_name

    @property
    def hardware_status(self):
        """Gets the hardware_status of this WarrantyStatusSku.  # noqa: E501

        The warranty status  # noqa: E501

        :return: The hardware_status of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._hardware_status

    @hardware_status.setter
    def hardware_status(self, hardware_status):
        """Sets the hardware_status of this WarrantyStatusSku.

        The warranty status  # noqa: E501

        :param hardware_status: The hardware_status of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "MISSING", "MISMATCH", "NEW"]  # noqa: E501
        if hardware_status not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_status` ({0}), must be one of {1}"  # noqa: E501
                .format(hardware_status, allowed_values)
            )

        self._hardware_status = hardware_status

    @property
    def hardware_status_string(self):
        """Gets the hardware_status_string of this WarrantyStatusSku.  # noqa: E501

        Localized hardware status  # noqa: E501

        :return: The hardware_status_string of this WarrantyStatusSku.  # noqa: E501
        :rtype: str
        """
        return self._hardware_status_string

    @hardware_status_string.setter
    def hardware_status_string(self, hardware_status_string):
        """Sets the hardware_status_string of this WarrantyStatusSku.

        Localized hardware status  # noqa: E501

        :param hardware_status_string: The hardware_status_string of this WarrantyStatusSku.  # noqa: E501
        :type: str
        """

        self._hardware_status_string = hardware_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WarrantyStatusSku, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WarrantyStatusSku):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
