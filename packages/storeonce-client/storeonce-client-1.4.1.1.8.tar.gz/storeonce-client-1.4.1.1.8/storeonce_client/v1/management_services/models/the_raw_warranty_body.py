# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TheRawWarrantyBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_warranty': 'AServerSku',
        'enclosure_warranties': 'list[ADiskPackSku]',
        'disk_pack_warranties': 'list[ADiskPackSku]',
        'unrecognized_servers': 'list[AnUnrecognizedHardwareSku]',
        'unrecognized_enclosures': 'list[AnUnrecognizedHardwareSku]',
        'unrecognized_pools': 'list[AnUnrecognizedPool]',
        'enclosure_warranties_property': 'list[ADiskPackSku]',
        'disk_pack_warranties_property': 'list[ADiskPackSku]'
    }

    attribute_map = {
        'base_warranty': 'baseWarranty',
        'enclosure_warranties': 'enclosureWarranties',
        'disk_pack_warranties': 'diskPackWarranties',
        'unrecognized_servers': 'unrecognizedServers',
        'unrecognized_enclosures': 'unrecognizedEnclosures',
        'unrecognized_pools': 'unrecognizedPools',
        'enclosure_warranties_property': 'enclosureWarrantiesProperty',
        'disk_pack_warranties_property': 'diskPackWarrantiesProperty'
    }

    def __init__(self, base_warranty=None, enclosure_warranties=None, disk_pack_warranties=None, unrecognized_servers=None, unrecognized_enclosures=None, unrecognized_pools=None, enclosure_warranties_property=None, disk_pack_warranties_property=None):  # noqa: E501
        """TheRawWarrantyBody - a model defined in Swagger"""  # noqa: E501

        self._base_warranty = None
        self._enclosure_warranties = None
        self._disk_pack_warranties = None
        self._unrecognized_servers = None
        self._unrecognized_enclosures = None
        self._unrecognized_pools = None
        self._enclosure_warranties_property = None
        self._disk_pack_warranties_property = None
        self.discriminator = None

        if base_warranty is not None:
            self.base_warranty = base_warranty
        if enclosure_warranties is not None:
            self.enclosure_warranties = enclosure_warranties
        if disk_pack_warranties is not None:
            self.disk_pack_warranties = disk_pack_warranties
        if unrecognized_servers is not None:
            self.unrecognized_servers = unrecognized_servers
        if unrecognized_enclosures is not None:
            self.unrecognized_enclosures = unrecognized_enclosures
        if unrecognized_pools is not None:
            self.unrecognized_pools = unrecognized_pools
        if enclosure_warranties_property is not None:
            self.enclosure_warranties_property = enclosure_warranties_property
        if disk_pack_warranties_property is not None:
            self.disk_pack_warranties_property = disk_pack_warranties_property

    @property
    def base_warranty(self):
        """Gets the base_warranty of this TheRawWarrantyBody.  # noqa: E501

        The base warranty  # noqa: E501

        :return: The base_warranty of this TheRawWarrantyBody.  # noqa: E501
        :rtype: AServerSku
        """
        return self._base_warranty

    @base_warranty.setter
    def base_warranty(self, base_warranty):
        """Sets the base_warranty of this TheRawWarrantyBody.

        The base warranty  # noqa: E501

        :param base_warranty: The base_warranty of this TheRawWarrantyBody.  # noqa: E501
        :type: AServerSku
        """

        self._base_warranty = base_warranty

    @property
    def enclosure_warranties(self):
        """Gets the enclosure_warranties of this TheRawWarrantyBody.  # noqa: E501


        :return: The enclosure_warranties of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[ADiskPackSku]
        """
        return self._enclosure_warranties

    @enclosure_warranties.setter
    def enclosure_warranties(self, enclosure_warranties):
        """Sets the enclosure_warranties of this TheRawWarrantyBody.


        :param enclosure_warranties: The enclosure_warranties of this TheRawWarrantyBody.  # noqa: E501
        :type: list[ADiskPackSku]
        """

        self._enclosure_warranties = enclosure_warranties

    @property
    def disk_pack_warranties(self):
        """Gets the disk_pack_warranties of this TheRawWarrantyBody.  # noqa: E501


        :return: The disk_pack_warranties of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[ADiskPackSku]
        """
        return self._disk_pack_warranties

    @disk_pack_warranties.setter
    def disk_pack_warranties(self, disk_pack_warranties):
        """Sets the disk_pack_warranties of this TheRawWarrantyBody.


        :param disk_pack_warranties: The disk_pack_warranties of this TheRawWarrantyBody.  # noqa: E501
        :type: list[ADiskPackSku]
        """

        self._disk_pack_warranties = disk_pack_warranties

    @property
    def unrecognized_servers(self):
        """Gets the unrecognized_servers of this TheRawWarrantyBody.  # noqa: E501

        The list of unrecognized servers  # noqa: E501

        :return: The unrecognized_servers of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[AnUnrecognizedHardwareSku]
        """
        return self._unrecognized_servers

    @unrecognized_servers.setter
    def unrecognized_servers(self, unrecognized_servers):
        """Sets the unrecognized_servers of this TheRawWarrantyBody.

        The list of unrecognized servers  # noqa: E501

        :param unrecognized_servers: The unrecognized_servers of this TheRawWarrantyBody.  # noqa: E501
        :type: list[AnUnrecognizedHardwareSku]
        """

        self._unrecognized_servers = unrecognized_servers

    @property
    def unrecognized_enclosures(self):
        """Gets the unrecognized_enclosures of this TheRawWarrantyBody.  # noqa: E501

        The list of unrecognized enclosures  # noqa: E501

        :return: The unrecognized_enclosures of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[AnUnrecognizedHardwareSku]
        """
        return self._unrecognized_enclosures

    @unrecognized_enclosures.setter
    def unrecognized_enclosures(self, unrecognized_enclosures):
        """Sets the unrecognized_enclosures of this TheRawWarrantyBody.

        The list of unrecognized enclosures  # noqa: E501

        :param unrecognized_enclosures: The unrecognized_enclosures of this TheRawWarrantyBody.  # noqa: E501
        :type: list[AnUnrecognizedHardwareSku]
        """

        self._unrecognized_enclosures = unrecognized_enclosures

    @property
    def unrecognized_pools(self):
        """Gets the unrecognized_pools of this TheRawWarrantyBody.  # noqa: E501

        The list of unrecognized pools  # noqa: E501

        :return: The unrecognized_pools of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[AnUnrecognizedPool]
        """
        return self._unrecognized_pools

    @unrecognized_pools.setter
    def unrecognized_pools(self, unrecognized_pools):
        """Sets the unrecognized_pools of this TheRawWarrantyBody.

        The list of unrecognized pools  # noqa: E501

        :param unrecognized_pools: The unrecognized_pools of this TheRawWarrantyBody.  # noqa: E501
        :type: list[AnUnrecognizedPool]
        """

        self._unrecognized_pools = unrecognized_pools

    @property
    def enclosure_warranties_property(self):
        """Gets the enclosure_warranties_property of this TheRawWarrantyBody.  # noqa: E501

        The list of enclosure warranties  # noqa: E501

        :return: The enclosure_warranties_property of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[ADiskPackSku]
        """
        return self._enclosure_warranties_property

    @enclosure_warranties_property.setter
    def enclosure_warranties_property(self, enclosure_warranties_property):
        """Sets the enclosure_warranties_property of this TheRawWarrantyBody.

        The list of enclosure warranties  # noqa: E501

        :param enclosure_warranties_property: The enclosure_warranties_property of this TheRawWarrantyBody.  # noqa: E501
        :type: list[ADiskPackSku]
        """

        self._enclosure_warranties_property = enclosure_warranties_property

    @property
    def disk_pack_warranties_property(self):
        """Gets the disk_pack_warranties_property of this TheRawWarrantyBody.  # noqa: E501

        The list of disk pack warranties  # noqa: E501

        :return: The disk_pack_warranties_property of this TheRawWarrantyBody.  # noqa: E501
        :rtype: list[ADiskPackSku]
        """
        return self._disk_pack_warranties_property

    @disk_pack_warranties_property.setter
    def disk_pack_warranties_property(self, disk_pack_warranties_property):
        """Sets the disk_pack_warranties_property of this TheRawWarrantyBody.

        The list of disk pack warranties  # noqa: E501

        :param disk_pack_warranties_property: The disk_pack_warranties_property of this TheRawWarrantyBody.  # noqa: E501
        :type: list[ADiskPackSku]
        """

        self._disk_pack_warranties_property = disk_pack_warranties_property

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TheRawWarrantyBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TheRawWarrantyBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
