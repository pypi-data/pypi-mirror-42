# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TheRawWarrantyRootObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'reboot_required': 'bool',
        'warranty_information': 'TheRawWarrantyBody'
    }

    attribute_map = {
        'product_id': 'productId',
        'reboot_required': 'rebootRequired',
        'warranty_information': 'warrantyInformation'
    }

    def __init__(self, product_id=None, reboot_required=False, warranty_information=None):  # noqa: E501
        """TheRawWarrantyRootObject - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._reboot_required = None
        self._warranty_information = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if reboot_required is not None:
            self.reboot_required = reboot_required
        if warranty_information is not None:
            self.warranty_information = warranty_information

    @property
    def product_id(self):
        """Gets the product_id of this TheRawWarrantyRootObject.  # noqa: E501

        Product ID (aka SKU)  # noqa: E501

        :return: The product_id of this TheRawWarrantyRootObject.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this TheRawWarrantyRootObject.

        Product ID (aka SKU)  # noqa: E501

        :param product_id: The product_id of this TheRawWarrantyRootObject.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def reboot_required(self):
        """Gets the reboot_required of this TheRawWarrantyRootObject.  # noqa: E501

        Set to true if a reboot is required to apply changes  # noqa: E501

        :return: The reboot_required of this TheRawWarrantyRootObject.  # noqa: E501
        :rtype: bool
        """
        return self._reboot_required

    @reboot_required.setter
    def reboot_required(self, reboot_required):
        """Sets the reboot_required of this TheRawWarrantyRootObject.

        Set to true if a reboot is required to apply changes  # noqa: E501

        :param reboot_required: The reboot_required of this TheRawWarrantyRootObject.  # noqa: E501
        :type: bool
        """

        self._reboot_required = reboot_required

    @property
    def warranty_information(self):
        """Gets the warranty_information of this TheRawWarrantyRootObject.  # noqa: E501

        The body  # noqa: E501

        :return: The warranty_information of this TheRawWarrantyRootObject.  # noqa: E501
        :rtype: TheRawWarrantyBody
        """
        return self._warranty_information

    @warranty_information.setter
    def warranty_information(self, warranty_information):
        """Sets the warranty_information of this TheRawWarrantyRootObject.

        The body  # noqa: E501

        :param warranty_information: The warranty_information of this TheRawWarrantyRootObject.  # noqa: E501
        :type: TheRawWarrantyBody
        """

        self._warranty_information = warranty_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TheRawWarrantyRootObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TheRawWarrantyRootObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
