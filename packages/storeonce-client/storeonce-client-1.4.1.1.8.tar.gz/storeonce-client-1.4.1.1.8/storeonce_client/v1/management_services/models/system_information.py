# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SystemInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'software_version': 'str',
        'hostname': 'str',
        'product_sku': 'str',
        'product_name': 'str',
        'serial_number': 'str',
        'system_uuid': 'str',
        'management_address': 'str',
        'system_location': 'str',
        'contact_name': 'str',
        'contact_number': 'str',
        'contact_email': 'str',
        'operational_mode': 'str'
    }

    attribute_map = {
        'software_version': 'softwareVersion',
        'hostname': 'hostname',
        'product_sku': 'productSku',
        'product_name': 'productName',
        'serial_number': 'serialNumber',
        'system_uuid': 'systemUuid',
        'management_address': 'managementAddress',
        'system_location': 'systemLocation',
        'contact_name': 'contactName',
        'contact_number': 'contactNumber',
        'contact_email': 'contactEmail',
        'operational_mode': 'operationalMode'
    }

    def __init__(self, software_version=None, hostname=None, product_sku=None, product_name=None, serial_number=None, system_uuid=None, management_address=None, system_location=None, contact_name=None, contact_number=None, contact_email=None, operational_mode=None):  # noqa: E501
        """SystemInformation - a model defined in Swagger"""  # noqa: E501

        self._software_version = None
        self._hostname = None
        self._product_sku = None
        self._product_name = None
        self._serial_number = None
        self._system_uuid = None
        self._management_address = None
        self._system_location = None
        self._contact_name = None
        self._contact_number = None
        self._contact_email = None
        self._operational_mode = None
        self.discriminator = None

        if software_version is not None:
            self.software_version = software_version
        if hostname is not None:
            self.hostname = hostname
        if product_sku is not None:
            self.product_sku = product_sku
        if product_name is not None:
            self.product_name = product_name
        if serial_number is not None:
            self.serial_number = serial_number
        if system_uuid is not None:
            self.system_uuid = system_uuid
        if management_address is not None:
            self.management_address = management_address
        if system_location is not None:
            self.system_location = system_location
        if contact_name is not None:
            self.contact_name = contact_name
        if contact_number is not None:
            self.contact_number = contact_number
        if contact_email is not None:
            self.contact_email = contact_email
        if operational_mode is not None:
            self.operational_mode = operational_mode

    @property
    def software_version(self):
        """Gets the software_version of this SystemInformation.  # noqa: E501

        Software version installed on the appliance  # noqa: E501

        :return: The software_version of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this SystemInformation.

        Software version installed on the appliance  # noqa: E501

        :param software_version: The software_version of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def hostname(self):
        """Gets the hostname of this SystemInformation.  # noqa: E501

        Host name of the appliance  # noqa: E501

        :return: The hostname of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SystemInformation.

        Host name of the appliance  # noqa: E501

        :param hostname: The hostname of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def product_sku(self):
        """Gets the product_sku of this SystemInformation.  # noqa: E501

        Product SKU of the appliance  # noqa: E501

        :return: The product_sku of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this SystemInformation.

        Product SKU of the appliance  # noqa: E501

        :param product_sku: The product_sku of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._product_sku = product_sku

    @property
    def product_name(self):
        """Gets the product_name of this SystemInformation.  # noqa: E501

        Product name installed on the appliance  # noqa: E501

        :return: The product_name of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this SystemInformation.

        Product name installed on the appliance  # noqa: E501

        :param product_name: The product_name of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def serial_number(self):
        """Gets the serial_number of this SystemInformation.  # noqa: E501

        Serial number of the appliance  # noqa: E501

        :return: The serial_number of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SystemInformation.

        Serial number of the appliance  # noqa: E501

        :param serial_number: The serial_number of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def system_uuid(self):
        """Gets the system_uuid of this SystemInformation.  # noqa: E501

        Unique identifier for the appliance  # noqa: E501

        :return: The system_uuid of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._system_uuid

    @system_uuid.setter
    def system_uuid(self, system_uuid):
        """Sets the system_uuid of this SystemInformation.

        Unique identifier for the appliance  # noqa: E501

        :param system_uuid: The system_uuid of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._system_uuid = system_uuid

    @property
    def management_address(self):
        """Gets the management_address of this SystemInformation.  # noqa: E501

        IP address for the management interface  # noqa: E501

        :return: The management_address of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._management_address

    @management_address.setter
    def management_address(self, management_address):
        """Sets the management_address of this SystemInformation.

        IP address for the management interface  # noqa: E501

        :param management_address: The management_address of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._management_address = management_address

    @property
    def system_location(self):
        """Gets the system_location of this SystemInformation.  # noqa: E501

        System Location for the appliance  # noqa: E501

        :return: The system_location of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._system_location

    @system_location.setter
    def system_location(self, system_location):
        """Sets the system_location of this SystemInformation.

        System Location for the appliance  # noqa: E501

        :param system_location: The system_location of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._system_location = system_location

    @property
    def contact_name(self):
        """Gets the contact_name of this SystemInformation.  # noqa: E501

        Contact name for the appliance  # noqa: E501

        :return: The contact_name of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this SystemInformation.

        Contact name for the appliance  # noqa: E501

        :param contact_name: The contact_name of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def contact_number(self):
        """Gets the contact_number of this SystemInformation.  # noqa: E501

        Contact phone number for the appliance  # noqa: E501

        :return: The contact_number of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this SystemInformation.

        Contact phone number for the appliance  # noqa: E501

        :param contact_number: The contact_number of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def contact_email(self):
        """Gets the contact_email of this SystemInformation.  # noqa: E501

        Contact email address for the appliance  # noqa: E501

        :return: The contact_email of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this SystemInformation.

        Contact email address for the appliance  # noqa: E501

        :param contact_email: The contact_email of this SystemInformation.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def operational_mode(self):
        """Gets the operational_mode of this SystemInformation.  # noqa: E501

        Operational mode of the appliance  # noqa: E501

        :return: The operational_mode of this SystemInformation.  # noqa: E501
        :rtype: str
        """
        return self._operational_mode

    @operational_mode.setter
    def operational_mode(self, operational_mode):
        """Sets the operational_mode of this SystemInformation.

        Operational mode of the appliance  # noqa: E501

        :param operational_mode: The operational_mode of this SystemInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["PRODUCTION", "MANUFACTURING"]  # noqa: E501
        if operational_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(operational_mode, allowed_values)
            )

        self._operational_mode = operational_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
