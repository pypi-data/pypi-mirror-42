# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ModelProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'xml': 'Xml',
        'example': 'object',
        'read_only': 'bool',
        'format': 'str',
        'position': 'int',
        'vendor_extensions': 'dict(str, object)',
        'description': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'xml': 'xml',
        'example': 'example',
        'read_only': 'readOnly',
        'format': 'format',
        'position': 'position',
        'vendor_extensions': 'vendorExtensions',
        'description': 'description',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, xml=None, example=None, read_only=False, format=None, position=None, vendor_extensions=None, description=None, title=None, type=None):  # noqa: E501
        """ModelProperty - a model defined in Swagger"""  # noqa: E501

        self._xml = None
        self._example = None
        self._read_only = None
        self._format = None
        self._position = None
        self._vendor_extensions = None
        self._description = None
        self._title = None
        self._type = None
        self.discriminator = None

        if xml is not None:
            self.xml = xml
        if example is not None:
            self.example = example
        if read_only is not None:
            self.read_only = read_only
        if format is not None:
            self.format = format
        if position is not None:
            self.position = position
        if vendor_extensions is not None:
            self.vendor_extensions = vendor_extensions
        if description is not None:
            self.description = description
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def xml(self):
        """Gets the xml of this ModelProperty.  # noqa: E501


        :return: The xml of this ModelProperty.  # noqa: E501
        :rtype: Xml
        """
        return self._xml

    @xml.setter
    def xml(self, xml):
        """Sets the xml of this ModelProperty.


        :param xml: The xml of this ModelProperty.  # noqa: E501
        :type: Xml
        """

        self._xml = xml

    @property
    def example(self):
        """Gets the example of this ModelProperty.  # noqa: E501


        :return: The example of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this ModelProperty.


        :param example: The example of this ModelProperty.  # noqa: E501
        :type: object
        """

        self._example = example

    @property
    def read_only(self):
        """Gets the read_only of this ModelProperty.  # noqa: E501


        :return: The read_only of this ModelProperty.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ModelProperty.


        :param read_only: The read_only of this ModelProperty.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def format(self):
        """Gets the format of this ModelProperty.  # noqa: E501


        :return: The format of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ModelProperty.


        :param format: The format of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def position(self):
        """Gets the position of this ModelProperty.  # noqa: E501


        :return: The position of this ModelProperty.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ModelProperty.


        :param position: The position of this ModelProperty.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def vendor_extensions(self):
        """Gets the vendor_extensions of this ModelProperty.  # noqa: E501


        :return: The vendor_extensions of this ModelProperty.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._vendor_extensions

    @vendor_extensions.setter
    def vendor_extensions(self, vendor_extensions):
        """Sets the vendor_extensions of this ModelProperty.


        :param vendor_extensions: The vendor_extensions of this ModelProperty.  # noqa: E501
        :type: dict(str, object)
        """

        self._vendor_extensions = vendor_extensions

    @property
    def description(self):
        """Gets the description of this ModelProperty.  # noqa: E501


        :return: The description of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelProperty.


        :param description: The description of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def title(self):
        """Gets the title of this ModelProperty.  # noqa: E501


        :return: The title of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModelProperty.


        :param title: The title of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ModelProperty.  # noqa: E501


        :return: The type of this ModelProperty.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelProperty.


        :param type: The type of this ModelProperty.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
