# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class RecommendedSoftwareVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'information_available': 'bool',
        'update_recommended': 'bool',
        'recommended_software_version': 'str',
        'release_notes_uri': 'str',
        'last_update_time': 'datetime'
    }

    attribute_map = {
        'information_available': 'informationAvailable',
        'update_recommended': 'updateRecommended',
        'recommended_software_version': 'recommendedSoftwareVersion',
        'release_notes_uri': 'releaseNotesUri',
        'last_update_time': 'lastUpdateTime'
    }

    def __init__(self, information_available=False, update_recommended=False, recommended_software_version=None, release_notes_uri=None, last_update_time=None):  # noqa: E501
        """RecommendedSoftwareVersion - a model defined in Swagger"""  # noqa: E501

        self._information_available = None
        self._update_recommended = None
        self._recommended_software_version = None
        self._release_notes_uri = None
        self._last_update_time = None
        self.discriminator = None

        if information_available is not None:
            self.information_available = information_available
        if update_recommended is not None:
            self.update_recommended = update_recommended
        if recommended_software_version is not None:
            self.recommended_software_version = recommended_software_version
        if release_notes_uri is not None:
            self.release_notes_uri = release_notes_uri
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def information_available(self):
        """Gets the information_available of this RecommendedSoftwareVersion.  # noqa: E501

        Whether information has been obtained from HPE servers  # noqa: E501

        :return: The information_available of this RecommendedSoftwareVersion.  # noqa: E501
        :rtype: bool
        """
        return self._information_available

    @information_available.setter
    def information_available(self, information_available):
        """Sets the information_available of this RecommendedSoftwareVersion.

        Whether information has been obtained from HPE servers  # noqa: E501

        :param information_available: The information_available of this RecommendedSoftwareVersion.  # noqa: E501
        :type: bool
        """

        self._information_available = information_available

    @property
    def update_recommended(self):
        """Gets the update_recommended of this RecommendedSoftwareVersion.  # noqa: E501

        Whether there is a software update recommended  # noqa: E501

        :return: The update_recommended of this RecommendedSoftwareVersion.  # noqa: E501
        :rtype: bool
        """
        return self._update_recommended

    @update_recommended.setter
    def update_recommended(self, update_recommended):
        """Sets the update_recommended of this RecommendedSoftwareVersion.

        Whether there is a software update recommended  # noqa: E501

        :param update_recommended: The update_recommended of this RecommendedSoftwareVersion.  # noqa: E501
        :type: bool
        """

        self._update_recommended = update_recommended

    @property
    def recommended_software_version(self):
        """Gets the recommended_software_version of this RecommendedSoftwareVersion.  # noqa: E501

        The latest recommended software version  # noqa: E501

        :return: The recommended_software_version of this RecommendedSoftwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._recommended_software_version

    @recommended_software_version.setter
    def recommended_software_version(self, recommended_software_version):
        """Sets the recommended_software_version of this RecommendedSoftwareVersion.

        The latest recommended software version  # noqa: E501

        :param recommended_software_version: The recommended_software_version of this RecommendedSoftwareVersion.  # noqa: E501
        :type: str
        """

        self._recommended_software_version = recommended_software_version

    @property
    def release_notes_uri(self):
        """Gets the release_notes_uri of this RecommendedSoftwareVersion.  # noqa: E501

        The location of the release notes for the upgrade  # noqa: E501

        :return: The release_notes_uri of this RecommendedSoftwareVersion.  # noqa: E501
        :rtype: str
        """
        return self._release_notes_uri

    @release_notes_uri.setter
    def release_notes_uri(self, release_notes_uri):
        """Sets the release_notes_uri of this RecommendedSoftwareVersion.

        The location of the release notes for the upgrade  # noqa: E501

        :param release_notes_uri: The release_notes_uri of this RecommendedSoftwareVersion.  # noqa: E501
        :type: str
        """

        self._release_notes_uri = release_notes_uri

    @property
    def last_update_time(self):
        """Gets the last_update_time of this RecommendedSoftwareVersion.  # noqa: E501

        The date/time this information was obtained from HPE servers  # noqa: E501

        :return: The last_update_time of this RecommendedSoftwareVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this RecommendedSoftwareVersion.

        The date/time this information was obtained from HPE servers  # noqa: E501

        :param last_update_time: The last_update_time of this RecommendedSoftwareVersion.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecommendedSoftwareVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecommendedSoftwareVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
