# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Fibre Channel

    unused  # noqa: E501

    Component version: 3.0.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FcPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'configured_speed': 'int',
        'configured_speed_string': 'L10nStringStruct',
        'current_speed': 'int',
        'current_speed_string': 'L10nStringStruct',
        'port_location': 'FcPortLocation',
        'beacon_enabled': 'bool',
        'link_state': 'int',
        'link_state_string': 'L10nStringStruct',
        'link_down_reason': 'int',
        'link_down_reason_string': 'L10nStringStruct',
        'topology': 'int',
        'topology_string': 'L10nStringStruct',
        'port_licensed': 'bool',
        'port_model': 'int'
    }

    attribute_map = {
        'id': 'id',
        'configured_speed': 'configuredSpeed',
        'configured_speed_string': 'configuredSpeedString',
        'current_speed': 'currentSpeed',
        'current_speed_string': 'currentSpeedString',
        'port_location': 'portLocation',
        'beacon_enabled': 'beaconEnabled',
        'link_state': 'linkState',
        'link_state_string': 'linkStateString',
        'link_down_reason': 'linkDownReason',
        'link_down_reason_string': 'linkDownReasonString',
        'topology': 'topology',
        'topology_string': 'topologyString',
        'port_licensed': 'portLicensed',
        'port_model': 'portModel'
    }

    def __init__(self, id=None, configured_speed=None, configured_speed_string=None, current_speed=None, current_speed_string=None, port_location=None, beacon_enabled=False, link_state=None, link_state_string=None, link_down_reason=None, link_down_reason_string=None, topology=None, topology_string=None, port_licensed=False, port_model=None):  # noqa: E501
        """FcPort - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._configured_speed = None
        self._configured_speed_string = None
        self._current_speed = None
        self._current_speed_string = None
        self._port_location = None
        self._beacon_enabled = None
        self._link_state = None
        self._link_state_string = None
        self._link_down_reason = None
        self._link_down_reason_string = None
        self._topology = None
        self._topology_string = None
        self._port_licensed = None
        self._port_model = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if configured_speed is not None:
            self.configured_speed = configured_speed
        if configured_speed_string is not None:
            self.configured_speed_string = configured_speed_string
        if current_speed is not None:
            self.current_speed = current_speed
        if current_speed_string is not None:
            self.current_speed_string = current_speed_string
        if port_location is not None:
            self.port_location = port_location
        if beacon_enabled is not None:
            self.beacon_enabled = beacon_enabled
        if link_state is not None:
            self.link_state = link_state
        if link_state_string is not None:
            self.link_state_string = link_state_string
        if link_down_reason is not None:
            self.link_down_reason = link_down_reason
        if link_down_reason_string is not None:
            self.link_down_reason_string = link_down_reason_string
        if topology is not None:
            self.topology = topology
        if topology_string is not None:
            self.topology_string = topology_string
        if port_licensed is not None:
            self.port_licensed = port_licensed
        if port_model is not None:
            self.port_model = port_model

    @property
    def id(self):
        """Gets the id of this FcPort.  # noqa: E501

        The ID of the Fibre Channel Port.  # noqa: E501

        :return: The id of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FcPort.

        The ID of the Fibre Channel Port.  # noqa: E501

        :param id: The id of this FcPort.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def configured_speed(self):
        """Gets the configured_speed of this FcPort.  # noqa: E501

        The Configured speed of the Fibre Channel Port.  # noqa: E501

        :return: The configured_speed of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._configured_speed

    @configured_speed.setter
    def configured_speed(self, configured_speed):
        """Sets the configured_speed of this FcPort.

        The Configured speed of the Fibre Channel Port.  # noqa: E501

        :param configured_speed: The configured_speed of this FcPort.  # noqa: E501
        :type: int
        """

        self._configured_speed = configured_speed

    @property
    def configured_speed_string(self):
        """Gets the configured_speed_string of this FcPort.  # noqa: E501

        Localised version of configuredSpeed.  # noqa: E501

        :return: The configured_speed_string of this FcPort.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._configured_speed_string

    @configured_speed_string.setter
    def configured_speed_string(self, configured_speed_string):
        """Sets the configured_speed_string of this FcPort.

        Localised version of configuredSpeed.  # noqa: E501

        :param configured_speed_string: The configured_speed_string of this FcPort.  # noqa: E501
        :type: L10nStringStruct
        """

        self._configured_speed_string = configured_speed_string

    @property
    def current_speed(self):
        """Gets the current_speed of this FcPort.  # noqa: E501

        Current speed of the Fibre Channel port. Valid only if linkState is not down.  # noqa: E501

        :return: The current_speed of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._current_speed

    @current_speed.setter
    def current_speed(self, current_speed):
        """Sets the current_speed of this FcPort.

        Current speed of the Fibre Channel port. Valid only if linkState is not down.  # noqa: E501

        :param current_speed: The current_speed of this FcPort.  # noqa: E501
        :type: int
        """

        self._current_speed = current_speed

    @property
    def current_speed_string(self):
        """Gets the current_speed_string of this FcPort.  # noqa: E501

        Localised version of currentSpeed. Valid only if linkState is not down.  # noqa: E501

        :return: The current_speed_string of this FcPort.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._current_speed_string

    @current_speed_string.setter
    def current_speed_string(self, current_speed_string):
        """Sets the current_speed_string of this FcPort.

        Localised version of currentSpeed. Valid only if linkState is not down.  # noqa: E501

        :param current_speed_string: The current_speed_string of this FcPort.  # noqa: E501
        :type: L10nStringStruct
        """

        self._current_speed_string = current_speed_string

    @property
    def port_location(self):
        """Gets the port_location of this FcPort.  # noqa: E501

        Physical location of the port on the appliance.  # noqa: E501

        :return: The port_location of this FcPort.  # noqa: E501
        :rtype: FcPortLocation
        """
        return self._port_location

    @port_location.setter
    def port_location(self, port_location):
        """Sets the port_location of this FcPort.

        Physical location of the port on the appliance.  # noqa: E501

        :param port_location: The port_location of this FcPort.  # noqa: E501
        :type: FcPortLocation
        """

        self._port_location = port_location

    @property
    def beacon_enabled(self):
        """Gets the beacon_enabled of this FcPort.  # noqa: E501

        Status of the beacon on the port.  # noqa: E501

        :return: The beacon_enabled of this FcPort.  # noqa: E501
        :rtype: bool
        """
        return self._beacon_enabled

    @beacon_enabled.setter
    def beacon_enabled(self, beacon_enabled):
        """Sets the beacon_enabled of this FcPort.

        Status of the beacon on the port.  # noqa: E501

        :param beacon_enabled: The beacon_enabled of this FcPort.  # noqa: E501
        :type: bool
        """

        self._beacon_enabled = beacon_enabled

    @property
    def link_state(self):
        """Gets the link_state of this FcPort.  # noqa: E501

        Current link state of the Fibre Channel port.  # noqa: E501

        :return: The link_state of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._link_state

    @link_state.setter
    def link_state(self, link_state):
        """Sets the link_state of this FcPort.

        Current link state of the Fibre Channel port.  # noqa: E501

        :param link_state: The link_state of this FcPort.  # noqa: E501
        :type: int
        """

        self._link_state = link_state

    @property
    def link_state_string(self):
        """Gets the link_state_string of this FcPort.  # noqa: E501

        Localised version of linkState.  # noqa: E501

        :return: The link_state_string of this FcPort.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._link_state_string

    @link_state_string.setter
    def link_state_string(self, link_state_string):
        """Sets the link_state_string of this FcPort.

        Localised version of linkState.  # noqa: E501

        :param link_state_string: The link_state_string of this FcPort.  # noqa: E501
        :type: L10nStringStruct
        """

        self._link_state_string = link_state_string

    @property
    def link_down_reason(self):
        """Gets the link_down_reason of this FcPort.  # noqa: E501

        Reason why the link is down. Valid only if linkState is down.  # noqa: E501

        :return: The link_down_reason of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._link_down_reason

    @link_down_reason.setter
    def link_down_reason(self, link_down_reason):
        """Sets the link_down_reason of this FcPort.

        Reason why the link is down. Valid only if linkState is down.  # noqa: E501

        :param link_down_reason: The link_down_reason of this FcPort.  # noqa: E501
        :type: int
        """

        self._link_down_reason = link_down_reason

    @property
    def link_down_reason_string(self):
        """Gets the link_down_reason_string of this FcPort.  # noqa: E501

        Localised version of linkDownReason. Valid only if linkState is down.  # noqa: E501

        :return: The link_down_reason_string of this FcPort.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._link_down_reason_string

    @link_down_reason_string.setter
    def link_down_reason_string(self, link_down_reason_string):
        """Sets the link_down_reason_string of this FcPort.

        Localised version of linkDownReason. Valid only if linkState is down.  # noqa: E501

        :param link_down_reason_string: The link_down_reason_string of this FcPort.  # noqa: E501
        :type: L10nStringStruct
        """

        self._link_down_reason_string = link_down_reason_string

    @property
    def topology(self):
        """Gets the topology of this FcPort.  # noqa: E501

        Configured topology of the Fibre Channel port.  # noqa: E501

        :return: The topology of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this FcPort.

        Configured topology of the Fibre Channel port.  # noqa: E501

        :param topology: The topology of this FcPort.  # noqa: E501
        :type: int
        """

        self._topology = topology

    @property
    def topology_string(self):
        """Gets the topology_string of this FcPort.  # noqa: E501

        Localised version of topology.  # noqa: E501

        :return: The topology_string of this FcPort.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._topology_string

    @topology_string.setter
    def topology_string(self, topology_string):
        """Sets the topology_string of this FcPort.

        Localised version of topology.  # noqa: E501

        :param topology_string: The topology_string of this FcPort.  # noqa: E501
        :type: L10nStringStruct
        """

        self._topology_string = topology_string

    @property
    def port_licensed(self):
        """Gets the port_licensed of this FcPort.  # noqa: E501

        Is the port licensed?  # noqa: E501

        :return: The port_licensed of this FcPort.  # noqa: E501
        :rtype: bool
        """
        return self._port_licensed

    @port_licensed.setter
    def port_licensed(self, port_licensed):
        """Sets the port_licensed of this FcPort.

        Is the port licensed?  # noqa: E501

        :param port_licensed: The port_licensed of this FcPort.  # noqa: E501
        :type: bool
        """

        self._port_licensed = port_licensed

    @property
    def port_model(self):
        """Gets the port_model of this FcPort.  # noqa: E501

        Configured topology of the Fibre Channel port.  # noqa: E501

        :return: The port_model of this FcPort.  # noqa: E501
        :rtype: int
        """
        return self._port_model

    @port_model.setter
    def port_model(self, port_model):
        """Sets the port_model of this FcPort.

        Configured topology of the Fibre Channel port.  # noqa: E501

        :param port_model: The port_model of this FcPort.  # noqa: E501
        :type: int
        """

        self._port_model = port_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FcPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FcPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
