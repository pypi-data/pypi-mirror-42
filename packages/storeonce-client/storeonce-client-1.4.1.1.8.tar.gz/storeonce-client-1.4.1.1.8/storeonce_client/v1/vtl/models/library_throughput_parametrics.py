# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LibraryThroughputParametrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read_throughput': 'int',
        'write_throughput': 'int',
        'average_open_cartridges': 'int',
        'peak_open_cartridges': 'int',
        'timestamp': 'str'
    }

    attribute_map = {
        'read_throughput': 'readThroughput',
        'write_throughput': 'writeThroughput',
        'average_open_cartridges': 'averageOpenCartridges',
        'peak_open_cartridges': 'peakOpenCartridges',
        'timestamp': 'timestamp'
    }

    def __init__(self, read_throughput=None, write_throughput=None, average_open_cartridges=None, peak_open_cartridges=None, timestamp=None):  # noqa: E501
        """LibraryThroughputParametrics - a model defined in Swagger"""  # noqa: E501

        self._read_throughput = None
        self._write_throughput = None
        self._average_open_cartridges = None
        self._peak_open_cartridges = None
        self._timestamp = None
        self.discriminator = None

        if read_throughput is not None:
            self.read_throughput = read_throughput
        if write_throughput is not None:
            self.write_throughput = write_throughput
        if average_open_cartridges is not None:
            self.average_open_cartridges = average_open_cartridges
        if peak_open_cartridges is not None:
            self.peak_open_cartridges = peak_open_cartridges
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def read_throughput(self):
        """Gets the read_throughput of this LibraryThroughputParametrics.  # noqa: E501

        Average library read throughput, in bytes per second  # noqa: E501

        :return: The read_throughput of this LibraryThroughputParametrics.  # noqa: E501
        :rtype: int
        """
        return self._read_throughput

    @read_throughput.setter
    def read_throughput(self, read_throughput):
        """Sets the read_throughput of this LibraryThroughputParametrics.

        Average library read throughput, in bytes per second  # noqa: E501

        :param read_throughput: The read_throughput of this LibraryThroughputParametrics.  # noqa: E501
        :type: int
        """

        self._read_throughput = read_throughput

    @property
    def write_throughput(self):
        """Gets the write_throughput of this LibraryThroughputParametrics.  # noqa: E501

        Average library write throughput, in bytes per second  # noqa: E501

        :return: The write_throughput of this LibraryThroughputParametrics.  # noqa: E501
        :rtype: int
        """
        return self._write_throughput

    @write_throughput.setter
    def write_throughput(self, write_throughput):
        """Sets the write_throughput of this LibraryThroughputParametrics.

        Average library write throughput, in bytes per second  # noqa: E501

        :param write_throughput: The write_throughput of this LibraryThroughputParametrics.  # noqa: E501
        :type: int
        """

        self._write_throughput = write_throughput

    @property
    def average_open_cartridges(self):
        """Gets the average_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501

        Average number of cartridges loaded in drives  # noqa: E501

        :return: The average_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501
        :rtype: int
        """
        return self._average_open_cartridges

    @average_open_cartridges.setter
    def average_open_cartridges(self, average_open_cartridges):
        """Sets the average_open_cartridges of this LibraryThroughputParametrics.

        Average number of cartridges loaded in drives  # noqa: E501

        :param average_open_cartridges: The average_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501
        :type: int
        """

        self._average_open_cartridges = average_open_cartridges

    @property
    def peak_open_cartridges(self):
        """Gets the peak_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501

        Peak number of cartridges loaded in drives  # noqa: E501

        :return: The peak_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501
        :rtype: int
        """
        return self._peak_open_cartridges

    @peak_open_cartridges.setter
    def peak_open_cartridges(self, peak_open_cartridges):
        """Sets the peak_open_cartridges of this LibraryThroughputParametrics.

        Peak number of cartridges loaded in drives  # noqa: E501

        :param peak_open_cartridges: The peak_open_cartridges of this LibraryThroughputParametrics.  # noqa: E501
        :type: int
        """

        self._peak_open_cartridges = peak_open_cartridges

    @property
    def timestamp(self):
        """Gets the timestamp of this LibraryThroughputParametrics.  # noqa: E501

        Timestamp for the metric sample  # noqa: E501

        :return: The timestamp of this LibraryThroughputParametrics.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LibraryThroughputParametrics.

        Timestamp for the metric sample  # noqa: E501

        :param timestamp: The timestamp of this LibraryThroughputParametrics.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryThroughputParametrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryThroughputParametrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
