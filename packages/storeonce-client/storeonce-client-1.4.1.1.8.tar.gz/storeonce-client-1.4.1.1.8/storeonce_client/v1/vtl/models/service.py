# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'health_level': 'int',
        'health_level_string': 'L10nStringStruct',
        'vtl_status': 'int',
        'vtl_status_string': 'L10nStringStruct',
        'replication': 'Replication',
        'num_remaining_drives': 'int',
        'num_remaining_libraries': 'int',
        'max_libraries': 'int',
        'max_drives': 'int'
    }

    attribute_map = {
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'vtl_status': 'vtlStatus',
        'vtl_status_string': 'vtlStatusString',
        'replication': 'replication',
        'num_remaining_drives': 'numRemainingDrives',
        'num_remaining_libraries': 'numRemainingLibraries',
        'max_libraries': 'maxLibraries',
        'max_drives': 'maxDrives'
    }

    def __init__(self, health_level=None, health_level_string=None, vtl_status=None, vtl_status_string=None, replication=None, num_remaining_drives=None, num_remaining_libraries=None, max_libraries=None, max_drives=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._health_level = None
        self._health_level_string = None
        self._vtl_status = None
        self._vtl_status_string = None
        self._replication = None
        self._num_remaining_drives = None
        self._num_remaining_libraries = None
        self._max_libraries = None
        self._max_drives = None
        self.discriminator = None

        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if vtl_status is not None:
            self.vtl_status = vtl_status
        if vtl_status_string is not None:
            self.vtl_status_string = vtl_status_string
        if replication is not None:
            self.replication = replication
        if num_remaining_drives is not None:
            self.num_remaining_drives = num_remaining_drives
        if num_remaining_libraries is not None:
            self.num_remaining_libraries = num_remaining_libraries
        if max_libraries is not None:
            self.max_libraries = max_libraries
        if max_drives is not None:
            self.max_drives = max_drives

    @property
    def health_level(self):
        """Gets the health_level of this Service.  # noqa: E501

        Health level of the service  # noqa: E501

        :return: The health_level of this Service.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Service.

        Health level of the service  # noqa: E501

        :param health_level: The health_level of this Service.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Service.  # noqa: E501

        Localised String representing the health level  # noqa: E501

        :return: The health_level_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Service.

        Localised String representing the health level  # noqa: E501

        :param health_level_string: The health_level_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._health_level_string = health_level_string

    @property
    def vtl_status(self):
        """Gets the vtl_status of this Service.  # noqa: E501

        Status of the service  # noqa: E501

        :return: The vtl_status of this Service.  # noqa: E501
        :rtype: int
        """
        return self._vtl_status

    @vtl_status.setter
    def vtl_status(self, vtl_status):
        """Sets the vtl_status of this Service.

        Status of the service  # noqa: E501

        :param vtl_status: The vtl_status of this Service.  # noqa: E501
        :type: int
        """

        self._vtl_status = vtl_status

    @property
    def vtl_status_string(self):
        """Gets the vtl_status_string of this Service.  # noqa: E501

        Localised String representing the status  # noqa: E501

        :return: The vtl_status_string of this Service.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._vtl_status_string

    @vtl_status_string.setter
    def vtl_status_string(self, vtl_status_string):
        """Sets the vtl_status_string of this Service.

        Localised String representing the status  # noqa: E501

        :param vtl_status_string: The vtl_status_string of this Service.  # noqa: E501
        :type: L10nStringStruct
        """

        self._vtl_status_string = vtl_status_string

    @property
    def replication(self):
        """Gets the replication of this Service.  # noqa: E501

        Replication information for the service  # noqa: E501

        :return: The replication of this Service.  # noqa: E501
        :rtype: Replication
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this Service.

        Replication information for the service  # noqa: E501

        :param replication: The replication of this Service.  # noqa: E501
        :type: Replication
        """

        self._replication = replication

    @property
    def num_remaining_drives(self):
        """Gets the num_remaining_drives of this Service.  # noqa: E501

        The remaining size of the drive pool. The drive pool is the total number of drives which can be configured across the service set  # noqa: E501

        :return: The num_remaining_drives of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_remaining_drives

    @num_remaining_drives.setter
    def num_remaining_drives(self, num_remaining_drives):
        """Sets the num_remaining_drives of this Service.

        The remaining size of the drive pool. The drive pool is the total number of drives which can be configured across the service set  # noqa: E501

        :param num_remaining_drives: The num_remaining_drives of this Service.  # noqa: E501
        :type: int
        """

        self._num_remaining_drives = num_remaining_drives

    @property
    def num_remaining_libraries(self):
        """Gets the num_remaining_libraries of this Service.  # noqa: E501

        Number of remaining libraries that can be created on this service  # noqa: E501

        :return: The num_remaining_libraries of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_remaining_libraries

    @num_remaining_libraries.setter
    def num_remaining_libraries(self, num_remaining_libraries):
        """Sets the num_remaining_libraries of this Service.

        Number of remaining libraries that can be created on this service  # noqa: E501

        :param num_remaining_libraries: The num_remaining_libraries of this Service.  # noqa: E501
        :type: int
        """

        self._num_remaining_libraries = num_remaining_libraries

    @property
    def max_libraries(self):
        """Gets the max_libraries of this Service.  # noqa: E501

        Maximum number of libraries that can be created on this service  # noqa: E501

        :return: The max_libraries of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_libraries

    @max_libraries.setter
    def max_libraries(self, max_libraries):
        """Sets the max_libraries of this Service.

        Maximum number of libraries that can be created on this service  # noqa: E501

        :param max_libraries: The max_libraries of this Service.  # noqa: E501
        :type: int
        """

        self._max_libraries = max_libraries

    @property
    def max_drives(self):
        """Gets the max_drives of this Service.  # noqa: E501

        Maximum number of drives that can be created on this service  # noqa: E501

        :return: The max_drives of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_drives

    @max_drives.setter
    def max_drives(self, max_drives):
        """Sets the max_drives of this Service.

        Maximum number of drives that can be created on this service  # noqa: E501

        :param max_drives: The max_drives of this Service.  # noqa: E501
        :type: int
        """

        self._max_drives = max_drives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
