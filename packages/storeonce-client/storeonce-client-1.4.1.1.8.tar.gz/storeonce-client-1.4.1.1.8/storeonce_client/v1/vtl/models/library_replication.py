# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LibraryReplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rep_role': 'int',
        'rep_role_string': 'L10nStringStruct',
        'rep_health_level': 'int',
        'rep_health_level_string': 'L10nStringStruct',
        'rep_status': 'int',
        'rep_status_string': 'L10nStringStruct',
        'rep_mappings': 'list[ReplicationMapping]'
    }

    attribute_map = {
        'rep_role': 'repRole',
        'rep_role_string': 'repRoleString',
        'rep_health_level': 'repHealthLevel',
        'rep_health_level_string': 'repHealthLevelString',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'rep_mappings': 'repMappings'
    }

    def __init__(self, rep_role=None, rep_role_string=None, rep_health_level=None, rep_health_level_string=None, rep_status=None, rep_status_string=None, rep_mappings=None):  # noqa: E501
        """LibraryReplication - a model defined in Swagger"""  # noqa: E501

        self._rep_role = None
        self._rep_role_string = None
        self._rep_health_level = None
        self._rep_health_level_string = None
        self._rep_status = None
        self._rep_status_string = None
        self._rep_mappings = None
        self.discriminator = None

        if rep_role is not None:
            self.rep_role = rep_role
        if rep_role_string is not None:
            self.rep_role_string = rep_role_string
        if rep_health_level is not None:
            self.rep_health_level = rep_health_level
        if rep_health_level_string is not None:
            self.rep_health_level_string = rep_health_level_string
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if rep_mappings is not None:
            self.rep_mappings = rep_mappings

    @property
    def rep_role(self):
        """Gets the rep_role of this LibraryReplication.  # noqa: E501

        The replication role of the library  # noqa: E501

        :return: The rep_role of this LibraryReplication.  # noqa: E501
        :rtype: int
        """
        return self._rep_role

    @rep_role.setter
    def rep_role(self, rep_role):
        """Sets the rep_role of this LibraryReplication.

        The replication role of the library  # noqa: E501

        :param rep_role: The rep_role of this LibraryReplication.  # noqa: E501
        :type: int
        """

        self._rep_role = rep_role

    @property
    def rep_role_string(self):
        """Gets the rep_role_string of this LibraryReplication.  # noqa: E501

        Localized representation of the replication role of the library  # noqa: E501

        :return: The rep_role_string of this LibraryReplication.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._rep_role_string

    @rep_role_string.setter
    def rep_role_string(self, rep_role_string):
        """Sets the rep_role_string of this LibraryReplication.

        Localized representation of the replication role of the library  # noqa: E501

        :param rep_role_string: The rep_role_string of this LibraryReplication.  # noqa: E501
        :type: L10nStringStruct
        """

        self._rep_role_string = rep_role_string

    @property
    def rep_health_level(self):
        """Gets the rep_health_level of this LibraryReplication.  # noqa: E501

        Represents the replication health level of the library  # noqa: E501

        :return: The rep_health_level of this LibraryReplication.  # noqa: E501
        :rtype: int
        """
        return self._rep_health_level

    @rep_health_level.setter
    def rep_health_level(self, rep_health_level):
        """Sets the rep_health_level of this LibraryReplication.

        Represents the replication health level of the library  # noqa: E501

        :param rep_health_level: The rep_health_level of this LibraryReplication.  # noqa: E501
        :type: int
        """

        self._rep_health_level = rep_health_level

    @property
    def rep_health_level_string(self):
        """Gets the rep_health_level_string of this LibraryReplication.  # noqa: E501

        Localised String representing the replication health level of the library  # noqa: E501

        :return: The rep_health_level_string of this LibraryReplication.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._rep_health_level_string

    @rep_health_level_string.setter
    def rep_health_level_string(self, rep_health_level_string):
        """Sets the rep_health_level_string of this LibraryReplication.

        Localised String representing the replication health level of the library  # noqa: E501

        :param rep_health_level_string: The rep_health_level_string of this LibraryReplication.  # noqa: E501
        :type: L10nStringStruct
        """

        self._rep_health_level_string = rep_health_level_string

    @property
    def rep_status(self):
        """Gets the rep_status of this LibraryReplication.  # noqa: E501

        Enumeration of the replication status of the library  # noqa: E501

        :return: The rep_status of this LibraryReplication.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this LibraryReplication.

        Enumeration of the replication status of the library  # noqa: E501

        :param rep_status: The rep_status of this LibraryReplication.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this LibraryReplication.  # noqa: E501

        Localised String representing the replication status of the library  # noqa: E501

        :return: The rep_status_string of this LibraryReplication.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this LibraryReplication.

        Localised String representing the replication status of the library  # noqa: E501

        :param rep_status_string: The rep_status_string of this LibraryReplication.  # noqa: E501
        :type: L10nStringStruct
        """

        self._rep_status_string = rep_status_string

    @property
    def rep_mappings(self):
        """Gets the rep_mappings of this LibraryReplication.  # noqa: E501

        List of ReplicationMapping objects detailing the replication mappings for the library  # noqa: E501

        :return: The rep_mappings of this LibraryReplication.  # noqa: E501
        :rtype: list[ReplicationMapping]
        """
        return self._rep_mappings

    @rep_mappings.setter
    def rep_mappings(self, rep_mappings):
        """Sets the rep_mappings of this LibraryReplication.

        List of ReplicationMapping objects detailing the replication mappings for the library  # noqa: E501

        :param rep_mappings: The rep_mappings of this LibraryReplication.  # noqa: E501
        :type: list[ReplicationMapping]
        """

        self._rep_mappings = rep_mappings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryReplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryReplication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
