# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class BatchBarcodeAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_slot_id': 'int',
        'last_slot_id': 'int',
        'prefix': 'str',
        'suffix': 'str',
        'initial_value': 'str'
    }

    attribute_map = {
        'first_slot_id': 'firstSlotId',
        'last_slot_id': 'lastSlotId',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'initial_value': 'initialValue'
    }

    def __init__(self, first_slot_id=None, last_slot_id=None, prefix='', suffix='', initial_value=None):  # noqa: E501
        """BatchBarcodeAction - a model defined in Swagger"""  # noqa: E501

        self._first_slot_id = None
        self._last_slot_id = None
        self._prefix = None
        self._suffix = None
        self._initial_value = None
        self.discriminator = None

        self.first_slot_id = first_slot_id
        self.last_slot_id = last_slot_id
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        self.initial_value = initial_value

    @property
    def first_slot_id(self):
        """Gets the first_slot_id of this BatchBarcodeAction.  # noqa: E501

        The first slot ID in the target range. Inclusive  # noqa: E501

        :return: The first_slot_id of this BatchBarcodeAction.  # noqa: E501
        :rtype: int
        """
        return self._first_slot_id

    @first_slot_id.setter
    def first_slot_id(self, first_slot_id):
        """Sets the first_slot_id of this BatchBarcodeAction.

        The first slot ID in the target range. Inclusive  # noqa: E501

        :param first_slot_id: The first_slot_id of this BatchBarcodeAction.  # noqa: E501
        :type: int
        """
        if first_slot_id is None:
            raise ValueError("Invalid value for `first_slot_id`, must not be `None`")  # noqa: E501

        self._first_slot_id = first_slot_id

    @property
    def last_slot_id(self):
        """Gets the last_slot_id of this BatchBarcodeAction.  # noqa: E501

        The last slot ID in the target range. Inclusive.  # noqa: E501

        :return: The last_slot_id of this BatchBarcodeAction.  # noqa: E501
        :rtype: int
        """
        return self._last_slot_id

    @last_slot_id.setter
    def last_slot_id(self, last_slot_id):
        """Sets the last_slot_id of this BatchBarcodeAction.

        The last slot ID in the target range. Inclusive.  # noqa: E501

        :param last_slot_id: The last_slot_id of this BatchBarcodeAction.  # noqa: E501
        :type: int
        """
        if last_slot_id is None:
            raise ValueError("Invalid value for `last_slot_id`, must not be `None`")  # noqa: E501

        self._last_slot_id = last_slot_id

    @property
    def prefix(self):
        """Gets the prefix of this BatchBarcodeAction.  # noqa: E501

        Alphanumeric String representing a fixed barcode prefix. Maximum length: 3  # noqa: E501

        :return: The prefix of this BatchBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BatchBarcodeAction.

        Alphanumeric String representing a fixed barcode prefix. Maximum length: 3  # noqa: E501

        :param prefix: The prefix of this BatchBarcodeAction.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this BatchBarcodeAction.  # noqa: E501

        Alphanumeric String representing a fixed barcode suffix. Maximum length: 2  # noqa: E501

        :return: The suffix of this BatchBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this BatchBarcodeAction.

        Alphanumeric String representing a fixed barcode suffix. Maximum length: 2  # noqa: E501

        :param suffix: The suffix of this BatchBarcodeAction.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def initial_value(self):
        """Gets the initial_value of this BatchBarcodeAction.  # noqa: E501

        Alphanumeric string used as the variable section of the barcode. Is used as a starting value and incremented for each cartridge  # noqa: E501

        :return: The initial_value of this BatchBarcodeAction.  # noqa: E501
        :rtype: str
        """
        return self._initial_value

    @initial_value.setter
    def initial_value(self, initial_value):
        """Sets the initial_value of this BatchBarcodeAction.

        Alphanumeric string used as the variable section of the barcode. Is used as a starting value and incremented for each cartridge  # noqa: E501

        :param initial_value: The initial_value of this BatchBarcodeAction.  # noqa: E501
        :type: str
        """
        if initial_value is None:
            raise ValueError("Invalid value for `initial_value`, must not be `None`")  # noqa: E501

        self._initial_value = initial_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchBarcodeAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchBarcodeAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
