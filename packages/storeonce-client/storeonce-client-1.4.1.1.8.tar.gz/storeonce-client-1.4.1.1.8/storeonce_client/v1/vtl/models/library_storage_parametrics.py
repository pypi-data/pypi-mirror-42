# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LibraryStorageParametrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'average_configured_cartridges': 'int',
        'peak_configured_cartridges': 'int',
        'dedupe_ratio': 'float',
        'timestamp': 'str'
    }

    attribute_map = {
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'average_configured_cartridges': 'averageConfiguredCartridges',
        'peak_configured_cartridges': 'peakConfiguredCartridges',
        'dedupe_ratio': 'dedupeRatio',
        'timestamp': 'timestamp'
    }

    def __init__(self, user_bytes=None, disk_bytes=None, average_configured_cartridges=None, peak_configured_cartridges=None, dedupe_ratio=None, timestamp=None):  # noqa: E501
        """LibraryStorageParametrics - a model defined in Swagger"""  # noqa: E501

        self._user_bytes = None
        self._disk_bytes = None
        self._average_configured_cartridges = None
        self._peak_configured_cartridges = None
        self._dedupe_ratio = None
        self._timestamp = None
        self.discriminator = None

        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if average_configured_cartridges is not None:
            self.average_configured_cartridges = average_configured_cartridges
        if peak_configured_cartridges is not None:
            self.peak_configured_cartridges = peak_configured_cartridges
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def user_bytes(self):
        """Gets the user_bytes of this LibraryStorageParametrics.  # noqa: E501

        Amount of user data stored, in bytes  # noqa: E501

        :return: The user_bytes of this LibraryStorageParametrics.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this LibraryStorageParametrics.

        Amount of user data stored, in bytes  # noqa: E501

        :param user_bytes: The user_bytes of this LibraryStorageParametrics.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this LibraryStorageParametrics.  # noqa: E501

        Amount of disk capacity used, in bytes  # noqa: E501

        :return: The disk_bytes of this LibraryStorageParametrics.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this LibraryStorageParametrics.

        Amount of disk capacity used, in bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this LibraryStorageParametrics.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def average_configured_cartridges(self):
        """Gets the average_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501

        The average number of configured cartridges  # noqa: E501

        :return: The average_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501
        :rtype: int
        """
        return self._average_configured_cartridges

    @average_configured_cartridges.setter
    def average_configured_cartridges(self, average_configured_cartridges):
        """Sets the average_configured_cartridges of this LibraryStorageParametrics.

        The average number of configured cartridges  # noqa: E501

        :param average_configured_cartridges: The average_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501
        :type: int
        """

        self._average_configured_cartridges = average_configured_cartridges

    @property
    def peak_configured_cartridges(self):
        """Gets the peak_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501

        The peak number of configured cartridges.  # noqa: E501

        :return: The peak_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501
        :rtype: int
        """
        return self._peak_configured_cartridges

    @peak_configured_cartridges.setter
    def peak_configured_cartridges(self, peak_configured_cartridges):
        """Sets the peak_configured_cartridges of this LibraryStorageParametrics.

        The peak number of configured cartridges.  # noqa: E501

        :param peak_configured_cartridges: The peak_configured_cartridges of this LibraryStorageParametrics.  # noqa: E501
        :type: int
        """

        self._peak_configured_cartridges = peak_configured_cartridges

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this LibraryStorageParametrics.  # noqa: E501

        The dedupe ratio of the library  # noqa: E501

        :return: The dedupe_ratio of this LibraryStorageParametrics.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this LibraryStorageParametrics.

        The dedupe ratio of the library  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this LibraryStorageParametrics.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def timestamp(self):
        """Gets the timestamp of this LibraryStorageParametrics.  # noqa: E501

        Timestamp for the metric sample  # noqa: E501

        :return: The timestamp of this LibraryStorageParametrics.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LibraryStorageParametrics.

        Timestamp for the metric sample  # noqa: E501

        :param timestamp: The timestamp of this LibraryStorageParametrics.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryStorageParametrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryStorageParametrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
