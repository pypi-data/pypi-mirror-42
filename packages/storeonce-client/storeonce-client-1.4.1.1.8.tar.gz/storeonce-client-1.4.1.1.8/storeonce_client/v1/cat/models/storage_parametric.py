# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorageParametric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'num_objects': 'int',
        'timestamp': 'str',
        'dedupe_ratio': 'float',
        'cloud_disk_bytes': 'int',
        'local_disk_bytes': 'int'
    }

    attribute_map = {
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'num_objects': 'numObjects',
        'timestamp': 'timestamp',
        'dedupe_ratio': 'dedupeRatio',
        'cloud_disk_bytes': 'cloudDiskBytes',
        'local_disk_bytes': 'localDiskBytes'
    }

    def __init__(self, user_bytes=None, disk_bytes=None, num_objects=None, timestamp=None, dedupe_ratio=None, cloud_disk_bytes=None, local_disk_bytes=None):  # noqa: E501
        """StorageParametric - a model defined in Swagger"""  # noqa: E501

        self._user_bytes = None
        self._disk_bytes = None
        self._num_objects = None
        self._timestamp = None
        self._dedupe_ratio = None
        self._cloud_disk_bytes = None
        self._local_disk_bytes = None
        self.discriminator = None

        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if num_objects is not None:
            self.num_objects = num_objects
        if timestamp is not None:
            self.timestamp = timestamp
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if cloud_disk_bytes is not None:
            self.cloud_disk_bytes = cloud_disk_bytes
        if local_disk_bytes is not None:
            self.local_disk_bytes = local_disk_bytes

    @property
    def user_bytes(self):
        """Gets the user_bytes of this StorageParametric.  # noqa: E501

        Amount of user data stored in bytes  # noqa: E501

        :return: The user_bytes of this StorageParametric.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this StorageParametric.

        Amount of user data stored in bytes  # noqa: E501

        :param user_bytes: The user_bytes of this StorageParametric.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this StorageParametric.  # noqa: E501

        Amount of disk capacity used in  bytes  # noqa: E501

        :return: The disk_bytes of this StorageParametric.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this StorageParametric.

        Amount of disk capacity used in  bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this StorageParametric.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def num_objects(self):
        """Gets the num_objects of this StorageParametric.  # noqa: E501

        Number of objects  # noqa: E501

        :return: The num_objects of this StorageParametric.  # noqa: E501
        :rtype: int
        """
        return self._num_objects

    @num_objects.setter
    def num_objects(self, num_objects):
        """Sets the num_objects of this StorageParametric.

        Number of objects  # noqa: E501

        :param num_objects: The num_objects of this StorageParametric.  # noqa: E501
        :type: int
        """

        self._num_objects = num_objects

    @property
    def timestamp(self):
        """Gets the timestamp of this StorageParametric.  # noqa: E501

        UTC time for the metric  # noqa: E501

        :return: The timestamp of this StorageParametric.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StorageParametric.

        UTC time for the metric  # noqa: E501

        :param timestamp: The timestamp of this StorageParametric.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this StorageParametric.  # noqa: E501

        Dedupe ratio.  # noqa: E501

        :return: The dedupe_ratio of this StorageParametric.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this StorageParametric.

        Dedupe ratio.  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this StorageParametric.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def cloud_disk_bytes(self):
        """Gets the cloud_disk_bytes of this StorageParametric.  # noqa: E501

        Amount of capacity used in cloud storage in bytes  # noqa: E501

        :return: The cloud_disk_bytes of this StorageParametric.  # noqa: E501
        :rtype: int
        """
        return self._cloud_disk_bytes

    @cloud_disk_bytes.setter
    def cloud_disk_bytes(self, cloud_disk_bytes):
        """Sets the cloud_disk_bytes of this StorageParametric.

        Amount of capacity used in cloud storage in bytes  # noqa: E501

        :param cloud_disk_bytes: The cloud_disk_bytes of this StorageParametric.  # noqa: E501
        :type: int
        """

        self._cloud_disk_bytes = cloud_disk_bytes

    @property
    def local_disk_bytes(self):
        """Gets the local_disk_bytes of this StorageParametric.  # noqa: E501

        Amount of capacity used in local storage in bytes  # noqa: E501

        :return: The local_disk_bytes of this StorageParametric.  # noqa: E501
        :rtype: int
        """
        return self._local_disk_bytes

    @local_disk_bytes.setter
    def local_disk_bytes(self, local_disk_bytes):
        """Sets the local_disk_bytes of this StorageParametric.

        Amount of capacity used in local storage in bytes  # noqa: E501

        :param local_disk_bytes: The local_disk_bytes of this StorageParametric.  # noqa: E501
        :type: int
        """

        self._local_disk_bytes = local_disk_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageParametric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageParametric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
