# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ClientPostModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'password': 'password'
    }

    def __init__(self, name=None, description=None, password=None):  # noqa: E501
        """ClientPostModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._password = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if password is not None:
            self.password = password

    @property
    def name(self):
        """Gets the name of this ClientPostModel.  # noqa: E501

        Name of the client  # noqa: E501

        :return: The name of this ClientPostModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientPostModel.

        Name of the client  # noqa: E501

        :param name: The name of this ClientPostModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ClientPostModel.  # noqa: E501

        Description of the client  # noqa: E501

        :return: The description of this ClientPostModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientPostModel.

        Description of the client  # noqa: E501

        :param description: The description of this ClientPostModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def password(self):
        """Gets the password of this ClientPostModel.  # noqa: E501

        Write-only password field  # noqa: E501

        :return: The password of this ClientPostModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ClientPostModel.

        Write-only password field  # noqa: E501

        :param password: The password of this ClientPostModel.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientPostModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientPostModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
