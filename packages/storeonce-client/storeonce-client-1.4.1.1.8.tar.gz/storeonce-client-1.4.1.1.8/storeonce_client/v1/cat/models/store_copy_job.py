# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreCopyJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client_ip_address': 'str',
        'client_id': 'str',
        'application_id': 'str',
        'job_reference': 'str',
        'queued_date': 'datetime',
        'started_date': 'datetime',
        'ended_date': 'datetime',
        'job_status': 'int',
        'job_status_string': 'str',
        'job_status_code': 'int',
        'last_pause_cancel_reason': 'int',
        'last_pause_cancel_reason_string': 'str',
        'last_failed_run_reason': 'int',
        'last_failed_run_reason_string': 'str',
        'job_status_info': 'int',
        'job_status_info_string': 'str',
        'failed_attempts': 'int',
        'last_attempt_date': 'datetime',
        'next_attempt_date': 'datetime',
        'marked_for_cancellation': 'bool',
        'cancellable': 'bool',
        'data_copied_bytes': 'int',
        'percentage_complete': 'float',
        'estimated_completion_date': 'datetime',
        'job_duration_seconds': 'int',
        'written_disk_bytes': 'int',
        'write_dedupe_ratio': 'float',
        'copy_data_transmitted_bytes': 'int',
        'copy_network_throughput': 'int',
        'percentage_copy_bandwidth_saving': 'float',
        'copy_logical_throughput': 'int',
        'transport_protocol': 'int',
        'transport_protocol_string': 'str',
        'destination_client_security_mode': 'int',
        'destination_client_security_mode_string': 'str',
        'origin_client_security_mode': 'int',
        'origin_client_security_mode_string': 'str',
        'origin': 'StoreCopyJobOrigin',
        'destination': 'StoreCopyJobDestination'
    }

    attribute_map = {
        'id': 'id',
        'client_ip_address': 'clientIpAddress',
        'client_id': 'clientId',
        'application_id': 'applicationId',
        'job_reference': 'jobReference',
        'queued_date': 'queuedDate',
        'started_date': 'startedDate',
        'ended_date': 'endedDate',
        'job_status': 'jobStatus',
        'job_status_string': 'jobStatusString',
        'job_status_code': 'jobStatusCode',
        'last_pause_cancel_reason': 'lastPauseCancelReason',
        'last_pause_cancel_reason_string': 'lastPauseCancelReasonString',
        'last_failed_run_reason': 'lastFailedRunReason',
        'last_failed_run_reason_string': 'lastFailedRunReasonString',
        'job_status_info': 'jobStatusInfo',
        'job_status_info_string': 'jobStatusInfoString',
        'failed_attempts': 'failedAttempts',
        'last_attempt_date': 'lastAttemptDate',
        'next_attempt_date': 'nextAttemptDate',
        'marked_for_cancellation': 'markedForCancellation',
        'cancellable': 'cancellable',
        'data_copied_bytes': 'dataCopiedBytes',
        'percentage_complete': 'percentageComplete',
        'estimated_completion_date': 'estimatedCompletionDate',
        'job_duration_seconds': 'jobDurationSeconds',
        'written_disk_bytes': 'writtenDiskBytes',
        'write_dedupe_ratio': 'writeDedupeRatio',
        'copy_data_transmitted_bytes': 'copyDataTransmittedBytes',
        'copy_network_throughput': 'copyNetworkThroughput',
        'percentage_copy_bandwidth_saving': 'percentageCopyBandwidthSaving',
        'copy_logical_throughput': 'copyLogicalThroughput',
        'transport_protocol': 'transportProtocol',
        'transport_protocol_string': 'transportProtocolString',
        'destination_client_security_mode': 'destinationClientSecurityMode',
        'destination_client_security_mode_string': 'destinationClientSecurityModeString',
        'origin_client_security_mode': 'originClientSecurityMode',
        'origin_client_security_mode_string': 'originClientSecurityModeString',
        'origin': 'origin',
        'destination': 'destination'
    }

    def __init__(self, id=None, client_ip_address=None, client_id=None, application_id=None, job_reference=None, queued_date=None, started_date=None, ended_date=None, job_status=None, job_status_string=None, job_status_code=None, last_pause_cancel_reason=None, last_pause_cancel_reason_string=None, last_failed_run_reason=None, last_failed_run_reason_string=None, job_status_info=None, job_status_info_string=None, failed_attempts=None, last_attempt_date=None, next_attempt_date=None, marked_for_cancellation=False, cancellable=False, data_copied_bytes=None, percentage_complete=None, estimated_completion_date=None, job_duration_seconds=None, written_disk_bytes=None, write_dedupe_ratio=None, copy_data_transmitted_bytes=None, copy_network_throughput=None, percentage_copy_bandwidth_saving=None, copy_logical_throughput=None, transport_protocol=None, transport_protocol_string=None, destination_client_security_mode=None, destination_client_security_mode_string=None, origin_client_security_mode=None, origin_client_security_mode_string=None, origin=None, destination=None):  # noqa: E501
        """StoreCopyJob - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_ip_address = None
        self._client_id = None
        self._application_id = None
        self._job_reference = None
        self._queued_date = None
        self._started_date = None
        self._ended_date = None
        self._job_status = None
        self._job_status_string = None
        self._job_status_code = None
        self._last_pause_cancel_reason = None
        self._last_pause_cancel_reason_string = None
        self._last_failed_run_reason = None
        self._last_failed_run_reason_string = None
        self._job_status_info = None
        self._job_status_info_string = None
        self._failed_attempts = None
        self._last_attempt_date = None
        self._next_attempt_date = None
        self._marked_for_cancellation = None
        self._cancellable = None
        self._data_copied_bytes = None
        self._percentage_complete = None
        self._estimated_completion_date = None
        self._job_duration_seconds = None
        self._written_disk_bytes = None
        self._write_dedupe_ratio = None
        self._copy_data_transmitted_bytes = None
        self._copy_network_throughput = None
        self._percentage_copy_bandwidth_saving = None
        self._copy_logical_throughput = None
        self._transport_protocol = None
        self._transport_protocol_string = None
        self._destination_client_security_mode = None
        self._destination_client_security_mode_string = None
        self._origin_client_security_mode = None
        self._origin_client_security_mode_string = None
        self._origin = None
        self._destination = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_ip_address is not None:
            self.client_ip_address = client_ip_address
        if client_id is not None:
            self.client_id = client_id
        if application_id is not None:
            self.application_id = application_id
        if job_reference is not None:
            self.job_reference = job_reference
        if queued_date is not None:
            self.queued_date = queued_date
        if started_date is not None:
            self.started_date = started_date
        if ended_date is not None:
            self.ended_date = ended_date
        if job_status is not None:
            self.job_status = job_status
        if job_status_string is not None:
            self.job_status_string = job_status_string
        if job_status_code is not None:
            self.job_status_code = job_status_code
        if last_pause_cancel_reason is not None:
            self.last_pause_cancel_reason = last_pause_cancel_reason
        if last_pause_cancel_reason_string is not None:
            self.last_pause_cancel_reason_string = last_pause_cancel_reason_string
        if last_failed_run_reason is not None:
            self.last_failed_run_reason = last_failed_run_reason
        if last_failed_run_reason_string is not None:
            self.last_failed_run_reason_string = last_failed_run_reason_string
        if job_status_info is not None:
            self.job_status_info = job_status_info
        if job_status_info_string is not None:
            self.job_status_info_string = job_status_info_string
        if failed_attempts is not None:
            self.failed_attempts = failed_attempts
        if last_attempt_date is not None:
            self.last_attempt_date = last_attempt_date
        if next_attempt_date is not None:
            self.next_attempt_date = next_attempt_date
        if marked_for_cancellation is not None:
            self.marked_for_cancellation = marked_for_cancellation
        if cancellable is not None:
            self.cancellable = cancellable
        if data_copied_bytes is not None:
            self.data_copied_bytes = data_copied_bytes
        if percentage_complete is not None:
            self.percentage_complete = percentage_complete
        if estimated_completion_date is not None:
            self.estimated_completion_date = estimated_completion_date
        if job_duration_seconds is not None:
            self.job_duration_seconds = job_duration_seconds
        if written_disk_bytes is not None:
            self.written_disk_bytes = written_disk_bytes
        if write_dedupe_ratio is not None:
            self.write_dedupe_ratio = write_dedupe_ratio
        if copy_data_transmitted_bytes is not None:
            self.copy_data_transmitted_bytes = copy_data_transmitted_bytes
        if copy_network_throughput is not None:
            self.copy_network_throughput = copy_network_throughput
        if percentage_copy_bandwidth_saving is not None:
            self.percentage_copy_bandwidth_saving = percentage_copy_bandwidth_saving
        if copy_logical_throughput is not None:
            self.copy_logical_throughput = copy_logical_throughput
        if transport_protocol is not None:
            self.transport_protocol = transport_protocol
        if transport_protocol_string is not None:
            self.transport_protocol_string = transport_protocol_string
        if destination_client_security_mode is not None:
            self.destination_client_security_mode = destination_client_security_mode
        if destination_client_security_mode_string is not None:
            self.destination_client_security_mode_string = destination_client_security_mode_string
        if origin_client_security_mode is not None:
            self.origin_client_security_mode = origin_client_security_mode
        if origin_client_security_mode_string is not None:
            self.origin_client_security_mode_string = origin_client_security_mode_string
        if origin is not None:
            self.origin = origin
        if destination is not None:
            self.destination = destination

    @property
    def id(self):
        """Gets the id of this StoreCopyJob.  # noqa: E501

        ID for this copyjob  # noqa: E501

        :return: The id of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreCopyJob.

        ID for this copyjob  # noqa: E501

        :param id: The id of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_ip_address(self):
        """Gets the client_ip_address of this StoreCopyJob.  # noqa: E501

        The IP address of the client that created this copyjob  # noqa: E501

        :return: The client_ip_address of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """Sets the client_ip_address of this StoreCopyJob.

        The IP address of the client that created this copyjob  # noqa: E501

        :param client_ip_address: The client_ip_address of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def client_id(self):
        """Gets the client_id of this StoreCopyJob.  # noqa: E501

        A string representing the client that created this copyjob  # noqa: E501

        :return: The client_id of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this StoreCopyJob.

        A string representing the client that created this copyjob  # noqa: E501

        :param client_id: The client_id of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def application_id(self):
        """Gets the application_id of this StoreCopyJob.  # noqa: E501

        String representing the application that was used to create this copyjob  # noqa: E501

        :return: The application_id of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StoreCopyJob.

        String representing the application that was used to create this copyjob  # noqa: E501

        :param application_id: The application_id of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def job_reference(self):
        """Gets the job_reference of this StoreCopyJob.  # noqa: E501

        Reference given to this copyjob  # noqa: E501

        :return: The job_reference of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this StoreCopyJob.

        Reference given to this copyjob  # noqa: E501

        :param job_reference: The job_reference of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._job_reference = job_reference

    @property
    def queued_date(self):
        """Gets the queued_date of this StoreCopyJob.  # noqa: E501

        The date that the source object was queued to be copied  # noqa: E501

        :return: The queued_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._queued_date

    @queued_date.setter
    def queued_date(self, queued_date):
        """Sets the queued_date of this StoreCopyJob.

        The date that the source object was queued to be copied  # noqa: E501

        :param queued_date: The queued_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._queued_date = queued_date

    @property
    def started_date(self):
        """Gets the started_date of this StoreCopyJob.  # noqa: E501

        The date that the source object last started to copy  # noqa: E501

        :return: The started_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._started_date

    @started_date.setter
    def started_date(self, started_date):
        """Sets the started_date of this StoreCopyJob.

        The date that the source object last started to copy  # noqa: E501

        :param started_date: The started_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._started_date = started_date

    @property
    def ended_date(self):
        """Gets the ended_date of this StoreCopyJob.  # noqa: E501

        The date that the source object stopped copying  # noqa: E501

        :return: The ended_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_date

    @ended_date.setter
    def ended_date(self, ended_date):
        """Sets the ended_date of this StoreCopyJob.

        The date that the source object stopped copying  # noqa: E501

        :param ended_date: The ended_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._ended_date = ended_date

    @property
    def job_status(self):
        """Gets the job_status of this StoreCopyJob.  # noqa: E501

        The status of the completed copyjob  # noqa: E501

        :return: The job_status of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this StoreCopyJob.

        The status of the completed copyjob  # noqa: E501

        :param job_status: The job_status of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._job_status = job_status

    @property
    def job_status_string(self):
        """Gets the job_status_string of this StoreCopyJob.  # noqa: E501

        Localised string representing the status of the completed copyjob  # noqa: E501

        :return: The job_status_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._job_status_string

    @job_status_string.setter
    def job_status_string(self, job_status_string):
        """Sets the job_status_string of this StoreCopyJob.

        Localised string representing the status of the completed copyjob  # noqa: E501

        :param job_status_string: The job_status_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._job_status_string = job_status_string

    @property
    def job_status_code(self):
        """Gets the job_status_code of this StoreCopyJob.  # noqa: E501

        A numeric value for the status of the copy job. Provides further info for the status of the job.  # noqa: E501

        :return: The job_status_code of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._job_status_code

    @job_status_code.setter
    def job_status_code(self, job_status_code):
        """Sets the job_status_code of this StoreCopyJob.

        A numeric value for the status of the copy job. Provides further info for the status of the job.  # noqa: E501

        :param job_status_code: The job_status_code of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._job_status_code = job_status_code

    @property
    def last_pause_cancel_reason(self):
        """Gets the last_pause_cancel_reason of this StoreCopyJob.  # noqa: E501

        The most recent reason the copyjob was paused or cancelled  # noqa: E501

        :return: The last_pause_cancel_reason of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._last_pause_cancel_reason

    @last_pause_cancel_reason.setter
    def last_pause_cancel_reason(self, last_pause_cancel_reason):
        """Sets the last_pause_cancel_reason of this StoreCopyJob.

        The most recent reason the copyjob was paused or cancelled  # noqa: E501

        :param last_pause_cancel_reason: The last_pause_cancel_reason of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._last_pause_cancel_reason = last_pause_cancel_reason

    @property
    def last_pause_cancel_reason_string(self):
        """Gets the last_pause_cancel_reason_string of this StoreCopyJob.  # noqa: E501

        Localised string representing the most recent reason the copyjob was paused or cancelled  # noqa: E501

        :return: The last_pause_cancel_reason_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._last_pause_cancel_reason_string

    @last_pause_cancel_reason_string.setter
    def last_pause_cancel_reason_string(self, last_pause_cancel_reason_string):
        """Sets the last_pause_cancel_reason_string of this StoreCopyJob.

        Localised string representing the most recent reason the copyjob was paused or cancelled  # noqa: E501

        :param last_pause_cancel_reason_string: The last_pause_cancel_reason_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._last_pause_cancel_reason_string = last_pause_cancel_reason_string

    @property
    def last_failed_run_reason(self):
        """Gets the last_failed_run_reason of this StoreCopyJob.  # noqa: E501

        The most recent reason why the copyjob failed to run  # noqa: E501

        :return: The last_failed_run_reason of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._last_failed_run_reason

    @last_failed_run_reason.setter
    def last_failed_run_reason(self, last_failed_run_reason):
        """Sets the last_failed_run_reason of this StoreCopyJob.

        The most recent reason why the copyjob failed to run  # noqa: E501

        :param last_failed_run_reason: The last_failed_run_reason of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._last_failed_run_reason = last_failed_run_reason

    @property
    def last_failed_run_reason_string(self):
        """Gets the last_failed_run_reason_string of this StoreCopyJob.  # noqa: E501

        Localised string representing the most recent reason why the copyjob failed to run  # noqa: E501

        :return: The last_failed_run_reason_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._last_failed_run_reason_string

    @last_failed_run_reason_string.setter
    def last_failed_run_reason_string(self, last_failed_run_reason_string):
        """Sets the last_failed_run_reason_string of this StoreCopyJob.

        Localised string representing the most recent reason why the copyjob failed to run  # noqa: E501

        :param last_failed_run_reason_string: The last_failed_run_reason_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._last_failed_run_reason_string = last_failed_run_reason_string

    @property
    def job_status_info(self):
        """Gets the job_status_info of this StoreCopyJob.  # noqa: E501

        The most recent reason why the copyjob failed to run or was paused or cancelled  # noqa: E501

        :return: The job_status_info of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._job_status_info

    @job_status_info.setter
    def job_status_info(self, job_status_info):
        """Sets the job_status_info of this StoreCopyJob.

        The most recent reason why the copyjob failed to run or was paused or cancelled  # noqa: E501

        :param job_status_info: The job_status_info of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._job_status_info = job_status_info

    @property
    def job_status_info_string(self):
        """Gets the job_status_info_string of this StoreCopyJob.  # noqa: E501

        Localised string representing the most recent reason why the copyjob failed to run or was paused or cancelled  # noqa: E501

        :return: The job_status_info_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._job_status_info_string

    @job_status_info_string.setter
    def job_status_info_string(self, job_status_info_string):
        """Sets the job_status_info_string of this StoreCopyJob.

        Localised string representing the most recent reason why the copyjob failed to run or was paused or cancelled  # noqa: E501

        :param job_status_info_string: The job_status_info_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._job_status_info_string = job_status_info_string

    @property
    def failed_attempts(self):
        """Gets the failed_attempts of this StoreCopyJob.  # noqa: E501

        Number of times the copyjob has been attempted but failed to complete  # noqa: E501

        :return: The failed_attempts of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._failed_attempts

    @failed_attempts.setter
    def failed_attempts(self, failed_attempts):
        """Sets the failed_attempts of this StoreCopyJob.

        Number of times the copyjob has been attempted but failed to complete  # noqa: E501

        :param failed_attempts: The failed_attempts of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._failed_attempts = failed_attempts

    @property
    def last_attempt_date(self):
        """Gets the last_attempt_date of this StoreCopyJob.  # noqa: E501

        The date that the copyjob was last attempted   # noqa: E501

        :return: The last_attempt_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._last_attempt_date

    @last_attempt_date.setter
    def last_attempt_date(self, last_attempt_date):
        """Sets the last_attempt_date of this StoreCopyJob.

        The date that the copyjob was last attempted   # noqa: E501

        :param last_attempt_date: The last_attempt_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._last_attempt_date = last_attempt_date

    @property
    def next_attempt_date(self):
        """Gets the next_attempt_date of this StoreCopyJob.  # noqa: E501

        The date that the copyjob will next be attempted   # noqa: E501

        :return: The next_attempt_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._next_attempt_date

    @next_attempt_date.setter
    def next_attempt_date(self, next_attempt_date):
        """Sets the next_attempt_date of this StoreCopyJob.

        The date that the copyjob will next be attempted   # noqa: E501

        :param next_attempt_date: The next_attempt_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._next_attempt_date = next_attempt_date

    @property
    def marked_for_cancellation(self):
        """Gets the marked_for_cancellation of this StoreCopyJob.  # noqa: E501

        True if the copyjob has been marked to be cancelled  # noqa: E501

        :return: The marked_for_cancellation of this StoreCopyJob.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_cancellation

    @marked_for_cancellation.setter
    def marked_for_cancellation(self, marked_for_cancellation):
        """Sets the marked_for_cancellation of this StoreCopyJob.

        True if the copyjob has been marked to be cancelled  # noqa: E501

        :param marked_for_cancellation: The marked_for_cancellation of this StoreCopyJob.  # noqa: E501
        :type: bool
        """

        self._marked_for_cancellation = marked_for_cancellation

    @property
    def cancellable(self):
        """Gets the cancellable of this StoreCopyJob.  # noqa: E501

        True if this copyjob is able to be cancelled  # noqa: E501

        :return: The cancellable of this StoreCopyJob.  # noqa: E501
        :rtype: bool
        """
        return self._cancellable

    @cancellable.setter
    def cancellable(self, cancellable):
        """Sets the cancellable of this StoreCopyJob.

        True if this copyjob is able to be cancelled  # noqa: E501

        :param cancellable: The cancellable of this StoreCopyJob.  # noqa: E501
        :type: bool
        """

        self._cancellable = cancellable

    @property
    def data_copied_bytes(self):
        """Gets the data_copied_bytes of this StoreCopyJob.  # noqa: E501

        The size of the data that has been copied so far  # noqa: E501

        :return: The data_copied_bytes of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._data_copied_bytes

    @data_copied_bytes.setter
    def data_copied_bytes(self, data_copied_bytes):
        """Sets the data_copied_bytes of this StoreCopyJob.

        The size of the data that has been copied so far  # noqa: E501

        :param data_copied_bytes: The data_copied_bytes of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._data_copied_bytes = data_copied_bytes

    @property
    def percentage_complete(self):
        """Gets the percentage_complete of this StoreCopyJob.  # noqa: E501

        The percentage of the copy complete so far  # noqa: E501

        :return: The percentage_complete of this StoreCopyJob.  # noqa: E501
        :rtype: float
        """
        return self._percentage_complete

    @percentage_complete.setter
    def percentage_complete(self, percentage_complete):
        """Sets the percentage_complete of this StoreCopyJob.

        The percentage of the copy complete so far  # noqa: E501

        :param percentage_complete: The percentage_complete of this StoreCopyJob.  # noqa: E501
        :type: float
        """

        self._percentage_complete = percentage_complete

    @property
    def estimated_completion_date(self):
        """Gets the estimated_completion_date of this StoreCopyJob.  # noqa: E501

        The estimated date that the copyjob will complete  # noqa: E501

        :return: The estimated_completion_date of this StoreCopyJob.  # noqa: E501
        :rtype: datetime
        """
        return self._estimated_completion_date

    @estimated_completion_date.setter
    def estimated_completion_date(self, estimated_completion_date):
        """Sets the estimated_completion_date of this StoreCopyJob.

        The estimated date that the copyjob will complete  # noqa: E501

        :param estimated_completion_date: The estimated_completion_date of this StoreCopyJob.  # noqa: E501
        :type: datetime
        """

        self._estimated_completion_date = estimated_completion_date

    @property
    def job_duration_seconds(self):
        """Gets the job_duration_seconds of this StoreCopyJob.  # noqa: E501

        The duration that the copyjob ran for, excluding queued/paused time  # noqa: E501

        :return: The job_duration_seconds of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._job_duration_seconds

    @job_duration_seconds.setter
    def job_duration_seconds(self, job_duration_seconds):
        """Sets the job_duration_seconds of this StoreCopyJob.

        The duration that the copyjob ran for, excluding queued/paused time  # noqa: E501

        :param job_duration_seconds: The job_duration_seconds of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._job_duration_seconds = job_duration_seconds

    @property
    def written_disk_bytes(self):
        """Gets the written_disk_bytes of this StoreCopyJob.  # noqa: E501

        The size of the data written for this data job  # noqa: E501

        :return: The written_disk_bytes of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._written_disk_bytes

    @written_disk_bytes.setter
    def written_disk_bytes(self, written_disk_bytes):
        """Sets the written_disk_bytes of this StoreCopyJob.

        The size of the data written for this data job  # noqa: E501

        :param written_disk_bytes: The written_disk_bytes of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._written_disk_bytes = written_disk_bytes

    @property
    def write_dedupe_ratio(self):
        """Gets the write_dedupe_ratio of this StoreCopyJob.  # noqa: E501

        The dedupe ratio of the write data  # noqa: E501

        :return: The write_dedupe_ratio of this StoreCopyJob.  # noqa: E501
        :rtype: float
        """
        return self._write_dedupe_ratio

    @write_dedupe_ratio.setter
    def write_dedupe_ratio(self, write_dedupe_ratio):
        """Sets the write_dedupe_ratio of this StoreCopyJob.

        The dedupe ratio of the write data  # noqa: E501

        :param write_dedupe_ratio: The write_dedupe_ratio of this StoreCopyJob.  # noqa: E501
        :type: float
        """

        self._write_dedupe_ratio = write_dedupe_ratio

    @property
    def copy_data_transmitted_bytes(self):
        """Gets the copy_data_transmitted_bytes of this StoreCopyJob.  # noqa: E501

        The size of the read data transferred for this data job  # noqa: E501

        :return: The copy_data_transmitted_bytes of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._copy_data_transmitted_bytes

    @copy_data_transmitted_bytes.setter
    def copy_data_transmitted_bytes(self, copy_data_transmitted_bytes):
        """Sets the copy_data_transmitted_bytes of this StoreCopyJob.

        The size of the read data transferred for this data job  # noqa: E501

        :param copy_data_transmitted_bytes: The copy_data_transmitted_bytes of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._copy_data_transmitted_bytes = copy_data_transmitted_bytes

    @property
    def copy_network_throughput(self):
        """Gets the copy_network_throughput of this StoreCopyJob.  # noqa: E501

        The bandwidth utilization of this copyjob  # noqa: E501

        :return: The copy_network_throughput of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._copy_network_throughput

    @copy_network_throughput.setter
    def copy_network_throughput(self, copy_network_throughput):
        """Sets the copy_network_throughput of this StoreCopyJob.

        The bandwidth utilization of this copyjob  # noqa: E501

        :param copy_network_throughput: The copy_network_throughput of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._copy_network_throughput = copy_network_throughput

    @property
    def percentage_copy_bandwidth_saving(self):
        """Gets the percentage_copy_bandwidth_saving of this StoreCopyJob.  # noqa: E501

        The bandwidth saving of the copy data  # noqa: E501

        :return: The percentage_copy_bandwidth_saving of this StoreCopyJob.  # noqa: E501
        :rtype: float
        """
        return self._percentage_copy_bandwidth_saving

    @percentage_copy_bandwidth_saving.setter
    def percentage_copy_bandwidth_saving(self, percentage_copy_bandwidth_saving):
        """Sets the percentage_copy_bandwidth_saving of this StoreCopyJob.

        The bandwidth saving of the copy data  # noqa: E501

        :param percentage_copy_bandwidth_saving: The percentage_copy_bandwidth_saving of this StoreCopyJob.  # noqa: E501
        :type: float
        """

        self._percentage_copy_bandwidth_saving = percentage_copy_bandwidth_saving

    @property
    def copy_logical_throughput(self):
        """Gets the copy_logical_throughput of this StoreCopyJob.  # noqa: E501

        The copy throughput (in bytes/sec) of this copyjob  # noqa: E501

        :return: The copy_logical_throughput of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._copy_logical_throughput

    @copy_logical_throughput.setter
    def copy_logical_throughput(self, copy_logical_throughput):
        """Sets the copy_logical_throughput of this StoreCopyJob.

        The copy throughput (in bytes/sec) of this copyjob  # noqa: E501

        :param copy_logical_throughput: The copy_logical_throughput of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._copy_logical_throughput = copy_logical_throughput

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this StoreCopyJob.  # noqa: E501

        The transport protocol of the job  # noqa: E501

        :return: The transport_protocol of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this StoreCopyJob.

        The transport protocol of the job  # noqa: E501

        :param transport_protocol: The transport_protocol of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._transport_protocol = transport_protocol

    @property
    def transport_protocol_string(self):
        """Gets the transport_protocol_string of this StoreCopyJob.  # noqa: E501

        Localised representation of the transport protocol of the job  # noqa: E501

        :return: The transport_protocol_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._transport_protocol_string

    @transport_protocol_string.setter
    def transport_protocol_string(self, transport_protocol_string):
        """Sets the transport_protocol_string of this StoreCopyJob.

        Localised representation of the transport protocol of the job  # noqa: E501

        :param transport_protocol_string: The transport_protocol_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._transport_protocol_string = transport_protocol_string

    @property
    def destination_client_security_mode(self):
        """Gets the destination_client_security_mode of this StoreCopyJob.  # noqa: E501

        A numeric value for the security mode of the destination client.  # noqa: E501

        :return: The destination_client_security_mode of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._destination_client_security_mode

    @destination_client_security_mode.setter
    def destination_client_security_mode(self, destination_client_security_mode):
        """Sets the destination_client_security_mode of this StoreCopyJob.

        A numeric value for the security mode of the destination client.  # noqa: E501

        :param destination_client_security_mode: The destination_client_security_mode of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._destination_client_security_mode = destination_client_security_mode

    @property
    def destination_client_security_mode_string(self):
        """Gets the destination_client_security_mode_string of this StoreCopyJob.  # noqa: E501

        String representation of the security mode of the destination client.  # noqa: E501

        :return: The destination_client_security_mode_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._destination_client_security_mode_string

    @destination_client_security_mode_string.setter
    def destination_client_security_mode_string(self, destination_client_security_mode_string):
        """Sets the destination_client_security_mode_string of this StoreCopyJob.

        String representation of the security mode of the destination client.  # noqa: E501

        :param destination_client_security_mode_string: The destination_client_security_mode_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._destination_client_security_mode_string = destination_client_security_mode_string

    @property
    def origin_client_security_mode(self):
        """Gets the origin_client_security_mode of this StoreCopyJob.  # noqa: E501

        A numeric value for the security mode of the origin client.  # noqa: E501

        :return: The origin_client_security_mode of this StoreCopyJob.  # noqa: E501
        :rtype: int
        """
        return self._origin_client_security_mode

    @origin_client_security_mode.setter
    def origin_client_security_mode(self, origin_client_security_mode):
        """Sets the origin_client_security_mode of this StoreCopyJob.

        A numeric value for the security mode of the origin client.  # noqa: E501

        :param origin_client_security_mode: The origin_client_security_mode of this StoreCopyJob.  # noqa: E501
        :type: int
        """

        self._origin_client_security_mode = origin_client_security_mode

    @property
    def origin_client_security_mode_string(self):
        """Gets the origin_client_security_mode_string of this StoreCopyJob.  # noqa: E501

        String representation of the security mode of the origin client.  # noqa: E501

        :return: The origin_client_security_mode_string of this StoreCopyJob.  # noqa: E501
        :rtype: str
        """
        return self._origin_client_security_mode_string

    @origin_client_security_mode_string.setter
    def origin_client_security_mode_string(self, origin_client_security_mode_string):
        """Sets the origin_client_security_mode_string of this StoreCopyJob.

        String representation of the security mode of the origin client.  # noqa: E501

        :param origin_client_security_mode_string: The origin_client_security_mode_string of this StoreCopyJob.  # noqa: E501
        :type: str
        """

        self._origin_client_security_mode_string = origin_client_security_mode_string

    @property
    def origin(self):
        """Gets the origin of this StoreCopyJob.  # noqa: E501

        Information about the origin of the job  # noqa: E501

        :return: The origin of this StoreCopyJob.  # noqa: E501
        :rtype: StoreCopyJobOrigin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this StoreCopyJob.

        Information about the origin of the job  # noqa: E501

        :param origin: The origin of this StoreCopyJob.  # noqa: E501
        :type: StoreCopyJobOrigin
        """

        self._origin = origin

    @property
    def destination(self):
        """Gets the destination of this StoreCopyJob.  # noqa: E501

        Information about the destination of the job  # noqa: E501

        :return: The destination of this StoreCopyJob.  # noqa: E501
        :rtype: StoreCopyJobDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this StoreCopyJob.

        Information about the destination of the job  # noqa: E501

        :param destination: The destination of this StoreCopyJob.  # noqa: E501
        :type: StoreCopyJobDestination
        """

        self._destination = destination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreCopyJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreCopyJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
