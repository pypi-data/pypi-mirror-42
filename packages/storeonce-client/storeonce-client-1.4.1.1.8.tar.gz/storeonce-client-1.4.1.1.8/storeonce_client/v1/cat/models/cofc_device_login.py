# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CofcDeviceLogin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'fc_address': 'str',
        'wwpn': 'str',
        'wwnn': 'str',
        'operating_system': 'int',
        'operating_system_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'fc_address': 'fcAddress',
        'wwpn': 'wwpn',
        'wwnn': 'wwnn',
        'operating_system': 'operatingSystem',
        'operating_system_string': 'operatingSystemString'
    }

    def __init__(self, id=None, fc_address=None, wwpn=None, wwnn=None, operating_system=None, operating_system_string=None):  # noqa: E501
        """CofcDeviceLogin - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._fc_address = None
        self._wwpn = None
        self._wwnn = None
        self._operating_system = None
        self._operating_system_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if fc_address is not None:
            self.fc_address = fc_address
        if wwpn is not None:
            self.wwpn = wwpn
        if wwnn is not None:
            self.wwnn = wwnn
        if operating_system is not None:
            self.operating_system = operating_system
        if operating_system_string is not None:
            self.operating_system_string = operating_system_string

    @property
    def id(self):
        """Gets the id of this CofcDeviceLogin.  # noqa: E501

        Login unique identifier  # noqa: E501

        :return: The id of this CofcDeviceLogin.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CofcDeviceLogin.

        Login unique identifier  # noqa: E501

        :param id: The id of this CofcDeviceLogin.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def fc_address(self):
        """Gets the fc_address of this CofcDeviceLogin.  # noqa: E501

        Fibre channel address of the CoFC Device  # noqa: E501

        :return: The fc_address of this CofcDeviceLogin.  # noqa: E501
        :rtype: str
        """
        return self._fc_address

    @fc_address.setter
    def fc_address(self, fc_address):
        """Sets the fc_address of this CofcDeviceLogin.

        Fibre channel address of the CoFC Device  # noqa: E501

        :param fc_address: The fc_address of this CofcDeviceLogin.  # noqa: E501
        :type: str
        """

        self._fc_address = fc_address

    @property
    def wwpn(self):
        """Gets the wwpn of this CofcDeviceLogin.  # noqa: E501

        World wide port name of the CoFC Device  # noqa: E501

        :return: The wwpn of this CofcDeviceLogin.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this CofcDeviceLogin.

        World wide port name of the CoFC Device  # noqa: E501

        :param wwpn: The wwpn of this CofcDeviceLogin.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    @property
    def wwnn(self):
        """Gets the wwnn of this CofcDeviceLogin.  # noqa: E501

        World wide node name of the CoFC Device  # noqa: E501

        :return: The wwnn of this CofcDeviceLogin.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this CofcDeviceLogin.

        World wide node name of the CoFC Device  # noqa: E501

        :param wwnn: The wwnn of this CofcDeviceLogin.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def operating_system(self):
        """Gets the operating_system of this CofcDeviceLogin.  # noqa: E501

        Operating System of the CoFC Device  # noqa: E501

        :return: The operating_system of this CofcDeviceLogin.  # noqa: E501
        :rtype: int
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this CofcDeviceLogin.

        Operating System of the CoFC Device  # noqa: E501

        :param operating_system: The operating_system of this CofcDeviceLogin.  # noqa: E501
        :type: int
        """

        self._operating_system = operating_system

    @property
    def operating_system_string(self):
        """Gets the operating_system_string of this CofcDeviceLogin.  # noqa: E501

        Localised string representation of Operating System  # noqa: E501

        :return: The operating_system_string of this CofcDeviceLogin.  # noqa: E501
        :rtype: str
        """
        return self._operating_system_string

    @operating_system_string.setter
    def operating_system_string(self, operating_system_string):
        """Sets the operating_system_string of this CofcDeviceLogin.

        Localised string representation of Operating System  # noqa: E501

        :param operating_system_string: The operating_system_string of this CofcDeviceLogin.  # noqa: E501
        :type: str
        """

        self._operating_system_string = operating_system_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CofcDeviceLogin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CofcDeviceLogin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
