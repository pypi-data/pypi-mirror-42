# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class BlackoutNowPutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blackout_active': 'bool',
        'blackout_now': 'bool',
        'blackout_reason': 'int',
        'blackout_reason_string': 'str'
    }

    attribute_map = {
        'blackout_active': 'blackoutActive',
        'blackout_now': 'blackoutNow',
        'blackout_reason': 'blackoutReason',
        'blackout_reason_string': 'blackoutReasonString'
    }

    def __init__(self, blackout_active=False, blackout_now=False, blackout_reason=None, blackout_reason_string=None):  # noqa: E501
        """BlackoutNowPutModel - a model defined in Swagger"""  # noqa: E501

        self._blackout_active = None
        self._blackout_now = None
        self._blackout_reason = None
        self._blackout_reason_string = None
        self.discriminator = None

        if blackout_active is not None:
            self.blackout_active = blackout_active
        self.blackout_now = blackout_now
        if blackout_reason is not None:
            self.blackout_reason = blackout_reason
        if blackout_reason_string is not None:
            self.blackout_reason_string = blackout_reason_string

    @property
    def blackout_active(self):
        """Gets the blackout_active of this BlackoutNowPutModel.  # noqa: E501

        Status of blackout. True if blackout active, False if not  # noqa: E501

        :return: The blackout_active of this BlackoutNowPutModel.  # noqa: E501
        :rtype: bool
        """
        return self._blackout_active

    @blackout_active.setter
    def blackout_active(self, blackout_active):
        """Sets the blackout_active of this BlackoutNowPutModel.

        Status of blackout. True if blackout active, False if not  # noqa: E501

        :param blackout_active: The blackout_active of this BlackoutNowPutModel.  # noqa: E501
        :type: bool
        """

        self._blackout_active = blackout_active

    @property
    def blackout_now(self):
        """Gets the blackout_now of this BlackoutNowPutModel.  # noqa: E501

        Blanket blackout that takes precedence over any blackout windows until further notice  # noqa: E501

        :return: The blackout_now of this BlackoutNowPutModel.  # noqa: E501
        :rtype: bool
        """
        return self._blackout_now

    @blackout_now.setter
    def blackout_now(self, blackout_now):
        """Sets the blackout_now of this BlackoutNowPutModel.

        Blanket blackout that takes precedence over any blackout windows until further notice  # noqa: E501

        :param blackout_now: The blackout_now of this BlackoutNowPutModel.  # noqa: E501
        :type: bool
        """
        if blackout_now is None:
            raise ValueError("Invalid value for `blackout_now`, must not be `None`")  # noqa: E501

        self._blackout_now = blackout_now

    @property
    def blackout_reason(self):
        """Gets the blackout_reason of this BlackoutNowPutModel.  # noqa: E501

        Reason for blackout.  # noqa: E501

        :return: The blackout_reason of this BlackoutNowPutModel.  # noqa: E501
        :rtype: int
        """
        return self._blackout_reason

    @blackout_reason.setter
    def blackout_reason(self, blackout_reason):
        """Sets the blackout_reason of this BlackoutNowPutModel.

        Reason for blackout.  # noqa: E501

        :param blackout_reason: The blackout_reason of this BlackoutNowPutModel.  # noqa: E501
        :type: int
        """

        self._blackout_reason = blackout_reason

    @property
    def blackout_reason_string(self):
        """Gets the blackout_reason_string of this BlackoutNowPutModel.  # noqa: E501

        Localisable string representing Reason for blackout.  # noqa: E501

        :return: The blackout_reason_string of this BlackoutNowPutModel.  # noqa: E501
        :rtype: str
        """
        return self._blackout_reason_string

    @blackout_reason_string.setter
    def blackout_reason_string(self, blackout_reason_string):
        """Sets the blackout_reason_string of this BlackoutNowPutModel.

        Localisable string representing Reason for blackout.  # noqa: E501

        :param blackout_reason_string: The blackout_reason_string of this BlackoutNowPutModel.  # noqa: E501
        :type: str
        """

        self._blackout_reason_string = blackout_reason_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlackoutNowPutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlackoutNowPutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
