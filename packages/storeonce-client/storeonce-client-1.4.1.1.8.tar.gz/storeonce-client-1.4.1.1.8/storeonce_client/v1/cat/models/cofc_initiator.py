# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CofcInitiator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'device_name': 'str',
        'fc_address': 'str',
        'wwpn': 'str',
        'wwnn': 'str',
        'fc_device_status': 'int',
        'fc_device_status_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_name': 'deviceName',
        'fc_address': 'fcAddress',
        'wwpn': 'wwpn',
        'wwnn': 'wwnn',
        'fc_device_status': 'fcDeviceStatus',
        'fc_device_status_string': 'fcDeviceStatusString'
    }

    def __init__(self, id=None, device_name=None, fc_address=None, wwpn=None, wwnn=None, fc_device_status=None, fc_device_status_string=None):  # noqa: E501
        """CofcInitiator - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device_name = None
        self._fc_address = None
        self._wwpn = None
        self._wwnn = None
        self._fc_device_status = None
        self._fc_device_status_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_name is not None:
            self.device_name = device_name
        if fc_address is not None:
            self.fc_address = fc_address
        if wwpn is not None:
            self.wwpn = wwpn
        if wwnn is not None:
            self.wwnn = wwnn
        if fc_device_status is not None:
            self.fc_device_status = fc_device_status
        if fc_device_status_string is not None:
            self.fc_device_status_string = fc_device_status_string

    @property
    def id(self):
        """Gets the id of this CofcInitiator.  # noqa: E501

        ID of the CoFC Initiator  # noqa: E501

        :return: The id of this CofcInitiator.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CofcInitiator.

        ID of the CoFC Initiator  # noqa: E501

        :param id: The id of this CofcInitiator.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def device_name(self):
        """Gets the device_name of this CofcInitiator.  # noqa: E501

        Name for the initiator  # noqa: E501

        :return: The device_name of this CofcInitiator.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this CofcInitiator.

        Name for the initiator  # noqa: E501

        :param device_name: The device_name of this CofcInitiator.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def fc_address(self):
        """Gets the fc_address of this CofcInitiator.  # noqa: E501

        Fibre Channel address of each Catalyst initiator presented.  # noqa: E501

        :return: The fc_address of this CofcInitiator.  # noqa: E501
        :rtype: str
        """
        return self._fc_address

    @fc_address.setter
    def fc_address(self, fc_address):
        """Sets the fc_address of this CofcInitiator.

        Fibre Channel address of each Catalyst initiator presented.  # noqa: E501

        :param fc_address: The fc_address of this CofcInitiator.  # noqa: E501
        :type: str
        """

        self._fc_address = fc_address

    @property
    def wwpn(self):
        """Gets the wwpn of this CofcInitiator.  # noqa: E501

        World wide port name of the CoFC initiator  # noqa: E501

        :return: The wwpn of this CofcInitiator.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this CofcInitiator.

        World wide port name of the CoFC initiator  # noqa: E501

        :param wwpn: The wwpn of this CofcInitiator.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    @property
    def wwnn(self):
        """Gets the wwnn of this CofcInitiator.  # noqa: E501

        World wide node name of the CoFC initiator  # noqa: E501

        :return: The wwnn of this CofcInitiator.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this CofcInitiator.

        World wide node name of the CoFC initiator  # noqa: E501

        :param wwnn: The wwnn of this CofcInitiator.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def fc_device_status(self):
        """Gets the fc_device_status of this CofcInitiator.  # noqa: E501

        Current status of the CoFC initiator  # noqa: E501

        :return: The fc_device_status of this CofcInitiator.  # noqa: E501
        :rtype: int
        """
        return self._fc_device_status

    @fc_device_status.setter
    def fc_device_status(self, fc_device_status):
        """Sets the fc_device_status of this CofcInitiator.

        Current status of the CoFC initiator  # noqa: E501

        :param fc_device_status: The fc_device_status of this CofcInitiator.  # noqa: E501
        :type: int
        """

        self._fc_device_status = fc_device_status

    @property
    def fc_device_status_string(self):
        """Gets the fc_device_status_string of this CofcInitiator.  # noqa: E501

        Localised string representing the initiator status  # noqa: E501

        :return: The fc_device_status_string of this CofcInitiator.  # noqa: E501
        :rtype: str
        """
        return self._fc_device_status_string

    @fc_device_status_string.setter
    def fc_device_status_string(self, fc_device_status_string):
        """Sets the fc_device_status_string of this CofcInitiator.

        Localised string representing the initiator status  # noqa: E501

        :param fc_device_status_string: The fc_device_status_string of this CofcInitiator.  # noqa: E501
        :type: str
        """

        self._fc_device_status_string = fc_device_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CofcInitiator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CofcInitiator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
