# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class DataAndCopyJobsBytes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datajob_written_bytes': 'int',
        'datajob_read_bytes': 'int',
        'inbound_copyjobs_data_copied_bytes': 'int',
        'outbound_copyjobs_data_copied_bytes': 'int'
    }

    attribute_map = {
        'datajob_written_bytes': 'datajobWrittenBytes',
        'datajob_read_bytes': 'datajobReadBytes',
        'inbound_copyjobs_data_copied_bytes': 'inboundCopyjobsDataCopiedBytes',
        'outbound_copyjobs_data_copied_bytes': 'outboundCopyjobsDataCopiedBytes'
    }

    def __init__(self, datajob_written_bytes=None, datajob_read_bytes=None, inbound_copyjobs_data_copied_bytes=None, outbound_copyjobs_data_copied_bytes=None):  # noqa: E501
        """DataAndCopyJobsBytes - a model defined in Swagger"""  # noqa: E501

        self._datajob_written_bytes = None
        self._datajob_read_bytes = None
        self._inbound_copyjobs_data_copied_bytes = None
        self._outbound_copyjobs_data_copied_bytes = None
        self.discriminator = None

        if datajob_written_bytes is not None:
            self.datajob_written_bytes = datajob_written_bytes
        if datajob_read_bytes is not None:
            self.datajob_read_bytes = datajob_read_bytes
        if inbound_copyjobs_data_copied_bytes is not None:
            self.inbound_copyjobs_data_copied_bytes = inbound_copyjobs_data_copied_bytes
        if outbound_copyjobs_data_copied_bytes is not None:
            self.outbound_copyjobs_data_copied_bytes = outbound_copyjobs_data_copied_bytes

    @property
    def datajob_written_bytes(self):
        """Gets the datajob_written_bytes of this DataAndCopyJobsBytes.  # noqa: E501

        The total data size of the datajobs written  # noqa: E501

        :return: The datajob_written_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :rtype: int
        """
        return self._datajob_written_bytes

    @datajob_written_bytes.setter
    def datajob_written_bytes(self, datajob_written_bytes):
        """Sets the datajob_written_bytes of this DataAndCopyJobsBytes.

        The total data size of the datajobs written  # noqa: E501

        :param datajob_written_bytes: The datajob_written_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :type: int
        """

        self._datajob_written_bytes = datajob_written_bytes

    @property
    def datajob_read_bytes(self):
        """Gets the datajob_read_bytes of this DataAndCopyJobsBytes.  # noqa: E501

        The total data size of the datajobs read  # noqa: E501

        :return: The datajob_read_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :rtype: int
        """
        return self._datajob_read_bytes

    @datajob_read_bytes.setter
    def datajob_read_bytes(self, datajob_read_bytes):
        """Sets the datajob_read_bytes of this DataAndCopyJobsBytes.

        The total data size of the datajobs read  # noqa: E501

        :param datajob_read_bytes: The datajob_read_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :type: int
        """

        self._datajob_read_bytes = datajob_read_bytes

    @property
    def inbound_copyjobs_data_copied_bytes(self):
        """Gets the inbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501

        The total number of bytes copied via inbound copyjobs transferred  # noqa: E501

        :return: The inbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :rtype: int
        """
        return self._inbound_copyjobs_data_copied_bytes

    @inbound_copyjobs_data_copied_bytes.setter
    def inbound_copyjobs_data_copied_bytes(self, inbound_copyjobs_data_copied_bytes):
        """Sets the inbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.

        The total number of bytes copied via inbound copyjobs transferred  # noqa: E501

        :param inbound_copyjobs_data_copied_bytes: The inbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :type: int
        """

        self._inbound_copyjobs_data_copied_bytes = inbound_copyjobs_data_copied_bytes

    @property
    def outbound_copyjobs_data_copied_bytes(self):
        """Gets the outbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501

        The total number of bytes copied via outbound copyjobs transferred  # noqa: E501

        :return: The outbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :rtype: int
        """
        return self._outbound_copyjobs_data_copied_bytes

    @outbound_copyjobs_data_copied_bytes.setter
    def outbound_copyjobs_data_copied_bytes(self, outbound_copyjobs_data_copied_bytes):
        """Sets the outbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.

        The total number of bytes copied via outbound copyjobs transferred  # noqa: E501

        :param outbound_copyjobs_data_copied_bytes: The outbound_copyjobs_data_copied_bytes of this DataAndCopyJobsBytes.  # noqa: E501
        :type: int
        """

        self._outbound_copyjobs_data_copied_bytes = outbound_copyjobs_data_copied_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataAndCopyJobsBytes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataAndCopyJobsBytes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
