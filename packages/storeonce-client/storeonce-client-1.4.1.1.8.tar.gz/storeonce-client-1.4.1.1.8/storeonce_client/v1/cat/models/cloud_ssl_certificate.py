# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CloudSSLCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_common_name': 'str',
        'subject_organisation': 'str',
        'subject_organisational_unit': 'str',
        'serial_number': 'str',
        'issuer_common_name': 'str',
        'issuer_organisation': 'str',
        'issuer_organisational_unit': 'str',
        'not_valid_before_date': 'datetime',
        'not_valid_after_date': 'datetime',
        'sha1_fingerprint': 'str',
        'sha256_fingerprint': 'str',
        'ssl_certificate': 'str'
    }

    attribute_map = {
        'subject_common_name': 'subjectCommonName',
        'subject_organisation': 'subjectOrganisation',
        'subject_organisational_unit': 'subjectOrganisationalUnit',
        'serial_number': 'serialNumber',
        'issuer_common_name': 'issuerCommonName',
        'issuer_organisation': 'issuerOrganisation',
        'issuer_organisational_unit': 'issuerOrganisationalUnit',
        'not_valid_before_date': 'notValidBeforeDate',
        'not_valid_after_date': 'notValidAfterDate',
        'sha1_fingerprint': 'sha1Fingerprint',
        'sha256_fingerprint': 'sha256Fingerprint',
        'ssl_certificate': 'sslCertificate'
    }

    def __init__(self, subject_common_name=None, subject_organisation=None, subject_organisational_unit=None, serial_number=None, issuer_common_name=None, issuer_organisation=None, issuer_organisational_unit=None, not_valid_before_date=None, not_valid_after_date=None, sha1_fingerprint=None, sha256_fingerprint=None, ssl_certificate=None):  # noqa: E501
        """CloudSSLCertificate - a model defined in Swagger"""  # noqa: E501

        self._subject_common_name = None
        self._subject_organisation = None
        self._subject_organisational_unit = None
        self._serial_number = None
        self._issuer_common_name = None
        self._issuer_organisation = None
        self._issuer_organisational_unit = None
        self._not_valid_before_date = None
        self._not_valid_after_date = None
        self._sha1_fingerprint = None
        self._sha256_fingerprint = None
        self._ssl_certificate = None
        self.discriminator = None

        if subject_common_name is not None:
            self.subject_common_name = subject_common_name
        if subject_organisation is not None:
            self.subject_organisation = subject_organisation
        if subject_organisational_unit is not None:
            self.subject_organisational_unit = subject_organisational_unit
        if serial_number is not None:
            self.serial_number = serial_number
        if issuer_common_name is not None:
            self.issuer_common_name = issuer_common_name
        if issuer_organisation is not None:
            self.issuer_organisation = issuer_organisation
        if issuer_organisational_unit is not None:
            self.issuer_organisational_unit = issuer_organisational_unit
        if not_valid_before_date is not None:
            self.not_valid_before_date = not_valid_before_date
        if not_valid_after_date is not None:
            self.not_valid_after_date = not_valid_after_date
        if sha1_fingerprint is not None:
            self.sha1_fingerprint = sha1_fingerprint
        if sha256_fingerprint is not None:
            self.sha256_fingerprint = sha256_fingerprint
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate

    @property
    def subject_common_name(self):
        """Gets the subject_common_name of this CloudSSLCertificate.  # noqa: E501

        The common name of the subject for the certificate  # noqa: E501

        :return: The subject_common_name of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject_common_name

    @subject_common_name.setter
    def subject_common_name(self, subject_common_name):
        """Sets the subject_common_name of this CloudSSLCertificate.

        The common name of the subject for the certificate  # noqa: E501

        :param subject_common_name: The subject_common_name of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._subject_common_name = subject_common_name

    @property
    def subject_organisation(self):
        """Gets the subject_organisation of this CloudSSLCertificate.  # noqa: E501

        The organisation of the subject for the certificate  # noqa: E501

        :return: The subject_organisation of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject_organisation

    @subject_organisation.setter
    def subject_organisation(self, subject_organisation):
        """Sets the subject_organisation of this CloudSSLCertificate.

        The organisation of the subject for the certificate  # noqa: E501

        :param subject_organisation: The subject_organisation of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._subject_organisation = subject_organisation

    @property
    def subject_organisational_unit(self):
        """Gets the subject_organisational_unit of this CloudSSLCertificate.  # noqa: E501

        The organisation unit of the subject for the certificate  # noqa: E501

        :return: The subject_organisational_unit of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject_organisational_unit

    @subject_organisational_unit.setter
    def subject_organisational_unit(self, subject_organisational_unit):
        """Sets the subject_organisational_unit of this CloudSSLCertificate.

        The organisation unit of the subject for the certificate  # noqa: E501

        :param subject_organisational_unit: The subject_organisational_unit of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._subject_organisational_unit = subject_organisational_unit

    @property
    def serial_number(self):
        """Gets the serial_number of this CloudSSLCertificate.  # noqa: E501

        The serial number of the certificate  # noqa: E501

        :return: The serial_number of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CloudSSLCertificate.

        The serial number of the certificate  # noqa: E501

        :param serial_number: The serial_number of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def issuer_common_name(self):
        """Gets the issuer_common_name of this CloudSSLCertificate.  # noqa: E501

        The common name of the issuer for the certificate  # noqa: E501

        :return: The issuer_common_name of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer_common_name

    @issuer_common_name.setter
    def issuer_common_name(self, issuer_common_name):
        """Sets the issuer_common_name of this CloudSSLCertificate.

        The common name of the issuer for the certificate  # noqa: E501

        :param issuer_common_name: The issuer_common_name of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._issuer_common_name = issuer_common_name

    @property
    def issuer_organisation(self):
        """Gets the issuer_organisation of this CloudSSLCertificate.  # noqa: E501

        The organisation of the issuer for the certificate  # noqa: E501

        :return: The issuer_organisation of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer_organisation

    @issuer_organisation.setter
    def issuer_organisation(self, issuer_organisation):
        """Sets the issuer_organisation of this CloudSSLCertificate.

        The organisation of the issuer for the certificate  # noqa: E501

        :param issuer_organisation: The issuer_organisation of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._issuer_organisation = issuer_organisation

    @property
    def issuer_organisational_unit(self):
        """Gets the issuer_organisational_unit of this CloudSSLCertificate.  # noqa: E501

        The organisation unit of the issuer for the certificate  # noqa: E501

        :return: The issuer_organisational_unit of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer_organisational_unit

    @issuer_organisational_unit.setter
    def issuer_organisational_unit(self, issuer_organisational_unit):
        """Sets the issuer_organisational_unit of this CloudSSLCertificate.

        The organisation unit of the issuer for the certificate  # noqa: E501

        :param issuer_organisational_unit: The issuer_organisational_unit of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._issuer_organisational_unit = issuer_organisational_unit

    @property
    def not_valid_before_date(self):
        """Gets the not_valid_before_date of this CloudSSLCertificate.  # noqa: E501

        The date the certificate is valid from  # noqa: E501

        :return: The not_valid_before_date of this CloudSSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_valid_before_date

    @not_valid_before_date.setter
    def not_valid_before_date(self, not_valid_before_date):
        """Sets the not_valid_before_date of this CloudSSLCertificate.

        The date the certificate is valid from  # noqa: E501

        :param not_valid_before_date: The not_valid_before_date of this CloudSSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._not_valid_before_date = not_valid_before_date

    @property
    def not_valid_after_date(self):
        """Gets the not_valid_after_date of this CloudSSLCertificate.  # noqa: E501

        The date the certificate is valid until  # noqa: E501

        :return: The not_valid_after_date of this CloudSSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._not_valid_after_date

    @not_valid_after_date.setter
    def not_valid_after_date(self, not_valid_after_date):
        """Sets the not_valid_after_date of this CloudSSLCertificate.

        The date the certificate is valid until  # noqa: E501

        :param not_valid_after_date: The not_valid_after_date of this CloudSSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._not_valid_after_date = not_valid_after_date

    @property
    def sha1_fingerprint(self):
        """Gets the sha1_fingerprint of this CloudSSLCertificate.  # noqa: E501

        The SHA1 fingerprint of the certificate  # noqa: E501

        :return: The sha1_fingerprint of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._sha1_fingerprint

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, sha1_fingerprint):
        """Sets the sha1_fingerprint of this CloudSSLCertificate.

        The SHA1 fingerprint of the certificate  # noqa: E501

        :param sha1_fingerprint: The sha1_fingerprint of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._sha1_fingerprint = sha1_fingerprint

    @property
    def sha256_fingerprint(self):
        """Gets the sha256_fingerprint of this CloudSSLCertificate.  # noqa: E501

        The SHA256 fingerprint of the certificate  # noqa: E501

        :return: The sha256_fingerprint of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """Sets the sha256_fingerprint of this CloudSSLCertificate.

        The SHA256 fingerprint of the certificate  # noqa: E501

        :param sha256_fingerprint: The sha256_fingerprint of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this CloudSSLCertificate.  # noqa: E501

        Full SSL certificate details  # noqa: E501

        :return: The ssl_certificate of this CloudSSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this CloudSSLCertificate.

        Full SSL certificate details  # noqa: E501

        :param ssl_certificate: The ssl_certificate of this CloudSSLCertificate.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudSSLCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudSSLCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
