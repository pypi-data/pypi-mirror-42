# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorePutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'primary_transfer_policy': 'int',
        'secondary_transfer_policy': 'int',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'data_job_retention_days': 'int',
        'copy_job_retention_days': 'int',
        'encryption_enabled': 'bool',
        'secure_erase_mode': 'int',
        'security_mode': 'int',
        'data_immutability_grace_enabled': 'bool',
        'data_immutability_grace_seconds': 'int',
        'data_immutability_retention_seconds': 'int',
        'data_immutability_retention_enabled': 'bool',
        'ssl_certificate': 'str',
        'cloud_store_enabled': 'bool',
        'cloud_store_details': 'CloudStorePutModel'
    }

    attribute_map = {
        'description': 'description',
        'primary_transfer_policy': 'primaryTransferPolicy',
        'secondary_transfer_policy': 'secondaryTransferPolicy',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'data_job_retention_days': 'dataJobRetentionDays',
        'copy_job_retention_days': 'copyJobRetentionDays',
        'encryption_enabled': 'encryptionEnabled',
        'secure_erase_mode': 'secureEraseMode',
        'security_mode': 'securityMode',
        'data_immutability_grace_enabled': 'dataImmutabilityGraceEnabled',
        'data_immutability_grace_seconds': 'dataImmutabilityGraceSeconds',
        'data_immutability_retention_seconds': 'dataImmutabilityRetentionSeconds',
        'data_immutability_retention_enabled': 'dataImmutabilityRetentionEnabled',
        'ssl_certificate': 'sslCertificate',
        'cloud_store_enabled': 'cloudStoreEnabled',
        'cloud_store_details': 'cloudStoreDetails'
    }

    def __init__(self, description=None, primary_transfer_policy=None, secondary_transfer_policy=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, data_job_retention_days=None, copy_job_retention_days=None, encryption_enabled=False, secure_erase_mode=None, security_mode=None, data_immutability_grace_enabled=False, data_immutability_grace_seconds=None, data_immutability_retention_seconds=None, data_immutability_retention_enabled=False, ssl_certificate=None, cloud_store_enabled=False, cloud_store_details=None):  # noqa: E501
        """StorePutModel - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._primary_transfer_policy = None
        self._secondary_transfer_policy = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._data_job_retention_days = None
        self._copy_job_retention_days = None
        self._encryption_enabled = None
        self._secure_erase_mode = None
        self._security_mode = None
        self._data_immutability_grace_enabled = None
        self._data_immutability_grace_seconds = None
        self._data_immutability_retention_seconds = None
        self._data_immutability_retention_enabled = None
        self._ssl_certificate = None
        self._cloud_store_enabled = None
        self._cloud_store_details = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.primary_transfer_policy = primary_transfer_policy
        self.secondary_transfer_policy = secondary_transfer_policy
        self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        self.data_job_retention_days = data_job_retention_days
        self.copy_job_retention_days = copy_job_retention_days
        self.encryption_enabled = encryption_enabled
        if secure_erase_mode is not None:
            self.secure_erase_mode = secure_erase_mode
        self.security_mode = security_mode
        self.data_immutability_grace_enabled = data_immutability_grace_enabled
        self.data_immutability_grace_seconds = data_immutability_grace_seconds
        self.data_immutability_retention_seconds = data_immutability_retention_seconds
        self.data_immutability_retention_enabled = data_immutability_retention_enabled
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if cloud_store_enabled is not None:
            self.cloud_store_enabled = cloud_store_enabled
        if cloud_store_details is not None:
            self.cloud_store_details = cloud_store_details

    @property
    def description(self):
        """Gets the description of this StorePutModel.  # noqa: E501

        Description of the store  # noqa: E501

        :return: The description of this StorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorePutModel.

        Description of the store  # noqa: E501

        :param description: The description of this StorePutModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def primary_transfer_policy(self):
        """Gets the primary_transfer_policy of this StorePutModel.  # noqa: E501

        Primary transfer policy for this store's jobs  # noqa: E501

        :return: The primary_transfer_policy of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._primary_transfer_policy

    @primary_transfer_policy.setter
    def primary_transfer_policy(self, primary_transfer_policy):
        """Sets the primary_transfer_policy of this StorePutModel.

        Primary transfer policy for this store's jobs  # noqa: E501

        :param primary_transfer_policy: The primary_transfer_policy of this StorePutModel.  # noqa: E501
        :type: int
        """
        if primary_transfer_policy is None:
            raise ValueError("Invalid value for `primary_transfer_policy`, must not be `None`")  # noqa: E501

        self._primary_transfer_policy = primary_transfer_policy

    @property
    def secondary_transfer_policy(self):
        """Gets the secondary_transfer_policy of this StorePutModel.  # noqa: E501

        Secondary transfer policy for this store's jobs  # noqa: E501

        :return: The secondary_transfer_policy of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._secondary_transfer_policy

    @secondary_transfer_policy.setter
    def secondary_transfer_policy(self, secondary_transfer_policy):
        """Sets the secondary_transfer_policy of this StorePutModel.

        Secondary transfer policy for this store's jobs  # noqa: E501

        :param secondary_transfer_policy: The secondary_transfer_policy of this StorePutModel.  # noqa: E501
        :type: int
        """
        if secondary_transfer_policy is None:
            raise ValueError("Invalid value for `secondary_transfer_policy`, must not be `None`")  # noqa: E501

        self._secondary_transfer_policy = secondary_transfer_policy

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this StorePutModel.  # noqa: E501

        True if quota policy for size on disk is enabled  # noqa: E501

        :return: The size_on_disk_quota_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this StorePutModel.

        True if quota policy for size on disk is enabled  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """
        if size_on_disk_quota_enabled is None:
            raise ValueError("Invalid value for `size_on_disk_quota_enabled`, must not be `None`")  # noqa: E501

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this StorePutModel.  # noqa: E501

        Size on disk quota limit policy  # noqa: E501

        :return: The size_on_disk_quota_bytes of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this StorePutModel.

        Size on disk quota limit policy  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this StorePutModel.  # noqa: E501
        :type: int
        """
        if size_on_disk_quota_bytes is None:
            raise ValueError("Invalid value for `size_on_disk_quota_bytes`, must not be `None`")  # noqa: E501

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this StorePutModel.  # noqa: E501

        True if quota policy for user data is enabled  # noqa: E501

        :return: The user_data_stored_quota_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this StorePutModel.

        True if quota policy for user data is enabled  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """
        if user_data_stored_quota_enabled is None:
            raise ValueError("Invalid value for `user_data_stored_quota_enabled`, must not be `None`")  # noqa: E501

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this StorePutModel.  # noqa: E501

        User data quota limit policy  # noqa: E501

        :return: The user_data_stored_quota_bytes of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this StorePutModel.

        User data quota limit policy  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this StorePutModel.  # noqa: E501
        :type: int
        """
        if user_data_stored_quota_bytes is None:
            raise ValueError("Invalid value for `user_data_stored_quota_bytes`, must not be `None`")  # noqa: E501

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def data_job_retention_days(self):
        """Gets the data_job_retention_days of this StorePutModel.  # noqa: E501

        Datajob log retention period in days  # noqa: E501

        :return: The data_job_retention_days of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._data_job_retention_days

    @data_job_retention_days.setter
    def data_job_retention_days(self, data_job_retention_days):
        """Sets the data_job_retention_days of this StorePutModel.

        Datajob log retention period in days  # noqa: E501

        :param data_job_retention_days: The data_job_retention_days of this StorePutModel.  # noqa: E501
        :type: int
        """
        if data_job_retention_days is None:
            raise ValueError("Invalid value for `data_job_retention_days`, must not be `None`")  # noqa: E501

        self._data_job_retention_days = data_job_retention_days

    @property
    def copy_job_retention_days(self):
        """Gets the copy_job_retention_days of this StorePutModel.  # noqa: E501

        Copyjob log retention period in days  # noqa: E501

        :return: The copy_job_retention_days of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._copy_job_retention_days

    @copy_job_retention_days.setter
    def copy_job_retention_days(self, copy_job_retention_days):
        """Sets the copy_job_retention_days of this StorePutModel.

        Copyjob log retention period in days  # noqa: E501

        :param copy_job_retention_days: The copy_job_retention_days of this StorePutModel.  # noqa: E501
        :type: int
        """
        if copy_job_retention_days is None:
            raise ValueError("Invalid value for `copy_job_retention_days`, must not be `None`")  # noqa: E501

        self._copy_job_retention_days = copy_job_retention_days

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this StorePutModel.  # noqa: E501

        True if the store is encrypted  # noqa: E501

        :return: The encryption_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this StorePutModel.

        True if the store is encrypted  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """
        if encryption_enabled is None:
            raise ValueError("Invalid value for `encryption_enabled`, must not be `None`")  # noqa: E501

        self._encryption_enabled = encryption_enabled

    @property
    def secure_erase_mode(self):
        """Gets the secure_erase_mode of this StorePutModel.  # noqa: E501

        The store erase mode  # noqa: E501

        :return: The secure_erase_mode of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._secure_erase_mode

    @secure_erase_mode.setter
    def secure_erase_mode(self, secure_erase_mode):
        """Sets the secure_erase_mode of this StorePutModel.

        The store erase mode  # noqa: E501

        :param secure_erase_mode: The secure_erase_mode of this StorePutModel.  # noqa: E501
        :type: int
        """

        self._secure_erase_mode = secure_erase_mode

    @property
    def security_mode(self):
        """Gets the security_mode of this StorePutModel.  # noqa: E501

        The stores security mode  # noqa: E501

        :return: The security_mode of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._security_mode

    @security_mode.setter
    def security_mode(self, security_mode):
        """Sets the security_mode of this StorePutModel.

        The stores security mode  # noqa: E501

        :param security_mode: The security_mode of this StorePutModel.  # noqa: E501
        :type: int
        """
        if security_mode is None:
            raise ValueError("Invalid value for `security_mode`, must not be `None`")  # noqa: E501

        self._security_mode = security_mode

    @property
    def data_immutability_grace_enabled(self):
        """Gets the data_immutability_grace_enabled of this StorePutModel.  # noqa: E501

        True if a grace period for data immutability has been enabled  # noqa: E501

        :return: The data_immutability_grace_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._data_immutability_grace_enabled

    @data_immutability_grace_enabled.setter
    def data_immutability_grace_enabled(self, data_immutability_grace_enabled):
        """Sets the data_immutability_grace_enabled of this StorePutModel.

        True if a grace period for data immutability has been enabled  # noqa: E501

        :param data_immutability_grace_enabled: The data_immutability_grace_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """
        if data_immutability_grace_enabled is None:
            raise ValueError("Invalid value for `data_immutability_grace_enabled`, must not be `None`")  # noqa: E501

        self._data_immutability_grace_enabled = data_immutability_grace_enabled

    @property
    def data_immutability_grace_seconds(self):
        """Gets the data_immutability_grace_seconds of this StorePutModel.  # noqa: E501

        The minimum amount of time in seconds the backup data is immutable  # noqa: E501

        :return: The data_immutability_grace_seconds of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._data_immutability_grace_seconds

    @data_immutability_grace_seconds.setter
    def data_immutability_grace_seconds(self, data_immutability_grace_seconds):
        """Sets the data_immutability_grace_seconds of this StorePutModel.

        The minimum amount of time in seconds the backup data is immutable  # noqa: E501

        :param data_immutability_grace_seconds: The data_immutability_grace_seconds of this StorePutModel.  # noqa: E501
        :type: int
        """
        if data_immutability_grace_seconds is None:
            raise ValueError("Invalid value for `data_immutability_grace_seconds`, must not be `None`")  # noqa: E501

        self._data_immutability_grace_seconds = data_immutability_grace_seconds

    @property
    def data_immutability_retention_seconds(self):
        """Gets the data_immutability_retention_seconds of this StorePutModel.  # noqa: E501

        The maximum amount of time in seconds the backup data is immutable  # noqa: E501

        :return: The data_immutability_retention_seconds of this StorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._data_immutability_retention_seconds

    @data_immutability_retention_seconds.setter
    def data_immutability_retention_seconds(self, data_immutability_retention_seconds):
        """Sets the data_immutability_retention_seconds of this StorePutModel.

        The maximum amount of time in seconds the backup data is immutable  # noqa: E501

        :param data_immutability_retention_seconds: The data_immutability_retention_seconds of this StorePutModel.  # noqa: E501
        :type: int
        """
        if data_immutability_retention_seconds is None:
            raise ValueError("Invalid value for `data_immutability_retention_seconds`, must not be `None`")  # noqa: E501

        self._data_immutability_retention_seconds = data_immutability_retention_seconds

    @property
    def data_immutability_retention_enabled(self):
        """Gets the data_immutability_retention_enabled of this StorePutModel.  # noqa: E501

        True if a retention period for data immutability has been enabled  # noqa: E501

        :return: The data_immutability_retention_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._data_immutability_retention_enabled

    @data_immutability_retention_enabled.setter
    def data_immutability_retention_enabled(self, data_immutability_retention_enabled):
        """Sets the data_immutability_retention_enabled of this StorePutModel.

        True if a retention period for data immutability has been enabled  # noqa: E501

        :param data_immutability_retention_enabled: The data_immutability_retention_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """
        if data_immutability_retention_enabled is None:
            raise ValueError("Invalid value for `data_immutability_retention_enabled`, must not be `None`")  # noqa: E501

        self._data_immutability_retention_enabled = data_immutability_retention_enabled

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this StorePutModel.  # noqa: E501

        SSL certificate details to use for the relevant cloud provider.  # noqa: E501

        :return: The ssl_certificate of this StorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this StorePutModel.

        SSL certificate details to use for the relevant cloud provider.  # noqa: E501

        :param ssl_certificate: The ssl_certificate of this StorePutModel.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def cloud_store_enabled(self):
        """Gets the cloud_store_enabled of this StorePutModel.  # noqa: E501

        Flag telling whether it's a cloud store. False by default  # noqa: E501

        :return: The cloud_store_enabled of this StorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_store_enabled

    @cloud_store_enabled.setter
    def cloud_store_enabled(self, cloud_store_enabled):
        """Sets the cloud_store_enabled of this StorePutModel.

        Flag telling whether it's a cloud store. False by default  # noqa: E501

        :param cloud_store_enabled: The cloud_store_enabled of this StorePutModel.  # noqa: E501
        :type: bool
        """

        self._cloud_store_enabled = cloud_store_enabled

    @property
    def cloud_store_details(self):
        """Gets the cloud_store_details of this StorePutModel.  # noqa: E501

        The details of the cloud store. Only set if Modifying a cloud store  # noqa: E501

        :return: The cloud_store_details of this StorePutModel.  # noqa: E501
        :rtype: CloudStorePutModel
        """
        return self._cloud_store_details

    @cloud_store_details.setter
    def cloud_store_details(self, cloud_store_details):
        """Sets the cloud_store_details of this StorePutModel.

        The details of the cloud store. Only set if Modifying a cloud store  # noqa: E501

        :param cloud_store_details: The cloud_store_details of this StorePutModel.  # noqa: E501
        :type: CloudStorePutModel
        """

        self._cloud_store_details = cloud_store_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorePutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorePutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
