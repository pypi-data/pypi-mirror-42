# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ItemFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_name_filter': 'str',
        'item_name_filter_exact_match': 'bool',
        'inclusive_tag_list': 'str',
        'inclusive_tag_list_match_all': 'bool',
        'exclusive_tag_list': 'str',
        'exclusive_tag_list_match_all': 'bool',
        'created_date_start': 'str',
        'created_date_end': 'str',
        'modified_date_start': 'str',
        'modified_date_end': 'str'
    }

    attribute_map = {
        'item_name_filter': 'itemNameFilter',
        'item_name_filter_exact_match': 'itemNameFilterExactMatch',
        'inclusive_tag_list': 'inclusiveTagList',
        'inclusive_tag_list_match_all': 'inclusiveTagListMatchAll',
        'exclusive_tag_list': 'exclusiveTagList',
        'exclusive_tag_list_match_all': 'exclusiveTagListMatchAll',
        'created_date_start': 'createdDateStart',
        'created_date_end': 'createdDateEnd',
        'modified_date_start': 'modifiedDateStart',
        'modified_date_end': 'modifiedDateEnd'
    }

    def __init__(self, item_name_filter=None, item_name_filter_exact_match=False, inclusive_tag_list=None, inclusive_tag_list_match_all=False, exclusive_tag_list=None, exclusive_tag_list_match_all=False, created_date_start=None, created_date_end=None, modified_date_start=None, modified_date_end=None):  # noqa: E501
        """ItemFilters - a model defined in Swagger"""  # noqa: E501

        self._item_name_filter = None
        self._item_name_filter_exact_match = None
        self._inclusive_tag_list = None
        self._inclusive_tag_list_match_all = None
        self._exclusive_tag_list = None
        self._exclusive_tag_list_match_all = None
        self._created_date_start = None
        self._created_date_end = None
        self._modified_date_start = None
        self._modified_date_end = None
        self.discriminator = None

        if item_name_filter is not None:
            self.item_name_filter = item_name_filter
        if item_name_filter_exact_match is not None:
            self.item_name_filter_exact_match = item_name_filter_exact_match
        if inclusive_tag_list is not None:
            self.inclusive_tag_list = inclusive_tag_list
        if inclusive_tag_list_match_all is not None:
            self.inclusive_tag_list_match_all = inclusive_tag_list_match_all
        if exclusive_tag_list is not None:
            self.exclusive_tag_list = exclusive_tag_list
        if exclusive_tag_list_match_all is not None:
            self.exclusive_tag_list_match_all = exclusive_tag_list_match_all
        if created_date_start is not None:
            self.created_date_start = created_date_start
        if created_date_end is not None:
            self.created_date_end = created_date_end
        if modified_date_start is not None:
            self.modified_date_start = modified_date_start
        if modified_date_end is not None:
            self.modified_date_end = modified_date_end

    @property
    def item_name_filter(self):
        """Gets the item_name_filter of this ItemFilters.  # noqa: E501

        'Item Name' search used by the filter  # noqa: E501

        :return: The item_name_filter of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._item_name_filter

    @item_name_filter.setter
    def item_name_filter(self, item_name_filter):
        """Sets the item_name_filter of this ItemFilters.

        'Item Name' search used by the filter  # noqa: E501

        :param item_name_filter: The item_name_filter of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._item_name_filter = item_name_filter

    @property
    def item_name_filter_exact_match(self):
        """Gets the item_name_filter_exact_match of this ItemFilters.  # noqa: E501

        True if the 'Item Name' used by the filter is an exact match  # noqa: E501

        :return: The item_name_filter_exact_match of this ItemFilters.  # noqa: E501
        :rtype: bool
        """
        return self._item_name_filter_exact_match

    @item_name_filter_exact_match.setter
    def item_name_filter_exact_match(self, item_name_filter_exact_match):
        """Sets the item_name_filter_exact_match of this ItemFilters.

        True if the 'Item Name' used by the filter is an exact match  # noqa: E501

        :param item_name_filter_exact_match: The item_name_filter_exact_match of this ItemFilters.  # noqa: E501
        :type: bool
        """

        self._item_name_filter_exact_match = item_name_filter_exact_match

    @property
    def inclusive_tag_list(self):
        """Gets the inclusive_tag_list of this ItemFilters.  # noqa: E501

        'Inclusive Tag' list search used by the filter  # noqa: E501

        :return: The inclusive_tag_list of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._inclusive_tag_list

    @inclusive_tag_list.setter
    def inclusive_tag_list(self, inclusive_tag_list):
        """Sets the inclusive_tag_list of this ItemFilters.

        'Inclusive Tag' list search used by the filter  # noqa: E501

        :param inclusive_tag_list: The inclusive_tag_list of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._inclusive_tag_list = inclusive_tag_list

    @property
    def inclusive_tag_list_match_all(self):
        """Gets the inclusive_tag_list_match_all of this ItemFilters.  # noqa: E501

        True if the 'Inclusive Tag' list used by the filter is an exact match  # noqa: E501

        :return: The inclusive_tag_list_match_all of this ItemFilters.  # noqa: E501
        :rtype: bool
        """
        return self._inclusive_tag_list_match_all

    @inclusive_tag_list_match_all.setter
    def inclusive_tag_list_match_all(self, inclusive_tag_list_match_all):
        """Sets the inclusive_tag_list_match_all of this ItemFilters.

        True if the 'Inclusive Tag' list used by the filter is an exact match  # noqa: E501

        :param inclusive_tag_list_match_all: The inclusive_tag_list_match_all of this ItemFilters.  # noqa: E501
        :type: bool
        """

        self._inclusive_tag_list_match_all = inclusive_tag_list_match_all

    @property
    def exclusive_tag_list(self):
        """Gets the exclusive_tag_list of this ItemFilters.  # noqa: E501

        'Exclusive Tag' list search used by the filter  # noqa: E501

        :return: The exclusive_tag_list of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._exclusive_tag_list

    @exclusive_tag_list.setter
    def exclusive_tag_list(self, exclusive_tag_list):
        """Sets the exclusive_tag_list of this ItemFilters.

        'Exclusive Tag' list search used by the filter  # noqa: E501

        :param exclusive_tag_list: The exclusive_tag_list of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._exclusive_tag_list = exclusive_tag_list

    @property
    def exclusive_tag_list_match_all(self):
        """Gets the exclusive_tag_list_match_all of this ItemFilters.  # noqa: E501

        True if the 'Exclusive Tag' list used by the filter is an exact match for all items  # noqa: E501

        :return: The exclusive_tag_list_match_all of this ItemFilters.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_tag_list_match_all

    @exclusive_tag_list_match_all.setter
    def exclusive_tag_list_match_all(self, exclusive_tag_list_match_all):
        """Sets the exclusive_tag_list_match_all of this ItemFilters.

        True if the 'Exclusive Tag' list used by the filter is an exact match for all items  # noqa: E501

        :param exclusive_tag_list_match_all: The exclusive_tag_list_match_all of this ItemFilters.  # noqa: E501
        :type: bool
        """

        self._exclusive_tag_list_match_all = exclusive_tag_list_match_all

    @property
    def created_date_start(self):
        """Gets the created_date_start of this ItemFilters.  # noqa: E501

        Created item date to search from  # noqa: E501

        :return: The created_date_start of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._created_date_start

    @created_date_start.setter
    def created_date_start(self, created_date_start):
        """Sets the created_date_start of this ItemFilters.

        Created item date to search from  # noqa: E501

        :param created_date_start: The created_date_start of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._created_date_start = created_date_start

    @property
    def created_date_end(self):
        """Gets the created_date_end of this ItemFilters.  # noqa: E501

        Created item date to search to  # noqa: E501

        :return: The created_date_end of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._created_date_end

    @created_date_end.setter
    def created_date_end(self, created_date_end):
        """Sets the created_date_end of this ItemFilters.

        Created item date to search to  # noqa: E501

        :param created_date_end: The created_date_end of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._created_date_end = created_date_end

    @property
    def modified_date_start(self):
        """Gets the modified_date_start of this ItemFilters.  # noqa: E501

        Modified item date to search from  # noqa: E501

        :return: The modified_date_start of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._modified_date_start

    @modified_date_start.setter
    def modified_date_start(self, modified_date_start):
        """Sets the modified_date_start of this ItemFilters.

        Modified item date to search from  # noqa: E501

        :param modified_date_start: The modified_date_start of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._modified_date_start = modified_date_start

    @property
    def modified_date_end(self):
        """Gets the modified_date_end of this ItemFilters.  # noqa: E501

        Modified item date to search to  # noqa: E501

        :return: The modified_date_end of this ItemFilters.  # noqa: E501
        :rtype: str
        """
        return self._modified_date_end

    @modified_date_end.setter
    def modified_date_end(self, modified_date_end):
        """Sets the modified_date_end of this ItemFilters.

        Modified item date to search to  # noqa: E501

        :param modified_date_end: The modified_date_end of this ItemFilters.  # noqa: E501
        :type: str
        """

        self._modified_date_end = modified_date_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
