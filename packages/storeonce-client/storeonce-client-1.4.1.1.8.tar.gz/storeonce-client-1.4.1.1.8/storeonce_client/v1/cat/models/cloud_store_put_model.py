# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CloudStorePutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'csp_vendor': 'int',
        'csp_protocol': 'int',
        'csp_container': 'str',
        'csp_authentication_id': 'str',
        'csp_authentication_version': 'int',
        'csp_address': 'str',
        'csp_port': 'int',
        'proxy_connection_enabled': 'bool',
        'secure_connection_enabled': 'bool',
        'csp_authentication_key': 'str'
    }

    attribute_map = {
        'csp_vendor': 'cspVendor',
        'csp_protocol': 'cspProtocol',
        'csp_container': 'cspContainer',
        'csp_authentication_id': 'cspAuthenticationId',
        'csp_authentication_version': 'cspAuthenticationVersion',
        'csp_address': 'cspAddress',
        'csp_port': 'cspPort',
        'proxy_connection_enabled': 'proxyConnectionEnabled',
        'secure_connection_enabled': 'secureConnectionEnabled',
        'csp_authentication_key': 'cspAuthenticationKey'
    }

    def __init__(self, csp_vendor=None, csp_protocol=None, csp_container=None, csp_authentication_id=None, csp_authentication_version=None, csp_address=None, csp_port=None, proxy_connection_enabled=False, secure_connection_enabled=False, csp_authentication_key=None):  # noqa: E501
        """CloudStorePutModel - a model defined in Swagger"""  # noqa: E501

        self._csp_vendor = None
        self._csp_protocol = None
        self._csp_container = None
        self._csp_authentication_id = None
        self._csp_authentication_version = None
        self._csp_address = None
        self._csp_port = None
        self._proxy_connection_enabled = None
        self._secure_connection_enabled = None
        self._csp_authentication_key = None
        self.discriminator = None

        if csp_vendor is not None:
            self.csp_vendor = csp_vendor
        if csp_protocol is not None:
            self.csp_protocol = csp_protocol
        if csp_container is not None:
            self.csp_container = csp_container
        if csp_authentication_id is not None:
            self.csp_authentication_id = csp_authentication_id
        if csp_authentication_version is not None:
            self.csp_authentication_version = csp_authentication_version
        if csp_address is not None:
            self.csp_address = csp_address
        if csp_port is not None:
            self.csp_port = csp_port
        if proxy_connection_enabled is not None:
            self.proxy_connection_enabled = proxy_connection_enabled
        if secure_connection_enabled is not None:
            self.secure_connection_enabled = secure_connection_enabled
        if csp_authentication_key is not None:
            self.csp_authentication_key = csp_authentication_key

    @property
    def csp_vendor(self):
        """Gets the csp_vendor of this CloudStorePutModel.  # noqa: E501


        :return: The csp_vendor of this CloudStorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._csp_vendor

    @csp_vendor.setter
    def csp_vendor(self, csp_vendor):
        """Sets the csp_vendor of this CloudStorePutModel.


        :param csp_vendor: The csp_vendor of this CloudStorePutModel.  # noqa: E501
        :type: int
        """
        if csp_vendor is not None and csp_vendor > 4:  # noqa: E501
            raise ValueError("Invalid value for `csp_vendor`, must be a value less than or equal to `4`")  # noqa: E501
        if csp_vendor is not None and csp_vendor < 1:  # noqa: E501
            raise ValueError("Invalid value for `csp_vendor`, must be a value greater than or equal to `1`")  # noqa: E501

        self._csp_vendor = csp_vendor

    @property
    def csp_protocol(self):
        """Gets the csp_protocol of this CloudStorePutModel.  # noqa: E501

        Cloud service protocol  # noqa: E501

        :return: The csp_protocol of this CloudStorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._csp_protocol

    @csp_protocol.setter
    def csp_protocol(self, csp_protocol):
        """Sets the csp_protocol of this CloudStorePutModel.

        Cloud service protocol  # noqa: E501

        :param csp_protocol: The csp_protocol of this CloudStorePutModel.  # noqa: E501
        :type: int
        """

        self._csp_protocol = csp_protocol

    @property
    def csp_container(self):
        """Gets the csp_container of this CloudStorePutModel.  # noqa: E501

        Container name for attached cloud store.  # noqa: E501

        :return: The csp_container of this CloudStorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._csp_container

    @csp_container.setter
    def csp_container(self, csp_container):
        """Sets the csp_container of this CloudStorePutModel.

        Container name for attached cloud store.  # noqa: E501

        :param csp_container: The csp_container of this CloudStorePutModel.  # noqa: E501
        :type: str
        """

        self._csp_container = csp_container

    @property
    def csp_authentication_id(self):
        """Gets the csp_authentication_id of this CloudStorePutModel.  # noqa: E501

        Authentication ID for attached cloud store.  # noqa: E501

        :return: The csp_authentication_id of this CloudStorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._csp_authentication_id

    @csp_authentication_id.setter
    def csp_authentication_id(self, csp_authentication_id):
        """Sets the csp_authentication_id of this CloudStorePutModel.

        Authentication ID for attached cloud store.  # noqa: E501

        :param csp_authentication_id: The csp_authentication_id of this CloudStorePutModel.  # noqa: E501
        :type: str
        """

        self._csp_authentication_id = csp_authentication_id

    @property
    def csp_authentication_version(self):
        """Gets the csp_authentication_version of this CloudStorePutModel.  # noqa: E501

        AWS Signature Version if a cloud store using Amazon S3 is attached.  # noqa: E501

        :return: The csp_authentication_version of this CloudStorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._csp_authentication_version

    @csp_authentication_version.setter
    def csp_authentication_version(self, csp_authentication_version):
        """Sets the csp_authentication_version of this CloudStorePutModel.

        AWS Signature Version if a cloud store using Amazon S3 is attached.  # noqa: E501

        :param csp_authentication_version: The csp_authentication_version of this CloudStorePutModel.  # noqa: E501
        :type: int
        """

        self._csp_authentication_version = csp_authentication_version

    @property
    def csp_address(self):
        """Gets the csp_address of this CloudStorePutModel.  # noqa: E501

        Host address for cloud provider.  # noqa: E501

        :return: The csp_address of this CloudStorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._csp_address

    @csp_address.setter
    def csp_address(self, csp_address):
        """Sets the csp_address of this CloudStorePutModel.

        Host address for cloud provider.  # noqa: E501

        :param csp_address: The csp_address of this CloudStorePutModel.  # noqa: E501
        :type: str
        """

        self._csp_address = csp_address

    @property
    def csp_port(self):
        """Gets the csp_port of this CloudStorePutModel.  # noqa: E501

        Port for cloud provider.  # noqa: E501

        :return: The csp_port of this CloudStorePutModel.  # noqa: E501
        :rtype: int
        """
        return self._csp_port

    @csp_port.setter
    def csp_port(self, csp_port):
        """Sets the csp_port of this CloudStorePutModel.

        Port for cloud provider.  # noqa: E501

        :param csp_port: The csp_port of this CloudStorePutModel.  # noqa: E501
        :type: int
        """

        self._csp_port = csp_port

    @property
    def proxy_connection_enabled(self):
        """Gets the proxy_connection_enabled of this CloudStorePutModel.  # noqa: E501

        True if proxy is to be used for connections to the cloud service provider, false if not  # noqa: E501

        :return: The proxy_connection_enabled of this CloudStorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._proxy_connection_enabled

    @proxy_connection_enabled.setter
    def proxy_connection_enabled(self, proxy_connection_enabled):
        """Sets the proxy_connection_enabled of this CloudStorePutModel.

        True if proxy is to be used for connections to the cloud service provider, false if not  # noqa: E501

        :param proxy_connection_enabled: The proxy_connection_enabled of this CloudStorePutModel.  # noqa: E501
        :type: bool
        """

        self._proxy_connection_enabled = proxy_connection_enabled

    @property
    def secure_connection_enabled(self):
        """Gets the secure_connection_enabled of this CloudStorePutModel.  # noqa: E501

        True if SSL is to used for connections to the cloud service provider, false if not.  # noqa: E501

        :return: The secure_connection_enabled of this CloudStorePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._secure_connection_enabled

    @secure_connection_enabled.setter
    def secure_connection_enabled(self, secure_connection_enabled):
        """Sets the secure_connection_enabled of this CloudStorePutModel.

        True if SSL is to used for connections to the cloud service provider, false if not.  # noqa: E501

        :param secure_connection_enabled: The secure_connection_enabled of this CloudStorePutModel.  # noqa: E501
        :type: bool
        """

        self._secure_connection_enabled = secure_connection_enabled

    @property
    def csp_authentication_key(self):
        """Gets the csp_authentication_key of this CloudStorePutModel.  # noqa: E501

        Authentication Key for attached cloud store.  # noqa: E501

        :return: The csp_authentication_key of this CloudStorePutModel.  # noqa: E501
        :rtype: str
        """
        return self._csp_authentication_key

    @csp_authentication_key.setter
    def csp_authentication_key(self, csp_authentication_key):
        """Sets the csp_authentication_key of this CloudStorePutModel.

        Authentication Key for attached cloud store.  # noqa: E501

        :param csp_authentication_key: The csp_authentication_key of this CloudStorePutModel.  # noqa: E501
        :type: str
        """

        self._csp_authentication_key = csp_authentication_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudStorePutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudStorePutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
