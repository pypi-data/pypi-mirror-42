# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CloudStore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'serial_number': 'str',
        'cloud_store_id': 'str',
        'name': 'str',
        'description': 'str',
        'encryption_enabled': 'bool',
        'cloud_disk_bytes': 'int',
        'local_disk_bytes': 'int',
        'user_bytes': 'int',
        'sparse_index_bytes': 'int',
        'num_items': 'int',
        'version': 'int',
        'last_accessed_date': 'datetime',
        'created_date': 'datetime',
        'attached': 'bool',
        'marked_for_deletion': 'bool',
        'recover_serial_number': 'str',
        'recover_start_date': 'datetime',
        'status': 'int',
        'status_string': 'str',
        'recover_eligibility_status': 'int',
        'recover_eligibility_status_string': 'str',
        'read_only_connect_eligibility_status': 'int',
        'read_only_connect_eligibility_status_string': 'str',
        'recover_disabled_reason_string': 'str',
        'read_only_connect_disabled_reason': 'str'
    }

    attribute_map = {
        'serial_number': 'serialNumber',
        'cloud_store_id': 'cloudStoreId',
        'name': 'name',
        'description': 'description',
        'encryption_enabled': 'encryptionEnabled',
        'cloud_disk_bytes': 'cloudDiskBytes',
        'local_disk_bytes': 'localDiskBytes',
        'user_bytes': 'userBytes',
        'sparse_index_bytes': 'sparseIndexBytes',
        'num_items': 'numItems',
        'version': 'version',
        'last_accessed_date': 'lastAccessedDate',
        'created_date': 'createdDate',
        'attached': 'attached',
        'marked_for_deletion': 'markedForDeletion',
        'recover_serial_number': 'recoverSerialNumber',
        'recover_start_date': 'recoverStartDate',
        'status': 'status',
        'status_string': 'statusString',
        'recover_eligibility_status': 'recoverEligibilityStatus',
        'recover_eligibility_status_string': 'recoverEligibilityStatusString',
        'read_only_connect_eligibility_status': 'readOnlyConnectEligibilityStatus',
        'read_only_connect_eligibility_status_string': 'readOnlyConnectEligibilityStatusString',
        'recover_disabled_reason_string': 'recoverDisabledReasonString',
        'read_only_connect_disabled_reason': 'readOnlyConnectDisabledReason'
    }

    def __init__(self, serial_number=None, cloud_store_id=None, name=None, description=None, encryption_enabled=False, cloud_disk_bytes=None, local_disk_bytes=None, user_bytes=None, sparse_index_bytes=None, num_items=None, version=None, last_accessed_date=None, created_date=None, attached=False, marked_for_deletion=False, recover_serial_number=None, recover_start_date=None, status=None, status_string=None, recover_eligibility_status=None, recover_eligibility_status_string=None, read_only_connect_eligibility_status=None, read_only_connect_eligibility_status_string=None, recover_disabled_reason_string=None, read_only_connect_disabled_reason=None):  # noqa: E501
        """CloudStore - a model defined in Swagger"""  # noqa: E501

        self._serial_number = None
        self._cloud_store_id = None
        self._name = None
        self._description = None
        self._encryption_enabled = None
        self._cloud_disk_bytes = None
        self._local_disk_bytes = None
        self._user_bytes = None
        self._sparse_index_bytes = None
        self._num_items = None
        self._version = None
        self._last_accessed_date = None
        self._created_date = None
        self._attached = None
        self._marked_for_deletion = None
        self._recover_serial_number = None
        self._recover_start_date = None
        self._status = None
        self._status_string = None
        self._recover_eligibility_status = None
        self._recover_eligibility_status_string = None
        self._read_only_connect_eligibility_status = None
        self._read_only_connect_eligibility_status_string = None
        self._recover_disabled_reason_string = None
        self._read_only_connect_disabled_reason = None
        self.discriminator = None

        if serial_number is not None:
            self.serial_number = serial_number
        if cloud_store_id is not None:
            self.cloud_store_id = cloud_store_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if cloud_disk_bytes is not None:
            self.cloud_disk_bytes = cloud_disk_bytes
        if local_disk_bytes is not None:
            self.local_disk_bytes = local_disk_bytes
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if sparse_index_bytes is not None:
            self.sparse_index_bytes = sparse_index_bytes
        if num_items is not None:
            self.num_items = num_items
        if version is not None:
            self.version = version
        if last_accessed_date is not None:
            self.last_accessed_date = last_accessed_date
        if created_date is not None:
            self.created_date = created_date
        if attached is not None:
            self.attached = attached
        if marked_for_deletion is not None:
            self.marked_for_deletion = marked_for_deletion
        if recover_serial_number is not None:
            self.recover_serial_number = recover_serial_number
        if recover_start_date is not None:
            self.recover_start_date = recover_start_date
        if status is not None:
            self.status = status
        if status_string is not None:
            self.status_string = status_string
        if recover_eligibility_status is not None:
            self.recover_eligibility_status = recover_eligibility_status
        if recover_eligibility_status_string is not None:
            self.recover_eligibility_status_string = recover_eligibility_status_string
        if read_only_connect_eligibility_status is not None:
            self.read_only_connect_eligibility_status = read_only_connect_eligibility_status
        if read_only_connect_eligibility_status_string is not None:
            self.read_only_connect_eligibility_status_string = read_only_connect_eligibility_status_string
        if recover_disabled_reason_string is not None:
            self.recover_disabled_reason_string = recover_disabled_reason_string
        if read_only_connect_disabled_reason is not None:
            self.read_only_connect_disabled_reason = read_only_connect_disabled_reason

    @property
    def serial_number(self):
        """Gets the serial_number of this CloudStore.  # noqa: E501

        Serial number of the StoreOnce appliance the store belongs to  # noqa: E501

        :return: The serial_number of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CloudStore.

        Serial number of the StoreOnce appliance the store belongs to  # noqa: E501

        :param serial_number: The serial_number of this CloudStore.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def cloud_store_id(self):
        """Gets the cloud_store_id of this CloudStore.  # noqa: E501

        The cloudStoreId of the cloud store  # noqa: E501

        :return: The cloud_store_id of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._cloud_store_id

    @cloud_store_id.setter
    def cloud_store_id(self, cloud_store_id):
        """Sets the cloud_store_id of this CloudStore.

        The cloudStoreId of the cloud store  # noqa: E501

        :param cloud_store_id: The cloud_store_id of this CloudStore.  # noqa: E501
        :type: str
        """

        self._cloud_store_id = cloud_store_id

    @property
    def name(self):
        """Gets the name of this CloudStore.  # noqa: E501

        The name of the cloud store  # noqa: E501

        :return: The name of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudStore.

        The name of the cloud store  # noqa: E501

        :param name: The name of this CloudStore.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CloudStore.  # noqa: E501

        The description of the cloud store  # noqa: E501

        :return: The description of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudStore.

        The description of the cloud store  # noqa: E501

        :param description: The description of this CloudStore.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this CloudStore.  # noqa: E501

        True if cloud store is encryptionEnabled  # noqa: E501

        :return: The encryption_enabled of this CloudStore.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this CloudStore.

        True if cloud store is encryptionEnabled  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this CloudStore.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def cloud_disk_bytes(self):
        """Gets the cloud_disk_bytes of this CloudStore.  # noqa: E501

        The amount of capacity used (post dedupe) in the cloud  # noqa: E501

        :return: The cloud_disk_bytes of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._cloud_disk_bytes

    @cloud_disk_bytes.setter
    def cloud_disk_bytes(self, cloud_disk_bytes):
        """Sets the cloud_disk_bytes of this CloudStore.

        The amount of capacity used (post dedupe) in the cloud  # noqa: E501

        :param cloud_disk_bytes: The cloud_disk_bytes of this CloudStore.  # noqa: E501
        :type: int
        """

        self._cloud_disk_bytes = cloud_disk_bytes

    @property
    def local_disk_bytes(self):
        """Gets the local_disk_bytes of this CloudStore.  # noqa: E501

        The amount of capacity used (post dedupe) on the appliance  # noqa: E501

        :return: The local_disk_bytes of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._local_disk_bytes

    @local_disk_bytes.setter
    def local_disk_bytes(self, local_disk_bytes):
        """Sets the local_disk_bytes of this CloudStore.

        The amount of capacity used (post dedupe) on the appliance  # noqa: E501

        :param local_disk_bytes: The local_disk_bytes of this CloudStore.  # noqa: E501
        :type: int
        """

        self._local_disk_bytes = local_disk_bytes

    @property
    def user_bytes(self):
        """Gets the user_bytes of this CloudStore.  # noqa: E501

        The amount of data stored in the cloud  # noqa: E501

        :return: The user_bytes of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this CloudStore.

        The amount of data stored in the cloud  # noqa: E501

        :param user_bytes: The user_bytes of this CloudStore.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def sparse_index_bytes(self):
        """Gets the sparse_index_bytes of this CloudStore.  # noqa: E501

        Size of the sparse index in bytes  # noqa: E501

        :return: The sparse_index_bytes of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._sparse_index_bytes

    @sparse_index_bytes.setter
    def sparse_index_bytes(self, sparse_index_bytes):
        """Sets the sparse_index_bytes of this CloudStore.

        Size of the sparse index in bytes  # noqa: E501

        :param sparse_index_bytes: The sparse_index_bytes of this CloudStore.  # noqa: E501
        :type: int
        """

        self._sparse_index_bytes = sparse_index_bytes

    @property
    def num_items(self):
        """Gets the num_items of this CloudStore.  # noqa: E501

        The number of items stored  # noqa: E501

        :return: The num_items of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._num_items

    @num_items.setter
    def num_items(self, num_items):
        """Sets the num_items of this CloudStore.

        The number of items stored  # noqa: E501

        :param num_items: The num_items of this CloudStore.  # noqa: E501
        :type: int
        """

        self._num_items = num_items

    @property
    def version(self):
        """Gets the version of this CloudStore.  # noqa: E501

        The protocol version for the store  # noqa: E501

        :return: The version of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CloudStore.

        The protocol version for the store  # noqa: E501

        :param version: The version of this CloudStore.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def last_accessed_date(self):
        """Gets the last_accessed_date of this CloudStore.  # noqa: E501

        Date/time the cloud store was last accessed by a StoreOnce appliance  # noqa: E501

        :return: The last_accessed_date of this CloudStore.  # noqa: E501
        :rtype: datetime
        """
        return self._last_accessed_date

    @last_accessed_date.setter
    def last_accessed_date(self, last_accessed_date):
        """Sets the last_accessed_date of this CloudStore.

        Date/time the cloud store was last accessed by a StoreOnce appliance  # noqa: E501

        :param last_accessed_date: The last_accessed_date of this CloudStore.  # noqa: E501
        :type: datetime
        """

        self._last_accessed_date = last_accessed_date

    @property
    def created_date(self):
        """Gets the created_date of this CloudStore.  # noqa: E501

        Date/time the cloud store was first created  # noqa: E501

        :return: The created_date of this CloudStore.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CloudStore.

        Date/time the cloud store was first created  # noqa: E501

        :param created_date: The created_date of this CloudStore.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def attached(self):
        """Gets the attached of this CloudStore.  # noqa: E501

        True if cloud store is currently attached  # noqa: E501

        :return: The attached of this CloudStore.  # noqa: E501
        :rtype: bool
        """
        return self._attached

    @attached.setter
    def attached(self, attached):
        """Sets the attached of this CloudStore.

        True if cloud store is currently attached  # noqa: E501

        :param attached: The attached of this CloudStore.  # noqa: E501
        :type: bool
        """

        self._attached = attached

    @property
    def marked_for_deletion(self):
        """Gets the marked_for_deletion of this CloudStore.  # noqa: E501

        True if store is marked for deletion  # noqa: E501

        :return: The marked_for_deletion of this CloudStore.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_deletion

    @marked_for_deletion.setter
    def marked_for_deletion(self, marked_for_deletion):
        """Sets the marked_for_deletion of this CloudStore.

        True if store is marked for deletion  # noqa: E501

        :param marked_for_deletion: The marked_for_deletion of this CloudStore.  # noqa: E501
        :type: bool
        """

        self._marked_for_deletion = marked_for_deletion

    @property
    def recover_serial_number(self):
        """Gets the recover_serial_number of this CloudStore.  # noqa: E501

        Serial number of the StoreOnce appliance currently connecting to the cloud store, blank if no connect in process.  # noqa: E501

        :return: The recover_serial_number of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._recover_serial_number

    @recover_serial_number.setter
    def recover_serial_number(self, recover_serial_number):
        """Sets the recover_serial_number of this CloudStore.

        Serial number of the StoreOnce appliance currently connecting to the cloud store, blank if no connect in process.  # noqa: E501

        :param recover_serial_number: The recover_serial_number of this CloudStore.  # noqa: E501
        :type: str
        """

        self._recover_serial_number = recover_serial_number

    @property
    def recover_start_date(self):
        """Gets the recover_start_date of this CloudStore.  # noqa: E501

        Date/time the current connect process was started, blank if no connect in processs.  # noqa: E501

        :return: The recover_start_date of this CloudStore.  # noqa: E501
        :rtype: datetime
        """
        return self._recover_start_date

    @recover_start_date.setter
    def recover_start_date(self, recover_start_date):
        """Sets the recover_start_date of this CloudStore.

        Date/time the current connect process was started, blank if no connect in processs.  # noqa: E501

        :param recover_start_date: The recover_start_date of this CloudStore.  # noqa: E501
        :type: datetime
        """

        self._recover_start_date = recover_start_date

    @property
    def status(self):
        """Gets the status of this CloudStore.  # noqa: E501

        Numerical value representing the status of the store.  # noqa: E501

        :return: The status of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CloudStore.

        Numerical value representing the status of the store.  # noqa: E501

        :param status: The status of this CloudStore.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def status_string(self):
        """Gets the status_string of this CloudStore.  # noqa: E501

        Localised string representation of the status of the store.  # noqa: E501

        :return: The status_string of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._status_string

    @status_string.setter
    def status_string(self, status_string):
        """Sets the status_string of this CloudStore.

        Localised string representation of the status of the store.  # noqa: E501

        :param status_string: The status_string of this CloudStore.  # noqa: E501
        :type: str
        """

        self._status_string = status_string

    @property
    def recover_eligibility_status(self):
        """Gets the recover_eligibility_status of this CloudStore.  # noqa: E501

        Numeric value representing if the store can be connected to in read write mode or the reason it can?t.  # noqa: E501

        :return: The recover_eligibility_status of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._recover_eligibility_status

    @recover_eligibility_status.setter
    def recover_eligibility_status(self, recover_eligibility_status):
        """Sets the recover_eligibility_status of this CloudStore.

        Numeric value representing if the store can be connected to in read write mode or the reason it can?t.  # noqa: E501

        :param recover_eligibility_status: The recover_eligibility_status of this CloudStore.  # noqa: E501
        :type: int
        """

        self._recover_eligibility_status = recover_eligibility_status

    @property
    def recover_eligibility_status_string(self):
        """Gets the recover_eligibility_status_string of this CloudStore.  # noqa: E501

        Localised string representing the basic reason for the read write connect to be enabled/disabled.  # noqa: E501

        :return: The recover_eligibility_status_string of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._recover_eligibility_status_string

    @recover_eligibility_status_string.setter
    def recover_eligibility_status_string(self, recover_eligibility_status_string):
        """Sets the recover_eligibility_status_string of this CloudStore.

        Localised string representing the basic reason for the read write connect to be enabled/disabled.  # noqa: E501

        :param recover_eligibility_status_string: The recover_eligibility_status_string of this CloudStore.  # noqa: E501
        :type: str
        """

        self._recover_eligibility_status_string = recover_eligibility_status_string

    @property
    def read_only_connect_eligibility_status(self):
        """Gets the read_only_connect_eligibility_status of this CloudStore.  # noqa: E501

        Numeric value representing if the store can be connected to in read only mode or the reason it can?t.  # noqa: E501

        :return: The read_only_connect_eligibility_status of this CloudStore.  # noqa: E501
        :rtype: int
        """
        return self._read_only_connect_eligibility_status

    @read_only_connect_eligibility_status.setter
    def read_only_connect_eligibility_status(self, read_only_connect_eligibility_status):
        """Sets the read_only_connect_eligibility_status of this CloudStore.

        Numeric value representing if the store can be connected to in read only mode or the reason it can?t.  # noqa: E501

        :param read_only_connect_eligibility_status: The read_only_connect_eligibility_status of this CloudStore.  # noqa: E501
        :type: int
        """

        self._read_only_connect_eligibility_status = read_only_connect_eligibility_status

    @property
    def read_only_connect_eligibility_status_string(self):
        """Gets the read_only_connect_eligibility_status_string of this CloudStore.  # noqa: E501

         Localised string representing the basic reason for read only connect to be enabled/disabled.  # noqa: E501

        :return: The read_only_connect_eligibility_status_string of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._read_only_connect_eligibility_status_string

    @read_only_connect_eligibility_status_string.setter
    def read_only_connect_eligibility_status_string(self, read_only_connect_eligibility_status_string):
        """Sets the read_only_connect_eligibility_status_string of this CloudStore.

         Localised string representing the basic reason for read only connect to be enabled/disabled.  # noqa: E501

        :param read_only_connect_eligibility_status_string: The read_only_connect_eligibility_status_string of this CloudStore.  # noqa: E501
        :type: str
        """

        self._read_only_connect_eligibility_status_string = read_only_connect_eligibility_status_string

    @property
    def recover_disabled_reason_string(self):
        """Gets the recover_disabled_reason_string of this CloudStore.  # noqa: E501

        Localised string indicating why the store is not eligible for read write connect. Blank if the store is eligible.  # noqa: E501

        :return: The recover_disabled_reason_string of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._recover_disabled_reason_string

    @recover_disabled_reason_string.setter
    def recover_disabled_reason_string(self, recover_disabled_reason_string):
        """Sets the recover_disabled_reason_string of this CloudStore.

        Localised string indicating why the store is not eligible for read write connect. Blank if the store is eligible.  # noqa: E501

        :param recover_disabled_reason_string: The recover_disabled_reason_string of this CloudStore.  # noqa: E501
        :type: str
        """

        self._recover_disabled_reason_string = recover_disabled_reason_string

    @property
    def read_only_connect_disabled_reason(self):
        """Gets the read_only_connect_disabled_reason of this CloudStore.  # noqa: E501

        Localised string indicating why the store is not eligible for read only connect. Blank if store is eligible.  # noqa: E501

        :return: The read_only_connect_disabled_reason of this CloudStore.  # noqa: E501
        :rtype: str
        """
        return self._read_only_connect_disabled_reason

    @read_only_connect_disabled_reason.setter
    def read_only_connect_disabled_reason(self, read_only_connect_disabled_reason):
        """Sets the read_only_connect_disabled_reason of this CloudStore.

        Localised string indicating why the store is not eligible for read only connect. Blank if store is eligible.  # noqa: E501

        :param read_only_connect_disabled_reason: The read_only_connect_disabled_reason of this CloudStore.  # noqa: E501
        :type: str
        """

        self._read_only_connect_disabled_reason = read_only_connect_disabled_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudStore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudStore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
