# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Store(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'created_date': 'datetime',
        'version': 'int',
        'variable_block_dedupe_supported': 'bool',
        'fixed_block_dedupe_supported': 'bool',
        'no_dedupe_supported': 'bool',
        'sparse_write_supported': 'bool',
        'write_in_place_supported': 'bool',
        'raw_read_write_supported': 'bool',
        'multiple_object_openers_supported': 'bool',
        'multiple_object_writes_supported': 'bool',
        'clone_extent_supported': 'bool',
        'primary_transfer_policy': 'int',
        'primary_transfer_policy_string': 'str',
        'secondary_transfer_policy': 'int',
        'secondary_transfer_policy_string': 'str',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'data_job_retention_days': 'int',
        'copy_job_retention_days': 'int',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'dedupe_ratio': 'float',
        'num_items': 'int',
        'num_data_jobs': 'int',
        'num_inbound_copy_jobs': 'int',
        'num_outbound_copy_jobs': 'int',
        'health_level': 'int',
        'health_level_string': 'str',
        'store_status': 'int',
        'store_status_string': 'str',
        'encryption_enabled': 'bool',
        'secure_erase_mode_string': 'str',
        'secure_erase_mode': 'int',
        'modified_date': 'datetime',
        'dedupe_store_id': 'int',
        'security_mode': 'int',
        'security_mode_string': 'str',
        'data_immutability_grace_enabled': 'bool',
        'data_immutability_grace_seconds': 'int',
        'data_immutability_retention_seconds': 'int',
        'data_immutability_retention_enabled': 'bool',
        'ssl_certificate': 'str',
        'cloud_store_enabled': 'bool',
        'cloud_store_details': 'CloudStore'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'created_date': 'createdDate',
        'version': 'version',
        'variable_block_dedupe_supported': 'variableBlockDedupeSupported',
        'fixed_block_dedupe_supported': 'fixedBlockDedupeSupported',
        'no_dedupe_supported': 'noDedupeSupported',
        'sparse_write_supported': 'sparseWriteSupported',
        'write_in_place_supported': 'writeInPlaceSupported',
        'raw_read_write_supported': 'rawReadWriteSupported',
        'multiple_object_openers_supported': 'multipleObjectOpenersSupported',
        'multiple_object_writes_supported': 'multipleObjectWritesSupported',
        'clone_extent_supported': 'cloneExtentSupported',
        'primary_transfer_policy': 'primaryTransferPolicy',
        'primary_transfer_policy_string': 'primaryTransferPolicyString',
        'secondary_transfer_policy': 'secondaryTransferPolicy',
        'secondary_transfer_policy_string': 'secondaryTransferPolicyString',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'data_job_retention_days': 'dataJobRetentionDays',
        'copy_job_retention_days': 'copyJobRetentionDays',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'dedupe_ratio': 'dedupeRatio',
        'num_items': 'numItems',
        'num_data_jobs': 'numDataJobs',
        'num_inbound_copy_jobs': 'numInboundCopyJobs',
        'num_outbound_copy_jobs': 'numOutboundCopyJobs',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'store_status': 'storeStatus',
        'store_status_string': 'storeStatusString',
        'encryption_enabled': 'encryptionEnabled',
        'secure_erase_mode_string': 'secureEraseModeString',
        'secure_erase_mode': 'secureEraseMode',
        'modified_date': 'modifiedDate',
        'dedupe_store_id': 'dedupeStoreId',
        'security_mode': 'securityMode',
        'security_mode_string': 'securityModeString',
        'data_immutability_grace_enabled': 'dataImmutabilityGraceEnabled',
        'data_immutability_grace_seconds': 'dataImmutabilityGraceSeconds',
        'data_immutability_retention_seconds': 'dataImmutabilityRetentionSeconds',
        'data_immutability_retention_enabled': 'dataImmutabilityRetentionEnabled',
        'ssl_certificate': 'sslCertificate',
        'cloud_store_enabled': 'cloudStoreEnabled',
        'cloud_store_details': 'cloudStoreDetails'
    }

    def __init__(self, id=None, name=None, description=None, created_date=None, version=None, variable_block_dedupe_supported=False, fixed_block_dedupe_supported=False, no_dedupe_supported=False, sparse_write_supported=False, write_in_place_supported=False, raw_read_write_supported=False, multiple_object_openers_supported=False, multiple_object_writes_supported=False, clone_extent_supported=False, primary_transfer_policy=None, primary_transfer_policy_string=None, secondary_transfer_policy=None, secondary_transfer_policy_string=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, data_job_retention_days=None, copy_job_retention_days=None, user_bytes=None, disk_bytes=None, dedupe_ratio=None, num_items=None, num_data_jobs=None, num_inbound_copy_jobs=None, num_outbound_copy_jobs=None, health_level=None, health_level_string=None, store_status=None, store_status_string=None, encryption_enabled=False, secure_erase_mode_string=None, secure_erase_mode=None, modified_date=None, dedupe_store_id=None, security_mode=None, security_mode_string=None, data_immutability_grace_enabled=False, data_immutability_grace_seconds=None, data_immutability_retention_seconds=None, data_immutability_retention_enabled=False, ssl_certificate=None, cloud_store_enabled=False, cloud_store_details=None):  # noqa: E501
        """Store - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._created_date = None
        self._version = None
        self._variable_block_dedupe_supported = None
        self._fixed_block_dedupe_supported = None
        self._no_dedupe_supported = None
        self._sparse_write_supported = None
        self._write_in_place_supported = None
        self._raw_read_write_supported = None
        self._multiple_object_openers_supported = None
        self._multiple_object_writes_supported = None
        self._clone_extent_supported = None
        self._primary_transfer_policy = None
        self._primary_transfer_policy_string = None
        self._secondary_transfer_policy = None
        self._secondary_transfer_policy_string = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._data_job_retention_days = None
        self._copy_job_retention_days = None
        self._user_bytes = None
        self._disk_bytes = None
        self._dedupe_ratio = None
        self._num_items = None
        self._num_data_jobs = None
        self._num_inbound_copy_jobs = None
        self._num_outbound_copy_jobs = None
        self._health_level = None
        self._health_level_string = None
        self._store_status = None
        self._store_status_string = None
        self._encryption_enabled = None
        self._secure_erase_mode_string = None
        self._secure_erase_mode = None
        self._modified_date = None
        self._dedupe_store_id = None
        self._security_mode = None
        self._security_mode_string = None
        self._data_immutability_grace_enabled = None
        self._data_immutability_grace_seconds = None
        self._data_immutability_retention_seconds = None
        self._data_immutability_retention_enabled = None
        self._ssl_certificate = None
        self._cloud_store_enabled = None
        self._cloud_store_details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if created_date is not None:
            self.created_date = created_date
        if version is not None:
            self.version = version
        if variable_block_dedupe_supported is not None:
            self.variable_block_dedupe_supported = variable_block_dedupe_supported
        if fixed_block_dedupe_supported is not None:
            self.fixed_block_dedupe_supported = fixed_block_dedupe_supported
        if no_dedupe_supported is not None:
            self.no_dedupe_supported = no_dedupe_supported
        if sparse_write_supported is not None:
            self.sparse_write_supported = sparse_write_supported
        if write_in_place_supported is not None:
            self.write_in_place_supported = write_in_place_supported
        if raw_read_write_supported is not None:
            self.raw_read_write_supported = raw_read_write_supported
        if multiple_object_openers_supported is not None:
            self.multiple_object_openers_supported = multiple_object_openers_supported
        if multiple_object_writes_supported is not None:
            self.multiple_object_writes_supported = multiple_object_writes_supported
        if clone_extent_supported is not None:
            self.clone_extent_supported = clone_extent_supported
        self.primary_transfer_policy = primary_transfer_policy
        if primary_transfer_policy_string is not None:
            self.primary_transfer_policy_string = primary_transfer_policy_string
        self.secondary_transfer_policy = secondary_transfer_policy
        if secondary_transfer_policy_string is not None:
            self.secondary_transfer_policy_string = secondary_transfer_policy_string
        if size_on_disk_quota_enabled is not None:
            self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        if size_on_disk_quota_bytes is not None:
            self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        if user_data_stored_quota_enabled is not None:
            self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        if user_data_stored_quota_bytes is not None:
            self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        self.data_job_retention_days = data_job_retention_days
        self.copy_job_retention_days = copy_job_retention_days
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if num_items is not None:
            self.num_items = num_items
        if num_data_jobs is not None:
            self.num_data_jobs = num_data_jobs
        if num_inbound_copy_jobs is not None:
            self.num_inbound_copy_jobs = num_inbound_copy_jobs
        if num_outbound_copy_jobs is not None:
            self.num_outbound_copy_jobs = num_outbound_copy_jobs
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if store_status is not None:
            self.store_status = store_status
        if store_status_string is not None:
            self.store_status_string = store_status_string
        self.encryption_enabled = encryption_enabled
        if secure_erase_mode_string is not None:
            self.secure_erase_mode_string = secure_erase_mode_string
        if secure_erase_mode is not None:
            self.secure_erase_mode = secure_erase_mode
        if modified_date is not None:
            self.modified_date = modified_date
        if dedupe_store_id is not None:
            self.dedupe_store_id = dedupe_store_id
        if security_mode is not None:
            self.security_mode = security_mode
        if security_mode_string is not None:
            self.security_mode_string = security_mode_string
        if data_immutability_grace_enabled is not None:
            self.data_immutability_grace_enabled = data_immutability_grace_enabled
        if data_immutability_grace_seconds is not None:
            self.data_immutability_grace_seconds = data_immutability_grace_seconds
        if data_immutability_retention_seconds is not None:
            self.data_immutability_retention_seconds = data_immutability_retention_seconds
        if data_immutability_retention_enabled is not None:
            self.data_immutability_retention_enabled = data_immutability_retention_enabled
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if cloud_store_enabled is not None:
            self.cloud_store_enabled = cloud_store_enabled
        if cloud_store_details is not None:
            self.cloud_store_details = cloud_store_details

    @property
    def id(self):
        """Gets the id of this Store.  # noqa: E501

        Unique ID for this store  # noqa: E501

        :return: The id of this Store.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Store.

        Unique ID for this store  # noqa: E501

        :param id: The id of this Store.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Store.  # noqa: E501

        Name of the store  # noqa: E501

        :return: The name of this Store.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Store.

        Name of the store  # noqa: E501

        :param name: The name of this Store.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Store.  # noqa: E501

        Description of the store  # noqa: E501

        :return: The description of this Store.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Store.

        Description of the store  # noqa: E501

        :param description: The description of this Store.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_date(self):
        """Gets the created_date of this Store.  # noqa: E501

        Date the store was created  # noqa: E501

        :return: The created_date of this Store.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Store.

        Date the store was created  # noqa: E501

        :param created_date: The created_date of this Store.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def version(self):
        """Gets the version of this Store.  # noqa: E501

        Protocol version of the store  # noqa: E501

        :return: The version of this Store.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Store.

        Protocol version of the store  # noqa: E501

        :param version: The version of this Store.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def variable_block_dedupe_supported(self):
        """Gets the variable_block_dedupe_supported of this Store.  # noqa: E501

        True if the store supports variable block dedupe storage mode  # noqa: E501

        :return: The variable_block_dedupe_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._variable_block_dedupe_supported

    @variable_block_dedupe_supported.setter
    def variable_block_dedupe_supported(self, variable_block_dedupe_supported):
        """Sets the variable_block_dedupe_supported of this Store.

        True if the store supports variable block dedupe storage mode  # noqa: E501

        :param variable_block_dedupe_supported: The variable_block_dedupe_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._variable_block_dedupe_supported = variable_block_dedupe_supported

    @property
    def fixed_block_dedupe_supported(self):
        """Gets the fixed_block_dedupe_supported of this Store.  # noqa: E501

        True if the store supports fixed block dedupe storage mode  # noqa: E501

        :return: The fixed_block_dedupe_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_block_dedupe_supported

    @fixed_block_dedupe_supported.setter
    def fixed_block_dedupe_supported(self, fixed_block_dedupe_supported):
        """Sets the fixed_block_dedupe_supported of this Store.

        True if the store supports fixed block dedupe storage mode  # noqa: E501

        :param fixed_block_dedupe_supported: The fixed_block_dedupe_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._fixed_block_dedupe_supported = fixed_block_dedupe_supported

    @property
    def no_dedupe_supported(self):
        """Gets the no_dedupe_supported of this Store.  # noqa: E501

        True if the store supports no dedupe storage mode  # noqa: E501

        :return: The no_dedupe_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._no_dedupe_supported

    @no_dedupe_supported.setter
    def no_dedupe_supported(self, no_dedupe_supported):
        """Sets the no_dedupe_supported of this Store.

        True if the store supports no dedupe storage mode  # noqa: E501

        :param no_dedupe_supported: The no_dedupe_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._no_dedupe_supported = no_dedupe_supported

    @property
    def sparse_write_supported(self):
        """Gets the sparse_write_supported of this Store.  # noqa: E501

        True if the store supports sparse writes  # noqa: E501

        :return: The sparse_write_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._sparse_write_supported

    @sparse_write_supported.setter
    def sparse_write_supported(self, sparse_write_supported):
        """Sets the sparse_write_supported of this Store.

        True if the store supports sparse writes  # noqa: E501

        :param sparse_write_supported: The sparse_write_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._sparse_write_supported = sparse_write_supported

    @property
    def write_in_place_supported(self):
        """Gets the write_in_place_supported of this Store.  # noqa: E501

        True if the store supports write in place  # noqa: E501

        :return: The write_in_place_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._write_in_place_supported

    @write_in_place_supported.setter
    def write_in_place_supported(self, write_in_place_supported):
        """Sets the write_in_place_supported of this Store.

        True if the store supports write in place  # noqa: E501

        :param write_in_place_supported: The write_in_place_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._write_in_place_supported = write_in_place_supported

    @property
    def raw_read_write_supported(self):
        """Gets the raw_read_write_supported of this Store.  # noqa: E501

        True if the store supports raw read write  # noqa: E501

        :return: The raw_read_write_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._raw_read_write_supported

    @raw_read_write_supported.setter
    def raw_read_write_supported(self, raw_read_write_supported):
        """Sets the raw_read_write_supported of this Store.

        True if the store supports raw read write  # noqa: E501

        :param raw_read_write_supported: The raw_read_write_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._raw_read_write_supported = raw_read_write_supported

    @property
    def multiple_object_openers_supported(self):
        """Gets the multiple_object_openers_supported of this Store.  # noqa: E501

        True if the store supports multiple object openers  # noqa: E501

        :return: The multiple_object_openers_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_object_openers_supported

    @multiple_object_openers_supported.setter
    def multiple_object_openers_supported(self, multiple_object_openers_supported):
        """Sets the multiple_object_openers_supported of this Store.

        True if the store supports multiple object openers  # noqa: E501

        :param multiple_object_openers_supported: The multiple_object_openers_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._multiple_object_openers_supported = multiple_object_openers_supported

    @property
    def multiple_object_writes_supported(self):
        """Gets the multiple_object_writes_supported of this Store.  # noqa: E501

        True if the store supports multiple object writers  # noqa: E501

        :return: The multiple_object_writes_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_object_writes_supported

    @multiple_object_writes_supported.setter
    def multiple_object_writes_supported(self, multiple_object_writes_supported):
        """Sets the multiple_object_writes_supported of this Store.

        True if the store supports multiple object writers  # noqa: E501

        :param multiple_object_writes_supported: The multiple_object_writes_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._multiple_object_writes_supported = multiple_object_writes_supported

    @property
    def clone_extent_supported(self):
        """Gets the clone_extent_supported of this Store.  # noqa: E501

        True if the store supports extent cloning  # noqa: E501

        :return: The clone_extent_supported of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._clone_extent_supported

    @clone_extent_supported.setter
    def clone_extent_supported(self, clone_extent_supported):
        """Sets the clone_extent_supported of this Store.

        True if the store supports extent cloning  # noqa: E501

        :param clone_extent_supported: The clone_extent_supported of this Store.  # noqa: E501
        :type: bool
        """

        self._clone_extent_supported = clone_extent_supported

    @property
    def primary_transfer_policy(self):
        """Gets the primary_transfer_policy of this Store.  # noqa: E501

        Primary transfer policy for this store's jobs  # noqa: E501

        :return: The primary_transfer_policy of this Store.  # noqa: E501
        :rtype: int
        """
        return self._primary_transfer_policy

    @primary_transfer_policy.setter
    def primary_transfer_policy(self, primary_transfer_policy):
        """Sets the primary_transfer_policy of this Store.

        Primary transfer policy for this store's jobs  # noqa: E501

        :param primary_transfer_policy: The primary_transfer_policy of this Store.  # noqa: E501
        :type: int
        """
        if primary_transfer_policy is None:
            raise ValueError("Invalid value for `primary_transfer_policy`, must not be `None`")  # noqa: E501

        self._primary_transfer_policy = primary_transfer_policy

    @property
    def primary_transfer_policy_string(self):
        """Gets the primary_transfer_policy_string of this Store.  # noqa: E501

        Localised string representation of the primary transfer policy  # noqa: E501

        :return: The primary_transfer_policy_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._primary_transfer_policy_string

    @primary_transfer_policy_string.setter
    def primary_transfer_policy_string(self, primary_transfer_policy_string):
        """Sets the primary_transfer_policy_string of this Store.

        Localised string representation of the primary transfer policy  # noqa: E501

        :param primary_transfer_policy_string: The primary_transfer_policy_string of this Store.  # noqa: E501
        :type: str
        """

        self._primary_transfer_policy_string = primary_transfer_policy_string

    @property
    def secondary_transfer_policy(self):
        """Gets the secondary_transfer_policy of this Store.  # noqa: E501

        Secondary transfer policy for this store's jobs  # noqa: E501

        :return: The secondary_transfer_policy of this Store.  # noqa: E501
        :rtype: int
        """
        return self._secondary_transfer_policy

    @secondary_transfer_policy.setter
    def secondary_transfer_policy(self, secondary_transfer_policy):
        """Sets the secondary_transfer_policy of this Store.

        Secondary transfer policy for this store's jobs  # noqa: E501

        :param secondary_transfer_policy: The secondary_transfer_policy of this Store.  # noqa: E501
        :type: int
        """
        if secondary_transfer_policy is None:
            raise ValueError("Invalid value for `secondary_transfer_policy`, must not be `None`")  # noqa: E501

        self._secondary_transfer_policy = secondary_transfer_policy

    @property
    def secondary_transfer_policy_string(self):
        """Gets the secondary_transfer_policy_string of this Store.  # noqa: E501

        Localised string representation of the secondary transfer policy  # noqa: E501

        :return: The secondary_transfer_policy_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._secondary_transfer_policy_string

    @secondary_transfer_policy_string.setter
    def secondary_transfer_policy_string(self, secondary_transfer_policy_string):
        """Sets the secondary_transfer_policy_string of this Store.

        Localised string representation of the secondary transfer policy  # noqa: E501

        :param secondary_transfer_policy_string: The secondary_transfer_policy_string of this Store.  # noqa: E501
        :type: str
        """

        self._secondary_transfer_policy_string = secondary_transfer_policy_string

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this Store.  # noqa: E501

        True if quota policy for size on disk is enabled  # noqa: E501

        :return: The size_on_disk_quota_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this Store.

        True if quota policy for size on disk is enabled  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this Store.  # noqa: E501
        :type: bool
        """

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this Store.  # noqa: E501

        Size on disk quota limit policy  # noqa: E501

        :return: The size_on_disk_quota_bytes of this Store.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this Store.

        Size on disk quota limit policy  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this Store.  # noqa: E501
        :type: int
        """

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this Store.  # noqa: E501

        True if quota policy for user data is enabled  # noqa: E501

        :return: The user_data_stored_quota_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this Store.

        True if quota policy for user data is enabled  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this Store.  # noqa: E501
        :type: bool
        """

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this Store.  # noqa: E501

        User data quota limit policy  # noqa: E501

        :return: The user_data_stored_quota_bytes of this Store.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this Store.

        User data quota limit policy  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this Store.  # noqa: E501
        :type: int
        """

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def data_job_retention_days(self):
        """Gets the data_job_retention_days of this Store.  # noqa: E501

        Datajob log retention period in days  # noqa: E501

        :return: The data_job_retention_days of this Store.  # noqa: E501
        :rtype: int
        """
        return self._data_job_retention_days

    @data_job_retention_days.setter
    def data_job_retention_days(self, data_job_retention_days):
        """Sets the data_job_retention_days of this Store.

        Datajob log retention period in days  # noqa: E501

        :param data_job_retention_days: The data_job_retention_days of this Store.  # noqa: E501
        :type: int
        """
        if data_job_retention_days is None:
            raise ValueError("Invalid value for `data_job_retention_days`, must not be `None`")  # noqa: E501

        self._data_job_retention_days = data_job_retention_days

    @property
    def copy_job_retention_days(self):
        """Gets the copy_job_retention_days of this Store.  # noqa: E501

        Copyjob log retention period in days  # noqa: E501

        :return: The copy_job_retention_days of this Store.  # noqa: E501
        :rtype: int
        """
        return self._copy_job_retention_days

    @copy_job_retention_days.setter
    def copy_job_retention_days(self, copy_job_retention_days):
        """Sets the copy_job_retention_days of this Store.

        Copyjob log retention period in days  # noqa: E501

        :param copy_job_retention_days: The copy_job_retention_days of this Store.  # noqa: E501
        :type: int
        """
        if copy_job_retention_days is None:
            raise ValueError("Invalid value for `copy_job_retention_days`, must not be `None`")  # noqa: E501

        self._copy_job_retention_days = copy_job_retention_days

    @property
    def user_bytes(self):
        """Gets the user_bytes of this Store.  # noqa: E501

        The total size of the user data that has been stored  # noqa: E501

        :return: The user_bytes of this Store.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this Store.

        The total size of the user data that has been stored  # noqa: E501

        :param user_bytes: The user_bytes of this Store.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this Store.  # noqa: E501

        The actual size of the deduped user data stored on disk  # noqa: E501

        :return: The disk_bytes of this Store.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this Store.

        The actual size of the deduped user data stored on disk  # noqa: E501

        :param disk_bytes: The disk_bytes of this Store.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this Store.  # noqa: E501

        Dedupe ratio of the store  # noqa: E501

        :return: The dedupe_ratio of this Store.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this Store.

        Dedupe ratio of the store  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this Store.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def num_items(self):
        """Gets the num_items of this Store.  # noqa: E501

        The number of Catalyst items associated with the store  # noqa: E501

        :return: The num_items of this Store.  # noqa: E501
        :rtype: int
        """
        return self._num_items

    @num_items.setter
    def num_items(self, num_items):
        """Sets the num_items of this Store.

        The number of Catalyst items associated with the store  # noqa: E501

        :param num_items: The num_items of this Store.  # noqa: E501
        :type: int
        """

        self._num_items = num_items

    @property
    def num_data_jobs(self):
        """Gets the num_data_jobs of this Store.  # noqa: E501

        The number of Catalyst datajobs associated with the store  # noqa: E501

        :return: The num_data_jobs of this Store.  # noqa: E501
        :rtype: int
        """
        return self._num_data_jobs

    @num_data_jobs.setter
    def num_data_jobs(self, num_data_jobs):
        """Sets the num_data_jobs of this Store.

        The number of Catalyst datajobs associated with the store  # noqa: E501

        :param num_data_jobs: The num_data_jobs of this Store.  # noqa: E501
        :type: int
        """

        self._num_data_jobs = num_data_jobs

    @property
    def num_inbound_copy_jobs(self):
        """Gets the num_inbound_copy_jobs of this Store.  # noqa: E501

        The number of inbound Catalyst copyjobs associated with the store  # noqa: E501

        :return: The num_inbound_copy_jobs of this Store.  # noqa: E501
        :rtype: int
        """
        return self._num_inbound_copy_jobs

    @num_inbound_copy_jobs.setter
    def num_inbound_copy_jobs(self, num_inbound_copy_jobs):
        """Sets the num_inbound_copy_jobs of this Store.

        The number of inbound Catalyst copyjobs associated with the store  # noqa: E501

        :param num_inbound_copy_jobs: The num_inbound_copy_jobs of this Store.  # noqa: E501
        :type: int
        """

        self._num_inbound_copy_jobs = num_inbound_copy_jobs

    @property
    def num_outbound_copy_jobs(self):
        """Gets the num_outbound_copy_jobs of this Store.  # noqa: E501

        The number of outbound Catalyst copyjobs associated with the store  # noqa: E501

        :return: The num_outbound_copy_jobs of this Store.  # noqa: E501
        :rtype: int
        """
        return self._num_outbound_copy_jobs

    @num_outbound_copy_jobs.setter
    def num_outbound_copy_jobs(self, num_outbound_copy_jobs):
        """Sets the num_outbound_copy_jobs of this Store.

        The number of outbound Catalyst copyjobs associated with the store  # noqa: E501

        :param num_outbound_copy_jobs: The num_outbound_copy_jobs of this Store.  # noqa: E501
        :type: int
        """

        self._num_outbound_copy_jobs = num_outbound_copy_jobs

    @property
    def health_level(self):
        """Gets the health_level of this Store.  # noqa: E501

        The store health  # noqa: E501

        :return: The health_level of this Store.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Store.

        The store health  # noqa: E501

        :param health_level: The health_level of this Store.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Store.  # noqa: E501

        Localised representation of the store health  # noqa: E501

        :return: The health_level_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Store.

        Localised representation of the store health  # noqa: E501

        :param health_level_string: The health_level_string of this Store.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def store_status(self):
        """Gets the store_status of this Store.  # noqa: E501

        The store status  # noqa: E501

        :return: The store_status of this Store.  # noqa: E501
        :rtype: int
        """
        return self._store_status

    @store_status.setter
    def store_status(self, store_status):
        """Sets the store_status of this Store.

        The store status  # noqa: E501

        :param store_status: The store_status of this Store.  # noqa: E501
        :type: int
        """

        self._store_status = store_status

    @property
    def store_status_string(self):
        """Gets the store_status_string of this Store.  # noqa: E501

        Localised representation of the store status  # noqa: E501

        :return: The store_status_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._store_status_string

    @store_status_string.setter
    def store_status_string(self, store_status_string):
        """Sets the store_status_string of this Store.

        Localised representation of the store status  # noqa: E501

        :param store_status_string: The store_status_string of this Store.  # noqa: E501
        :type: str
        """

        self._store_status_string = store_status_string

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this Store.  # noqa: E501

        True if the store is encrypted  # noqa: E501

        :return: The encryption_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this Store.

        True if the store is encrypted  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this Store.  # noqa: E501
        :type: bool
        """
        if encryption_enabled is None:
            raise ValueError("Invalid value for `encryption_enabled`, must not be `None`")  # noqa: E501

        self._encryption_enabled = encryption_enabled

    @property
    def secure_erase_mode_string(self):
        """Gets the secure_erase_mode_string of this Store.  # noqa: E501

        Localised representation of the store erase mode  # noqa: E501

        :return: The secure_erase_mode_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._secure_erase_mode_string

    @secure_erase_mode_string.setter
    def secure_erase_mode_string(self, secure_erase_mode_string):
        """Sets the secure_erase_mode_string of this Store.

        Localised representation of the store erase mode  # noqa: E501

        :param secure_erase_mode_string: The secure_erase_mode_string of this Store.  # noqa: E501
        :type: str
        """

        self._secure_erase_mode_string = secure_erase_mode_string

    @property
    def secure_erase_mode(self):
        """Gets the secure_erase_mode of this Store.  # noqa: E501

        The store erase mode  # noqa: E501

        :return: The secure_erase_mode of this Store.  # noqa: E501
        :rtype: int
        """
        return self._secure_erase_mode

    @secure_erase_mode.setter
    def secure_erase_mode(self, secure_erase_mode):
        """Sets the secure_erase_mode of this Store.

        The store erase mode  # noqa: E501

        :param secure_erase_mode: The secure_erase_mode of this Store.  # noqa: E501
        :type: int
        """

        self._secure_erase_mode = secure_erase_mode

    @property
    def modified_date(self):
        """Gets the modified_date of this Store.  # noqa: E501

        The date the store was last modified  # noqa: E501

        :return: The modified_date of this Store.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Store.

        The date the store was last modified  # noqa: E501

        :param modified_date: The modified_date of this Store.  # noqa: E501
        :type: datetime
        """

        self._modified_date = modified_date

    @property
    def dedupe_store_id(self):
        """Gets the dedupe_store_id of this Store.  # noqa: E501

        Unique ID for the dedupe store associated with this store  # noqa: E501

        :return: The dedupe_store_id of this Store.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_store_id

    @dedupe_store_id.setter
    def dedupe_store_id(self, dedupe_store_id):
        """Sets the dedupe_store_id of this Store.

        Unique ID for the dedupe store associated with this store  # noqa: E501

        :param dedupe_store_id: The dedupe_store_id of this Store.  # noqa: E501
        :type: int
        """

        self._dedupe_store_id = dedupe_store_id

    @property
    def security_mode(self):
        """Gets the security_mode of this Store.  # noqa: E501

        The stores security mode  # noqa: E501

        :return: The security_mode of this Store.  # noqa: E501
        :rtype: int
        """
        return self._security_mode

    @security_mode.setter
    def security_mode(self, security_mode):
        """Sets the security_mode of this Store.

        The stores security mode  # noqa: E501

        :param security_mode: The security_mode of this Store.  # noqa: E501
        :type: int
        """

        self._security_mode = security_mode

    @property
    def security_mode_string(self):
        """Gets the security_mode_string of this Store.  # noqa: E501

        The string representation of the stores security mode  # noqa: E501

        :return: The security_mode_string of this Store.  # noqa: E501
        :rtype: str
        """
        return self._security_mode_string

    @security_mode_string.setter
    def security_mode_string(self, security_mode_string):
        """Sets the security_mode_string of this Store.

        The string representation of the stores security mode  # noqa: E501

        :param security_mode_string: The security_mode_string of this Store.  # noqa: E501
        :type: str
        """

        self._security_mode_string = security_mode_string

    @property
    def data_immutability_grace_enabled(self):
        """Gets the data_immutability_grace_enabled of this Store.  # noqa: E501

        True if a grace period for data immutability has been enabled  # noqa: E501

        :return: The data_immutability_grace_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._data_immutability_grace_enabled

    @data_immutability_grace_enabled.setter
    def data_immutability_grace_enabled(self, data_immutability_grace_enabled):
        """Sets the data_immutability_grace_enabled of this Store.

        True if a grace period for data immutability has been enabled  # noqa: E501

        :param data_immutability_grace_enabled: The data_immutability_grace_enabled of this Store.  # noqa: E501
        :type: bool
        """

        self._data_immutability_grace_enabled = data_immutability_grace_enabled

    @property
    def data_immutability_grace_seconds(self):
        """Gets the data_immutability_grace_seconds of this Store.  # noqa: E501

        The minimum amount of time in seconds the backup data is immutable  # noqa: E501

        :return: The data_immutability_grace_seconds of this Store.  # noqa: E501
        :rtype: int
        """
        return self._data_immutability_grace_seconds

    @data_immutability_grace_seconds.setter
    def data_immutability_grace_seconds(self, data_immutability_grace_seconds):
        """Sets the data_immutability_grace_seconds of this Store.

        The minimum amount of time in seconds the backup data is immutable  # noqa: E501

        :param data_immutability_grace_seconds: The data_immutability_grace_seconds of this Store.  # noqa: E501
        :type: int
        """

        self._data_immutability_grace_seconds = data_immutability_grace_seconds

    @property
    def data_immutability_retention_seconds(self):
        """Gets the data_immutability_retention_seconds of this Store.  # noqa: E501

        The maximum amount of time in seconds the backup data is immutable  # noqa: E501

        :return: The data_immutability_retention_seconds of this Store.  # noqa: E501
        :rtype: int
        """
        return self._data_immutability_retention_seconds

    @data_immutability_retention_seconds.setter
    def data_immutability_retention_seconds(self, data_immutability_retention_seconds):
        """Sets the data_immutability_retention_seconds of this Store.

        The maximum amount of time in seconds the backup data is immutable  # noqa: E501

        :param data_immutability_retention_seconds: The data_immutability_retention_seconds of this Store.  # noqa: E501
        :type: int
        """

        self._data_immutability_retention_seconds = data_immutability_retention_seconds

    @property
    def data_immutability_retention_enabled(self):
        """Gets the data_immutability_retention_enabled of this Store.  # noqa: E501

        True if a retention period for data immutability has been enabled  # noqa: E501

        :return: The data_immutability_retention_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._data_immutability_retention_enabled

    @data_immutability_retention_enabled.setter
    def data_immutability_retention_enabled(self, data_immutability_retention_enabled):
        """Sets the data_immutability_retention_enabled of this Store.

        True if a retention period for data immutability has been enabled  # noqa: E501

        :param data_immutability_retention_enabled: The data_immutability_retention_enabled of this Store.  # noqa: E501
        :type: bool
        """

        self._data_immutability_retention_enabled = data_immutability_retention_enabled

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this Store.  # noqa: E501

        SSL certificate details to use for the relevant cloud provider.  # noqa: E501

        :return: The ssl_certificate of this Store.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this Store.

        SSL certificate details to use for the relevant cloud provider.  # noqa: E501

        :param ssl_certificate: The ssl_certificate of this Store.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def cloud_store_enabled(self):
        """Gets the cloud_store_enabled of this Store.  # noqa: E501

        Flag telling whether it's a cloud store  # noqa: E501

        :return: The cloud_store_enabled of this Store.  # noqa: E501
        :rtype: bool
        """
        return self._cloud_store_enabled

    @cloud_store_enabled.setter
    def cloud_store_enabled(self, cloud_store_enabled):
        """Sets the cloud_store_enabled of this Store.

        Flag telling whether it's a cloud store  # noqa: E501

        :param cloud_store_enabled: The cloud_store_enabled of this Store.  # noqa: E501
        :type: bool
        """

        self._cloud_store_enabled = cloud_store_enabled

    @property
    def cloud_store_details(self):
        """Gets the cloud_store_details of this Store.  # noqa: E501

        Details of the attached cloud store  # noqa: E501

        :return: The cloud_store_details of this Store.  # noqa: E501
        :rtype: CloudStore
        """
        return self._cloud_store_details

    @cloud_store_details.setter
    def cloud_store_details(self, cloud_store_details):
        """Sets the cloud_store_details of this Store.

        Details of the attached cloud store  # noqa: E501

        :param cloud_store_details: The cloud_store_details of this Store.  # noqa: E501
        :type: CloudStore
        """

        self._cloud_store_details = cloud_store_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Store, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Store):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
