# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreDatajob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'job_status': 'int',
        'job_status_string': 'str',
        'job_status_info': 'int',
        'job_status_info_string': 'str',
        'job_status_code': 'int',
        'job_duration_seconds': 'int',
        'written_user_bytes': 'int',
        'written_disk_bytes': 'int',
        'write_duration_seconds': 'int',
        'write_logical_throughput': 'int',
        'write_transferred_bytes': 'int',
        'write_network_throughput': 'int',
        'percentage_write_bandwidth_saving': 'float',
        'write_dedupe_ratio': 'float',
        'read_user_bytes': 'int',
        'read_disk_bytes': 'int',
        'read_duration_seconds': 'int',
        'read_logical_throughput': 'int',
        'read_transferred_bytes': 'int',
        'read_network_throughput': 'int',
        'percentage_read_bandwidth_saving': 'float',
        'read_dedupe_ratio': 'float',
        'clone_duration_seconds': 'int',
        'clone_throughput': 'int',
        'cloned_user_bytes': 'int',
        'client_ip_address': 'str',
        'client_id': 'str',
        'application_id': 'str',
        'job_reference': 'str',
        'started_date': 'datetime',
        'ended_date': 'datetime',
        'item_user_bytes': 'int',
        'transport_protocol': 'int',
        'transport_protocol_string': 'str',
        'percentage_total_bandwidth_saving': 'float',
        'total_network_throughput': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'job_status': 'jobStatus',
        'job_status_string': 'jobStatusString',
        'job_status_info': 'jobStatusInfo',
        'job_status_info_string': 'jobStatusInfoString',
        'job_status_code': 'jobStatusCode',
        'job_duration_seconds': 'jobDurationSeconds',
        'written_user_bytes': 'writtenUserBytes',
        'written_disk_bytes': 'writtenDiskBytes',
        'write_duration_seconds': 'writeDurationSeconds',
        'write_logical_throughput': 'writeLogicalThroughput',
        'write_transferred_bytes': 'writeTransferredBytes',
        'write_network_throughput': 'writeNetworkThroughput',
        'percentage_write_bandwidth_saving': 'percentageWriteBandwidthSaving',
        'write_dedupe_ratio': 'writeDedupeRatio',
        'read_user_bytes': 'readUserBytes',
        'read_disk_bytes': 'readDiskBytes',
        'read_duration_seconds': 'readDurationSeconds',
        'read_logical_throughput': 'readLogicalThroughput',
        'read_transferred_bytes': 'readTransferredBytes',
        'read_network_throughput': 'readNetworkThroughput',
        'percentage_read_bandwidth_saving': 'percentageReadBandwidthSaving',
        'read_dedupe_ratio': 'readDedupeRatio',
        'clone_duration_seconds': 'cloneDurationSeconds',
        'clone_throughput': 'cloneThroughput',
        'cloned_user_bytes': 'clonedUserBytes',
        'client_ip_address': 'clientIpAddress',
        'client_id': 'clientId',
        'application_id': 'applicationId',
        'job_reference': 'jobReference',
        'started_date': 'startedDate',
        'ended_date': 'endedDate',
        'item_user_bytes': 'itemUserBytes',
        'transport_protocol': 'transportProtocol',
        'transport_protocol_string': 'transportProtocolString',
        'percentage_total_bandwidth_saving': 'percentageTotalBandwidthSaving',
        'total_network_throughput': 'totalNetworkThroughput'
    }

    def __init__(self, id=None, name=None, job_status=None, job_status_string=None, job_status_info=None, job_status_info_string=None, job_status_code=None, job_duration_seconds=None, written_user_bytes=None, written_disk_bytes=None, write_duration_seconds=None, write_logical_throughput=None, write_transferred_bytes=None, write_network_throughput=None, percentage_write_bandwidth_saving=None, write_dedupe_ratio=None, read_user_bytes=None, read_disk_bytes=None, read_duration_seconds=None, read_logical_throughput=None, read_transferred_bytes=None, read_network_throughput=None, percentage_read_bandwidth_saving=None, read_dedupe_ratio=None, clone_duration_seconds=None, clone_throughput=None, cloned_user_bytes=None, client_ip_address=None, client_id=None, application_id=None, job_reference=None, started_date=None, ended_date=None, item_user_bytes=None, transport_protocol=None, transport_protocol_string=None, percentage_total_bandwidth_saving=None, total_network_throughput=None):  # noqa: E501
        """StoreDatajob - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._job_status = None
        self._job_status_string = None
        self._job_status_info = None
        self._job_status_info_string = None
        self._job_status_code = None
        self._job_duration_seconds = None
        self._written_user_bytes = None
        self._written_disk_bytes = None
        self._write_duration_seconds = None
        self._write_logical_throughput = None
        self._write_transferred_bytes = None
        self._write_network_throughput = None
        self._percentage_write_bandwidth_saving = None
        self._write_dedupe_ratio = None
        self._read_user_bytes = None
        self._read_disk_bytes = None
        self._read_duration_seconds = None
        self._read_logical_throughput = None
        self._read_transferred_bytes = None
        self._read_network_throughput = None
        self._percentage_read_bandwidth_saving = None
        self._read_dedupe_ratio = None
        self._clone_duration_seconds = None
        self._clone_throughput = None
        self._cloned_user_bytes = None
        self._client_ip_address = None
        self._client_id = None
        self._application_id = None
        self._job_reference = None
        self._started_date = None
        self._ended_date = None
        self._item_user_bytes = None
        self._transport_protocol = None
        self._transport_protocol_string = None
        self._percentage_total_bandwidth_saving = None
        self._total_network_throughput = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if job_status is not None:
            self.job_status = job_status
        if job_status_string is not None:
            self.job_status_string = job_status_string
        if job_status_info is not None:
            self.job_status_info = job_status_info
        if job_status_info_string is not None:
            self.job_status_info_string = job_status_info_string
        if job_status_code is not None:
            self.job_status_code = job_status_code
        if job_duration_seconds is not None:
            self.job_duration_seconds = job_duration_seconds
        if written_user_bytes is not None:
            self.written_user_bytes = written_user_bytes
        if written_disk_bytes is not None:
            self.written_disk_bytes = written_disk_bytes
        if write_duration_seconds is not None:
            self.write_duration_seconds = write_duration_seconds
        if write_logical_throughput is not None:
            self.write_logical_throughput = write_logical_throughput
        if write_transferred_bytes is not None:
            self.write_transferred_bytes = write_transferred_bytes
        if write_network_throughput is not None:
            self.write_network_throughput = write_network_throughput
        if percentage_write_bandwidth_saving is not None:
            self.percentage_write_bandwidth_saving = percentage_write_bandwidth_saving
        if write_dedupe_ratio is not None:
            self.write_dedupe_ratio = write_dedupe_ratio
        if read_user_bytes is not None:
            self.read_user_bytes = read_user_bytes
        if read_disk_bytes is not None:
            self.read_disk_bytes = read_disk_bytes
        if read_duration_seconds is not None:
            self.read_duration_seconds = read_duration_seconds
        if read_logical_throughput is not None:
            self.read_logical_throughput = read_logical_throughput
        if read_transferred_bytes is not None:
            self.read_transferred_bytes = read_transferred_bytes
        if read_network_throughput is not None:
            self.read_network_throughput = read_network_throughput
        if percentage_read_bandwidth_saving is not None:
            self.percentage_read_bandwidth_saving = percentage_read_bandwidth_saving
        if read_dedupe_ratio is not None:
            self.read_dedupe_ratio = read_dedupe_ratio
        if clone_duration_seconds is not None:
            self.clone_duration_seconds = clone_duration_seconds
        if clone_throughput is not None:
            self.clone_throughput = clone_throughput
        if cloned_user_bytes is not None:
            self.cloned_user_bytes = cloned_user_bytes
        if client_ip_address is not None:
            self.client_ip_address = client_ip_address
        if client_id is not None:
            self.client_id = client_id
        if application_id is not None:
            self.application_id = application_id
        if job_reference is not None:
            self.job_reference = job_reference
        if started_date is not None:
            self.started_date = started_date
        if ended_date is not None:
            self.ended_date = ended_date
        if item_user_bytes is not None:
            self.item_user_bytes = item_user_bytes
        if transport_protocol is not None:
            self.transport_protocol = transport_protocol
        if transport_protocol_string is not None:
            self.transport_protocol_string = transport_protocol_string
        if percentage_total_bandwidth_saving is not None:
            self.percentage_total_bandwidth_saving = percentage_total_bandwidth_saving
        if total_network_throughput is not None:
            self.total_network_throughput = total_network_throughput

    @property
    def id(self):
        """Gets the id of this StoreDatajob.  # noqa: E501

        ID for this datajob  # noqa: E501

        :return: The id of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreDatajob.

        ID for this datajob  # noqa: E501

        :param id: The id of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StoreDatajob.  # noqa: E501

        The name of the Catalyst item being accessed  # noqa: E501

        :return: The name of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreDatajob.

        The name of the Catalyst item being accessed  # noqa: E501

        :param name: The name of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def job_status(self):
        """Gets the job_status of this StoreDatajob.  # noqa: E501

        Basic status of the datajob  # noqa: E501

        :return: The job_status of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this StoreDatajob.

        Basic status of the datajob  # noqa: E501

        :param job_status: The job_status of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._job_status = job_status

    @property
    def job_status_string(self):
        """Gets the job_status_string of this StoreDatajob.  # noqa: E501

        Localised representation of the basic status of the datajob  # noqa: E501

        :return: The job_status_string of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._job_status_string

    @job_status_string.setter
    def job_status_string(self, job_status_string):
        """Sets the job_status_string of this StoreDatajob.

        Localised representation of the basic status of the datajob  # noqa: E501

        :param job_status_string: The job_status_string of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._job_status_string = job_status_string

    @property
    def job_status_info(self):
        """Gets the job_status_info of this StoreDatajob.  # noqa: E501

        Further status information associated with this datajob  # noqa: E501

        :return: The job_status_info of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._job_status_info

    @job_status_info.setter
    def job_status_info(self, job_status_info):
        """Sets the job_status_info of this StoreDatajob.

        Further status information associated with this datajob  # noqa: E501

        :param job_status_info: The job_status_info of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._job_status_info = job_status_info

    @property
    def job_status_info_string(self):
        """Gets the job_status_info_string of this StoreDatajob.  # noqa: E501

        Localised string representation of the further status information associated with this datajob  # noqa: E501

        :return: The job_status_info_string of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._job_status_info_string

    @job_status_info_string.setter
    def job_status_info_string(self, job_status_info_string):
        """Sets the job_status_info_string of this StoreDatajob.

        Localised string representation of the further status information associated with this datajob  # noqa: E501

        :param job_status_info_string: The job_status_info_string of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._job_status_info_string = job_status_info_string

    @property
    def job_status_code(self):
        """Gets the job_status_code of this StoreDatajob.  # noqa: E501

        The status code of the completed datajob. Provides a more detailed reason why the job has failed  # noqa: E501

        :return: The job_status_code of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._job_status_code

    @job_status_code.setter
    def job_status_code(self, job_status_code):
        """Sets the job_status_code of this StoreDatajob.

        The status code of the completed datajob. Provides a more detailed reason why the job has failed  # noqa: E501

        :param job_status_code: The job_status_code of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._job_status_code = job_status_code

    @property
    def job_duration_seconds(self):
        """Gets the job_duration_seconds of this StoreDatajob.  # noqa: E501

        The duration of the data session  # noqa: E501

        :return: The job_duration_seconds of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._job_duration_seconds

    @job_duration_seconds.setter
    def job_duration_seconds(self, job_duration_seconds):
        """Sets the job_duration_seconds of this StoreDatajob.

        The duration of the data session  # noqa: E501

        :param job_duration_seconds: The job_duration_seconds of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._job_duration_seconds = job_duration_seconds

    @property
    def written_user_bytes(self):
        """Gets the written_user_bytes of this StoreDatajob.  # noqa: E501

        The size of the data written for this datajob  # noqa: E501

        :return: The written_user_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._written_user_bytes

    @written_user_bytes.setter
    def written_user_bytes(self, written_user_bytes):
        """Sets the written_user_bytes of this StoreDatajob.

        The size of the data written for this datajob  # noqa: E501

        :param written_user_bytes: The written_user_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._written_user_bytes = written_user_bytes

    @property
    def written_disk_bytes(self):
        """Gets the written_disk_bytes of this StoreDatajob.  # noqa: E501

        The size of the data written to disk for this datajob  # noqa: E501

        :return: The written_disk_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._written_disk_bytes

    @written_disk_bytes.setter
    def written_disk_bytes(self, written_disk_bytes):
        """Sets the written_disk_bytes of this StoreDatajob.

        The size of the data written to disk for this datajob  # noqa: E501

        :param written_disk_bytes: The written_disk_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._written_disk_bytes = written_disk_bytes

    @property
    def write_duration_seconds(self):
        """Gets the write_duration_seconds of this StoreDatajob.  # noqa: E501

        The duration of the write operation for this datajob  # noqa: E501

        :return: The write_duration_seconds of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._write_duration_seconds

    @write_duration_seconds.setter
    def write_duration_seconds(self, write_duration_seconds):
        """Sets the write_duration_seconds of this StoreDatajob.

        The duration of the write operation for this datajob  # noqa: E501

        :param write_duration_seconds: The write_duration_seconds of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._write_duration_seconds = write_duration_seconds

    @property
    def write_logical_throughput(self):
        """Gets the write_logical_throughput of this StoreDatajob.  # noqa: E501

        The write logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :return: The write_logical_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._write_logical_throughput

    @write_logical_throughput.setter
    def write_logical_throughput(self, write_logical_throughput):
        """Sets the write_logical_throughput of this StoreDatajob.

        The write logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :param write_logical_throughput: The write_logical_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._write_logical_throughput = write_logical_throughput

    @property
    def write_transferred_bytes(self):
        """Gets the write_transferred_bytes of this StoreDatajob.  # noqa: E501

        The size of the write data transferred for this datajob  # noqa: E501

        :return: The write_transferred_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._write_transferred_bytes

    @write_transferred_bytes.setter
    def write_transferred_bytes(self, write_transferred_bytes):
        """Sets the write_transferred_bytes of this StoreDatajob.

        The size of the write data transferred for this datajob  # noqa: E501

        :param write_transferred_bytes: The write_transferred_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._write_transferred_bytes = write_transferred_bytes

    @property
    def write_network_throughput(self):
        """Gets the write_network_throughput of this StoreDatajob.  # noqa: E501

        The write bandwidth utilization of this datajob in (in bytes/sec)  # noqa: E501

        :return: The write_network_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._write_network_throughput

    @write_network_throughput.setter
    def write_network_throughput(self, write_network_throughput):
        """Sets the write_network_throughput of this StoreDatajob.

        The write bandwidth utilization of this datajob in (in bytes/sec)  # noqa: E501

        :param write_network_throughput: The write_network_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._write_network_throughput = write_network_throughput

    @property
    def percentage_write_bandwidth_saving(self):
        """Gets the percentage_write_bandwidth_saving of this StoreDatajob.  # noqa: E501

        The bandwidth saving of the write data  # noqa: E501

        :return: The percentage_write_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :rtype: float
        """
        return self._percentage_write_bandwidth_saving

    @percentage_write_bandwidth_saving.setter
    def percentage_write_bandwidth_saving(self, percentage_write_bandwidth_saving):
        """Sets the percentage_write_bandwidth_saving of this StoreDatajob.

        The bandwidth saving of the write data  # noqa: E501

        :param percentage_write_bandwidth_saving: The percentage_write_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :type: float
        """

        self._percentage_write_bandwidth_saving = percentage_write_bandwidth_saving

    @property
    def write_dedupe_ratio(self):
        """Gets the write_dedupe_ratio of this StoreDatajob.  # noqa: E501

        The dedupe ratio of the write data  # noqa: E501

        :return: The write_dedupe_ratio of this StoreDatajob.  # noqa: E501
        :rtype: float
        """
        return self._write_dedupe_ratio

    @write_dedupe_ratio.setter
    def write_dedupe_ratio(self, write_dedupe_ratio):
        """Sets the write_dedupe_ratio of this StoreDatajob.

        The dedupe ratio of the write data  # noqa: E501

        :param write_dedupe_ratio: The write_dedupe_ratio of this StoreDatajob.  # noqa: E501
        :type: float
        """

        self._write_dedupe_ratio = write_dedupe_ratio

    @property
    def read_user_bytes(self):
        """Gets the read_user_bytes of this StoreDatajob.  # noqa: E501

        The data read for this datajob  # noqa: E501

        :return: The read_user_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_user_bytes

    @read_user_bytes.setter
    def read_user_bytes(self, read_user_bytes):
        """Sets the read_user_bytes of this StoreDatajob.

        The data read for this datajob  # noqa: E501

        :param read_user_bytes: The read_user_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_user_bytes = read_user_bytes

    @property
    def read_disk_bytes(self):
        """Gets the read_disk_bytes of this StoreDatajob.  # noqa: E501

        The size of the data read from disk for this datajob  # noqa: E501

        :return: The read_disk_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_disk_bytes

    @read_disk_bytes.setter
    def read_disk_bytes(self, read_disk_bytes):
        """Sets the read_disk_bytes of this StoreDatajob.

        The size of the data read from disk for this datajob  # noqa: E501

        :param read_disk_bytes: The read_disk_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_disk_bytes = read_disk_bytes

    @property
    def read_duration_seconds(self):
        """Gets the read_duration_seconds of this StoreDatajob.  # noqa: E501

        The duration of the data read for this datajob  # noqa: E501

        :return: The read_duration_seconds of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_duration_seconds

    @read_duration_seconds.setter
    def read_duration_seconds(self, read_duration_seconds):
        """Sets the read_duration_seconds of this StoreDatajob.

        The duration of the data read for this datajob  # noqa: E501

        :param read_duration_seconds: The read_duration_seconds of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_duration_seconds = read_duration_seconds

    @property
    def read_logical_throughput(self):
        """Gets the read_logical_throughput of this StoreDatajob.  # noqa: E501

        The read logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :return: The read_logical_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_logical_throughput

    @read_logical_throughput.setter
    def read_logical_throughput(self, read_logical_throughput):
        """Sets the read_logical_throughput of this StoreDatajob.

        The read logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :param read_logical_throughput: The read_logical_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_logical_throughput = read_logical_throughput

    @property
    def read_transferred_bytes(self):
        """Gets the read_transferred_bytes of this StoreDatajob.  # noqa: E501

        The size of the read data transferred for this datajob  # noqa: E501

        :return: The read_transferred_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_transferred_bytes

    @read_transferred_bytes.setter
    def read_transferred_bytes(self, read_transferred_bytes):
        """Sets the read_transferred_bytes of this StoreDatajob.

        The size of the read data transferred for this datajob  # noqa: E501

        :param read_transferred_bytes: The read_transferred_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_transferred_bytes = read_transferred_bytes

    @property
    def read_network_throughput(self):
        """Gets the read_network_throughput of this StoreDatajob.  # noqa: E501

        The read bandwidth utilization of this datajob (in bytes/sec)  # noqa: E501

        :return: The read_network_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._read_network_throughput

    @read_network_throughput.setter
    def read_network_throughput(self, read_network_throughput):
        """Sets the read_network_throughput of this StoreDatajob.

        The read bandwidth utilization of this datajob (in bytes/sec)  # noqa: E501

        :param read_network_throughput: The read_network_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._read_network_throughput = read_network_throughput

    @property
    def percentage_read_bandwidth_saving(self):
        """Gets the percentage_read_bandwidth_saving of this StoreDatajob.  # noqa: E501

        The bandwidth saving of the read data  # noqa: E501

        :return: The percentage_read_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :rtype: float
        """
        return self._percentage_read_bandwidth_saving

    @percentage_read_bandwidth_saving.setter
    def percentage_read_bandwidth_saving(self, percentage_read_bandwidth_saving):
        """Sets the percentage_read_bandwidth_saving of this StoreDatajob.

        The bandwidth saving of the read data  # noqa: E501

        :param percentage_read_bandwidth_saving: The percentage_read_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :type: float
        """

        self._percentage_read_bandwidth_saving = percentage_read_bandwidth_saving

    @property
    def read_dedupe_ratio(self):
        """Gets the read_dedupe_ratio of this StoreDatajob.  # noqa: E501

        The dedupe ratio of the read data  # noqa: E501

        :return: The read_dedupe_ratio of this StoreDatajob.  # noqa: E501
        :rtype: float
        """
        return self._read_dedupe_ratio

    @read_dedupe_ratio.setter
    def read_dedupe_ratio(self, read_dedupe_ratio):
        """Sets the read_dedupe_ratio of this StoreDatajob.

        The dedupe ratio of the read data  # noqa: E501

        :param read_dedupe_ratio: The read_dedupe_ratio of this StoreDatajob.  # noqa: E501
        :type: float
        """

        self._read_dedupe_ratio = read_dedupe_ratio

    @property
    def clone_duration_seconds(self):
        """Gets the clone_duration_seconds of this StoreDatajob.  # noqa: E501

        The duration of the data clone for this datajob  # noqa: E501

        :return: The clone_duration_seconds of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._clone_duration_seconds

    @clone_duration_seconds.setter
    def clone_duration_seconds(self, clone_duration_seconds):
        """Sets the clone_duration_seconds of this StoreDatajob.

        The duration of the data clone for this datajob  # noqa: E501

        :param clone_duration_seconds: The clone_duration_seconds of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._clone_duration_seconds = clone_duration_seconds

    @property
    def clone_throughput(self):
        """Gets the clone_throughput of this StoreDatajob.  # noqa: E501

        The clone throughput (in bytes/sec) of this datajob  # noqa: E501

        :return: The clone_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._clone_throughput

    @clone_throughput.setter
    def clone_throughput(self, clone_throughput):
        """Sets the clone_throughput of this StoreDatajob.

        The clone throughput (in bytes/sec) of this datajob  # noqa: E501

        :param clone_throughput: The clone_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._clone_throughput = clone_throughput

    @property
    def cloned_user_bytes(self):
        """Gets the cloned_user_bytes of this StoreDatajob.  # noqa: E501

        The size of the clone data written for this datajob  # noqa: E501

        :return: The cloned_user_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._cloned_user_bytes

    @cloned_user_bytes.setter
    def cloned_user_bytes(self, cloned_user_bytes):
        """Sets the cloned_user_bytes of this StoreDatajob.

        The size of the clone data written for this datajob  # noqa: E501

        :param cloned_user_bytes: The cloned_user_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._cloned_user_bytes = cloned_user_bytes

    @property
    def client_ip_address(self):
        """Gets the client_ip_address of this StoreDatajob.  # noqa: E501

        The IP address of the client that created this datajob  # noqa: E501

        :return: The client_ip_address of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address):
        """Sets the client_ip_address of this StoreDatajob.

        The IP address of the client that created this datajob  # noqa: E501

        :param client_ip_address: The client_ip_address of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._client_ip_address = client_ip_address

    @property
    def client_id(self):
        """Gets the client_id of this StoreDatajob.  # noqa: E501

        The client that created this datajob  # noqa: E501

        :return: The client_id of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this StoreDatajob.

        The client that created this datajob  # noqa: E501

        :param client_id: The client_id of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def application_id(self):
        """Gets the application_id of this StoreDatajob.  # noqa: E501

        The application that was used to create this datajob  # noqa: E501

        :return: The application_id of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StoreDatajob.

        The application that was used to create this datajob  # noqa: E501

        :param application_id: The application_id of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def job_reference(self):
        """Gets the job_reference of this StoreDatajob.  # noqa: E501

        An optional internal job reference from the backup application  # noqa: E501

        :return: The job_reference of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._job_reference

    @job_reference.setter
    def job_reference(self, job_reference):
        """Sets the job_reference of this StoreDatajob.

        An optional internal job reference from the backup application  # noqa: E501

        :param job_reference: The job_reference of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._job_reference = job_reference

    @property
    def started_date(self):
        """Gets the started_date of this StoreDatajob.  # noqa: E501

        The date that this datajob was started  # noqa: E501

        :return: The started_date of this StoreDatajob.  # noqa: E501
        :rtype: datetime
        """
        return self._started_date

    @started_date.setter
    def started_date(self, started_date):
        """Sets the started_date of this StoreDatajob.

        The date that this datajob was started  # noqa: E501

        :param started_date: The started_date of this StoreDatajob.  # noqa: E501
        :type: datetime
        """

        self._started_date = started_date

    @property
    def ended_date(self):
        """Gets the ended_date of this StoreDatajob.  # noqa: E501

        The date that this datajob ended if applicable  # noqa: E501

        :return: The ended_date of this StoreDatajob.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_date

    @ended_date.setter
    def ended_date(self, ended_date):
        """Sets the ended_date of this StoreDatajob.

        The date that this datajob ended if applicable  # noqa: E501

        :param ended_date: The ended_date of this StoreDatajob.  # noqa: E501
        :type: datetime
        """

        self._ended_date = ended_date

    @property
    def item_user_bytes(self):
        """Gets the item_user_bytes of this StoreDatajob.  # noqa: E501

        The size of the Item, including any sparse regions  # noqa: E501

        :return: The item_user_bytes of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._item_user_bytes

    @item_user_bytes.setter
    def item_user_bytes(self, item_user_bytes):
        """Sets the item_user_bytes of this StoreDatajob.

        The size of the Item, including any sparse regions  # noqa: E501

        :param item_user_bytes: The item_user_bytes of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._item_user_bytes = item_user_bytes

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this StoreDatajob.  # noqa: E501

        The jobs transport protocol  # noqa: E501

        :return: The transport_protocol of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this StoreDatajob.

        The jobs transport protocol  # noqa: E501

        :param transport_protocol: The transport_protocol of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._transport_protocol = transport_protocol

    @property
    def transport_protocol_string(self):
        """Gets the transport_protocol_string of this StoreDatajob.  # noqa: E501

        Localised representation of the transport protocol  # noqa: E501

        :return: The transport_protocol_string of this StoreDatajob.  # noqa: E501
        :rtype: str
        """
        return self._transport_protocol_string

    @transport_protocol_string.setter
    def transport_protocol_string(self, transport_protocol_string):
        """Sets the transport_protocol_string of this StoreDatajob.

        Localised representation of the transport protocol  # noqa: E501

        :param transport_protocol_string: The transport_protocol_string of this StoreDatajob.  # noqa: E501
        :type: str
        """

        self._transport_protocol_string = transport_protocol_string

    @property
    def percentage_total_bandwidth_saving(self):
        """Gets the percentage_total_bandwidth_saving of this StoreDatajob.  # noqa: E501

        The total bandwidth saving of the read and write data  # noqa: E501

        :return: The percentage_total_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :rtype: float
        """
        return self._percentage_total_bandwidth_saving

    @percentage_total_bandwidth_saving.setter
    def percentage_total_bandwidth_saving(self, percentage_total_bandwidth_saving):
        """Sets the percentage_total_bandwidth_saving of this StoreDatajob.

        The total bandwidth saving of the read and write data  # noqa: E501

        :param percentage_total_bandwidth_saving: The percentage_total_bandwidth_saving of this StoreDatajob.  # noqa: E501
        :type: float
        """

        self._percentage_total_bandwidth_saving = percentage_total_bandwidth_saving

    @property
    def total_network_throughput(self):
        """Gets the total_network_throughput of this StoreDatajob.  # noqa: E501

        The total logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :return: The total_network_throughput of this StoreDatajob.  # noqa: E501
        :rtype: int
        """
        return self._total_network_throughput

    @total_network_throughput.setter
    def total_network_throughput(self, total_network_throughput):
        """Sets the total_network_throughput of this StoreDatajob.

        The total logical throughput (in bytes/sec) of this datajob  # noqa: E501

        :param total_network_throughput: The total_network_throughput of this StoreDatajob.  # noqa: E501
        :type: int
        """

        self._total_network_throughput = total_network_throughput

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreDatajob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreDatajob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
