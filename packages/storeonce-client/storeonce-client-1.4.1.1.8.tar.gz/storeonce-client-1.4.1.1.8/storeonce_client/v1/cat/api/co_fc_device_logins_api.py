# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class CoFCDeviceLoginsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cofc_device_login(self, device, login, **kwargs):  # noqa: E501
        """Get CoFC Device Login Details  # noqa: E501

        Returns details of a host device connected to the CoFC device, based on login number and device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cofc_device_login(device, login, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str device: ID of the CoFC device (required)
        :param str login: Login ID of the CoFC device (required)
        :return: CofcDeviceLogin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_cofc_device_login_with_http_info(device, login, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cofc_device_login_with_http_info(device, login, **kwargs)  # noqa: E501
            return data

    def get_cofc_device_login_with_http_info(self, device, login, **kwargs):  # noqa: E501
        """Get CoFC Device Login Details  # noqa: E501

        Returns details of a host device connected to the CoFC device, based on login number and device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_cofc_device_login_with_http_info(device, login, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str device: ID of the CoFC device (required)
        :param str login: Login ID of the CoFC device (required)
        :return: CofcDeviceLogin
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'login']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cofc_device_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `get_cofc_device_login`")  # noqa: E501
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `get_cofc_device_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501
        if 'login' in params:
            path_params['login'] = params['login']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cat/cofc-device-logins/device/{device}/login/{login}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CofcDeviceLogin',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cofc_device_logins(self, device, **kwargs):  # noqa: E501
        """Get All CoFC Device Login Details  # noqa: E501

        Returns details of host devices connected to the CoFC device specified by device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cofc_device_logins(device, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str device: ID of the CoFC device (required)
        :return: CoFCDeviceLoginCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_cofc_device_logins_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cofc_device_logins_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def get_cofc_device_logins_with_http_info(self, device, **kwargs):  # noqa: E501
        """Get All CoFC Device Login Details  # noqa: E501

        Returns details of host devices connected to the CoFC device specified by device ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_cofc_device_logins_with_http_info(device, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str device: ID of the CoFC device (required)
        :return: CoFCDeviceLoginCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cofc_device_logins" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `get_cofc_device_logins`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cat/cofc-device-logins/device/{device}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoFCDeviceLoginCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
