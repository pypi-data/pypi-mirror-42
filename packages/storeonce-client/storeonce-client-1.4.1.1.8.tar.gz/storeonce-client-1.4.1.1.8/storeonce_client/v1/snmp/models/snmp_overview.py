# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SNMP

    unused  # noqa: E501

    Component version: 2.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SnmpOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_state': 'str',
        'agent_state_string': 'str',
        'num_trapsinks': 'int',
        'num_trapsinks_info': 'int',
        'num_trapsinks_warn': 'int',
        'num_trapsinks_alert': 'int',
        'num_users': 'int',
        'num_users_no_auth_no_priv': 'int',
        'num_users_auth_no_priv': 'int',
        'num_users_auth_priv': 'int'
    }

    attribute_map = {
        'agent_state': 'agentState',
        'agent_state_string': 'agentStateString',
        'num_trapsinks': 'numTrapsinks',
        'num_trapsinks_info': 'numTrapsinksInfo',
        'num_trapsinks_warn': 'numTrapsinksWarn',
        'num_trapsinks_alert': 'numTrapsinksAlert',
        'num_users': 'numUsers',
        'num_users_no_auth_no_priv': 'numUsersNoAuthNoPriv',
        'num_users_auth_no_priv': 'numUsersAuthNoPriv',
        'num_users_auth_priv': 'numUsersAuthPriv'
    }

    def __init__(self, agent_state=None, agent_state_string=None, num_trapsinks=None, num_trapsinks_info=None, num_trapsinks_warn=None, num_trapsinks_alert=None, num_users=None, num_users_no_auth_no_priv=None, num_users_auth_no_priv=None, num_users_auth_priv=None):  # noqa: E501
        """SnmpOverview - a model defined in Swagger"""  # noqa: E501

        self._agent_state = None
        self._agent_state_string = None
        self._num_trapsinks = None
        self._num_trapsinks_info = None
        self._num_trapsinks_warn = None
        self._num_trapsinks_alert = None
        self._num_users = None
        self._num_users_no_auth_no_priv = None
        self._num_users_auth_no_priv = None
        self._num_users_auth_priv = None
        self.discriminator = None

        self.agent_state = agent_state
        if agent_state_string is not None:
            self.agent_state_string = agent_state_string
        self.num_trapsinks = num_trapsinks
        self.num_trapsinks_info = num_trapsinks_info
        self.num_trapsinks_warn = num_trapsinks_warn
        self.num_trapsinks_alert = num_trapsinks_alert
        self.num_users = num_users
        self.num_users_no_auth_no_priv = num_users_no_auth_no_priv
        self.num_users_auth_no_priv = num_users_auth_no_priv
        self.num_users_auth_priv = num_users_auth_priv

    @property
    def agent_state(self):
        """Gets the agent_state of this SnmpOverview.  # noqa: E501

        The state of the SNMP agent  # noqa: E501

        :return: The agent_state of this SnmpOverview.  # noqa: E501
        :rtype: str
        """
        return self._agent_state

    @agent_state.setter
    def agent_state(self, agent_state):
        """Sets the agent_state of this SnmpOverview.

        The state of the SNMP agent  # noqa: E501

        :param agent_state: The agent_state of this SnmpOverview.  # noqa: E501
        :type: str
        """
        if agent_state is None:
            raise ValueError("Invalid value for `agent_state`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if agent_state not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_state` ({0}), must be one of {1}"  # noqa: E501
                .format(agent_state, allowed_values)
            )

        self._agent_state = agent_state

    @property
    def agent_state_string(self):
        """Gets the agent_state_string of this SnmpOverview.  # noqa: E501

        The localized String representation of the Agent state  # noqa: E501

        :return: The agent_state_string of this SnmpOverview.  # noqa: E501
        :rtype: str
        """
        return self._agent_state_string

    @agent_state_string.setter
    def agent_state_string(self, agent_state_string):
        """Sets the agent_state_string of this SnmpOverview.

        The localized String representation of the Agent state  # noqa: E501

        :param agent_state_string: The agent_state_string of this SnmpOverview.  # noqa: E501
        :type: str
        """

        self._agent_state_string = agent_state_string

    @property
    def num_trapsinks(self):
        """Gets the num_trapsinks of this SnmpOverview.  # noqa: E501

        Total number of trapsinks  # noqa: E501

        :return: The num_trapsinks of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_trapsinks

    @num_trapsinks.setter
    def num_trapsinks(self, num_trapsinks):
        """Sets the num_trapsinks of this SnmpOverview.

        Total number of trapsinks  # noqa: E501

        :param num_trapsinks: The num_trapsinks of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_trapsinks is None:
            raise ValueError("Invalid value for `num_trapsinks`, must not be `None`")  # noqa: E501

        self._num_trapsinks = num_trapsinks

    @property
    def num_trapsinks_info(self):
        """Gets the num_trapsinks_info of this SnmpOverview.  # noqa: E501

        Total number of INFO trapsinks  # noqa: E501

        :return: The num_trapsinks_info of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_trapsinks_info

    @num_trapsinks_info.setter
    def num_trapsinks_info(self, num_trapsinks_info):
        """Sets the num_trapsinks_info of this SnmpOverview.

        Total number of INFO trapsinks  # noqa: E501

        :param num_trapsinks_info: The num_trapsinks_info of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_trapsinks_info is None:
            raise ValueError("Invalid value for `num_trapsinks_info`, must not be `None`")  # noqa: E501

        self._num_trapsinks_info = num_trapsinks_info

    @property
    def num_trapsinks_warn(self):
        """Gets the num_trapsinks_warn of this SnmpOverview.  # noqa: E501

        Total number of WARN trapsinks  # noqa: E501

        :return: The num_trapsinks_warn of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_trapsinks_warn

    @num_trapsinks_warn.setter
    def num_trapsinks_warn(self, num_trapsinks_warn):
        """Sets the num_trapsinks_warn of this SnmpOverview.

        Total number of WARN trapsinks  # noqa: E501

        :param num_trapsinks_warn: The num_trapsinks_warn of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_trapsinks_warn is None:
            raise ValueError("Invalid value for `num_trapsinks_warn`, must not be `None`")  # noqa: E501

        self._num_trapsinks_warn = num_trapsinks_warn

    @property
    def num_trapsinks_alert(self):
        """Gets the num_trapsinks_alert of this SnmpOverview.  # noqa: E501

        Total number of ALERT trapsinks  # noqa: E501

        :return: The num_trapsinks_alert of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_trapsinks_alert

    @num_trapsinks_alert.setter
    def num_trapsinks_alert(self, num_trapsinks_alert):
        """Sets the num_trapsinks_alert of this SnmpOverview.

        Total number of ALERT trapsinks  # noqa: E501

        :param num_trapsinks_alert: The num_trapsinks_alert of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_trapsinks_alert is None:
            raise ValueError("Invalid value for `num_trapsinks_alert`, must not be `None`")  # noqa: E501

        self._num_trapsinks_alert = num_trapsinks_alert

    @property
    def num_users(self):
        """Gets the num_users of this SnmpOverview.  # noqa: E501

        Total number of users  # noqa: E501

        :return: The num_users of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_users

    @num_users.setter
    def num_users(self, num_users):
        """Sets the num_users of this SnmpOverview.

        Total number of users  # noqa: E501

        :param num_users: The num_users of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_users is None:
            raise ValueError("Invalid value for `num_users`, must not be `None`")  # noqa: E501

        self._num_users = num_users

    @property
    def num_users_no_auth_no_priv(self):
        """Gets the num_users_no_auth_no_priv of this SnmpOverview.  # noqa: E501

        Total number of no authentication no privacy users  # noqa: E501

        :return: The num_users_no_auth_no_priv of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_users_no_auth_no_priv

    @num_users_no_auth_no_priv.setter
    def num_users_no_auth_no_priv(self, num_users_no_auth_no_priv):
        """Sets the num_users_no_auth_no_priv of this SnmpOverview.

        Total number of no authentication no privacy users  # noqa: E501

        :param num_users_no_auth_no_priv: The num_users_no_auth_no_priv of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_users_no_auth_no_priv is None:
            raise ValueError("Invalid value for `num_users_no_auth_no_priv`, must not be `None`")  # noqa: E501

        self._num_users_no_auth_no_priv = num_users_no_auth_no_priv

    @property
    def num_users_auth_no_priv(self):
        """Gets the num_users_auth_no_priv of this SnmpOverview.  # noqa: E501

        Total number of with authentication no privacy users  # noqa: E501

        :return: The num_users_auth_no_priv of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_users_auth_no_priv

    @num_users_auth_no_priv.setter
    def num_users_auth_no_priv(self, num_users_auth_no_priv):
        """Sets the num_users_auth_no_priv of this SnmpOverview.

        Total number of with authentication no privacy users  # noqa: E501

        :param num_users_auth_no_priv: The num_users_auth_no_priv of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_users_auth_no_priv is None:
            raise ValueError("Invalid value for `num_users_auth_no_priv`, must not be `None`")  # noqa: E501

        self._num_users_auth_no_priv = num_users_auth_no_priv

    @property
    def num_users_auth_priv(self):
        """Gets the num_users_auth_priv of this SnmpOverview.  # noqa: E501

        Total number of users with authentication and privacy  # noqa: E501

        :return: The num_users_auth_priv of this SnmpOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_users_auth_priv

    @num_users_auth_priv.setter
    def num_users_auth_priv(self, num_users_auth_priv):
        """Sets the num_users_auth_priv of this SnmpOverview.

        Total number of users with authentication and privacy  # noqa: E501

        :param num_users_auth_priv: The num_users_auth_priv of this SnmpOverview.  # noqa: E501
        :type: int
        """
        if num_users_auth_priv is None:
            raise ValueError("Invalid value for `num_users_auth_priv`, must not be `None`")  # noqa: E501

        self._num_users_auth_priv = num_users_auth_priv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
