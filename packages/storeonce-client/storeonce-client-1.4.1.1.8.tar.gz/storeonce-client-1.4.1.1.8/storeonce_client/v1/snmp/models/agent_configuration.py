# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SNMP

    unused  # noqa: E501

    Component version: 2.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class AgentConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_state': 'str',
        'agent_state_string': 'str',
        'engine_id': 'str'
    }

    attribute_map = {
        'agent_state': 'agentState',
        'agent_state_string': 'agentStateString',
        'engine_id': 'engineId'
    }

    def __init__(self, agent_state=None, agent_state_string=None, engine_id=None):  # noqa: E501
        """AgentConfiguration - a model defined in Swagger"""  # noqa: E501

        self._agent_state = None
        self._agent_state_string = None
        self._engine_id = None
        self.discriminator = None

        self.agent_state = agent_state
        if agent_state_string is not None:
            self.agent_state_string = agent_state_string
        self.engine_id = engine_id

    @property
    def agent_state(self):
        """Gets the agent_state of this AgentConfiguration.  # noqa: E501

        The state of the snmp agent  # noqa: E501

        :return: The agent_state of this AgentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._agent_state

    @agent_state.setter
    def agent_state(self, agent_state):
        """Sets the agent_state of this AgentConfiguration.

        The state of the snmp agent  # noqa: E501

        :param agent_state: The agent_state of this AgentConfiguration.  # noqa: E501
        :type: str
        """
        if agent_state is None:
            raise ValueError("Invalid value for `agent_state`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if agent_state not in allowed_values:
            raise ValueError(
                "Invalid value for `agent_state` ({0}), must be one of {1}"  # noqa: E501
                .format(agent_state, allowed_values)
            )

        self._agent_state = agent_state

    @property
    def agent_state_string(self):
        """Gets the agent_state_string of this AgentConfiguration.  # noqa: E501

        The localized form of the state enum  # noqa: E501

        :return: The agent_state_string of this AgentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._agent_state_string

    @agent_state_string.setter
    def agent_state_string(self, agent_state_string):
        """Sets the agent_state_string of this AgentConfiguration.

        The localized form of the state enum  # noqa: E501

        :param agent_state_string: The agent_state_string of this AgentConfiguration.  # noqa: E501
        :type: str
        """

        self._agent_state_string = agent_state_string

    @property
    def engine_id(self):
        """Gets the engine_id of this AgentConfiguration.  # noqa: E501

        The agent's engine id as a hexadecimal string  # noqa: E501

        :return: The engine_id of this AgentConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._engine_id

    @engine_id.setter
    def engine_id(self, engine_id):
        """Sets the engine_id of this AgentConfiguration.

        The agent's engine id as a hexadecimal string  # noqa: E501

        :param engine_id: The engine_id of this AgentConfiguration.  # noqa: E501
        :type: str
        """
        if engine_id is None:
            raise ValueError("Invalid value for `engine_id`, must not be `None`")  # noqa: E501

        self._engine_id = engine_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
