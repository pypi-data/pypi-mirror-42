# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SNMP

    unused  # noqa: E501

    Component version: 2.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TrapsinkV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'trapsink_state': 'str',
        'trapsink_state_string': 'str',
        'host': 'str',
        'port': 'int',
        'event_type': 'str',
        'event_type_string': 'str',
        'protocol_version': 'str',
        'username': 'str',
        'context': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'trapsink_state': 'trapsinkState',
        'trapsink_state_string': 'trapsinkStateString',
        'host': 'host',
        'port': 'port',
        'event_type': 'eventType',
        'event_type_string': 'eventTypeString',
        'protocol_version': 'protocolVersion',
        'username': 'username',
        'context': 'context'
    }

    def __init__(self, uuid=None, trapsink_state=None, trapsink_state_string=None, host=None, port=None, event_type=None, event_type_string=None, protocol_version=None, username=None, context=None):  # noqa: E501
        """TrapsinkV3 - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._trapsink_state = None
        self._trapsink_state_string = None
        self._host = None
        self._port = None
        self._event_type = None
        self._event_type_string = None
        self._protocol_version = None
        self._username = None
        self._context = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.trapsink_state = trapsink_state
        if trapsink_state_string is not None:
            self.trapsink_state_string = trapsink_state_string
        self.host = host
        self.port = port
        self.event_type = event_type
        if event_type_string is not None:
            self.event_type_string = event_type_string
        self.protocol_version = protocol_version
        self.username = username
        if context is not None:
            self.context = context

    @property
    def uuid(self):
        """Gets the uuid of this TrapsinkV3.  # noqa: E501

        UUID for the trapsink  # noqa: E501

        :return: The uuid of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TrapsinkV3.

        UUID for the trapsink  # noqa: E501

        :param uuid: The uuid of this TrapsinkV3.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def trapsink_state(self):
        """Gets the trapsink_state of this TrapsinkV3.  # noqa: E501

        The trapsink state. describes whether the trapsink is enabled or disabled  # noqa: E501

        :return: The trapsink_state of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._trapsink_state

    @trapsink_state.setter
    def trapsink_state(self, trapsink_state):
        """Sets the trapsink_state of this TrapsinkV3.

        The trapsink state. describes whether the trapsink is enabled or disabled  # noqa: E501

        :param trapsink_state: The trapsink_state of this TrapsinkV3.  # noqa: E501
        :type: str
        """
        if trapsink_state is None:
            raise ValueError("Invalid value for `trapsink_state`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if trapsink_state not in allowed_values:
            raise ValueError(
                "Invalid value for `trapsink_state` ({0}), must be one of {1}"  # noqa: E501
                .format(trapsink_state, allowed_values)
            )

        self._trapsink_state = trapsink_state

    @property
    def trapsink_state_string(self):
        """Gets the trapsink_state_string of this TrapsinkV3.  # noqa: E501

        Localized String representation of the Trapsink state  # noqa: E501

        :return: The trapsink_state_string of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._trapsink_state_string

    @trapsink_state_string.setter
    def trapsink_state_string(self, trapsink_state_string):
        """Sets the trapsink_state_string of this TrapsinkV3.

        Localized String representation of the Trapsink state  # noqa: E501

        :param trapsink_state_string: The trapsink_state_string of this TrapsinkV3.  # noqa: E501
        :type: str
        """

        self._trapsink_state_string = trapsink_state_string

    @property
    def host(self):
        """Gets the host of this TrapsinkV3.  # noqa: E501

        The hostname or ip address of the remote SNMP manager  # noqa: E501

        :return: The host of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TrapsinkV3.

        The hostname or ip address of the remote SNMP manager  # noqa: E501

        :param host: The host of this TrapsinkV3.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def port(self):
        """Gets the port of this TrapsinkV3.  # noqa: E501

        The port number of the remote SNMP manager  # noqa: E501

        :return: The port of this TrapsinkV3.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this TrapsinkV3.

        The port number of the remote SNMP manager  # noqa: E501

        :param port: The port of this TrapsinkV3.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def event_type(self):
        """Gets the event_type of this TrapsinkV3.  # noqa: E501

        The type of events to send to this trapsink  # noqa: E501

        :return: The event_type of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this TrapsinkV3.

        The type of events to send to this trapsink  # noqa: E501

        :param event_type: The event_type of this TrapsinkV3.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INFO", "WARN", "ALERT"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def event_type_string(self):
        """Gets the event_type_string of this TrapsinkV3.  # noqa: E501

        Localized String representation of the event type  # noqa: E501

        :return: The event_type_string of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._event_type_string

    @event_type_string.setter
    def event_type_string(self, event_type_string):
        """Sets the event_type_string of this TrapsinkV3.

        Localized String representation of the event type  # noqa: E501

        :param event_type_string: The event_type_string of this TrapsinkV3.  # noqa: E501
        :type: str
        """

        self._event_type_string = event_type_string

    @property
    def protocol_version(self):
        """Gets the protocol_version of this TrapsinkV3.  # noqa: E501

        The SNMP protocol version  # noqa: E501

        :return: The protocol_version of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this TrapsinkV3.

        The SNMP protocol version  # noqa: E501

        :param protocol_version: The protocol_version of this TrapsinkV3.  # noqa: E501
        :type: str
        """
        if protocol_version is None:
            raise ValueError("Invalid value for `protocol_version`, must not be `None`")  # noqa: E501
        allowed_values = ["3"]  # noqa: E501
        if protocol_version not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_version` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol_version, allowed_values)
            )

        self._protocol_version = protocol_version

    @property
    def username(self):
        """Gets the username of this TrapsinkV3.  # noqa: E501

        The username of the user to authenticate traps with  # noqa: E501

        :return: The username of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TrapsinkV3.

        The username of the user to authenticate traps with  # noqa: E501

        :param username: The username of this TrapsinkV3.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def context(self):
        """Gets the context of this TrapsinkV3.  # noqa: E501

        The Snmp context  # noqa: E501

        :return: The context of this TrapsinkV3.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TrapsinkV3.

        The Snmp context  # noqa: E501

        :param context: The context of this TrapsinkV3.  # noqa: E501
        :type: str
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrapsinkV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrapsinkV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
