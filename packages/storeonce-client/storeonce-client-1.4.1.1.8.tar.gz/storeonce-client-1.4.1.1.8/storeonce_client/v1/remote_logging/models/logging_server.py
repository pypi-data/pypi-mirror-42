# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Remote Logging

    unused  # noqa: E501

    Component version: 3.0.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LoggingServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_uuid': 'str',
        'address': 'str',
        'transport_protocol': 'int',
        'transport_protocol_string': 'str',
        'port': 'int'
    }

    attribute_map = {
        'server_uuid': 'serverUUID',
        'address': 'address',
        'transport_protocol': 'transportProtocol',
        'transport_protocol_string': 'transportProtocolString',
        'port': 'port'
    }

    def __init__(self, server_uuid=None, address=None, transport_protocol=None, transport_protocol_string=None, port=None):  # noqa: E501
        """LoggingServer - a model defined in Swagger"""  # noqa: E501

        self._server_uuid = None
        self._address = None
        self._transport_protocol = None
        self._transport_protocol_string = None
        self._port = None
        self.discriminator = None

        if server_uuid is not None:
            self.server_uuid = server_uuid
        self.address = address
        self.transport_protocol = transport_protocol
        self.transport_protocol_string = transport_protocol_string
        self.port = port

    @property
    def server_uuid(self):
        """Gets the server_uuid of this LoggingServer.  # noqa: E501

        Server UUID  # noqa: E501

        :return: The server_uuid of this LoggingServer.  # noqa: E501
        :rtype: str
        """
        return self._server_uuid

    @server_uuid.setter
    def server_uuid(self, server_uuid):
        """Sets the server_uuid of this LoggingServer.

        Server UUID  # noqa: E501

        :param server_uuid: The server_uuid of this LoggingServer.  # noqa: E501
        :type: str
        """

        self._server_uuid = server_uuid

    @property
    def address(self):
        """Gets the address of this LoggingServer.  # noqa: E501

        Server address  # noqa: E501

        :return: The address of this LoggingServer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this LoggingServer.

        Server address  # noqa: E501

        :param address: The address of this LoggingServer.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this LoggingServer.  # noqa: E501

        Server transport protocol  # noqa: E501

        :return: The transport_protocol of this LoggingServer.  # noqa: E501
        :rtype: int
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this LoggingServer.

        Server transport protocol  # noqa: E501

        :param transport_protocol: The transport_protocol of this LoggingServer.  # noqa: E501
        :type: int
        """
        if transport_protocol is None:
            raise ValueError("Invalid value for `transport_protocol`, must not be `None`")  # noqa: E501

        self._transport_protocol = transport_protocol

    @property
    def transport_protocol_string(self):
        """Gets the transport_protocol_string of this LoggingServer.  # noqa: E501

        Server transport protocol  # noqa: E501

        :return: The transport_protocol_string of this LoggingServer.  # noqa: E501
        :rtype: str
        """
        return self._transport_protocol_string

    @transport_protocol_string.setter
    def transport_protocol_string(self, transport_protocol_string):
        """Sets the transport_protocol_string of this LoggingServer.

        Server transport protocol  # noqa: E501

        :param transport_protocol_string: The transport_protocol_string of this LoggingServer.  # noqa: E501
        :type: str
        """
        if transport_protocol_string is None:
            raise ValueError("Invalid value for `transport_protocol_string`, must not be `None`")  # noqa: E501

        self._transport_protocol_string = transport_protocol_string

    @property
    def port(self):
        """Gets the port of this LoggingServer.  # noqa: E501

        Server port  # noqa: E501

        :return: The port of this LoggingServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LoggingServer.

        Server port  # noqa: E501

        :param port: The port of this LoggingServer.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoggingServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggingServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
