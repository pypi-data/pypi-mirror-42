# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class TargetSharesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_target_share(self, target_appliance_id, id, **kwargs):  # noqa: E501
        """Get a single target share  # noqa: E501

        Returns the specified target share details for the given appliance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_share(target_appliance_id, id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str target_appliance_id: Target Appliance ID (required)
        :param str id: Target Share ID (required)
        :return: TargetShares
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_target_share_with_http_info(target_appliance_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_share_with_http_info(target_appliance_id, id, **kwargs)  # noqa: E501
            return data

    def get_target_share_with_http_info(self, target_appliance_id, id, **kwargs):  # noqa: E501
        """Get a single target share  # noqa: E501

        Returns the specified target share details for the given appliance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_target_share_with_http_info(target_appliance_id, id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str target_appliance_id: Target Appliance ID (required)
        :param str id: Target Share ID (required)
        :return: TargetShares
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_appliance_id', 'id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_share" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_appliance_id' is set
        if ('target_appliance_id' not in params or
                params['target_appliance_id'] is None):
            raise ValueError("Missing the required parameter `target_appliance_id` when calling `get_target_share`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_target_share`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_appliance_id' in params:
            path_params['target-appliance-id'] = params['target_appliance_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/rep/target-appliance-shares/target-appliance/{target-appliance-id}/shares/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TargetShares',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_target_shares(self, target_appliance_id, **kwargs):  # noqa: E501
        """Get all target shares  # noqa: E501

        Returns all the target shares on the given appliance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_target_shares(target_appliance_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str target_appliance_id: Target Appliance ID (required)
        :return: TargetSharesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_target_shares_with_http_info(target_appliance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_target_shares_with_http_info(target_appliance_id, **kwargs)  # noqa: E501
            return data

    def get_target_shares_with_http_info(self, target_appliance_id, **kwargs):  # noqa: E501
        """Get all target shares  # noqa: E501

        Returns all the target shares on the given appliance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_target_shares_with_http_info(target_appliance_id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str target_appliance_id: Target Appliance ID (required)
        :return: TargetSharesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_appliance_id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_target_shares" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_appliance_id' is set
        if ('target_appliance_id' not in params or
                params['target_appliance_id'] is None):
            raise ValueError("Missing the required parameter `target_appliance_id` when calling `get_target_shares`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_appliance_id' in params:
            path_params['target-appliance-id'] = params['target_appliance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/rep/target-appliance-shares/target-appliance/{target-appliance-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TargetSharesCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
