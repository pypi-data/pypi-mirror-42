# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LibraryMappingSlotsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_slot': 'int',
        'target_slot': 'int',
        'barcode': 'str',
        'cartridge_size_bytes': 'int',
        'written_bytes': 'int',
        'num_changes': 'int',
        'marked_for_recovery': 'bool',
        'rep_status': 'int',
        'rep_status_string': 'str',
        'last_sync_date': 'datetime',
        'start_sync_date': 'datetime',
        'out_of_sync_seconds': 'int',
        'job_status': 'int',
        'job_status_string': 'str',
        'job_pause_cancel_reason': 'int',
        'job_pause_cancel_reason_string': 'str',
        'job_status_code': 'int',
        'job_size_bytes': 'int',
        'percentage_job_complete': 'float',
        'job_duration_seconds': 'int',
        'job_logical_throughput': 'int',
        'job_network_throughput': 'int',
        'percentage_job_bandwidth_saving': 'float'
    }

    attribute_map = {
        'source_slot': 'sourceSlot',
        'target_slot': 'targetSlot',
        'barcode': 'barcode',
        'cartridge_size_bytes': 'cartridgeSizeBytes',
        'written_bytes': 'writtenBytes',
        'num_changes': 'numChanges',
        'marked_for_recovery': 'markedForRecovery',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'last_sync_date': 'lastSyncDate',
        'start_sync_date': 'startSyncDate',
        'out_of_sync_seconds': 'outOfSyncSeconds',
        'job_status': 'jobStatus',
        'job_status_string': 'jobStatusString',
        'job_pause_cancel_reason': 'jobPauseCancelReason',
        'job_pause_cancel_reason_string': 'jobPauseCancelReasonString',
        'job_status_code': 'jobStatusCode',
        'job_size_bytes': 'jobSizeBytes',
        'percentage_job_complete': 'percentageJobComplete',
        'job_duration_seconds': 'jobDurationSeconds',
        'job_logical_throughput': 'jobLogicalThroughput',
        'job_network_throughput': 'jobNetworkThroughput',
        'percentage_job_bandwidth_saving': 'percentageJobBandwidthSaving'
    }

    def __init__(self, source_slot=None, target_slot=None, barcode=None, cartridge_size_bytes=None, written_bytes=None, num_changes=None, marked_for_recovery=False, rep_status=None, rep_status_string=None, last_sync_date=None, start_sync_date=None, out_of_sync_seconds=None, job_status=None, job_status_string=None, job_pause_cancel_reason=None, job_pause_cancel_reason_string=None, job_status_code=None, job_size_bytes=None, percentage_job_complete=None, job_duration_seconds=None, job_logical_throughput=None, job_network_throughput=None, percentage_job_bandwidth_saving=None):  # noqa: E501
        """LibraryMappingSlotsModel - a model defined in Swagger"""  # noqa: E501

        self._source_slot = None
        self._target_slot = None
        self._barcode = None
        self._cartridge_size_bytes = None
        self._written_bytes = None
        self._num_changes = None
        self._marked_for_recovery = None
        self._rep_status = None
        self._rep_status_string = None
        self._last_sync_date = None
        self._start_sync_date = None
        self._out_of_sync_seconds = None
        self._job_status = None
        self._job_status_string = None
        self._job_pause_cancel_reason = None
        self._job_pause_cancel_reason_string = None
        self._job_status_code = None
        self._job_size_bytes = None
        self._percentage_job_complete = None
        self._job_duration_seconds = None
        self._job_logical_throughput = None
        self._job_network_throughput = None
        self._percentage_job_bandwidth_saving = None
        self.discriminator = None

        if source_slot is not None:
            self.source_slot = source_slot
        if target_slot is not None:
            self.target_slot = target_slot
        if barcode is not None:
            self.barcode = barcode
        if cartridge_size_bytes is not None:
            self.cartridge_size_bytes = cartridge_size_bytes
        if written_bytes is not None:
            self.written_bytes = written_bytes
        if num_changes is not None:
            self.num_changes = num_changes
        if marked_for_recovery is not None:
            self.marked_for_recovery = marked_for_recovery
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if last_sync_date is not None:
            self.last_sync_date = last_sync_date
        if start_sync_date is not None:
            self.start_sync_date = start_sync_date
        if out_of_sync_seconds is not None:
            self.out_of_sync_seconds = out_of_sync_seconds
        if job_status is not None:
            self.job_status = job_status
        if job_status_string is not None:
            self.job_status_string = job_status_string
        if job_pause_cancel_reason is not None:
            self.job_pause_cancel_reason = job_pause_cancel_reason
        if job_pause_cancel_reason_string is not None:
            self.job_pause_cancel_reason_string = job_pause_cancel_reason_string
        if job_status_code is not None:
            self.job_status_code = job_status_code
        if job_size_bytes is not None:
            self.job_size_bytes = job_size_bytes
        if percentage_job_complete is not None:
            self.percentage_job_complete = percentage_job_complete
        if job_duration_seconds is not None:
            self.job_duration_seconds = job_duration_seconds
        if job_logical_throughput is not None:
            self.job_logical_throughput = job_logical_throughput
        if job_network_throughput is not None:
            self.job_network_throughput = job_network_throughput
        if percentage_job_bandwidth_saving is not None:
            self.percentage_job_bandwidth_saving = percentage_job_bandwidth_saving

    @property
    def source_slot(self):
        """Gets the source_slot of this LibraryMappingSlotsModel.  # noqa: E501

        Unique ID of the source slot of this mapping.  # noqa: E501

        :return: The source_slot of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._source_slot

    @source_slot.setter
    def source_slot(self, source_slot):
        """Sets the source_slot of this LibraryMappingSlotsModel.

        Unique ID of the source slot of this mapping.  # noqa: E501

        :param source_slot: The source_slot of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._source_slot = source_slot

    @property
    def target_slot(self):
        """Gets the target_slot of this LibraryMappingSlotsModel.  # noqa: E501

        Unique ID of the target slot on the target library for this mapping.  # noqa: E501

        :return: The target_slot of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._target_slot

    @target_slot.setter
    def target_slot(self, target_slot):
        """Sets the target_slot of this LibraryMappingSlotsModel.

        Unique ID of the target slot on the target library for this mapping.  # noqa: E501

        :param target_slot: The target_slot of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._target_slot = target_slot

    @property
    def barcode(self):
        """Gets the barcode of this LibraryMappingSlotsModel.  # noqa: E501

        Barcode value of the cartridge in the slot.  # noqa: E501

        :return: The barcode of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this LibraryMappingSlotsModel.

        Barcode value of the cartridge in the slot.  # noqa: E501

        :param barcode: The barcode of this LibraryMappingSlotsModel.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def cartridge_size_bytes(self):
        """Gets the cartridge_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501

        Size of the cartridge in bytes.  # noqa: E501

        :return: The cartridge_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._cartridge_size_bytes

    @cartridge_size_bytes.setter
    def cartridge_size_bytes(self, cartridge_size_bytes):
        """Sets the cartridge_size_bytes of this LibraryMappingSlotsModel.

        Size of the cartridge in bytes.  # noqa: E501

        :param cartridge_size_bytes: The cartridge_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._cartridge_size_bytes = cartridge_size_bytes

    @property
    def written_bytes(self):
        """Gets the written_bytes of this LibraryMappingSlotsModel.  # noqa: E501

        The number of host bytes written to the cartridge in bytes.  # noqa: E501

        :return: The written_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._written_bytes

    @written_bytes.setter
    def written_bytes(self, written_bytes):
        """Sets the written_bytes of this LibraryMappingSlotsModel.

        The number of host bytes written to the cartridge in bytes.  # noqa: E501

        :param written_bytes: The written_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._written_bytes = written_bytes

    @property
    def num_changes(self):
        """Gets the num_changes of this LibraryMappingSlotsModel.  # noqa: E501

        The write pass count for the cartridge.  # noqa: E501

        :return: The num_changes of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_changes

    @num_changes.setter
    def num_changes(self, num_changes):
        """Sets the num_changes of this LibraryMappingSlotsModel.

        The write pass count for the cartridge.  # noqa: E501

        :param num_changes: The num_changes of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._num_changes = num_changes

    @property
    def marked_for_recovery(self):
        """Gets the marked_for_recovery of this LibraryMappingSlotsModel.  # noqa: E501

        Boolean True if the slot is marked for recovery, false otherwise.  # noqa: E501

        :return: The marked_for_recovery of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_recovery

    @marked_for_recovery.setter
    def marked_for_recovery(self, marked_for_recovery):
        """Sets the marked_for_recovery of this LibraryMappingSlotsModel.

        Boolean True if the slot is marked for recovery, false otherwise.  # noqa: E501

        :param marked_for_recovery: The marked_for_recovery of this LibraryMappingSlotsModel.  # noqa: E501
        :type: bool
        """

        self._marked_for_recovery = marked_for_recovery

    @property
    def rep_status(self):
        """Gets the rep_status of this LibraryMappingSlotsModel.  # noqa: E501

        Integer representing the replication status of this slot.  # noqa: E501

        :return: The rep_status of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this LibraryMappingSlotsModel.

        Integer representing the replication status of this slot.  # noqa: E501

        :param rep_status: The rep_status of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this LibraryMappingSlotsModel.  # noqa: E501

        String representation of the replication status of this slot.  # noqa: E501

        :return: The rep_status_string of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this LibraryMappingSlotsModel.

        String representation of the replication status of this slot.  # noqa: E501

        :param rep_status_string: The rep_status_string of this LibraryMappingSlotsModel.  # noqa: E501
        :type: str
        """

        self._rep_status_string = rep_status_string

    @property
    def last_sync_date(self):
        """Gets the last_sync_date of this LibraryMappingSlotsModel.  # noqa: E501

        The date and time this slot was last synchronized  # noqa: E501

        :return: The last_sync_date of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_date

    @last_sync_date.setter
    def last_sync_date(self, last_sync_date):
        """Sets the last_sync_date of this LibraryMappingSlotsModel.

        The date and time this slot was last synchronized  # noqa: E501

        :param last_sync_date: The last_sync_date of this LibraryMappingSlotsModel.  # noqa: E501
        :type: datetime
        """

        self._last_sync_date = last_sync_date

    @property
    def start_sync_date(self):
        """Gets the start_sync_date of this LibraryMappingSlotsModel.  # noqa: E501

        The date and time the last synchronization of this slot was started.  # noqa: E501

        :return: The start_sync_date of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_sync_date

    @start_sync_date.setter
    def start_sync_date(self, start_sync_date):
        """Sets the start_sync_date of this LibraryMappingSlotsModel.

        The date and time the last synchronization of this slot was started.  # noqa: E501

        :param start_sync_date: The start_sync_date of this LibraryMappingSlotsModel.  # noqa: E501
        :type: datetime
        """

        self._start_sync_date = start_sync_date

    @property
    def out_of_sync_seconds(self):
        """Gets the out_of_sync_seconds of this LibraryMappingSlotsModel.  # noqa: E501

        The time that this slot has been out of sync in seconds.  # noqa: E501

        :return: The out_of_sync_seconds of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_seconds

    @out_of_sync_seconds.setter
    def out_of_sync_seconds(self, out_of_sync_seconds):
        """Sets the out_of_sync_seconds of this LibraryMappingSlotsModel.

        The time that this slot has been out of sync in seconds.  # noqa: E501

        :param out_of_sync_seconds: The out_of_sync_seconds of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._out_of_sync_seconds = out_of_sync_seconds

    @property
    def job_status(self):
        """Gets the job_status of this LibraryMappingSlotsModel.  # noqa: E501

        Enum representing the job status of this slot.  # noqa: E501

        :return: The job_status of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this LibraryMappingSlotsModel.

        Enum representing the job status of this slot.  # noqa: E501

        :param job_status: The job_status of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_status = job_status

    @property
    def job_status_string(self):
        """Gets the job_status_string of this LibraryMappingSlotsModel.  # noqa: E501

        String representation of the job status associated with this slot.  # noqa: E501

        :return: The job_status_string of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: str
        """
        return self._job_status_string

    @job_status_string.setter
    def job_status_string(self, job_status_string):
        """Sets the job_status_string of this LibraryMappingSlotsModel.

        String representation of the job status associated with this slot.  # noqa: E501

        :param job_status_string: The job_status_string of this LibraryMappingSlotsModel.  # noqa: E501
        :type: str
        """

        self._job_status_string = job_status_string

    @property
    def job_pause_cancel_reason(self):
        """Gets the job_pause_cancel_reason of this LibraryMappingSlotsModel.  # noqa: E501

        Enum representation of the last pause or cancel reason for the job associated with this slot.  # noqa: E501

        :return: The job_pause_cancel_reason of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_pause_cancel_reason

    @job_pause_cancel_reason.setter
    def job_pause_cancel_reason(self, job_pause_cancel_reason):
        """Sets the job_pause_cancel_reason of this LibraryMappingSlotsModel.

        Enum representation of the last pause or cancel reason for the job associated with this slot.  # noqa: E501

        :param job_pause_cancel_reason: The job_pause_cancel_reason of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_pause_cancel_reason = job_pause_cancel_reason

    @property
    def job_pause_cancel_reason_string(self):
        """Gets the job_pause_cancel_reason_string of this LibraryMappingSlotsModel.  # noqa: E501

        String representation of the last pause or cancel reason for the job associated with this slot.  # noqa: E501

        :return: The job_pause_cancel_reason_string of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: str
        """
        return self._job_pause_cancel_reason_string

    @job_pause_cancel_reason_string.setter
    def job_pause_cancel_reason_string(self, job_pause_cancel_reason_string):
        """Sets the job_pause_cancel_reason_string of this LibraryMappingSlotsModel.

        String representation of the last pause or cancel reason for the job associated with this slot.  # noqa: E501

        :param job_pause_cancel_reason_string: The job_pause_cancel_reason_string of this LibraryMappingSlotsModel.  # noqa: E501
        :type: str
        """

        self._job_pause_cancel_reason_string = job_pause_cancel_reason_string

    @property
    def job_status_code(self):
        """Gets the job_status_code of this LibraryMappingSlotsModel.  # noqa: E501

        Value giving extra information to the status of the job. No corresponding string.  # noqa: E501

        :return: The job_status_code of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_status_code

    @job_status_code.setter
    def job_status_code(self, job_status_code):
        """Sets the job_status_code of this LibraryMappingSlotsModel.

        Value giving extra information to the status of the job. No corresponding string.  # noqa: E501

        :param job_status_code: The job_status_code of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_status_code = job_status_code

    @property
    def job_size_bytes(self):
        """Gets the job_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501

        The size of the slot data job in bytes.  # noqa: E501

        :return: The job_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_size_bytes

    @job_size_bytes.setter
    def job_size_bytes(self, job_size_bytes):
        """Sets the job_size_bytes of this LibraryMappingSlotsModel.

        The size of the slot data job in bytes.  # noqa: E501

        :param job_size_bytes: The job_size_bytes of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_size_bytes = job_size_bytes

    @property
    def percentage_job_complete(self):
        """Gets the percentage_job_complete of this LibraryMappingSlotsModel.  # noqa: E501

        The job progress completion percentage of the slot data job.  # noqa: E501

        :return: The percentage_job_complete of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_complete

    @percentage_job_complete.setter
    def percentage_job_complete(self, percentage_job_complete):
        """Sets the percentage_job_complete of this LibraryMappingSlotsModel.

        The job progress completion percentage of the slot data job.  # noqa: E501

        :param percentage_job_complete: The percentage_job_complete of this LibraryMappingSlotsModel.  # noqa: E501
        :type: float
        """

        self._percentage_job_complete = percentage_job_complete

    @property
    def job_duration_seconds(self):
        """Gets the job_duration_seconds of this LibraryMappingSlotsModel.  # noqa: E501

        The current duration in seconds of the slot data job.  # noqa: E501

        :return: The job_duration_seconds of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_duration_seconds

    @job_duration_seconds.setter
    def job_duration_seconds(self, job_duration_seconds):
        """Sets the job_duration_seconds of this LibraryMappingSlotsModel.

        The current duration in seconds of the slot data job.  # noqa: E501

        :param job_duration_seconds: The job_duration_seconds of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_duration_seconds = job_duration_seconds

    @property
    def job_logical_throughput(self):
        """Gets the job_logical_throughput of this LibraryMappingSlotsModel.  # noqa: E501

        The current throughput of the slot data job in bytes per second.  # noqa: E501

        :return: The job_logical_throughput of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_logical_throughput

    @job_logical_throughput.setter
    def job_logical_throughput(self, job_logical_throughput):
        """Sets the job_logical_throughput of this LibraryMappingSlotsModel.

        The current throughput of the slot data job in bytes per second.  # noqa: E501

        :param job_logical_throughput: The job_logical_throughput of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_logical_throughput = job_logical_throughput

    @property
    def job_network_throughput(self):
        """Gets the job_network_throughput of this LibraryMappingSlotsModel.  # noqa: E501

        The bandwidth used by the slot data job in bytes per second.  # noqa: E501

        :return: The job_network_throughput of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: int
        """
        return self._job_network_throughput

    @job_network_throughput.setter
    def job_network_throughput(self, job_network_throughput):
        """Sets the job_network_throughput of this LibraryMappingSlotsModel.

        The bandwidth used by the slot data job in bytes per second.  # noqa: E501

        :param job_network_throughput: The job_network_throughput of this LibraryMappingSlotsModel.  # noqa: E501
        :type: int
        """

        self._job_network_throughput = job_network_throughput

    @property
    def percentage_job_bandwidth_saving(self):
        """Gets the percentage_job_bandwidth_saving of this LibraryMappingSlotsModel.  # noqa: E501

        The current bandwidth saving of the job as a %.  # noqa: E501

        :return: The percentage_job_bandwidth_saving of this LibraryMappingSlotsModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_bandwidth_saving

    @percentage_job_bandwidth_saving.setter
    def percentage_job_bandwidth_saving(self, percentage_job_bandwidth_saving):
        """Sets the percentage_job_bandwidth_saving of this LibraryMappingSlotsModel.

        The current bandwidth saving of the job as a %.  # noqa: E501

        :param percentage_job_bandwidth_saving: The percentage_job_bandwidth_saving of this LibraryMappingSlotsModel.  # noqa: E501
        :type: float
        """

        self._percentage_job_bandwidth_saving = percentage_job_bandwidth_saving

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LibraryMappingSlotsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryMappingSlotsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
