# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ServiceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rep_name': 'str',
        'health_level': 'int',
        'health_level_string': 'str',
        'rep_status': 'int',
        'rep_status_string': 'str',
        'min_protocol_version': 'int',
        'max_protocol_version': 'int',
        'max_source_jobs': 'int',
        'max_target_jobs': 'int',
        'progress_logging_enabled': 'bool',
        'progress_logging_frequency_seconds': 'int',
        'out_of_sync_warning_threshold_hours': 'int',
        'out_of_sync_critical_threshold_hours': 'int',
        'max_target_appliances': 'int',
        'max_mappings_per_library': 'int',
        'rep_serial_number': 'str',
        'num_target_jobs': 'int',
        'num_source_jobs': 'int',
        'num_connected_source_appliances': 'int',
        'max_source_appliances': 'int',
        'num_target_vtl_jobs_running': 'int',
        'num_target_nas_jobs_running': 'int',
        'num_source_vtl_jobs_running': 'int',
        'num_source_nas_jobs_running': 'int'
    }

    attribute_map = {
        'rep_name': 'repName',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'min_protocol_version': 'minProtocolVersion',
        'max_protocol_version': 'maxProtocolVersion',
        'max_source_jobs': 'maxSourceJobs',
        'max_target_jobs': 'maxTargetJobs',
        'progress_logging_enabled': 'progressLoggingEnabled',
        'progress_logging_frequency_seconds': 'progressLoggingFrequencySeconds',
        'out_of_sync_warning_threshold_hours': 'outOfSyncWarningThresholdHours',
        'out_of_sync_critical_threshold_hours': 'outOfSyncCriticalThresholdHours',
        'max_target_appliances': 'maxTargetAppliances',
        'max_mappings_per_library': 'maxMappingsPerLibrary',
        'rep_serial_number': 'repSerialNumber',
        'num_target_jobs': 'numTargetJobs',
        'num_source_jobs': 'numSourceJobs',
        'num_connected_source_appliances': 'numConnectedSourceAppliances',
        'max_source_appliances': 'maxSourceAppliances',
        'num_target_vtl_jobs_running': 'numTargetVTLJobsRunning',
        'num_target_nas_jobs_running': 'numTargetNASJobsRunning',
        'num_source_vtl_jobs_running': 'numSourceVTLJobsRunning',
        'num_source_nas_jobs_running': 'numSourceNASJobsRunning'
    }

    def __init__(self, rep_name=None, health_level=None, health_level_string=None, rep_status=None, rep_status_string=None, min_protocol_version=None, max_protocol_version=None, max_source_jobs=None, max_target_jobs=None, progress_logging_enabled=False, progress_logging_frequency_seconds=None, out_of_sync_warning_threshold_hours=None, out_of_sync_critical_threshold_hours=None, max_target_appliances=None, max_mappings_per_library=None, rep_serial_number=None, num_target_jobs=None, num_source_jobs=None, num_connected_source_appliances=None, max_source_appliances=None, num_target_vtl_jobs_running=None, num_target_nas_jobs_running=None, num_source_vtl_jobs_running=None, num_source_nas_jobs_running=None):  # noqa: E501
        """ServiceModel - a model defined in Swagger"""  # noqa: E501

        self._rep_name = None
        self._health_level = None
        self._health_level_string = None
        self._rep_status = None
        self._rep_status_string = None
        self._min_protocol_version = None
        self._max_protocol_version = None
        self._max_source_jobs = None
        self._max_target_jobs = None
        self._progress_logging_enabled = None
        self._progress_logging_frequency_seconds = None
        self._out_of_sync_warning_threshold_hours = None
        self._out_of_sync_critical_threshold_hours = None
        self._max_target_appliances = None
        self._max_mappings_per_library = None
        self._rep_serial_number = None
        self._num_target_jobs = None
        self._num_source_jobs = None
        self._num_connected_source_appliances = None
        self._max_source_appliances = None
        self._num_target_vtl_jobs_running = None
        self._num_target_nas_jobs_running = None
        self._num_source_vtl_jobs_running = None
        self._num_source_nas_jobs_running = None
        self.discriminator = None

        if rep_name is not None:
            self.rep_name = rep_name
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if min_protocol_version is not None:
            self.min_protocol_version = min_protocol_version
        if max_protocol_version is not None:
            self.max_protocol_version = max_protocol_version
        if max_source_jobs is not None:
            self.max_source_jobs = max_source_jobs
        if max_target_jobs is not None:
            self.max_target_jobs = max_target_jobs
        if progress_logging_enabled is not None:
            self.progress_logging_enabled = progress_logging_enabled
        if progress_logging_frequency_seconds is not None:
            self.progress_logging_frequency_seconds = progress_logging_frequency_seconds
        if out_of_sync_warning_threshold_hours is not None:
            self.out_of_sync_warning_threshold_hours = out_of_sync_warning_threshold_hours
        if out_of_sync_critical_threshold_hours is not None:
            self.out_of_sync_critical_threshold_hours = out_of_sync_critical_threshold_hours
        if max_target_appliances is not None:
            self.max_target_appliances = max_target_appliances
        if max_mappings_per_library is not None:
            self.max_mappings_per_library = max_mappings_per_library
        if rep_serial_number is not None:
            self.rep_serial_number = rep_serial_number
        if num_target_jobs is not None:
            self.num_target_jobs = num_target_jobs
        if num_source_jobs is not None:
            self.num_source_jobs = num_source_jobs
        if num_connected_source_appliances is not None:
            self.num_connected_source_appliances = num_connected_source_appliances
        if max_source_appliances is not None:
            self.max_source_appliances = max_source_appliances
        if num_target_vtl_jobs_running is not None:
            self.num_target_vtl_jobs_running = num_target_vtl_jobs_running
        if num_target_nas_jobs_running is not None:
            self.num_target_nas_jobs_running = num_target_nas_jobs_running
        if num_source_vtl_jobs_running is not None:
            self.num_source_vtl_jobs_running = num_source_vtl_jobs_running
        if num_source_nas_jobs_running is not None:
            self.num_source_nas_jobs_running = num_source_nas_jobs_running

    @property
    def rep_name(self):
        """Gets the rep_name of this ServiceModel.  # noqa: E501

        The name of the replication appliance  # noqa: E501

        :return: The rep_name of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_name

    @rep_name.setter
    def rep_name(self, rep_name):
        """Sets the rep_name of this ServiceModel.

        The name of the replication appliance  # noqa: E501

        :param rep_name: The rep_name of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._rep_name = rep_name

    @property
    def health_level(self):
        """Gets the health_level of this ServiceModel.  # noqa: E501

        The health level of the service.  # noqa: E501

        :return: The health_level of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this ServiceModel.

        The health level of the service.  # noqa: E501

        :param health_level: The health_level of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this ServiceModel.  # noqa: E501

        Localised string representing the health level.  # noqa: E501

        :return: The health_level_string of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this ServiceModel.

        Localised string representing the health level.  # noqa: E501

        :param health_level_string: The health_level_string of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def rep_status(self):
        """Gets the rep_status of this ServiceModel.  # noqa: E501

        Status of the service.  # noqa: E501

        :return: The rep_status of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this ServiceModel.

        Status of the service.  # noqa: E501

        :param rep_status: The rep_status of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this ServiceModel.  # noqa: E501

        Localised string representing the service status.  # noqa: E501

        :return: The rep_status_string of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this ServiceModel.

        Localised string representing the service status.  # noqa: E501

        :param rep_status_string: The rep_status_string of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._rep_status_string = rep_status_string

    @property
    def min_protocol_version(self):
        """Gets the min_protocol_version of this ServiceModel.  # noqa: E501

        Minimum replication protocol version supported.  # noqa: E501

        :return: The min_protocol_version of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._min_protocol_version

    @min_protocol_version.setter
    def min_protocol_version(self, min_protocol_version):
        """Sets the min_protocol_version of this ServiceModel.

        Minimum replication protocol version supported.  # noqa: E501

        :param min_protocol_version: The min_protocol_version of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._min_protocol_version = min_protocol_version

    @property
    def max_protocol_version(self):
        """Gets the max_protocol_version of this ServiceModel.  # noqa: E501

        Maximum replication protocol version supported.  # noqa: E501

        :return: The max_protocol_version of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_protocol_version

    @max_protocol_version.setter
    def max_protocol_version(self, max_protocol_version):
        """Sets the max_protocol_version of this ServiceModel.

        Maximum replication protocol version supported.  # noqa: E501

        :param max_protocol_version: The max_protocol_version of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_protocol_version = max_protocol_version

    @property
    def max_source_jobs(self):
        """Gets the max_source_jobs of this ServiceModel.  # noqa: E501

        Maximum concurrent source jobs that can occur.  # noqa: E501

        :return: The max_source_jobs of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_source_jobs

    @max_source_jobs.setter
    def max_source_jobs(self, max_source_jobs):
        """Sets the max_source_jobs of this ServiceModel.

        Maximum concurrent source jobs that can occur.  # noqa: E501

        :param max_source_jobs: The max_source_jobs of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_source_jobs = max_source_jobs

    @property
    def max_target_jobs(self):
        """Gets the max_target_jobs of this ServiceModel.  # noqa: E501

        Maximum concurrent target jobs that can occur.  # noqa: E501

        :return: The max_target_jobs of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_target_jobs

    @max_target_jobs.setter
    def max_target_jobs(self, max_target_jobs):
        """Sets the max_target_jobs of this ServiceModel.

        Maximum concurrent target jobs that can occur.  # noqa: E501

        :param max_target_jobs: The max_target_jobs of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_target_jobs = max_target_jobs

    @property
    def progress_logging_enabled(self):
        """Gets the progress_logging_enabled of this ServiceModel.  # noqa: E501

        Synchronisation progress logging flag.  # noqa: E501

        :return: The progress_logging_enabled of this ServiceModel.  # noqa: E501
        :rtype: bool
        """
        return self._progress_logging_enabled

    @progress_logging_enabled.setter
    def progress_logging_enabled(self, progress_logging_enabled):
        """Sets the progress_logging_enabled of this ServiceModel.

        Synchronisation progress logging flag.  # noqa: E501

        :param progress_logging_enabled: The progress_logging_enabled of this ServiceModel.  # noqa: E501
        :type: bool
        """

        self._progress_logging_enabled = progress_logging_enabled

    @property
    def progress_logging_frequency_seconds(self):
        """Gets the progress_logging_frequency_seconds of this ServiceModel.  # noqa: E501

        Progress logging frequency.  # noqa: E501

        :return: The progress_logging_frequency_seconds of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._progress_logging_frequency_seconds

    @progress_logging_frequency_seconds.setter
    def progress_logging_frequency_seconds(self, progress_logging_frequency_seconds):
        """Sets the progress_logging_frequency_seconds of this ServiceModel.

        Progress logging frequency.  # noqa: E501

        :param progress_logging_frequency_seconds: The progress_logging_frequency_seconds of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._progress_logging_frequency_seconds = progress_logging_frequency_seconds

    @property
    def out_of_sync_warning_threshold_hours(self):
        """Gets the out_of_sync_warning_threshold_hours of this ServiceModel.  # noqa: E501

        Number of hours before an out of sync warning event is raised.  # noqa: E501

        :return: The out_of_sync_warning_threshold_hours of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_warning_threshold_hours

    @out_of_sync_warning_threshold_hours.setter
    def out_of_sync_warning_threshold_hours(self, out_of_sync_warning_threshold_hours):
        """Sets the out_of_sync_warning_threshold_hours of this ServiceModel.

        Number of hours before an out of sync warning event is raised.  # noqa: E501

        :param out_of_sync_warning_threshold_hours: The out_of_sync_warning_threshold_hours of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._out_of_sync_warning_threshold_hours = out_of_sync_warning_threshold_hours

    @property
    def out_of_sync_critical_threshold_hours(self):
        """Gets the out_of_sync_critical_threshold_hours of this ServiceModel.  # noqa: E501

        Number of hours before an out of sync critical event is raised.  # noqa: E501

        :return: The out_of_sync_critical_threshold_hours of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_critical_threshold_hours

    @out_of_sync_critical_threshold_hours.setter
    def out_of_sync_critical_threshold_hours(self, out_of_sync_critical_threshold_hours):
        """Sets the out_of_sync_critical_threshold_hours of this ServiceModel.

        Number of hours before an out of sync critical event is raised.  # noqa: E501

        :param out_of_sync_critical_threshold_hours: The out_of_sync_critical_threshold_hours of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._out_of_sync_critical_threshold_hours = out_of_sync_critical_threshold_hours

    @property
    def max_target_appliances(self):
        """Gets the max_target_appliances of this ServiceModel.  # noqa: E501

        Maximum number of target appliances that can be configured in the server.  # noqa: E501

        :return: The max_target_appliances of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_target_appliances

    @max_target_appliances.setter
    def max_target_appliances(self, max_target_appliances):
        """Sets the max_target_appliances of this ServiceModel.

        Maximum number of target appliances that can be configured in the server.  # noqa: E501

        :param max_target_appliances: The max_target_appliances of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_target_appliances = max_target_appliances

    @property
    def max_mappings_per_library(self):
        """Gets the max_mappings_per_library of this ServiceModel.  # noqa: E501

        Maximum number of mappings per library.  # noqa: E501

        :return: The max_mappings_per_library of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_mappings_per_library

    @max_mappings_per_library.setter
    def max_mappings_per_library(self, max_mappings_per_library):
        """Sets the max_mappings_per_library of this ServiceModel.

        Maximum number of mappings per library.  # noqa: E501

        :param max_mappings_per_library: The max_mappings_per_library of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_mappings_per_library = max_mappings_per_library

    @property
    def rep_serial_number(self):
        """Gets the rep_serial_number of this ServiceModel.  # noqa: E501

        The Replication serial number of the system.  # noqa: E501

        :return: The rep_serial_number of this ServiceModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_serial_number

    @rep_serial_number.setter
    def rep_serial_number(self, rep_serial_number):
        """Sets the rep_serial_number of this ServiceModel.

        The Replication serial number of the system.  # noqa: E501

        :param rep_serial_number: The rep_serial_number of this ServiceModel.  # noqa: E501
        :type: str
        """

        self._rep_serial_number = rep_serial_number

    @property
    def num_target_jobs(self):
        """Gets the num_target_jobs of this ServiceModel.  # noqa: E501

        Number of active target replication jobs on the appliance.  # noqa: E501

        :return: The num_target_jobs of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_target_jobs

    @num_target_jobs.setter
    def num_target_jobs(self, num_target_jobs):
        """Sets the num_target_jobs of this ServiceModel.

        Number of active target replication jobs on the appliance.  # noqa: E501

        :param num_target_jobs: The num_target_jobs of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_target_jobs = num_target_jobs

    @property
    def num_source_jobs(self):
        """Gets the num_source_jobs of this ServiceModel.  # noqa: E501

        Number of active source replication jobs on the appliance.  # noqa: E501

        :return: The num_source_jobs of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_source_jobs

    @num_source_jobs.setter
    def num_source_jobs(self, num_source_jobs):
        """Sets the num_source_jobs of this ServiceModel.

        Number of active source replication jobs on the appliance.  # noqa: E501

        :param num_source_jobs: The num_source_jobs of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_source_jobs = num_source_jobs

    @property
    def num_connected_source_appliances(self):
        """Gets the num_connected_source_appliances of this ServiceModel.  # noqa: E501

        Number of source appliances currently connected to the local appliance.  # noqa: E501

        :return: The num_connected_source_appliances of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_connected_source_appliances

    @num_connected_source_appliances.setter
    def num_connected_source_appliances(self, num_connected_source_appliances):
        """Sets the num_connected_source_appliances of this ServiceModel.

        Number of source appliances currently connected to the local appliance.  # noqa: E501

        :param num_connected_source_appliances: The num_connected_source_appliances of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_connected_source_appliances = num_connected_source_appliances

    @property
    def max_source_appliances(self):
        """Gets the max_source_appliances of this ServiceModel.  # noqa: E501

        Maximum number of source appliances that can connect.  # noqa: E501

        :return: The max_source_appliances of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_source_appliances

    @max_source_appliances.setter
    def max_source_appliances(self, max_source_appliances):
        """Sets the max_source_appliances of this ServiceModel.

        Maximum number of source appliances that can connect.  # noqa: E501

        :param max_source_appliances: The max_source_appliances of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._max_source_appliances = max_source_appliances

    @property
    def num_target_vtl_jobs_running(self):
        """Gets the num_target_vtl_jobs_running of this ServiceModel.  # noqa: E501

        The number of target VTL jobs currently running  # noqa: E501

        :return: The num_target_vtl_jobs_running of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_target_vtl_jobs_running

    @num_target_vtl_jobs_running.setter
    def num_target_vtl_jobs_running(self, num_target_vtl_jobs_running):
        """Sets the num_target_vtl_jobs_running of this ServiceModel.

        The number of target VTL jobs currently running  # noqa: E501

        :param num_target_vtl_jobs_running: The num_target_vtl_jobs_running of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_target_vtl_jobs_running = num_target_vtl_jobs_running

    @property
    def num_target_nas_jobs_running(self):
        """Gets the num_target_nas_jobs_running of this ServiceModel.  # noqa: E501

        The number of target NAS jobs currently running  # noqa: E501

        :return: The num_target_nas_jobs_running of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_target_nas_jobs_running

    @num_target_nas_jobs_running.setter
    def num_target_nas_jobs_running(self, num_target_nas_jobs_running):
        """Sets the num_target_nas_jobs_running of this ServiceModel.

        The number of target NAS jobs currently running  # noqa: E501

        :param num_target_nas_jobs_running: The num_target_nas_jobs_running of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_target_nas_jobs_running = num_target_nas_jobs_running

    @property
    def num_source_vtl_jobs_running(self):
        """Gets the num_source_vtl_jobs_running of this ServiceModel.  # noqa: E501

        The number of source VTL jobs currently running  # noqa: E501

        :return: The num_source_vtl_jobs_running of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_source_vtl_jobs_running

    @num_source_vtl_jobs_running.setter
    def num_source_vtl_jobs_running(self, num_source_vtl_jobs_running):
        """Sets the num_source_vtl_jobs_running of this ServiceModel.

        The number of source VTL jobs currently running  # noqa: E501

        :param num_source_vtl_jobs_running: The num_source_vtl_jobs_running of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_source_vtl_jobs_running = num_source_vtl_jobs_running

    @property
    def num_source_nas_jobs_running(self):
        """Gets the num_source_nas_jobs_running of this ServiceModel.  # noqa: E501

        The number of source NAS jobs currently running  # noqa: E501

        :return: The num_source_nas_jobs_running of this ServiceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_source_nas_jobs_running

    @num_source_nas_jobs_running.setter
    def num_source_nas_jobs_running(self, num_source_nas_jobs_running):
        """Sets the num_source_nas_jobs_running of this ServiceModel.

        The number of source NAS jobs currently running  # noqa: E501

        :param num_source_nas_jobs_running: The num_source_nas_jobs_running of this ServiceModel.  # noqa: E501
        :type: int
        """

        self._num_source_nas_jobs_running = num_source_nas_jobs_running

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
