# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class NasShareMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'share_id': 'int',
        'name': 'str',
        'rep_status': 'int',
        'rep_status_string': 'str',
        'rep_role': 'int',
        'rep_role_string': 'str',
        'num_entries': 'int',
        'num_entries_out_of_sync': 'int',
        'num_entries_out_of_sync_warning': 'int',
        'num_entries_out_of_sync_critical': 'int',
        'out_of_sync_hours': 'int',
        'average_logical_throughput': 'int',
        'average_network_throughput': 'int',
        'percentage_average_bandwidth_save': 'float',
        'recovery_active': 'bool',
        'source_appliance_mapping_details': 'PartnerApplianceShareModel',
        'target_appliance_mapping_details': 'PartnerApplianceShareModel',
        'share_name': 'str',
        'mapping_health_status_level': 'int',
        'mapping_health_status_level_string': 'str',
        'share_health_status_level': 'int',
        'share_health_status_level_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'share_id': 'shareId',
        'name': 'name',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'rep_role': 'repRole',
        'rep_role_string': 'repRoleString',
        'num_entries': 'numEntries',
        'num_entries_out_of_sync': 'numEntriesOutOfSync',
        'num_entries_out_of_sync_warning': 'numEntriesOutOfSyncWarning',
        'num_entries_out_of_sync_critical': 'numEntriesOutOfSyncCritical',
        'out_of_sync_hours': 'outOfSyncHours',
        'average_logical_throughput': 'averageLogicalThroughput',
        'average_network_throughput': 'averageNetworkThroughput',
        'percentage_average_bandwidth_save': 'percentageAverageBandwidthSave',
        'recovery_active': 'recoveryActive',
        'source_appliance_mapping_details': 'sourceApplianceMappingDetails',
        'target_appliance_mapping_details': 'targetApplianceMappingDetails',
        'share_name': 'shareName',
        'mapping_health_status_level': 'mappingHealthStatusLevel',
        'mapping_health_status_level_string': 'mappingHealthStatusLevelString',
        'share_health_status_level': 'shareHealthStatusLevel',
        'share_health_status_level_string': 'shareHealthStatusLevelString'
    }

    def __init__(self, id=None, share_id=None, name=None, rep_status=None, rep_status_string=None, rep_role=None, rep_role_string=None, num_entries=None, num_entries_out_of_sync=None, num_entries_out_of_sync_warning=None, num_entries_out_of_sync_critical=None, out_of_sync_hours=None, average_logical_throughput=None, average_network_throughput=None, percentage_average_bandwidth_save=None, recovery_active=False, source_appliance_mapping_details=None, target_appliance_mapping_details=None, share_name=None, mapping_health_status_level=None, mapping_health_status_level_string=None, share_health_status_level=None, share_health_status_level_string=None):  # noqa: E501
        """NasShareMapping - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._share_id = None
        self._name = None
        self._rep_status = None
        self._rep_status_string = None
        self._rep_role = None
        self._rep_role_string = None
        self._num_entries = None
        self._num_entries_out_of_sync = None
        self._num_entries_out_of_sync_warning = None
        self._num_entries_out_of_sync_critical = None
        self._out_of_sync_hours = None
        self._average_logical_throughput = None
        self._average_network_throughput = None
        self._percentage_average_bandwidth_save = None
        self._recovery_active = None
        self._source_appliance_mapping_details = None
        self._target_appliance_mapping_details = None
        self._share_name = None
        self._mapping_health_status_level = None
        self._mapping_health_status_level_string = None
        self._share_health_status_level = None
        self._share_health_status_level_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if share_id is not None:
            self.share_id = share_id
        if name is not None:
            self.name = name
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if rep_role is not None:
            self.rep_role = rep_role
        if rep_role_string is not None:
            self.rep_role_string = rep_role_string
        if num_entries is not None:
            self.num_entries = num_entries
        if num_entries_out_of_sync is not None:
            self.num_entries_out_of_sync = num_entries_out_of_sync
        if num_entries_out_of_sync_warning is not None:
            self.num_entries_out_of_sync_warning = num_entries_out_of_sync_warning
        if num_entries_out_of_sync_critical is not None:
            self.num_entries_out_of_sync_critical = num_entries_out_of_sync_critical
        if out_of_sync_hours is not None:
            self.out_of_sync_hours = out_of_sync_hours
        if average_logical_throughput is not None:
            self.average_logical_throughput = average_logical_throughput
        if average_network_throughput is not None:
            self.average_network_throughput = average_network_throughput
        if percentage_average_bandwidth_save is not None:
            self.percentage_average_bandwidth_save = percentage_average_bandwidth_save
        if recovery_active is not None:
            self.recovery_active = recovery_active
        if source_appliance_mapping_details is not None:
            self.source_appliance_mapping_details = source_appliance_mapping_details
        if target_appliance_mapping_details is not None:
            self.target_appliance_mapping_details = target_appliance_mapping_details
        if share_name is not None:
            self.share_name = share_name
        if mapping_health_status_level is not None:
            self.mapping_health_status_level = mapping_health_status_level
        if mapping_health_status_level_string is not None:
            self.mapping_health_status_level_string = mapping_health_status_level_string
        if share_health_status_level is not None:
            self.share_health_status_level = share_health_status_level
        if share_health_status_level_string is not None:
            self.share_health_status_level_string = share_health_status_level_string

    @property
    def id(self):
        """Gets the id of this NasShareMapping.  # noqa: E501

        Unique ID for this mapping within the current share.  # noqa: E501

        :return: The id of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NasShareMapping.

        Unique ID for this mapping within the current share.  # noqa: E501

        :param id: The id of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def share_id(self):
        """Gets the share_id of this NasShareMapping.  # noqa: E501

        Unique ID for the share this mapping belonds to  # noqa: E501

        :return: The share_id of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this NasShareMapping.

        Unique ID for the share this mapping belonds to  # noqa: E501

        :param share_id: The share_id of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._share_id = share_id

    @property
    def name(self):
        """Gets the name of this NasShareMapping.  # noqa: E501

        String which could be displayed to the user.  # noqa: E501

        :return: The name of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasShareMapping.

        String which could be displayed to the user.  # noqa: E501

        :param name: The name of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rep_status(self):
        """Gets the rep_status of this NasShareMapping.  # noqa: E501

        Enum value corresponding to the replication status of the mapping.  # noqa: E501

        :return: The rep_status of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this NasShareMapping.

        Enum value corresponding to the replication status of the mapping.  # noqa: E501

        :param rep_status: The rep_status of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this NasShareMapping.  # noqa: E501

        String representation of the replication status of the mapping.  # noqa: E501

        :return: The rep_status_string of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this NasShareMapping.

        String representation of the replication status of the mapping.  # noqa: E501

        :param rep_status_string: The rep_status_string of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._rep_status_string = rep_status_string

    @property
    def rep_role(self):
        """Gets the rep_role of this NasShareMapping.  # noqa: E501

        Enum value corresponding to the replication role of the local library.  # noqa: E501

        :return: The rep_role of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._rep_role

    @rep_role.setter
    def rep_role(self, rep_role):
        """Sets the rep_role of this NasShareMapping.

        Enum value corresponding to the replication role of the local library.  # noqa: E501

        :param rep_role: The rep_role of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._rep_role = rep_role

    @property
    def rep_role_string(self):
        """Gets the rep_role_string of this NasShareMapping.  # noqa: E501

        String representation of the replication role of the local library.  # noqa: E501

        :return: The rep_role_string of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._rep_role_string

    @rep_role_string.setter
    def rep_role_string(self, rep_role_string):
        """Sets the rep_role_string of this NasShareMapping.

        String representation of the replication role of the local library.  # noqa: E501

        :param rep_role_string: The rep_role_string of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._rep_role_string = rep_role_string

    @property
    def num_entries(self):
        """Gets the num_entries of this NasShareMapping.  # noqa: E501

        The number of replicating entries either files or directories in the mapping.  # noqa: E501

        :return: The num_entries of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._num_entries

    @num_entries.setter
    def num_entries(self, num_entries):
        """Sets the num_entries of this NasShareMapping.

        The number of replicating entries either files or directories in the mapping.  # noqa: E501

        :param num_entries: The num_entries of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._num_entries = num_entries

    @property
    def num_entries_out_of_sync(self):
        """Gets the num_entries_out_of_sync of this NasShareMapping.  # noqa: E501

        The number of entries that are currently out of sync in the mapping.  # noqa: E501

        :return: The num_entries_out_of_sync of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._num_entries_out_of_sync

    @num_entries_out_of_sync.setter
    def num_entries_out_of_sync(self, num_entries_out_of_sync):
        """Sets the num_entries_out_of_sync of this NasShareMapping.

        The number of entries that are currently out of sync in the mapping.  # noqa: E501

        :param num_entries_out_of_sync: The num_entries_out_of_sync of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._num_entries_out_of_sync = num_entries_out_of_sync

    @property
    def num_entries_out_of_sync_warning(self):
        """Gets the num_entries_out_of_sync_warning of this NasShareMapping.  # noqa: E501

        The number of entries that are currently out of sync in the mapping for which there are warnings.  # noqa: E501

        :return: The num_entries_out_of_sync_warning of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._num_entries_out_of_sync_warning

    @num_entries_out_of_sync_warning.setter
    def num_entries_out_of_sync_warning(self, num_entries_out_of_sync_warning):
        """Sets the num_entries_out_of_sync_warning of this NasShareMapping.

        The number of entries that are currently out of sync in the mapping for which there are warnings.  # noqa: E501

        :param num_entries_out_of_sync_warning: The num_entries_out_of_sync_warning of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._num_entries_out_of_sync_warning = num_entries_out_of_sync_warning

    @property
    def num_entries_out_of_sync_critical(self):
        """Gets the num_entries_out_of_sync_critical of this NasShareMapping.  # noqa: E501

        The number of entries that are currently out of sync in the mapping for which there are critical errors.  # noqa: E501

        :return: The num_entries_out_of_sync_critical of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._num_entries_out_of_sync_critical

    @num_entries_out_of_sync_critical.setter
    def num_entries_out_of_sync_critical(self, num_entries_out_of_sync_critical):
        """Sets the num_entries_out_of_sync_critical of this NasShareMapping.

        The number of entries that are currently out of sync in the mapping for which there are critical errors.  # noqa: E501

        :param num_entries_out_of_sync_critical: The num_entries_out_of_sync_critical of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._num_entries_out_of_sync_critical = num_entries_out_of_sync_critical

    @property
    def out_of_sync_hours(self):
        """Gets the out_of_sync_hours of this NasShareMapping.  # noqa: E501

        The number of hours that the mapping has been out of sync.  # noqa: E501

        :return: The out_of_sync_hours of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_hours

    @out_of_sync_hours.setter
    def out_of_sync_hours(self, out_of_sync_hours):
        """Sets the out_of_sync_hours of this NasShareMapping.

        The number of hours that the mapping has been out of sync.  # noqa: E501

        :param out_of_sync_hours: The out_of_sync_hours of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._out_of_sync_hours = out_of_sync_hours

    @property
    def average_logical_throughput(self):
        """Gets the average_logical_throughput of this NasShareMapping.  # noqa: E501

        The average throughput of the jobs (in bytes per second)  # noqa: E501

        :return: The average_logical_throughput of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._average_logical_throughput

    @average_logical_throughput.setter
    def average_logical_throughput(self, average_logical_throughput):
        """Sets the average_logical_throughput of this NasShareMapping.

        The average throughput of the jobs (in bytes per second)  # noqa: E501

        :param average_logical_throughput: The average_logical_throughput of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._average_logical_throughput = average_logical_throughput

    @property
    def average_network_throughput(self):
        """Gets the average_network_throughput of this NasShareMapping.  # noqa: E501

        The bandwidth used by the slot data job in bytes per second.  # noqa: E501

        :return: The average_network_throughput of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._average_network_throughput

    @average_network_throughput.setter
    def average_network_throughput(self, average_network_throughput):
        """Sets the average_network_throughput of this NasShareMapping.

        The bandwidth used by the slot data job in bytes per second.  # noqa: E501

        :param average_network_throughput: The average_network_throughput of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._average_network_throughput = average_network_throughput

    @property
    def percentage_average_bandwidth_save(self):
        """Gets the percentage_average_bandwidth_save of this NasShareMapping.  # noqa: E501

        The current bandwidth saving of the job in percentage.  # noqa: E501

        :return: The percentage_average_bandwidth_save of this NasShareMapping.  # noqa: E501
        :rtype: float
        """
        return self._percentage_average_bandwidth_save

    @percentage_average_bandwidth_save.setter
    def percentage_average_bandwidth_save(self, percentage_average_bandwidth_save):
        """Sets the percentage_average_bandwidth_save of this NasShareMapping.

        The current bandwidth saving of the job in percentage.  # noqa: E501

        :param percentage_average_bandwidth_save: The percentage_average_bandwidth_save of this NasShareMapping.  # noqa: E501
        :type: float
        """

        self._percentage_average_bandwidth_save = percentage_average_bandwidth_save

    @property
    def recovery_active(self):
        """Gets the recovery_active of this NasShareMapping.  # noqa: E501

        Flag stating whether the there is an active recovery job in the mapping or not.  # noqa: E501

        :return: The recovery_active of this NasShareMapping.  # noqa: E501
        :rtype: bool
        """
        return self._recovery_active

    @recovery_active.setter
    def recovery_active(self, recovery_active):
        """Sets the recovery_active of this NasShareMapping.

        Flag stating whether the there is an active recovery job in the mapping or not.  # noqa: E501

        :param recovery_active: The recovery_active of this NasShareMapping.  # noqa: E501
        :type: bool
        """

        self._recovery_active = recovery_active

    @property
    def source_appliance_mapping_details(self):
        """Gets the source_appliance_mapping_details of this NasShareMapping.  # noqa: E501

        Details on the source appliance, share and mappings  # noqa: E501

        :return: The source_appliance_mapping_details of this NasShareMapping.  # noqa: E501
        :rtype: PartnerApplianceShareModel
        """
        return self._source_appliance_mapping_details

    @source_appliance_mapping_details.setter
    def source_appliance_mapping_details(self, source_appliance_mapping_details):
        """Sets the source_appliance_mapping_details of this NasShareMapping.

        Details on the source appliance, share and mappings  # noqa: E501

        :param source_appliance_mapping_details: The source_appliance_mapping_details of this NasShareMapping.  # noqa: E501
        :type: PartnerApplianceShareModel
        """

        self._source_appliance_mapping_details = source_appliance_mapping_details

    @property
    def target_appliance_mapping_details(self):
        """Gets the target_appliance_mapping_details of this NasShareMapping.  # noqa: E501

        Details on the target appliance, share and mappings.  # noqa: E501

        :return: The target_appliance_mapping_details of this NasShareMapping.  # noqa: E501
        :rtype: PartnerApplianceShareModel
        """
        return self._target_appliance_mapping_details

    @target_appliance_mapping_details.setter
    def target_appliance_mapping_details(self, target_appliance_mapping_details):
        """Sets the target_appliance_mapping_details of this NasShareMapping.

        Details on the target appliance, share and mappings.  # noqa: E501

        :param target_appliance_mapping_details: The target_appliance_mapping_details of this NasShareMapping.  # noqa: E501
        :type: PartnerApplianceShareModel
        """

        self._target_appliance_mapping_details = target_appliance_mapping_details

    @property
    def share_name(self):
        """Gets the share_name of this NasShareMapping.  # noqa: E501

        Name of the local share  # noqa: E501

        :return: The share_name of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this NasShareMapping.

        Name of the local share  # noqa: E501

        :param share_name: The share_name of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._share_name = share_name

    @property
    def mapping_health_status_level(self):
        """Gets the mapping_health_status_level of this NasShareMapping.  # noqa: E501

        Health level of the mapping  # noqa: E501

        :return: The mapping_health_status_level of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._mapping_health_status_level

    @mapping_health_status_level.setter
    def mapping_health_status_level(self, mapping_health_status_level):
        """Sets the mapping_health_status_level of this NasShareMapping.

        Health level of the mapping  # noqa: E501

        :param mapping_health_status_level: The mapping_health_status_level of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._mapping_health_status_level = mapping_health_status_level

    @property
    def mapping_health_status_level_string(self):
        """Gets the mapping_health_status_level_string of this NasShareMapping.  # noqa: E501

        String representation of the health level of the mapping  # noqa: E501

        :return: The mapping_health_status_level_string of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._mapping_health_status_level_string

    @mapping_health_status_level_string.setter
    def mapping_health_status_level_string(self, mapping_health_status_level_string):
        """Sets the mapping_health_status_level_string of this NasShareMapping.

        String representation of the health level of the mapping  # noqa: E501

        :param mapping_health_status_level_string: The mapping_health_status_level_string of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._mapping_health_status_level_string = mapping_health_status_level_string

    @property
    def share_health_status_level(self):
        """Gets the share_health_status_level of this NasShareMapping.  # noqa: E501

        Health level of the local share  # noqa: E501

        :return: The share_health_status_level of this NasShareMapping.  # noqa: E501
        :rtype: int
        """
        return self._share_health_status_level

    @share_health_status_level.setter
    def share_health_status_level(self, share_health_status_level):
        """Sets the share_health_status_level of this NasShareMapping.

        Health level of the local share  # noqa: E501

        :param share_health_status_level: The share_health_status_level of this NasShareMapping.  # noqa: E501
        :type: int
        """

        self._share_health_status_level = share_health_status_level

    @property
    def share_health_status_level_string(self):
        """Gets the share_health_status_level_string of this NasShareMapping.  # noqa: E501

        String representation of the health level of the local share  # noqa: E501

        :return: The share_health_status_level_string of this NasShareMapping.  # noqa: E501
        :rtype: str
        """
        return self._share_health_status_level_string

    @share_health_status_level_string.setter
    def share_health_status_level_string(self, share_health_status_level_string):
        """Sets the share_health_status_level_string of this NasShareMapping.

        String representation of the health level of the local share  # noqa: E501

        :param share_health_status_level_string: The share_health_status_level_string of this NasShareMapping.  # noqa: E501
        :type: str
        """

        self._share_health_status_level_string = share_health_status_level_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasShareMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasShareMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
