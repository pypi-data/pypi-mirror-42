# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class NasShareMappingPostModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'marked_for_recovery': 'bool',
        'target_share_id': 'int',
        'target_appliance_id': 'int',
        'adopt_mapping': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'marked_for_recovery': 'markedForRecovery',
        'target_share_id': 'targetShareId',
        'target_appliance_id': 'targetApplianceId',
        'adopt_mapping': 'adoptMapping'
    }

    def __init__(self, name=None, marked_for_recovery=False, target_share_id=None, target_appliance_id=None, adopt_mapping=False):  # noqa: E501
        """NasShareMappingPostModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._marked_for_recovery = None
        self._target_share_id = None
        self._target_appliance_id = None
        self._adopt_mapping = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if marked_for_recovery is not None:
            self.marked_for_recovery = marked_for_recovery
        self.target_share_id = target_share_id
        self.target_appliance_id = target_appliance_id
        if adopt_mapping is not None:
            self.adopt_mapping = adopt_mapping

    @property
    def name(self):
        """Gets the name of this NasShareMappingPostModel.  # noqa: E501

        User defined name given to mapping  # noqa: E501

        :return: The name of this NasShareMappingPostModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NasShareMappingPostModel.

        User defined name given to mapping  # noqa: E501

        :param name: The name of this NasShareMappingPostModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def marked_for_recovery(self):
        """Gets the marked_for_recovery of this NasShareMappingPostModel.  # noqa: E501

        Indicating if the share mapping will be marked for recovery.  # noqa: E501

        :return: The marked_for_recovery of this NasShareMappingPostModel.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_recovery

    @marked_for_recovery.setter
    def marked_for_recovery(self, marked_for_recovery):
        """Sets the marked_for_recovery of this NasShareMappingPostModel.

        Indicating if the share mapping will be marked for recovery.  # noqa: E501

        :param marked_for_recovery: The marked_for_recovery of this NasShareMappingPostModel.  # noqa: E501
        :type: bool
        """

        self._marked_for_recovery = marked_for_recovery

    @property
    def target_share_id(self):
        """Gets the target_share_id of this NasShareMappingPostModel.  # noqa: E501

        Id of the target share  # noqa: E501

        :return: The target_share_id of this NasShareMappingPostModel.  # noqa: E501
        :rtype: int
        """
        return self._target_share_id

    @target_share_id.setter
    def target_share_id(self, target_share_id):
        """Sets the target_share_id of this NasShareMappingPostModel.

        Id of the target share  # noqa: E501

        :param target_share_id: The target_share_id of this NasShareMappingPostModel.  # noqa: E501
        :type: int
        """
        if target_share_id is None:
            raise ValueError("Invalid value for `target_share_id`, must not be `None`")  # noqa: E501

        self._target_share_id = target_share_id

    @property
    def target_appliance_id(self):
        """Gets the target_appliance_id of this NasShareMappingPostModel.  # noqa: E501

        Id of the target appliance.  # noqa: E501

        :return: The target_appliance_id of this NasShareMappingPostModel.  # noqa: E501
        :rtype: int
        """
        return self._target_appliance_id

    @target_appliance_id.setter
    def target_appliance_id(self, target_appliance_id):
        """Sets the target_appliance_id of this NasShareMappingPostModel.

        Id of the target appliance.  # noqa: E501

        :param target_appliance_id: The target_appliance_id of this NasShareMappingPostModel.  # noqa: E501
        :type: int
        """
        if target_appliance_id is None:
            raise ValueError("Invalid value for `target_appliance_id`, must not be `None`")  # noqa: E501

        self._target_appliance_id = target_appliance_id

    @property
    def adopt_mapping(self):
        """Gets the adopt_mapping of this NasShareMappingPostModel.  # noqa: E501

        Flag indicating whether to adopt an existing mapping on the target share.  # noqa: E501

        :return: The adopt_mapping of this NasShareMappingPostModel.  # noqa: E501
        :rtype: bool
        """
        return self._adopt_mapping

    @adopt_mapping.setter
    def adopt_mapping(self, adopt_mapping):
        """Sets the adopt_mapping of this NasShareMappingPostModel.

        Flag indicating whether to adopt an existing mapping on the target share.  # noqa: E501

        :param adopt_mapping: The adopt_mapping of this NasShareMappingPostModel.  # noqa: E501
        :type: bool
        """

        self._adopt_mapping = adopt_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NasShareMappingPostModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NasShareMappingPostModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
