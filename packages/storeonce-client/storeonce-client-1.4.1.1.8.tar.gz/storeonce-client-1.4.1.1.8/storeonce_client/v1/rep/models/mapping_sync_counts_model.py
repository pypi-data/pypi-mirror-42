# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class MappingSyncCountsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_mappings_total': 'int',
        'num_mappings_status_pending_synchronisation': 'int',
        'num_mappings_status_synchronising': 'int',
        'num_mapping_status_synchronised': 'int',
        'num_mappings_health_level_ok': 'int',
        'num_mappings_health_level_warning': 'int',
        'num_mappings_health_level_critical': 'int'
    }

    attribute_map = {
        'num_mappings_total': 'numMappingsTotal',
        'num_mappings_status_pending_synchronisation': 'numMappingsStatusPendingSynchronisation',
        'num_mappings_status_synchronising': 'numMappingsStatusSynchronising',
        'num_mapping_status_synchronised': 'numMappingStatusSynchronised',
        'num_mappings_health_level_ok': 'numMappingsHealthLevelOK',
        'num_mappings_health_level_warning': 'numMappingsHealthLevelWarning',
        'num_mappings_health_level_critical': 'numMappingsHealthLevelCritical'
    }

    def __init__(self, num_mappings_total=None, num_mappings_status_pending_synchronisation=None, num_mappings_status_synchronising=None, num_mapping_status_synchronised=None, num_mappings_health_level_ok=None, num_mappings_health_level_warning=None, num_mappings_health_level_critical=None):  # noqa: E501
        """MappingSyncCountsModel - a model defined in Swagger"""  # noqa: E501

        self._num_mappings_total = None
        self._num_mappings_status_pending_synchronisation = None
        self._num_mappings_status_synchronising = None
        self._num_mapping_status_synchronised = None
        self._num_mappings_health_level_ok = None
        self._num_mappings_health_level_warning = None
        self._num_mappings_health_level_critical = None
        self.discriminator = None

        if num_mappings_total is not None:
            self.num_mappings_total = num_mappings_total
        if num_mappings_status_pending_synchronisation is not None:
            self.num_mappings_status_pending_synchronisation = num_mappings_status_pending_synchronisation
        if num_mappings_status_synchronising is not None:
            self.num_mappings_status_synchronising = num_mappings_status_synchronising
        if num_mapping_status_synchronised is not None:
            self.num_mapping_status_synchronised = num_mapping_status_synchronised
        if num_mappings_health_level_ok is not None:
            self.num_mappings_health_level_ok = num_mappings_health_level_ok
        if num_mappings_health_level_warning is not None:
            self.num_mappings_health_level_warning = num_mappings_health_level_warning
        if num_mappings_health_level_critical is not None:
            self.num_mappings_health_level_critical = num_mappings_health_level_critical

    @property
    def num_mappings_total(self):
        """Gets the num_mappings_total of this MappingSyncCountsModel.  # noqa: E501

        Total mappings count.  # noqa: E501

        :return: The num_mappings_total of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_total

    @num_mappings_total.setter
    def num_mappings_total(self, num_mappings_total):
        """Sets the num_mappings_total of this MappingSyncCountsModel.

        Total mappings count.  # noqa: E501

        :param num_mappings_total: The num_mappings_total of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_total = num_mappings_total

    @property
    def num_mappings_status_pending_synchronisation(self):
        """Gets the num_mappings_status_pending_synchronisation of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings pending sync  # noqa: E501

        :return: The num_mappings_status_pending_synchronisation of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_status_pending_synchronisation

    @num_mappings_status_pending_synchronisation.setter
    def num_mappings_status_pending_synchronisation(self, num_mappings_status_pending_synchronisation):
        """Sets the num_mappings_status_pending_synchronisation of this MappingSyncCountsModel.

        Number of mappings pending sync  # noqa: E501

        :param num_mappings_status_pending_synchronisation: The num_mappings_status_pending_synchronisation of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_status_pending_synchronisation = num_mappings_status_pending_synchronisation

    @property
    def num_mappings_status_synchronising(self):
        """Gets the num_mappings_status_synchronising of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings Synchronising.  # noqa: E501

        :return: The num_mappings_status_synchronising of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_status_synchronising

    @num_mappings_status_synchronising.setter
    def num_mappings_status_synchronising(self, num_mappings_status_synchronising):
        """Sets the num_mappings_status_synchronising of this MappingSyncCountsModel.

        Number of mappings Synchronising.  # noqa: E501

        :param num_mappings_status_synchronising: The num_mappings_status_synchronising of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_status_synchronising = num_mappings_status_synchronising

    @property
    def num_mapping_status_synchronised(self):
        """Gets the num_mapping_status_synchronised of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings Synchronised.  # noqa: E501

        :return: The num_mapping_status_synchronised of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mapping_status_synchronised

    @num_mapping_status_synchronised.setter
    def num_mapping_status_synchronised(self, num_mapping_status_synchronised):
        """Sets the num_mapping_status_synchronised of this MappingSyncCountsModel.

        Number of mappings Synchronised.  # noqa: E501

        :param num_mapping_status_synchronised: The num_mapping_status_synchronised of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mapping_status_synchronised = num_mapping_status_synchronised

    @property
    def num_mappings_health_level_ok(self):
        """Gets the num_mappings_health_level_ok of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings with an OK health status.  # noqa: E501

        :return: The num_mappings_health_level_ok of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_health_level_ok

    @num_mappings_health_level_ok.setter
    def num_mappings_health_level_ok(self, num_mappings_health_level_ok):
        """Sets the num_mappings_health_level_ok of this MappingSyncCountsModel.

        Number of mappings with an OK health status.  # noqa: E501

        :param num_mappings_health_level_ok: The num_mappings_health_level_ok of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_health_level_ok = num_mappings_health_level_ok

    @property
    def num_mappings_health_level_warning(self):
        """Gets the num_mappings_health_level_warning of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings with a warning health status  # noqa: E501

        :return: The num_mappings_health_level_warning of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_health_level_warning

    @num_mappings_health_level_warning.setter
    def num_mappings_health_level_warning(self, num_mappings_health_level_warning):
        """Sets the num_mappings_health_level_warning of this MappingSyncCountsModel.

        Number of mappings with a warning health status  # noqa: E501

        :param num_mappings_health_level_warning: The num_mappings_health_level_warning of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_health_level_warning = num_mappings_health_level_warning

    @property
    def num_mappings_health_level_critical(self):
        """Gets the num_mappings_health_level_critical of this MappingSyncCountsModel.  # noqa: E501

        Number of mappings with a critical health status  # noqa: E501

        :return: The num_mappings_health_level_critical of this MappingSyncCountsModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings_health_level_critical

    @num_mappings_health_level_critical.setter
    def num_mappings_health_level_critical(self, num_mappings_health_level_critical):
        """Sets the num_mappings_health_level_critical of this MappingSyncCountsModel.

        Number of mappings with a critical health status  # noqa: E501

        :param num_mappings_health_level_critical: The num_mappings_health_level_critical of this MappingSyncCountsModel.  # noqa: E501
        :type: int
        """

        self._num_mappings_health_level_critical = num_mappings_health_level_critical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MappingSyncCountsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MappingSyncCountsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
