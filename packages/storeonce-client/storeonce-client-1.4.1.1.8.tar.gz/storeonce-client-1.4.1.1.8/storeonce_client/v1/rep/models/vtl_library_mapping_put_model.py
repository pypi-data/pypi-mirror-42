# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class VtlLibraryMappingPutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'target_library_id': 'int',
        'target_appliance_id': 'int',
        'mapped_slots': 'list[VtlMappingMappedSlotsPutModel]'
    }

    attribute_map = {
        'name': 'name',
        'target_library_id': 'targetLibraryId',
        'target_appliance_id': 'targetApplianceId',
        'mapped_slots': 'mappedSlots'
    }

    def __init__(self, name=None, target_library_id=None, target_appliance_id=None, mapped_slots=None):  # noqa: E501
        """VtlLibraryMappingPutModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._target_library_id = None
        self._target_appliance_id = None
        self._mapped_slots = None
        self.discriminator = None

        if name is not None:
            self.name = name
        self.target_library_id = target_library_id
        self.target_appliance_id = target_appliance_id
        if mapped_slots is not None:
            self.mapped_slots = mapped_slots

    @property
    def name(self):
        """Gets the name of this VtlLibraryMappingPutModel.  # noqa: E501

        Name of the store  # noqa: E501

        :return: The name of this VtlLibraryMappingPutModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VtlLibraryMappingPutModel.

        Name of the store  # noqa: E501

        :param name: The name of this VtlLibraryMappingPutModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def target_library_id(self):
        """Gets the target_library_id of this VtlLibraryMappingPutModel.  # noqa: E501

        Id of the target library.  # noqa: E501

        :return: The target_library_id of this VtlLibraryMappingPutModel.  # noqa: E501
        :rtype: int
        """
        return self._target_library_id

    @target_library_id.setter
    def target_library_id(self, target_library_id):
        """Sets the target_library_id of this VtlLibraryMappingPutModel.

        Id of the target library.  # noqa: E501

        :param target_library_id: The target_library_id of this VtlLibraryMappingPutModel.  # noqa: E501
        :type: int
        """
        if target_library_id is None:
            raise ValueError("Invalid value for `target_library_id`, must not be `None`")  # noqa: E501

        self._target_library_id = target_library_id

    @property
    def target_appliance_id(self):
        """Gets the target_appliance_id of this VtlLibraryMappingPutModel.  # noqa: E501

        Id of the target appliance.  # noqa: E501

        :return: The target_appliance_id of this VtlLibraryMappingPutModel.  # noqa: E501
        :rtype: int
        """
        return self._target_appliance_id

    @target_appliance_id.setter
    def target_appliance_id(self, target_appliance_id):
        """Sets the target_appliance_id of this VtlLibraryMappingPutModel.

        Id of the target appliance.  # noqa: E501

        :param target_appliance_id: The target_appliance_id of this VtlLibraryMappingPutModel.  # noqa: E501
        :type: int
        """
        if target_appliance_id is None:
            raise ValueError("Invalid value for `target_appliance_id`, must not be `None`")  # noqa: E501

        self._target_appliance_id = target_appliance_id

    @property
    def mapped_slots(self):
        """Gets the mapped_slots of this VtlLibraryMappingPutModel.  # noqa: E501

        The collection of slots that are mapped.  # noqa: E501

        :return: The mapped_slots of this VtlLibraryMappingPutModel.  # noqa: E501
        :rtype: list[VtlMappingMappedSlotsPutModel]
        """
        return self._mapped_slots

    @mapped_slots.setter
    def mapped_slots(self, mapped_slots):
        """Sets the mapped_slots of this VtlLibraryMappingPutModel.

        The collection of slots that are mapped.  # noqa: E501

        :param mapped_slots: The mapped_slots of this VtlLibraryMappingPutModel.  # noqa: E501
        :type: list[VtlMappingMappedSlotsPutModel]
        """

        self._mapped_slots = mapped_slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VtlLibraryMappingPutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VtlLibraryMappingPutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
