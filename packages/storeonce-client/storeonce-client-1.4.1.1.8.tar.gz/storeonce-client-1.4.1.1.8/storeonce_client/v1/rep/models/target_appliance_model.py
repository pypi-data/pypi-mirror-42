# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TargetApplianceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'address': 'str',
        'serial_number': 'str',
        'health_level': 'int',
        'health_level_string': 'str',
        'rep_status': 'int',
        'rep_status_string': 'str',
        'capacity_bytes': 'int',
        'free_bytes': 'int',
        'online': 'bool',
        'connection_failure_reason': 'int',
        'connection_failure_reason_string': 'str',
        'protocol_version': 'int',
        'product_class': 'str',
        'software_version': 'str',
        'day': 'int',
        'day_string': 'str',
        'local_time': 'str',
        'max_mappings_per_library': 'int',
        'blackout_active': 'bool',
        'blackout_windows': 'list[WindowCommonModel]',
        'user_bytes': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'address': 'address',
        'serial_number': 'serialNumber',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'capacity_bytes': 'capacityBytes',
        'free_bytes': 'freeBytes',
        'online': 'online',
        'connection_failure_reason': 'connectionFailureReason',
        'connection_failure_reason_string': 'connectionFailureReasonString',
        'protocol_version': 'protocolVersion',
        'product_class': 'productClass',
        'software_version': 'softwareVersion',
        'day': 'day',
        'day_string': 'dayString',
        'local_time': 'localTime',
        'max_mappings_per_library': 'maxMappingsPerLibrary',
        'blackout_active': 'blackoutActive',
        'blackout_windows': 'blackoutWindows',
        'user_bytes': 'userBytes'
    }

    def __init__(self, id=None, name=None, address=None, serial_number=None, health_level=None, health_level_string=None, rep_status=None, rep_status_string=None, capacity_bytes=None, free_bytes=None, online=False, connection_failure_reason=None, connection_failure_reason_string=None, protocol_version=None, product_class=None, software_version=None, day=None, day_string=None, local_time=None, max_mappings_per_library=None, blackout_active=False, blackout_windows=None, user_bytes=None):  # noqa: E501
        """TargetApplianceModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._address = None
        self._serial_number = None
        self._health_level = None
        self._health_level_string = None
        self._rep_status = None
        self._rep_status_string = None
        self._capacity_bytes = None
        self._free_bytes = None
        self._online = None
        self._connection_failure_reason = None
        self._connection_failure_reason_string = None
        self._protocol_version = None
        self._product_class = None
        self._software_version = None
        self._day = None
        self._day_string = None
        self._local_time = None
        self._max_mappings_per_library = None
        self._blackout_active = None
        self._blackout_windows = None
        self._user_bytes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address
        if serial_number is not None:
            self.serial_number = serial_number
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if capacity_bytes is not None:
            self.capacity_bytes = capacity_bytes
        if free_bytes is not None:
            self.free_bytes = free_bytes
        if online is not None:
            self.online = online
        if connection_failure_reason is not None:
            self.connection_failure_reason = connection_failure_reason
        if connection_failure_reason_string is not None:
            self.connection_failure_reason_string = connection_failure_reason_string
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if product_class is not None:
            self.product_class = product_class
        if software_version is not None:
            self.software_version = software_version
        if day is not None:
            self.day = day
        if day_string is not None:
            self.day_string = day_string
        if local_time is not None:
            self.local_time = local_time
        if max_mappings_per_library is not None:
            self.max_mappings_per_library = max_mappings_per_library
        if blackout_active is not None:
            self.blackout_active = blackout_active
        if blackout_windows is not None:
            self.blackout_windows = blackout_windows
        if user_bytes is not None:
            self.user_bytes = user_bytes

    @property
    def id(self):
        """Gets the id of this TargetApplianceModel.  # noqa: E501

        Unique ID of the target appliance  # noqa: E501

        :return: The id of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetApplianceModel.

        Unique ID of the target appliance  # noqa: E501

        :param id: The id of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TargetApplianceModel.  # noqa: E501

        Name of the target applicance  # noqa: E501

        :return: The name of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TargetApplianceModel.

        Name of the target applicance  # noqa: E501

        :param name: The name of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this TargetApplianceModel.  # noqa: E501

        The IP or hostname of the appliance.  # noqa: E501

        :return: The address of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TargetApplianceModel.

        The IP or hostname of the appliance.  # noqa: E501

        :param address: The address of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def serial_number(self):
        """Gets the serial_number of this TargetApplianceModel.  # noqa: E501

        Serial number of the appliance.  # noqa: E501

        :return: The serial_number of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this TargetApplianceModel.

        Serial number of the appliance.  # noqa: E501

        :param serial_number: The serial_number of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def health_level(self):
        """Gets the health_level of this TargetApplianceModel.  # noqa: E501

        Represents the health level of the service.  # noqa: E501

        :return: The health_level of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this TargetApplianceModel.

        Represents the health level of the service.  # noqa: E501

        :param health_level: The health_level of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this TargetApplianceModel.  # noqa: E501

        Localised string representation of the replication health.  # noqa: E501

        :return: The health_level_string of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this TargetApplianceModel.

        Localised string representation of the replication health.  # noqa: E501

        :param health_level_string: The health_level_string of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def rep_status(self):
        """Gets the rep_status of this TargetApplianceModel.  # noqa: E501

        Numeric representation of the replication status  # noqa: E501

        :return: The rep_status of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this TargetApplianceModel.

        Numeric representation of the replication status  # noqa: E501

        :param rep_status: The rep_status of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this TargetApplianceModel.  # noqa: E501

        Localised string detailing the service replication status  # noqa: E501

        :return: The rep_status_string of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this TargetApplianceModel.

        Localised string detailing the service replication status  # noqa: E501

        :param rep_status_string: The rep_status_string of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._rep_status_string = rep_status_string

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this TargetApplianceModel.  # noqa: E501

        Total capacity of the appliance in Bytes  # noqa: E501

        :return: The capacity_bytes of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this TargetApplianceModel.

        Total capacity of the appliance in Bytes  # noqa: E501

        :param capacity_bytes: The capacity_bytes of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    @property
    def free_bytes(self):
        """Gets the free_bytes of this TargetApplianceModel.  # noqa: E501

        Free space in the appliance in Bytes  # noqa: E501

        :return: The free_bytes of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._free_bytes

    @free_bytes.setter
    def free_bytes(self, free_bytes):
        """Sets the free_bytes of this TargetApplianceModel.

        Free space in the appliance in Bytes  # noqa: E501

        :param free_bytes: The free_bytes of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._free_bytes = free_bytes

    @property
    def online(self):
        """Gets the online of this TargetApplianceModel.  # noqa: E501

        True if the appliance is online. False otherwise  # noqa: E501

        :return: The online of this TargetApplianceModel.  # noqa: E501
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this TargetApplianceModel.

        True if the appliance is online. False otherwise  # noqa: E501

        :param online: The online of this TargetApplianceModel.  # noqa: E501
        :type: bool
        """

        self._online = online

    @property
    def connection_failure_reason(self):
        """Gets the connection_failure_reason of this TargetApplianceModel.  # noqa: E501

        Numeric representation of the connection failure reason  # noqa: E501

        :return: The connection_failure_reason of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._connection_failure_reason

    @connection_failure_reason.setter
    def connection_failure_reason(self, connection_failure_reason):
        """Sets the connection_failure_reason of this TargetApplianceModel.

        Numeric representation of the connection failure reason  # noqa: E501

        :param connection_failure_reason: The connection_failure_reason of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._connection_failure_reason = connection_failure_reason

    @property
    def connection_failure_reason_string(self):
        """Gets the connection_failure_reason_string of this TargetApplianceModel.  # noqa: E501

        Localised string representation of the last connection failure reason while trying to connect to this target appliance  # noqa: E501

        :return: The connection_failure_reason_string of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._connection_failure_reason_string

    @connection_failure_reason_string.setter
    def connection_failure_reason_string(self, connection_failure_reason_string):
        """Sets the connection_failure_reason_string of this TargetApplianceModel.

        Localised string representation of the last connection failure reason while trying to connect to this target appliance  # noqa: E501

        :param connection_failure_reason_string: The connection_failure_reason_string of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._connection_failure_reason_string = connection_failure_reason_string

    @property
    def protocol_version(self):
        """Gets the protocol_version of this TargetApplianceModel.  # noqa: E501

        Replication protocol version of the appliance  # noqa: E501

        :return: The protocol_version of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this TargetApplianceModel.

        Replication protocol version of the appliance  # noqa: E501

        :param protocol_version: The protocol_version of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._protocol_version = protocol_version

    @property
    def product_class(self):
        """Gets the product_class of this TargetApplianceModel.  # noqa: E501

        String describing the type of appliance  # noqa: E501

        :return: The product_class of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this TargetApplianceModel.

        String describing the type of appliance  # noqa: E501

        :param product_class: The product_class of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._product_class = product_class

    @property
    def software_version(self):
        """Gets the software_version of this TargetApplianceModel.  # noqa: E501

        Firmware version currently installed in the appliance  # noqa: E501

        :return: The software_version of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this TargetApplianceModel.

        Firmware version currently installed in the appliance  # noqa: E501

        :param software_version: The software_version of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def day(self):
        """Gets the day of this TargetApplianceModel.  # noqa: E501

        Numeric representation of the dayString  # noqa: E501

        :return: The day of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this TargetApplianceModel.

        Numeric representation of the dayString  # noqa: E501

        :param day: The day of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._day = day

    @property
    def day_string(self):
        """Gets the day_string of this TargetApplianceModel.  # noqa: E501

        Localised string denoting the day of week  # noqa: E501

        :return: The day_string of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._day_string

    @day_string.setter
    def day_string(self, day_string):
        """Sets the day_string of this TargetApplianceModel.

        Localised string denoting the day of week  # noqa: E501

        :param day_string: The day_string of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._day_string = day_string

    @property
    def local_time(self):
        """Gets the local_time of this TargetApplianceModel.  # noqa: E501

        String in 24hour time format denoting the local time of the Target Appliance.  # noqa: E501

        :return: The local_time of this TargetApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._local_time

    @local_time.setter
    def local_time(self, local_time):
        """Sets the local_time of this TargetApplianceModel.

        String in 24hour time format denoting the local time of the Target Appliance.  # noqa: E501

        :param local_time: The local_time of this TargetApplianceModel.  # noqa: E501
        :type: str
        """

        self._local_time = local_time

    @property
    def max_mappings_per_library(self):
        """Gets the max_mappings_per_library of this TargetApplianceModel.  # noqa: E501

        Maximum number of mappings per library that can be configured in target appliance.  # noqa: E501

        :return: The max_mappings_per_library of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._max_mappings_per_library

    @max_mappings_per_library.setter
    def max_mappings_per_library(self, max_mappings_per_library):
        """Sets the max_mappings_per_library of this TargetApplianceModel.

        Maximum number of mappings per library that can be configured in target appliance.  # noqa: E501

        :param max_mappings_per_library: The max_mappings_per_library of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._max_mappings_per_library = max_mappings_per_library

    @property
    def blackout_active(self):
        """Gets the blackout_active of this TargetApplianceModel.  # noqa: E501

        Status of blackout. True if blackout active, False if not.  # noqa: E501

        :return: The blackout_active of this TargetApplianceModel.  # noqa: E501
        :rtype: bool
        """
        return self._blackout_active

    @blackout_active.setter
    def blackout_active(self, blackout_active):
        """Sets the blackout_active of this TargetApplianceModel.

        Status of blackout. True if blackout active, False if not.  # noqa: E501

        :param blackout_active: The blackout_active of this TargetApplianceModel.  # noqa: E501
        :type: bool
        """

        self._blackout_active = blackout_active

    @property
    def blackout_windows(self):
        """Gets the blackout_windows of this TargetApplianceModel.  # noqa: E501

        List of blackout windows  # noqa: E501

        :return: The blackout_windows of this TargetApplianceModel.  # noqa: E501
        :rtype: list[WindowCommonModel]
        """
        return self._blackout_windows

    @blackout_windows.setter
    def blackout_windows(self, blackout_windows):
        """Sets the blackout_windows of this TargetApplianceModel.

        List of blackout windows  # noqa: E501

        :param blackout_windows: The blackout_windows of this TargetApplianceModel.  # noqa: E501
        :type: list[WindowCommonModel]
        """

        self._blackout_windows = blackout_windows

    @property
    def user_bytes(self):
        """Gets the user_bytes of this TargetApplianceModel.  # noqa: E501

        Total user data stored of the appliance in Bytes  # noqa: E501

        :return: The user_bytes of this TargetApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this TargetApplianceModel.

        Total user data stored of the appliance in Bytes  # noqa: E501

        :param user_bytes: The user_bytes of this TargetApplianceModel.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetApplianceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetApplianceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
