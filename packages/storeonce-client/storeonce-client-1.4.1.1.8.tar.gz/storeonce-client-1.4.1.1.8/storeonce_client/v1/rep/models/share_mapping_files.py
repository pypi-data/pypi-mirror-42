# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ShareMappingFiles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'int',
        'type_string': 'str',
        'size_bytes': 'int',
        'num_changed': 'int',
        'marked_for_recovery': 'bool',
        'rep_status': 'int',
        'rep_status_string': 'str',
        'last_sync_date': 'datetime',
        'out_of_sync_seconds': 'int',
        'start_sync_date': 'datetime',
        'job_status': 'int',
        'job_status_string': 'str',
        'job_pause_cancel_reason': 'int',
        'job_pause_cancel_reason_string': 'str',
        'job_status_code': 'int',
        'job_size_bytes': 'int',
        'percentage_job_wip': 'float',
        'percentage_job_ext_data': 'float',
        'percentage_job_complete': 'float',
        'job_duration_seconds': 'int',
        'job_logical_throughput': 'int',
        'job_network_throughput': 'int',
        'percentage_job_bandwidth_saving': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'type_string': 'typeString',
        'size_bytes': 'sizeBytes',
        'num_changed': 'numChanged',
        'marked_for_recovery': 'markedForRecovery',
        'rep_status': 'repStatus',
        'rep_status_string': 'repStatusString',
        'last_sync_date': 'lastSyncDate',
        'out_of_sync_seconds': 'outOfSyncSeconds',
        'start_sync_date': 'startSyncDate',
        'job_status': 'jobStatus',
        'job_status_string': 'jobStatusString',
        'job_pause_cancel_reason': 'jobPauseCancelReason',
        'job_pause_cancel_reason_string': 'jobPauseCancelReasonString',
        'job_status_code': 'jobStatusCode',
        'job_size_bytes': 'jobSizeBytes',
        'percentage_job_wip': 'percentageJobWip',
        'percentage_job_ext_data': 'percentageJobExtData',
        'percentage_job_complete': 'percentageJobComplete',
        'job_duration_seconds': 'jobDurationSeconds',
        'job_logical_throughput': 'jobLogicalThroughput',
        'job_network_throughput': 'jobNetworkThroughput',
        'percentage_job_bandwidth_saving': 'percentageJobBandwidthSaving'
    }

    def __init__(self, id=None, name=None, type=None, type_string=None, size_bytes=None, num_changed=None, marked_for_recovery=False, rep_status=None, rep_status_string=None, last_sync_date=None, out_of_sync_seconds=None, start_sync_date=None, job_status=None, job_status_string=None, job_pause_cancel_reason=None, job_pause_cancel_reason_string=None, job_status_code=None, job_size_bytes=None, percentage_job_wip=None, percentage_job_ext_data=None, percentage_job_complete=None, job_duration_seconds=None, job_logical_throughput=None, job_network_throughput=None, percentage_job_bandwidth_saving=None):  # noqa: E501
        """ShareMappingFiles - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._type = None
        self._type_string = None
        self._size_bytes = None
        self._num_changed = None
        self._marked_for_recovery = None
        self._rep_status = None
        self._rep_status_string = None
        self._last_sync_date = None
        self._out_of_sync_seconds = None
        self._start_sync_date = None
        self._job_status = None
        self._job_status_string = None
        self._job_pause_cancel_reason = None
        self._job_pause_cancel_reason_string = None
        self._job_status_code = None
        self._job_size_bytes = None
        self._percentage_job_wip = None
        self._percentage_job_ext_data = None
        self._percentage_job_complete = None
        self._job_duration_seconds = None
        self._job_logical_throughput = None
        self._job_network_throughput = None
        self._percentage_job_bandwidth_saving = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if type_string is not None:
            self.type_string = type_string
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if num_changed is not None:
            self.num_changed = num_changed
        if marked_for_recovery is not None:
            self.marked_for_recovery = marked_for_recovery
        if rep_status is not None:
            self.rep_status = rep_status
        if rep_status_string is not None:
            self.rep_status_string = rep_status_string
        if last_sync_date is not None:
            self.last_sync_date = last_sync_date
        if out_of_sync_seconds is not None:
            self.out_of_sync_seconds = out_of_sync_seconds
        if start_sync_date is not None:
            self.start_sync_date = start_sync_date
        if job_status is not None:
            self.job_status = job_status
        if job_status_string is not None:
            self.job_status_string = job_status_string
        if job_pause_cancel_reason is not None:
            self.job_pause_cancel_reason = job_pause_cancel_reason
        if job_pause_cancel_reason_string is not None:
            self.job_pause_cancel_reason_string = job_pause_cancel_reason_string
        if job_status_code is not None:
            self.job_status_code = job_status_code
        if job_size_bytes is not None:
            self.job_size_bytes = job_size_bytes
        if percentage_job_wip is not None:
            self.percentage_job_wip = percentage_job_wip
        if percentage_job_ext_data is not None:
            self.percentage_job_ext_data = percentage_job_ext_data
        if percentage_job_complete is not None:
            self.percentage_job_complete = percentage_job_complete
        if job_duration_seconds is not None:
            self.job_duration_seconds = job_duration_seconds
        if job_logical_throughput is not None:
            self.job_logical_throughput = job_logical_throughput
        if job_network_throughput is not None:
            self.job_network_throughput = job_network_throughput
        if percentage_job_bandwidth_saving is not None:
            self.percentage_job_bandwidth_saving = percentage_job_bandwidth_saving

    @property
    def id(self):
        """Gets the id of this ShareMappingFiles.  # noqa: E501

        Unique ID for this file in the current mapping.  # noqa: E501

        :return: The id of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShareMappingFiles.

        Unique ID for this file in the current mapping.  # noqa: E501

        :param id: The id of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ShareMappingFiles.  # noqa: E501

        String which could be displayed to the user.  # noqa: E501

        :return: The name of this ShareMappingFiles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShareMappingFiles.

        String which could be displayed to the user.  # noqa: E501

        :param name: The name of this ShareMappingFiles.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ShareMappingFiles.  # noqa: E501

        Integer detailing the type.  # noqa: E501

        :return: The type of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareMappingFiles.

        Integer detailing the type.  # noqa: E501

        :param type: The type of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def type_string(self):
        """Gets the type_string of this ShareMappingFiles.  # noqa: E501

        String detailing the type.  # noqa: E501

        :return: The type_string of this ShareMappingFiles.  # noqa: E501
        :rtype: str
        """
        return self._type_string

    @type_string.setter
    def type_string(self, type_string):
        """Sets the type_string of this ShareMappingFiles.

        String detailing the type.  # noqa: E501

        :param type_string: The type_string of this ShareMappingFiles.  # noqa: E501
        :type: str
        """

        self._type_string = type_string

    @property
    def size_bytes(self):
        """Gets the size_bytes of this ShareMappingFiles.  # noqa: E501

        The file size in bytes.  # noqa: E501

        :return: The size_bytes of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this ShareMappingFiles.

        The file size in bytes.  # noqa: E501

        :param size_bytes: The size_bytes of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def num_changed(self):
        """Gets the num_changed of this ShareMappingFiles.  # noqa: E501

        Number of times this file has had its data changed.  # noqa: E501

        :return: The num_changed of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._num_changed

    @num_changed.setter
    def num_changed(self, num_changed):
        """Sets the num_changed of this ShareMappingFiles.

        Number of times this file has had its data changed.  # noqa: E501

        :param num_changed: The num_changed of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._num_changed = num_changed

    @property
    def marked_for_recovery(self):
        """Gets the marked_for_recovery of this ShareMappingFiles.  # noqa: E501

        True if the file is marked for recovery, false otherwise.  # noqa: E501

        :return: The marked_for_recovery of this ShareMappingFiles.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_recovery

    @marked_for_recovery.setter
    def marked_for_recovery(self, marked_for_recovery):
        """Sets the marked_for_recovery of this ShareMappingFiles.

        True if the file is marked for recovery, false otherwise.  # noqa: E501

        :param marked_for_recovery: The marked_for_recovery of this ShareMappingFiles.  # noqa: E501
        :type: bool
        """

        self._marked_for_recovery = marked_for_recovery

    @property
    def rep_status(self):
        """Gets the rep_status of this ShareMappingFiles.  # noqa: E501

        Integer detailing replication status.  # noqa: E501

        :return: The rep_status of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._rep_status

    @rep_status.setter
    def rep_status(self, rep_status):
        """Sets the rep_status of this ShareMappingFiles.

        Integer detailing replication status.  # noqa: E501

        :param rep_status: The rep_status of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._rep_status = rep_status

    @property
    def rep_status_string(self):
        """Gets the rep_status_string of this ShareMappingFiles.  # noqa: E501

        String representation of the replication status of this file.  # noqa: E501

        :return: The rep_status_string of this ShareMappingFiles.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_string

    @rep_status_string.setter
    def rep_status_string(self, rep_status_string):
        """Sets the rep_status_string of this ShareMappingFiles.

        String representation of the replication status of this file.  # noqa: E501

        :param rep_status_string: The rep_status_string of this ShareMappingFiles.  # noqa: E501
        :type: str
        """

        self._rep_status_string = rep_status_string

    @property
    def last_sync_date(self):
        """Gets the last_sync_date of this ShareMappingFiles.  # noqa: E501

        The date and time that this file was last synchronized.  # noqa: E501

        :return: The last_sync_date of this ShareMappingFiles.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_date

    @last_sync_date.setter
    def last_sync_date(self, last_sync_date):
        """Sets the last_sync_date of this ShareMappingFiles.

        The date and time that this file was last synchronized.  # noqa: E501

        :param last_sync_date: The last_sync_date of this ShareMappingFiles.  # noqa: E501
        :type: datetime
        """

        self._last_sync_date = last_sync_date

    @property
    def out_of_sync_seconds(self):
        """Gets the out_of_sync_seconds of this ShareMappingFiles.  # noqa: E501

        The number of seconds since this file was last synchronized.  # noqa: E501

        :return: The out_of_sync_seconds of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_seconds

    @out_of_sync_seconds.setter
    def out_of_sync_seconds(self, out_of_sync_seconds):
        """Sets the out_of_sync_seconds of this ShareMappingFiles.

        The number of seconds since this file was last synchronized.  # noqa: E501

        :param out_of_sync_seconds: The out_of_sync_seconds of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._out_of_sync_seconds = out_of_sync_seconds

    @property
    def start_sync_date(self):
        """Gets the start_sync_date of this ShareMappingFiles.  # noqa: E501

        The date and time the last synchronization of this file was started.  # noqa: E501

        :return: The start_sync_date of this ShareMappingFiles.  # noqa: E501
        :rtype: datetime
        """
        return self._start_sync_date

    @start_sync_date.setter
    def start_sync_date(self, start_sync_date):
        """Sets the start_sync_date of this ShareMappingFiles.

        The date and time the last synchronization of this file was started.  # noqa: E501

        :param start_sync_date: The start_sync_date of this ShareMappingFiles.  # noqa: E501
        :type: datetime
        """

        self._start_sync_date = start_sync_date

    @property
    def job_status(self):
        """Gets the job_status of this ShareMappingFiles.  # noqa: E501

        Integer representing status of the job associated with this file.  # noqa: E501

        :return: The job_status of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this ShareMappingFiles.

        Integer representing status of the job associated with this file.  # noqa: E501

        :param job_status: The job_status of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_status = job_status

    @property
    def job_status_string(self):
        """Gets the job_status_string of this ShareMappingFiles.  # noqa: E501

        String representation of the status of the job associated with this file.  # noqa: E501

        :return: The job_status_string of this ShareMappingFiles.  # noqa: E501
        :rtype: str
        """
        return self._job_status_string

    @job_status_string.setter
    def job_status_string(self, job_status_string):
        """Sets the job_status_string of this ShareMappingFiles.

        String representation of the status of the job associated with this file.  # noqa: E501

        :param job_status_string: The job_status_string of this ShareMappingFiles.  # noqa: E501
        :type: str
        """

        self._job_status_string = job_status_string

    @property
    def job_pause_cancel_reason(self):
        """Gets the job_pause_cancel_reason of this ShareMappingFiles.  # noqa: E501

        Integer explaining the last pause or cancel job reason.  # noqa: E501

        :return: The job_pause_cancel_reason of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_pause_cancel_reason

    @job_pause_cancel_reason.setter
    def job_pause_cancel_reason(self, job_pause_cancel_reason):
        """Sets the job_pause_cancel_reason of this ShareMappingFiles.

        Integer explaining the last pause or cancel job reason.  # noqa: E501

        :param job_pause_cancel_reason: The job_pause_cancel_reason of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_pause_cancel_reason = job_pause_cancel_reason

    @property
    def job_pause_cancel_reason_string(self):
        """Gets the job_pause_cancel_reason_string of this ShareMappingFiles.  # noqa: E501

        String representing the reason for the last pause or cancel job.  # noqa: E501

        :return: The job_pause_cancel_reason_string of this ShareMappingFiles.  # noqa: E501
        :rtype: str
        """
        return self._job_pause_cancel_reason_string

    @job_pause_cancel_reason_string.setter
    def job_pause_cancel_reason_string(self, job_pause_cancel_reason_string):
        """Sets the job_pause_cancel_reason_string of this ShareMappingFiles.

        String representing the reason for the last pause or cancel job.  # noqa: E501

        :param job_pause_cancel_reason_string: The job_pause_cancel_reason_string of this ShareMappingFiles.  # noqa: E501
        :type: str
        """

        self._job_pause_cancel_reason_string = job_pause_cancel_reason_string

    @property
    def job_status_code(self):
        """Gets the job_status_code of this ShareMappingFiles.  # noqa: E501

        Value representing the job status.  # noqa: E501

        :return: The job_status_code of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_status_code

    @job_status_code.setter
    def job_status_code(self, job_status_code):
        """Sets the job_status_code of this ShareMappingFiles.

        Value representing the job status.  # noqa: E501

        :param job_status_code: The job_status_code of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_status_code = job_status_code

    @property
    def job_size_bytes(self):
        """Gets the job_size_bytes of this ShareMappingFiles.  # noqa: E501

        The size of the file data job in bytes.  # noqa: E501

        :return: The job_size_bytes of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_size_bytes

    @job_size_bytes.setter
    def job_size_bytes(self, job_size_bytes):
        """Sets the job_size_bytes of this ShareMappingFiles.

        The size of the file data job in bytes.  # noqa: E501

        :param job_size_bytes: The job_size_bytes of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_size_bytes = job_size_bytes

    @property
    def percentage_job_wip(self):
        """Gets the percentage_job_wip of this ShareMappingFiles.  # noqa: E501

        Value representing the progress of the Write In Place data replication in %  # noqa: E501

        :return: The percentage_job_wip of this ShareMappingFiles.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_wip

    @percentage_job_wip.setter
    def percentage_job_wip(self, percentage_job_wip):
        """Sets the percentage_job_wip of this ShareMappingFiles.

        Value representing the progress of the Write In Place data replication in %  # noqa: E501

        :param percentage_job_wip: The percentage_job_wip of this ShareMappingFiles.  # noqa: E501
        :type: float
        """

        self._percentage_job_wip = percentage_job_wip

    @property
    def percentage_job_ext_data(self):
        """Gets the percentage_job_ext_data of this ShareMappingFiles.  # noqa: E501

        Value representing the progress of the Extended data replication in %  # noqa: E501

        :return: The percentage_job_ext_data of this ShareMappingFiles.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_ext_data

    @percentage_job_ext_data.setter
    def percentage_job_ext_data(self, percentage_job_ext_data):
        """Sets the percentage_job_ext_data of this ShareMappingFiles.

        Value representing the progress of the Extended data replication in %  # noqa: E501

        :param percentage_job_ext_data: The percentage_job_ext_data of this ShareMappingFiles.  # noqa: E501
        :type: float
        """

        self._percentage_job_ext_data = percentage_job_ext_data

    @property
    def percentage_job_complete(self):
        """Gets the percentage_job_complete of this ShareMappingFiles.  # noqa: E501

        Value representing the progress of the file data job replication in %  # noqa: E501

        :return: The percentage_job_complete of this ShareMappingFiles.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_complete

    @percentage_job_complete.setter
    def percentage_job_complete(self, percentage_job_complete):
        """Sets the percentage_job_complete of this ShareMappingFiles.

        Value representing the progress of the file data job replication in %  # noqa: E501

        :param percentage_job_complete: The percentage_job_complete of this ShareMappingFiles.  # noqa: E501
        :type: float
        """

        self._percentage_job_complete = percentage_job_complete

    @property
    def job_duration_seconds(self):
        """Gets the job_duration_seconds of this ShareMappingFiles.  # noqa: E501

        The current duration of the file data job in seconds.  # noqa: E501

        :return: The job_duration_seconds of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_duration_seconds

    @job_duration_seconds.setter
    def job_duration_seconds(self, job_duration_seconds):
        """Sets the job_duration_seconds of this ShareMappingFiles.

        The current duration of the file data job in seconds.  # noqa: E501

        :param job_duration_seconds: The job_duration_seconds of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_duration_seconds = job_duration_seconds

    @property
    def job_logical_throughput(self):
        """Gets the job_logical_throughput of this ShareMappingFiles.  # noqa: E501

        The current throughput of the file data job in bytes per second.  # noqa: E501

        :return: The job_logical_throughput of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_logical_throughput

    @job_logical_throughput.setter
    def job_logical_throughput(self, job_logical_throughput):
        """Sets the job_logical_throughput of this ShareMappingFiles.

        The current throughput of the file data job in bytes per second.  # noqa: E501

        :param job_logical_throughput: The job_logical_throughput of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_logical_throughput = job_logical_throughput

    @property
    def job_network_throughput(self):
        """Gets the job_network_throughput of this ShareMappingFiles.  # noqa: E501

        The bandwidth used by the file data job in bytes per second.  # noqa: E501

        :return: The job_network_throughput of this ShareMappingFiles.  # noqa: E501
        :rtype: int
        """
        return self._job_network_throughput

    @job_network_throughput.setter
    def job_network_throughput(self, job_network_throughput):
        """Sets the job_network_throughput of this ShareMappingFiles.

        The bandwidth used by the file data job in bytes per second.  # noqa: E501

        :param job_network_throughput: The job_network_throughput of this ShareMappingFiles.  # noqa: E501
        :type: int
        """

        self._job_network_throughput = job_network_throughput

    @property
    def percentage_job_bandwidth_saving(self):
        """Gets the percentage_job_bandwidth_saving of this ShareMappingFiles.  # noqa: E501

        The current bandwidth saving of the job as a %.  # noqa: E501

        :return: The percentage_job_bandwidth_saving of this ShareMappingFiles.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_bandwidth_saving

    @percentage_job_bandwidth_saving.setter
    def percentage_job_bandwidth_saving(self, percentage_job_bandwidth_saving):
        """Sets the percentage_job_bandwidth_saving of this ShareMappingFiles.

        The current bandwidth saving of the job as a %.  # noqa: E501

        :param percentage_job_bandwidth_saving: The percentage_job_bandwidth_saving of this ShareMappingFiles.  # noqa: E501
        :type: float
        """

        self._percentage_job_bandwidth_saving = percentage_job_bandwidth_saving

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareMappingFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareMappingFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
