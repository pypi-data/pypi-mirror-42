# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class VtlMappingMappedSlotsPutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_slot_id': 'int',
        'target_slot_id': 'int',
        'recover': 'bool'
    }

    attribute_map = {
        'source_slot_id': 'sourceSlotId',
        'target_slot_id': 'targetSlotId',
        'recover': 'recover'
    }

    def __init__(self, source_slot_id=None, target_slot_id=None, recover=False):  # noqa: E501
        """VtlMappingMappedSlotsPutModel - a model defined in Swagger"""  # noqa: E501

        self._source_slot_id = None
        self._target_slot_id = None
        self._recover = None
        self.discriminator = None

        if source_slot_id is not None:
            self.source_slot_id = source_slot_id
        if target_slot_id is not None:
            self.target_slot_id = target_slot_id
        if recover is not None:
            self.recover = recover

    @property
    def source_slot_id(self):
        """Gets the source_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501

        Id of slot that acts as source in mapping.  # noqa: E501

        :return: The source_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :rtype: int
        """
        return self._source_slot_id

    @source_slot_id.setter
    def source_slot_id(self, source_slot_id):
        """Sets the source_slot_id of this VtlMappingMappedSlotsPutModel.

        Id of slot that acts as source in mapping.  # noqa: E501

        :param source_slot_id: The source_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :type: int
        """

        self._source_slot_id = source_slot_id

    @property
    def target_slot_id(self):
        """Gets the target_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501

        Id of slot that acts as target in mapping  # noqa: E501

        :return: The target_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_id

    @target_slot_id.setter
    def target_slot_id(self, target_slot_id):
        """Sets the target_slot_id of this VtlMappingMappedSlotsPutModel.

        Id of slot that acts as target in mapping  # noqa: E501

        :param target_slot_id: The target_slot_id of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :type: int
        """

        self._target_slot_id = target_slot_id

    @property
    def recover(self):
        """Gets the recover of this VtlMappingMappedSlotsPutModel.  # noqa: E501

        Perform an initial one off recovery of the source slot. False by default  # noqa: E501

        :return: The recover of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :rtype: bool
        """
        return self._recover

    @recover.setter
    def recover(self, recover):
        """Sets the recover of this VtlMappingMappedSlotsPutModel.

        Perform an initial one off recovery of the source slot. False by default  # noqa: E501

        :param recover: The recover of this VtlMappingMappedSlotsPutModel.  # noqa: E501
        :type: bool
        """

        self._recover = recover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VtlMappingMappedSlotsPutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VtlMappingMappedSlotsPutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
