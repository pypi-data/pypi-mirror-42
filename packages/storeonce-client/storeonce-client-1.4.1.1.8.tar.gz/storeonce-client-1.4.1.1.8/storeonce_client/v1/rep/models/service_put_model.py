# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ServicePutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_source_jobs': 'int',
        'max_target_jobs': 'int',
        'progress_logging_enabled': 'bool',
        'progress_logging_frequency_seconds': 'int',
        'out_of_sync_warning_threshold_hours': 'int',
        'out_of_sync_critical_threshold_hours': 'int'
    }

    attribute_map = {
        'max_source_jobs': 'maxSourceJobs',
        'max_target_jobs': 'maxTargetJobs',
        'progress_logging_enabled': 'progressLoggingEnabled',
        'progress_logging_frequency_seconds': 'progressLoggingFrequencySeconds',
        'out_of_sync_warning_threshold_hours': 'outOfSyncWarningThresholdHours',
        'out_of_sync_critical_threshold_hours': 'outOfSyncCriticalThresholdHours'
    }

    def __init__(self, max_source_jobs=None, max_target_jobs=None, progress_logging_enabled=False, progress_logging_frequency_seconds=None, out_of_sync_warning_threshold_hours=None, out_of_sync_critical_threshold_hours=None):  # noqa: E501
        """ServicePutModel - a model defined in Swagger"""  # noqa: E501

        self._max_source_jobs = None
        self._max_target_jobs = None
        self._progress_logging_enabled = None
        self._progress_logging_frequency_seconds = None
        self._out_of_sync_warning_threshold_hours = None
        self._out_of_sync_critical_threshold_hours = None
        self.discriminator = None

        if max_source_jobs is not None:
            self.max_source_jobs = max_source_jobs
        if max_target_jobs is not None:
            self.max_target_jobs = max_target_jobs
        if progress_logging_enabled is not None:
            self.progress_logging_enabled = progress_logging_enabled
        if progress_logging_frequency_seconds is not None:
            self.progress_logging_frequency_seconds = progress_logging_frequency_seconds
        if out_of_sync_warning_threshold_hours is not None:
            self.out_of_sync_warning_threshold_hours = out_of_sync_warning_threshold_hours
        if out_of_sync_critical_threshold_hours is not None:
            self.out_of_sync_critical_threshold_hours = out_of_sync_critical_threshold_hours

    @property
    def max_source_jobs(self):
        """Gets the max_source_jobs of this ServicePutModel.  # noqa: E501

        Maximum concurrent source jobs that can occur.  # noqa: E501

        :return: The max_source_jobs of this ServicePutModel.  # noqa: E501
        :rtype: int
        """
        return self._max_source_jobs

    @max_source_jobs.setter
    def max_source_jobs(self, max_source_jobs):
        """Sets the max_source_jobs of this ServicePutModel.

        Maximum concurrent source jobs that can occur.  # noqa: E501

        :param max_source_jobs: The max_source_jobs of this ServicePutModel.  # noqa: E501
        :type: int
        """

        self._max_source_jobs = max_source_jobs

    @property
    def max_target_jobs(self):
        """Gets the max_target_jobs of this ServicePutModel.  # noqa: E501

        Maximum concurrent target jobs that can occur.  # noqa: E501

        :return: The max_target_jobs of this ServicePutModel.  # noqa: E501
        :rtype: int
        """
        return self._max_target_jobs

    @max_target_jobs.setter
    def max_target_jobs(self, max_target_jobs):
        """Sets the max_target_jobs of this ServicePutModel.

        Maximum concurrent target jobs that can occur.  # noqa: E501

        :param max_target_jobs: The max_target_jobs of this ServicePutModel.  # noqa: E501
        :type: int
        """

        self._max_target_jobs = max_target_jobs

    @property
    def progress_logging_enabled(self):
        """Gets the progress_logging_enabled of this ServicePutModel.  # noqa: E501

        Synchronisation progress logging flag.  # noqa: E501

        :return: The progress_logging_enabled of this ServicePutModel.  # noqa: E501
        :rtype: bool
        """
        return self._progress_logging_enabled

    @progress_logging_enabled.setter
    def progress_logging_enabled(self, progress_logging_enabled):
        """Sets the progress_logging_enabled of this ServicePutModel.

        Synchronisation progress logging flag.  # noqa: E501

        :param progress_logging_enabled: The progress_logging_enabled of this ServicePutModel.  # noqa: E501
        :type: bool
        """

        self._progress_logging_enabled = progress_logging_enabled

    @property
    def progress_logging_frequency_seconds(self):
        """Gets the progress_logging_frequency_seconds of this ServicePutModel.  # noqa: E501

        Progress logging frequency.  # noqa: E501

        :return: The progress_logging_frequency_seconds of this ServicePutModel.  # noqa: E501
        :rtype: int
        """
        return self._progress_logging_frequency_seconds

    @progress_logging_frequency_seconds.setter
    def progress_logging_frequency_seconds(self, progress_logging_frequency_seconds):
        """Sets the progress_logging_frequency_seconds of this ServicePutModel.

        Progress logging frequency.  # noqa: E501

        :param progress_logging_frequency_seconds: The progress_logging_frequency_seconds of this ServicePutModel.  # noqa: E501
        :type: int
        """

        self._progress_logging_frequency_seconds = progress_logging_frequency_seconds

    @property
    def out_of_sync_warning_threshold_hours(self):
        """Gets the out_of_sync_warning_threshold_hours of this ServicePutModel.  # noqa: E501

        Number of hours before an out of sync warning event is raised.  # noqa: E501

        :return: The out_of_sync_warning_threshold_hours of this ServicePutModel.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_warning_threshold_hours

    @out_of_sync_warning_threshold_hours.setter
    def out_of_sync_warning_threshold_hours(self, out_of_sync_warning_threshold_hours):
        """Sets the out_of_sync_warning_threshold_hours of this ServicePutModel.

        Number of hours before an out of sync warning event is raised.  # noqa: E501

        :param out_of_sync_warning_threshold_hours: The out_of_sync_warning_threshold_hours of this ServicePutModel.  # noqa: E501
        :type: int
        """

        self._out_of_sync_warning_threshold_hours = out_of_sync_warning_threshold_hours

    @property
    def out_of_sync_critical_threshold_hours(self):
        """Gets the out_of_sync_critical_threshold_hours of this ServicePutModel.  # noqa: E501

        Number of hours before an out of sync critical event is raised.  # noqa: E501

        :return: The out_of_sync_critical_threshold_hours of this ServicePutModel.  # noqa: E501
        :rtype: int
        """
        return self._out_of_sync_critical_threshold_hours

    @out_of_sync_critical_threshold_hours.setter
    def out_of_sync_critical_threshold_hours(self, out_of_sync_critical_threshold_hours):
        """Sets the out_of_sync_critical_threshold_hours of this ServicePutModel.

        Number of hours before an out of sync critical event is raised.  # noqa: E501

        :param out_of_sync_critical_threshold_hours: The out_of_sync_critical_threshold_hours of this ServicePutModel.  # noqa: E501
        :type: int
        """

        self._out_of_sync_critical_threshold_hours = out_of_sync_critical_threshold_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServicePutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServicePutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
