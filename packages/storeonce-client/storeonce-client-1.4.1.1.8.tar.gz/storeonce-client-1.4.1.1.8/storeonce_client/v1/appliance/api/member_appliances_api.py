# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Appliance

    unused  # noqa: E501

    Component version: 11.1.7-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class MemberAppliancesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_member(self, body, **kwargs):  # noqa: E501
        """Adds a member appliance given its network address, user and password  # noqa: E501

        Asynchronous operation, poll the URL provided in the Content-Location header of the response to get the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_member(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param AddMemberPayload body: Address, user & password of the new member (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.add_member_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_member_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_member_with_http_info(self, body, **kwargs):  # noqa: E501
        """Adds a member appliance given its network address, user and password  # noqa: E501

        Asynchronous operation, poll the URL provided in the Content-Location header of the response to get the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.add_member_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param AddMemberPayload body: Address, user & password of the new member (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/federation/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_member(self, uuid, user, password, **kwargs):  # noqa: E501
        """Deletes a member appliance given its UUID  # noqa: E501

        If the member is deleted, this resource will try to remove this localhost from that appliance subscriber list.Header user and password must be supplied  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_member(uuid, user, password, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str uuid: UUID of the member (required)
        :param str user: user (required)
        :param str password: password (required)
        :param bool local_only: local option for local only delete
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_member_with_http_info(uuid, user, password, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_member_with_http_info(uuid, user, password, **kwargs)  # noqa: E501
            return data

    def delete_member_with_http_info(self, uuid, user, password, **kwargs):  # noqa: E501
        """Deletes a member appliance given its UUID  # noqa: E501

        If the member is deleted, this resource will try to remove this localhost from that appliance subscriber list.Header user and password must be supplied  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_member_with_http_info(uuid, user, password, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str uuid: UUID of the member (required)
        :param str user: user (required)
        :param str password: password (required)
        :param bool local_only: local option for local only delete
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid', 'user', 'password', 'local_only']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_member`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_member`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `delete_member`")  # noqa: E501

        if 'uuid' in params and not re.search('.+', params['uuid']):  # noqa: E501
            raise ValueError("Invalid value for parameter `uuid` when calling `delete_member`, must conform to the pattern `/.+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []
        if 'local_only' in params:
            query_params.append(('localOnly', params['local_only']))  # noqa: E501

        header_params = {}
        if 'user' in params:
            header_params['user'] = params['user']  # noqa: E501
        if 'password' in params:
            header_params['password'] = params['password']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/federation/members/member/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_member_by_uuid(self, uuid, **kwargs):  # noqa: E501
        """Reads a member appliance given its UUID  # noqa: E501

        Instead of a regular UUID, the keyword \"localhost\" can be used to retrieve the local appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_member_by_uuid(uuid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str uuid: UUID of the member (required)
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_member_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_member_by_uuid_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_member_by_uuid_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Reads a member appliance given its UUID  # noqa: E501

        Instead of a regular UUID, the keyword \"localhost\" can be used to retrieve the local appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_member_by_uuid_with_http_info(uuid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str uuid: UUID of the member (required)
        :return: Appliance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_member_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_member_by_uuid`")  # noqa: E501

        if 'uuid' in params and not re.search('.+', params['uuid']):  # noqa: E501
            raise ValueError("Invalid value for parameter `uuid` when calling `get_member_by_uuid`, must conform to the pattern `/.+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/federation/members/member/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Appliance',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_members(self, **kwargs):  # noqa: E501
        """Reads the set of member appliances  # noqa: E501

        This list cannot be empty, it will always contain at least one element: the local appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_members(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: MemberList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_members_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_members_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_members_with_http_info(self, **kwargs):  # noqa: E501
        """Reads the set of member appliances  # noqa: E501

        This list cannot be empty, it will always contain at least one element: the local appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_members_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: MemberList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_members" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/federation/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemberList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
