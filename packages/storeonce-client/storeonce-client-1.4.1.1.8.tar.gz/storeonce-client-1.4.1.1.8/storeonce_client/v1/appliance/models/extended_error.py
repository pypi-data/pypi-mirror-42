# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Appliance

    unused  # noqa: E501

    Component version: 11.1.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ExtendedError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'str',
        'message_for_current_locale': 'str',
        'resolution_for_current_locale': 'str',
        'resolution': 'MessageInfo',
        'message': 'MessageInfo'
    }

    attribute_map = {
        'severity': 'severity',
        'message_for_current_locale': 'messageForCurrentLocale',
        'resolution_for_current_locale': 'resolutionForCurrentLocale',
        'resolution': 'resolution',
        'message': 'message'
    }

    def __init__(self, severity=None, message_for_current_locale=None, resolution_for_current_locale=None, resolution=None, message=None):  # noqa: E501
        """ExtendedError - a model defined in Swagger"""  # noqa: E501

        self._severity = None
        self._message_for_current_locale = None
        self._resolution_for_current_locale = None
        self._resolution = None
        self._message = None
        self.discriminator = None

        if severity is not None:
            self.severity = severity
        if message_for_current_locale is not None:
            self.message_for_current_locale = message_for_current_locale
        if resolution_for_current_locale is not None:
            self.resolution_for_current_locale = resolution_for_current_locale
        if resolution is not None:
            self.resolution = resolution
        if message is not None:
            self.message = message

    @property
    def severity(self):
        """Gets the severity of this ExtendedError.  # noqa: E501


        :return: The severity of this ExtendedError.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ExtendedError.


        :param severity: The severity of this ExtendedError.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "Warning", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def message_for_current_locale(self):
        """Gets the message_for_current_locale of this ExtendedError.  # noqa: E501


        :return: The message_for_current_locale of this ExtendedError.  # noqa: E501
        :rtype: str
        """
        return self._message_for_current_locale

    @message_for_current_locale.setter
    def message_for_current_locale(self, message_for_current_locale):
        """Sets the message_for_current_locale of this ExtendedError.


        :param message_for_current_locale: The message_for_current_locale of this ExtendedError.  # noqa: E501
        :type: str
        """

        self._message_for_current_locale = message_for_current_locale

    @property
    def resolution_for_current_locale(self):
        """Gets the resolution_for_current_locale of this ExtendedError.  # noqa: E501


        :return: The resolution_for_current_locale of this ExtendedError.  # noqa: E501
        :rtype: str
        """
        return self._resolution_for_current_locale

    @resolution_for_current_locale.setter
    def resolution_for_current_locale(self, resolution_for_current_locale):
        """Sets the resolution_for_current_locale of this ExtendedError.


        :param resolution_for_current_locale: The resolution_for_current_locale of this ExtendedError.  # noqa: E501
        :type: str
        """

        self._resolution_for_current_locale = resolution_for_current_locale

    @property
    def resolution(self):
        """Gets the resolution of this ExtendedError.  # noqa: E501


        :return: The resolution of this ExtendedError.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ExtendedError.


        :param resolution: The resolution of this ExtendedError.  # noqa: E501
        :type: MessageInfo
        """

        self._resolution = resolution

    @property
    def message(self):
        """Gets the message of this ExtendedError.  # noqa: E501


        :return: The message of this ExtendedError.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ExtendedError.


        :param message: The message of this ExtendedError.  # noqa: E501
        :type: MessageInfo
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
