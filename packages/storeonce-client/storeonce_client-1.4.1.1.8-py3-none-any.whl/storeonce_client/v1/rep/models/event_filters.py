# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class EventFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_date': 'datetime',
        'end_date': 'datetime',
        'show_info_events': 'bool',
        'show_warning_events': 'bool',
        'show_error_events': 'bool',
        'category': 'int',
        'message': 'str',
        'source_library_or_share_name': 'str',
        'target_library_or_share_name': 'str',
        'source_slot_or_entry_id': 'int',
        'target_slot_or_entry_id': 'int'
    }

    attribute_map = {
        'start_date': 'startDate',
        'end_date': 'endDate',
        'show_info_events': 'showInfoEvents',
        'show_warning_events': 'showWarningEvents',
        'show_error_events': 'showErrorEvents',
        'category': 'category',
        'message': 'message',
        'source_library_or_share_name': 'sourceLibraryOrShareName',
        'target_library_or_share_name': 'targetLibraryOrShareName',
        'source_slot_or_entry_id': 'sourceSlotOrEntryId',
        'target_slot_or_entry_id': 'targetSlotOrEntryId'
    }

    def __init__(self, start_date=None, end_date=None, show_info_events=False, show_warning_events=False, show_error_events=False, category=None, message=None, source_library_or_share_name=None, target_library_or_share_name=None, source_slot_or_entry_id=None, target_slot_or_entry_id=None):  # noqa: E501
        """EventFilters - a model defined in Swagger"""  # noqa: E501

        self._start_date = None
        self._end_date = None
        self._show_info_events = None
        self._show_warning_events = None
        self._show_error_events = None
        self._category = None
        self._message = None
        self._source_library_or_share_name = None
        self._target_library_or_share_name = None
        self._source_slot_or_entry_id = None
        self._target_slot_or_entry_id = None
        self.discriminator = None

        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if show_info_events is not None:
            self.show_info_events = show_info_events
        if show_warning_events is not None:
            self.show_warning_events = show_warning_events
        if show_error_events is not None:
            self.show_error_events = show_error_events
        if category is not None:
            self.category = category
        if message is not None:
            self.message = message
        if source_library_or_share_name is not None:
            self.source_library_or_share_name = source_library_or_share_name
        if target_library_or_share_name is not None:
            self.target_library_or_share_name = target_library_or_share_name
        if source_slot_or_entry_id is not None:
            self.source_slot_or_entry_id = source_slot_or_entry_id
        if target_slot_or_entry_id is not None:
            self.target_slot_or_entry_id = target_slot_or_entry_id

    @property
    def start_date(self):
        """Gets the start_date of this EventFilters.  # noqa: E501

        Return only events created after this date.  # noqa: E501

        :return: The start_date of this EventFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EventFilters.

        Return only events created after this date.  # noqa: E501

        :param start_date: The start_date of this EventFilters.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this EventFilters.  # noqa: E501

        Return only events before after this date.  # noqa: E501

        :return: The end_date of this EventFilters.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EventFilters.

        Return only events before after this date.  # noqa: E501

        :param end_date: The end_date of this EventFilters.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def show_info_events(self):
        """Gets the show_info_events of this EventFilters.  # noqa: E501

        Boolean indicating if the events with information severity will be displayed.  # noqa: E501

        :return: The show_info_events of this EventFilters.  # noqa: E501
        :rtype: bool
        """
        return self._show_info_events

    @show_info_events.setter
    def show_info_events(self, show_info_events):
        """Sets the show_info_events of this EventFilters.

        Boolean indicating if the events with information severity will be displayed.  # noqa: E501

        :param show_info_events: The show_info_events of this EventFilters.  # noqa: E501
        :type: bool
        """

        self._show_info_events = show_info_events

    @property
    def show_warning_events(self):
        """Gets the show_warning_events of this EventFilters.  # noqa: E501

        Boolean indicating if the events with warning severity will be displayed.  # noqa: E501

        :return: The show_warning_events of this EventFilters.  # noqa: E501
        :rtype: bool
        """
        return self._show_warning_events

    @show_warning_events.setter
    def show_warning_events(self, show_warning_events):
        """Sets the show_warning_events of this EventFilters.

        Boolean indicating if the events with warning severity will be displayed.  # noqa: E501

        :param show_warning_events: The show_warning_events of this EventFilters.  # noqa: E501
        :type: bool
        """

        self._show_warning_events = show_warning_events

    @property
    def show_error_events(self):
        """Gets the show_error_events of this EventFilters.  # noqa: E501

        Boolean indicating if the events with error or critical severity will be displayed.  # noqa: E501

        :return: The show_error_events of this EventFilters.  # noqa: E501
        :rtype: bool
        """
        return self._show_error_events

    @show_error_events.setter
    def show_error_events(self, show_error_events):
        """Sets the show_error_events of this EventFilters.

        Boolean indicating if the events with error or critical severity will be displayed.  # noqa: E501

        :param show_error_events: The show_error_events of this EventFilters.  # noqa: E501
        :type: bool
        """

        self._show_error_events = show_error_events

    @property
    def category(self):
        """Gets the category of this EventFilters.  # noqa: E501

        Return only events of this event category.  # noqa: E501

        :return: The category of this EventFilters.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventFilters.

        Return only events of this event category.  # noqa: E501

        :param category: The category of this EventFilters.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def message(self):
        """Gets the message of this EventFilters.  # noqa: E501

        Return the events that match this message.  # noqa: E501

        :return: The message of this EventFilters.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventFilters.

        Return the events that match this message.  # noqa: E501

        :param message: The message of this EventFilters.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def source_library_or_share_name(self):
        """Gets the source_library_or_share_name of this EventFilters.  # noqa: E501

        Filter by the name of the source library or share that produced the event.  # noqa: E501

        :return: The source_library_or_share_name of this EventFilters.  # noqa: E501
        :rtype: str
        """
        return self._source_library_or_share_name

    @source_library_or_share_name.setter
    def source_library_or_share_name(self, source_library_or_share_name):
        """Sets the source_library_or_share_name of this EventFilters.

        Filter by the name of the source library or share that produced the event.  # noqa: E501

        :param source_library_or_share_name: The source_library_or_share_name of this EventFilters.  # noqa: E501
        :type: str
        """

        self._source_library_or_share_name = source_library_or_share_name

    @property
    def target_library_or_share_name(self):
        """Gets the target_library_or_share_name of this EventFilters.  # noqa: E501

        Filter by the name of the target library or share that produced the event.  # noqa: E501

        :return: The target_library_or_share_name of this EventFilters.  # noqa: E501
        :rtype: str
        """
        return self._target_library_or_share_name

    @target_library_or_share_name.setter
    def target_library_or_share_name(self, target_library_or_share_name):
        """Sets the target_library_or_share_name of this EventFilters.

        Filter by the name of the target library or share that produced the event.  # noqa: E501

        :param target_library_or_share_name: The target_library_or_share_name of this EventFilters.  # noqa: E501
        :type: str
        """

        self._target_library_or_share_name = target_library_or_share_name

    @property
    def source_slot_or_entry_id(self):
        """Gets the source_slot_or_entry_id of this EventFilters.  # noqa: E501

        Filter by the id of source entry or slot that produced the event.  # noqa: E501

        :return: The source_slot_or_entry_id of this EventFilters.  # noqa: E501
        :rtype: int
        """
        return self._source_slot_or_entry_id

    @source_slot_or_entry_id.setter
    def source_slot_or_entry_id(self, source_slot_or_entry_id):
        """Sets the source_slot_or_entry_id of this EventFilters.

        Filter by the id of source entry or slot that produced the event.  # noqa: E501

        :param source_slot_or_entry_id: The source_slot_or_entry_id of this EventFilters.  # noqa: E501
        :type: int
        """

        self._source_slot_or_entry_id = source_slot_or_entry_id

    @property
    def target_slot_or_entry_id(self):
        """Gets the target_slot_or_entry_id of this EventFilters.  # noqa: E501

        Filter by the id of target entry or slot that produced the event.  # noqa: E501

        :return: The target_slot_or_entry_id of this EventFilters.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_or_entry_id

    @target_slot_or_entry_id.setter
    def target_slot_or_entry_id(self, target_slot_or_entry_id):
        """Sets the target_slot_or_entry_id of this EventFilters.

        Filter by the id of target entry or slot that produced the event.  # noqa: E501

        :param target_slot_or_entry_id: The target_slot_or_entry_id of this EventFilters.  # noqa: E501
        :type: int
        """

        self._target_slot_or_entry_id = target_slot_or_entry_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
