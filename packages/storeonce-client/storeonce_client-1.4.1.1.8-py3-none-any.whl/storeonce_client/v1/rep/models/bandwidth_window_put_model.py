# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class BandwidthWindowPutModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_window_enabled': 'bool',
        'primary_window_start_time': 'str',
        'primary_window_end_time': 'str',
        'primary_window_bandwidth_limit': 'int',
        'secondary_window_enabled': 'bool',
        'secondary_window_start_time': 'str',
        'secondary_window_end_time': 'str',
        'secondary_window_bandwidth_limit': 'int'
    }

    attribute_map = {
        'primary_window_enabled': 'primaryWindowEnabled',
        'primary_window_start_time': 'primaryWindowStartTime',
        'primary_window_end_time': 'primaryWindowEndTime',
        'primary_window_bandwidth_limit': 'primaryWindowBandwidthLimit',
        'secondary_window_enabled': 'secondaryWindowEnabled',
        'secondary_window_start_time': 'secondaryWindowStartTime',
        'secondary_window_end_time': 'secondaryWindowEndTime',
        'secondary_window_bandwidth_limit': 'secondaryWindowBandwidthLimit'
    }

    def __init__(self, primary_window_enabled=False, primary_window_start_time=None, primary_window_end_time=None, primary_window_bandwidth_limit=None, secondary_window_enabled=False, secondary_window_start_time=None, secondary_window_end_time=None, secondary_window_bandwidth_limit=None):  # noqa: E501
        """BandwidthWindowPutModel - a model defined in Swagger"""  # noqa: E501

        self._primary_window_enabled = None
        self._primary_window_start_time = None
        self._primary_window_end_time = None
        self._primary_window_bandwidth_limit = None
        self._secondary_window_enabled = None
        self._secondary_window_start_time = None
        self._secondary_window_end_time = None
        self._secondary_window_bandwidth_limit = None
        self.discriminator = None

        if primary_window_enabled is not None:
            self.primary_window_enabled = primary_window_enabled
        if primary_window_start_time is not None:
            self.primary_window_start_time = primary_window_start_time
        if primary_window_end_time is not None:
            self.primary_window_end_time = primary_window_end_time
        if primary_window_bandwidth_limit is not None:
            self.primary_window_bandwidth_limit = primary_window_bandwidth_limit
        if secondary_window_enabled is not None:
            self.secondary_window_enabled = secondary_window_enabled
        if secondary_window_start_time is not None:
            self.secondary_window_start_time = secondary_window_start_time
        if secondary_window_end_time is not None:
            self.secondary_window_end_time = secondary_window_end_time
        if secondary_window_bandwidth_limit is not None:
            self.secondary_window_bandwidth_limit = secondary_window_bandwidth_limit

    @property
    def primary_window_enabled(self):
        """Gets the primary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501

        Whether the primary window is enabled.  # noqa: E501

        :return: The primary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: bool
        """
        return self._primary_window_enabled

    @primary_window_enabled.setter
    def primary_window_enabled(self, primary_window_enabled):
        """Sets the primary_window_enabled of this BandwidthWindowPutModel.

        Whether the primary window is enabled.  # noqa: E501

        :param primary_window_enabled: The primary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501
        :type: bool
        """

        self._primary_window_enabled = primary_window_enabled

    @property
    def primary_window_start_time(self):
        """Gets the primary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501

        Start time for the primary bandwidth limit. In system time  # noqa: E501

        :return: The primary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: str
        """
        return self._primary_window_start_time

    @primary_window_start_time.setter
    def primary_window_start_time(self, primary_window_start_time):
        """Sets the primary_window_start_time of this BandwidthWindowPutModel.

        Start time for the primary bandwidth limit. In system time  # noqa: E501

        :param primary_window_start_time: The primary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501
        :type: str
        """

        self._primary_window_start_time = primary_window_start_time

    @property
    def primary_window_end_time(self):
        """Gets the primary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501

        End time for the primary bandwidth limit. In system time  # noqa: E501

        :return: The primary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: str
        """
        return self._primary_window_end_time

    @primary_window_end_time.setter
    def primary_window_end_time(self, primary_window_end_time):
        """Sets the primary_window_end_time of this BandwidthWindowPutModel.

        End time for the primary bandwidth limit. In system time  # noqa: E501

        :param primary_window_end_time: The primary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501
        :type: str
        """

        self._primary_window_end_time = primary_window_end_time

    @property
    def primary_window_bandwidth_limit(self):
        """Gets the primary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501

        Bandwidth limit for the primary window  # noqa: E501

        :return: The primary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: int
        """
        return self._primary_window_bandwidth_limit

    @primary_window_bandwidth_limit.setter
    def primary_window_bandwidth_limit(self, primary_window_bandwidth_limit):
        """Sets the primary_window_bandwidth_limit of this BandwidthWindowPutModel.

        Bandwidth limit for the primary window  # noqa: E501

        :param primary_window_bandwidth_limit: The primary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501
        :type: int
        """

        self._primary_window_bandwidth_limit = primary_window_bandwidth_limit

    @property
    def secondary_window_enabled(self):
        """Gets the secondary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501

        Whether the secondary window is enabled  # noqa: E501

        :return: The secondary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: bool
        """
        return self._secondary_window_enabled

    @secondary_window_enabled.setter
    def secondary_window_enabled(self, secondary_window_enabled):
        """Sets the secondary_window_enabled of this BandwidthWindowPutModel.

        Whether the secondary window is enabled  # noqa: E501

        :param secondary_window_enabled: The secondary_window_enabled of this BandwidthWindowPutModel.  # noqa: E501
        :type: bool
        """

        self._secondary_window_enabled = secondary_window_enabled

    @property
    def secondary_window_start_time(self):
        """Gets the secondary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501

        Start time for the secondary bandwidth limit. In system time  # noqa: E501

        :return: The secondary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: str
        """
        return self._secondary_window_start_time

    @secondary_window_start_time.setter
    def secondary_window_start_time(self, secondary_window_start_time):
        """Sets the secondary_window_start_time of this BandwidthWindowPutModel.

        Start time for the secondary bandwidth limit. In system time  # noqa: E501

        :param secondary_window_start_time: The secondary_window_start_time of this BandwidthWindowPutModel.  # noqa: E501
        :type: str
        """

        self._secondary_window_start_time = secondary_window_start_time

    @property
    def secondary_window_end_time(self):
        """Gets the secondary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501

        End time for the secondary bandwidth limit. In system time  # noqa: E501

        :return: The secondary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: str
        """
        return self._secondary_window_end_time

    @secondary_window_end_time.setter
    def secondary_window_end_time(self, secondary_window_end_time):
        """Sets the secondary_window_end_time of this BandwidthWindowPutModel.

        End time for the secondary bandwidth limit. In system time  # noqa: E501

        :param secondary_window_end_time: The secondary_window_end_time of this BandwidthWindowPutModel.  # noqa: E501
        :type: str
        """

        self._secondary_window_end_time = secondary_window_end_time

    @property
    def secondary_window_bandwidth_limit(self):
        """Gets the secondary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501

        Bandwidth limit for the secondary window  # noqa: E501

        :return: The secondary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501
        :rtype: int
        """
        return self._secondary_window_bandwidth_limit

    @secondary_window_bandwidth_limit.setter
    def secondary_window_bandwidth_limit(self, secondary_window_bandwidth_limit):
        """Sets the secondary_window_bandwidth_limit of this BandwidthWindowPutModel.

        Bandwidth limit for the secondary window  # noqa: E501

        :param secondary_window_bandwidth_limit: The secondary_window_bandwidth_limit of this BandwidthWindowPutModel.  # noqa: E501
        :type: int
        """

        self._secondary_window_bandwidth_limit = secondary_window_bandwidth_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BandwidthWindowPutModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BandwidthWindowPutModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
