# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class VtlSlotFilters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_slot_id_range_filter_start': 'int',
        'source_slot_id_range_filter_end': 'int',
        'target_slot_id_range_filter_start': 'int',
        'target_slot_id_range_filter_end': 'int',
        'barcode_filter': 'str',
        'barcode_filter_exact_match': 'bool',
        'started_date_start': 'str',
        'started_date_end': 'str',
        'ended_date_start': 'str',
        'ended_date_end': 'str',
        'order_ascending': 'bool',
        'job_status_filter': 'str',
        'rep_status_filter': 'str'
    }

    attribute_map = {
        'source_slot_id_range_filter_start': 'sourceSlotIdRangeFilterStart',
        'source_slot_id_range_filter_end': 'sourceSlotIdRangeFilterEnd',
        'target_slot_id_range_filter_start': 'targetSlotIdRangeFilterStart',
        'target_slot_id_range_filter_end': 'targetSlotIdRangeFilterEnd',
        'barcode_filter': 'barcodeFilter',
        'barcode_filter_exact_match': 'barcodeFilterExactMatch',
        'started_date_start': 'startedDateStart',
        'started_date_end': 'startedDateEnd',
        'ended_date_start': 'endedDateStart',
        'ended_date_end': 'endedDateEnd',
        'order_ascending': 'orderAscending',
        'job_status_filter': 'jobStatusFilter',
        'rep_status_filter': 'repStatusFilter'
    }

    def __init__(self, source_slot_id_range_filter_start=None, source_slot_id_range_filter_end=None, target_slot_id_range_filter_start=None, target_slot_id_range_filter_end=None, barcode_filter=None, barcode_filter_exact_match=False, started_date_start=None, started_date_end=None, ended_date_start=None, ended_date_end=None, order_ascending=False, job_status_filter=None, rep_status_filter=None):  # noqa: E501
        """VtlSlotFilters - a model defined in Swagger"""  # noqa: E501

        self._source_slot_id_range_filter_start = None
        self._source_slot_id_range_filter_end = None
        self._target_slot_id_range_filter_start = None
        self._target_slot_id_range_filter_end = None
        self._barcode_filter = None
        self._barcode_filter_exact_match = None
        self._started_date_start = None
        self._started_date_end = None
        self._ended_date_start = None
        self._ended_date_end = None
        self._order_ascending = None
        self._job_status_filter = None
        self._rep_status_filter = None
        self.discriminator = None

        if source_slot_id_range_filter_start is not None:
            self.source_slot_id_range_filter_start = source_slot_id_range_filter_start
        if source_slot_id_range_filter_end is not None:
            self.source_slot_id_range_filter_end = source_slot_id_range_filter_end
        if target_slot_id_range_filter_start is not None:
            self.target_slot_id_range_filter_start = target_slot_id_range_filter_start
        if target_slot_id_range_filter_end is not None:
            self.target_slot_id_range_filter_end = target_slot_id_range_filter_end
        if barcode_filter is not None:
            self.barcode_filter = barcode_filter
        if barcode_filter_exact_match is not None:
            self.barcode_filter_exact_match = barcode_filter_exact_match
        if started_date_start is not None:
            self.started_date_start = started_date_start
        if started_date_end is not None:
            self.started_date_end = started_date_end
        if ended_date_start is not None:
            self.ended_date_start = ended_date_start
        if ended_date_end is not None:
            self.ended_date_end = ended_date_end
        if order_ascending is not None:
            self.order_ascending = order_ascending
        if job_status_filter is not None:
            self.job_status_filter = job_status_filter
        if rep_status_filter is not None:
            self.rep_status_filter = rep_status_filter

    @property
    def source_slot_id_range_filter_start(self):
        """Gets the source_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501

        Return only the slots with source ID greater than this ID.  # noqa: E501

        :return: The source_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501
        :rtype: int
        """
        return self._source_slot_id_range_filter_start

    @source_slot_id_range_filter_start.setter
    def source_slot_id_range_filter_start(self, source_slot_id_range_filter_start):
        """Sets the source_slot_id_range_filter_start of this VtlSlotFilters.

        Return only the slots with source ID greater than this ID.  # noqa: E501

        :param source_slot_id_range_filter_start: The source_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501
        :type: int
        """

        self._source_slot_id_range_filter_start = source_slot_id_range_filter_start

    @property
    def source_slot_id_range_filter_end(self):
        """Gets the source_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501

        Return only the slots with source ID less than this ID.  # noqa: E501

        :return: The source_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501
        :rtype: int
        """
        return self._source_slot_id_range_filter_end

    @source_slot_id_range_filter_end.setter
    def source_slot_id_range_filter_end(self, source_slot_id_range_filter_end):
        """Sets the source_slot_id_range_filter_end of this VtlSlotFilters.

        Return only the slots with source ID less than this ID.  # noqa: E501

        :param source_slot_id_range_filter_end: The source_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501
        :type: int
        """

        self._source_slot_id_range_filter_end = source_slot_id_range_filter_end

    @property
    def target_slot_id_range_filter_start(self):
        """Gets the target_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501

        Return only the slots with target ID greater than this ID.  # noqa: E501

        :return: The target_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_id_range_filter_start

    @target_slot_id_range_filter_start.setter
    def target_slot_id_range_filter_start(self, target_slot_id_range_filter_start):
        """Sets the target_slot_id_range_filter_start of this VtlSlotFilters.

        Return only the slots with target ID greater than this ID.  # noqa: E501

        :param target_slot_id_range_filter_start: The target_slot_id_range_filter_start of this VtlSlotFilters.  # noqa: E501
        :type: int
        """

        self._target_slot_id_range_filter_start = target_slot_id_range_filter_start

    @property
    def target_slot_id_range_filter_end(self):
        """Gets the target_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501

        Return only the slots with target ID less than this ID.  # noqa: E501

        :return: The target_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_id_range_filter_end

    @target_slot_id_range_filter_end.setter
    def target_slot_id_range_filter_end(self, target_slot_id_range_filter_end):
        """Sets the target_slot_id_range_filter_end of this VtlSlotFilters.

        Return only the slots with target ID less than this ID.  # noqa: E501

        :param target_slot_id_range_filter_end: The target_slot_id_range_filter_end of this VtlSlotFilters.  # noqa: E501
        :type: int
        """

        self._target_slot_id_range_filter_end = target_slot_id_range_filter_end

    @property
    def barcode_filter(self):
        """Gets the barcode_filter of this VtlSlotFilters.  # noqa: E501

        Return only slots that match the barcode.  # noqa: E501

        :return: The barcode_filter of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._barcode_filter

    @barcode_filter.setter
    def barcode_filter(self, barcode_filter):
        """Sets the barcode_filter of this VtlSlotFilters.

        Return only slots that match the barcode.  # noqa: E501

        :param barcode_filter: The barcode_filter of this VtlSlotFilters.  # noqa: E501
        :type: str
        """

        self._barcode_filter = barcode_filter

    @property
    def barcode_filter_exact_match(self):
        """Gets the barcode_filter_exact_match of this VtlSlotFilters.  # noqa: E501

        True if the barcodeFilter should be applied as an exact match filter, otherwise false.  # noqa: E501

        :return: The barcode_filter_exact_match of this VtlSlotFilters.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_filter_exact_match

    @barcode_filter_exact_match.setter
    def barcode_filter_exact_match(self, barcode_filter_exact_match):
        """Sets the barcode_filter_exact_match of this VtlSlotFilters.

        True if the barcodeFilter should be applied as an exact match filter, otherwise false.  # noqa: E501

        :param barcode_filter_exact_match: The barcode_filter_exact_match of this VtlSlotFilters.  # noqa: E501
        :type: bool
        """

        self._barcode_filter_exact_match = barcode_filter_exact_match

    @property
    def started_date_start(self):
        """Gets the started_date_start of this VtlSlotFilters.  # noqa: E501

        Return only slots where the last replication started after this date.  # noqa: E501

        :return: The started_date_start of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._started_date_start

    @started_date_start.setter
    def started_date_start(self, started_date_start):
        """Sets the started_date_start of this VtlSlotFilters.

        Return only slots where the last replication started after this date.  # noqa: E501

        :param started_date_start: The started_date_start of this VtlSlotFilters.  # noqa: E501
        :type: str
        """

        self._started_date_start = started_date_start

    @property
    def started_date_end(self):
        """Gets the started_date_end of this VtlSlotFilters.  # noqa: E501

        Return only slots where the last replication started before this date.  # noqa: E501

        :return: The started_date_end of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._started_date_end

    @started_date_end.setter
    def started_date_end(self, started_date_end):
        """Sets the started_date_end of this VtlSlotFilters.

        Return only slots where the last replication started before this date.  # noqa: E501

        :param started_date_end: The started_date_end of this VtlSlotFilters.  # noqa: E501
        :type: str
        """

        self._started_date_end = started_date_end

    @property
    def ended_date_start(self):
        """Gets the ended_date_start of this VtlSlotFilters.  # noqa: E501

        Return only slots where the last replication finished after this date.  # noqa: E501

        :return: The ended_date_start of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._ended_date_start

    @ended_date_start.setter
    def ended_date_start(self, ended_date_start):
        """Sets the ended_date_start of this VtlSlotFilters.

        Return only slots where the last replication finished after this date.  # noqa: E501

        :param ended_date_start: The ended_date_start of this VtlSlotFilters.  # noqa: E501
        :type: str
        """

        self._ended_date_start = ended_date_start

    @property
    def ended_date_end(self):
        """Gets the ended_date_end of this VtlSlotFilters.  # noqa: E501

        Return only slots where the last replication finished before this date.  # noqa: E501

        :return: The ended_date_end of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._ended_date_end

    @ended_date_end.setter
    def ended_date_end(self, ended_date_end):
        """Sets the ended_date_end of this VtlSlotFilters.

        Return only slots where the last replication finished before this date.  # noqa: E501

        :param ended_date_end: The ended_date_end of this VtlSlotFilters.  # noqa: E501
        :type: str
        """

        self._ended_date_end = ended_date_end

    @property
    def order_ascending(self):
        """Gets the order_ascending of this VtlSlotFilters.  # noqa: E501

        True if this filter orders the data in ascending date, otherewise descending  # noqa: E501

        :return: The order_ascending of this VtlSlotFilters.  # noqa: E501
        :rtype: bool
        """
        return self._order_ascending

    @order_ascending.setter
    def order_ascending(self, order_ascending):
        """Sets the order_ascending of this VtlSlotFilters.

        True if this filter orders the data in ascending date, otherewise descending  # noqa: E501

        :param order_ascending: The order_ascending of this VtlSlotFilters.  # noqa: E501
        :type: bool
        """

        self._order_ascending = order_ascending

    @property
    def job_status_filter(self):
        """Gets the job_status_filter of this VtlSlotFilters.  # noqa: E501

        Return only slots that match the specific job status  # noqa: E501

        :return: The job_status_filter of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._job_status_filter

    @job_status_filter.setter
    def job_status_filter(self, job_status_filter):
        """Sets the job_status_filter of this VtlSlotFilters.

        Return only slots that match the specific job status  # noqa: E501

        :param job_status_filter: The job_status_filter of this VtlSlotFilters.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "COMPLETED", "RUNNING", "PAUSED", "CANCELLED", "FROZEN", "NO_FILTER"]  # noqa: E501
        if job_status_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `job_status_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(job_status_filter, allowed_values)
            )

        self._job_status_filter = job_status_filter

    @property
    def rep_status_filter(self):
        """Gets the rep_status_filter of this VtlSlotFilters.  # noqa: E501

        Return only slots that match the specific replication status  # noqa: E501

        :return: The rep_status_filter of this VtlSlotFilters.  # noqa: E501
        :rtype: str
        """
        return self._rep_status_filter

    @rep_status_filter.setter
    def rep_status_filter(self, rep_status_filter):
        """Sets the rep_status_filter of this VtlSlotFilters.

        Return only slots that match the specific replication status  # noqa: E501

        :param rep_status_filter: The rep_status_filter of this VtlSlotFilters.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING_SYNCHRONISATION", "SYNCHRONISED", "SYNCHRONISING", "NO_FILTER"]  # noqa: E501
        if rep_status_filter not in allowed_values:
            raise ValueError(
                "Invalid value for `rep_status_filter` ({0}), must be one of {1}"  # noqa: E501
                .format(rep_status_filter, allowed_values)
            )

        self._rep_status_filter = rep_status_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VtlSlotFilters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VtlSlotFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
