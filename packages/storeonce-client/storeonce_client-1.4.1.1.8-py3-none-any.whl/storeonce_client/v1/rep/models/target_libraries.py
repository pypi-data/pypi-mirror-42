# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TargetLibraries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'library_version': 'int',
        'rep_role': 'int',
        'rep_role_string': 'str',
        'deduplication_enabled': 'bool',
        'encryption_enabled': 'bool',
        'num_slot_mappings': 'int',
        'num_slots': 'int',
        'disk_bytes': 'int',
        'user_bytes': 'int',
        'health_level': 'int',
        'health_level_string': 'str',
        'library_status': 'int',
        'library_status_string': 'str',
        'slots': 'list[TargetLibrariesSlot]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'library_version': 'libraryVersion',
        'rep_role': 'repRole',
        'rep_role_string': 'repRoleString',
        'deduplication_enabled': 'deduplicationEnabled',
        'encryption_enabled': 'encryptionEnabled',
        'num_slot_mappings': 'numSlotMappings',
        'num_slots': 'numSlots',
        'disk_bytes': 'diskBytes',
        'user_bytes': 'userBytes',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'library_status': 'libraryStatus',
        'library_status_string': 'libraryStatusString',
        'slots': 'slots'
    }

    def __init__(self, id=None, name=None, library_version=None, rep_role=None, rep_role_string=None, deduplication_enabled=False, encryption_enabled=False, num_slot_mappings=None, num_slots=None, disk_bytes=None, user_bytes=None, health_level=None, health_level_string=None, library_status=None, library_status_string=None, slots=None):  # noqa: E501
        """TargetLibraries - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._library_version = None
        self._rep_role = None
        self._rep_role_string = None
        self._deduplication_enabled = None
        self._encryption_enabled = None
        self._num_slot_mappings = None
        self._num_slots = None
        self._disk_bytes = None
        self._user_bytes = None
        self._health_level = None
        self._health_level_string = None
        self._library_status = None
        self._library_status_string = None
        self._slots = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if library_version is not None:
            self.library_version = library_version
        if rep_role is not None:
            self.rep_role = rep_role
        if rep_role_string is not None:
            self.rep_role_string = rep_role_string
        if deduplication_enabled is not None:
            self.deduplication_enabled = deduplication_enabled
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if num_slot_mappings is not None:
            self.num_slot_mappings = num_slot_mappings
        if num_slots is not None:
            self.num_slots = num_slots
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if library_status is not None:
            self.library_status = library_status
        if library_status_string is not None:
            self.library_status_string = library_status_string
        if slots is not None:
            self.slots = slots

    @property
    def id(self):
        """Gets the id of this TargetLibraries.  # noqa: E501

        Unique ID of the target appliance  # noqa: E501

        :return: The id of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetLibraries.

        Unique ID of the target appliance  # noqa: E501

        :param id: The id of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TargetLibraries.  # noqa: E501

        Friendly name of the library  # noqa: E501

        :return: The name of this TargetLibraries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TargetLibraries.

        Friendly name of the library  # noqa: E501

        :param name: The name of this TargetLibraries.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def library_version(self):
        """Gets the library_version of this TargetLibraries.  # noqa: E501

        Version of the library  # noqa: E501

        :return: The library_version of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._library_version

    @library_version.setter
    def library_version(self, library_version):
        """Sets the library_version of this TargetLibraries.

        Version of the library  # noqa: E501

        :param library_version: The library_version of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._library_version = library_version

    @property
    def rep_role(self):
        """Gets the rep_role of this TargetLibraries.  # noqa: E501

        Enum value corresponding to the replication role of the local library,  # noqa: E501

        :return: The rep_role of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._rep_role

    @rep_role.setter
    def rep_role(self, rep_role):
        """Sets the rep_role of this TargetLibraries.

        Enum value corresponding to the replication role of the local library,  # noqa: E501

        :param rep_role: The rep_role of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._rep_role = rep_role

    @property
    def rep_role_string(self):
        """Gets the rep_role_string of this TargetLibraries.  # noqa: E501

        Localised string representation of the replication role of the local library.  # noqa: E501

        :return: The rep_role_string of this TargetLibraries.  # noqa: E501
        :rtype: str
        """
        return self._rep_role_string

    @rep_role_string.setter
    def rep_role_string(self, rep_role_string):
        """Sets the rep_role_string of this TargetLibraries.

        Localised string representation of the replication role of the local library.  # noqa: E501

        :param rep_role_string: The rep_role_string of this TargetLibraries.  # noqa: E501
        :type: str
        """

        self._rep_role_string = rep_role_string

    @property
    def deduplication_enabled(self):
        """Gets the deduplication_enabled of this TargetLibraries.  # noqa: E501

        True if the library has the deduplication enabled. False otherwise  # noqa: E501

        :return: The deduplication_enabled of this TargetLibraries.  # noqa: E501
        :rtype: bool
        """
        return self._deduplication_enabled

    @deduplication_enabled.setter
    def deduplication_enabled(self, deduplication_enabled):
        """Sets the deduplication_enabled of this TargetLibraries.

        True if the library has the deduplication enabled. False otherwise  # noqa: E501

        :param deduplication_enabled: The deduplication_enabled of this TargetLibraries.  # noqa: E501
        :type: bool
        """

        self._deduplication_enabled = deduplication_enabled

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this TargetLibraries.  # noqa: E501

        True if encryption is enabled, false otherwise.  # noqa: E501

        :return: The encryption_enabled of this TargetLibraries.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this TargetLibraries.

        True if encryption is enabled, false otherwise.  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this TargetLibraries.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def num_slot_mappings(self):
        """Gets the num_slot_mappings of this TargetLibraries.  # noqa: E501

        Number of slot mappings in the library.  # noqa: E501

        :return: The num_slot_mappings of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._num_slot_mappings

    @num_slot_mappings.setter
    def num_slot_mappings(self, num_slot_mappings):
        """Sets the num_slot_mappings of this TargetLibraries.

        Number of slot mappings in the library.  # noqa: E501

        :param num_slot_mappings: The num_slot_mappings of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._num_slot_mappings = num_slot_mappings

    @property
    def num_slots(self):
        """Gets the num_slots of this TargetLibraries.  # noqa: E501

        The number of slots in the library.  # noqa: E501

        :return: The num_slots of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this TargetLibraries.

        The number of slots in the library.  # noqa: E501

        :param num_slots: The num_slots of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this TargetLibraries.  # noqa: E501

        Size On Disk In Bytes  # noqa: E501

        :return: The disk_bytes of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this TargetLibraries.

        Size On Disk In Bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def user_bytes(self):
        """Gets the user_bytes of this TargetLibraries.  # noqa: E501

        User Data Stored In Bytes   # noqa: E501

        :return: The user_bytes of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this TargetLibraries.

        User Data Stored In Bytes   # noqa: E501

        :param user_bytes: The user_bytes of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def health_level(self):
        """Gets the health_level of this TargetLibraries.  # noqa: E501

        Represents the health level of the library.  # noqa: E501

        :return: The health_level of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this TargetLibraries.

        Represents the health level of the library.  # noqa: E501

        :param health_level: The health_level of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this TargetLibraries.  # noqa: E501

        Localised string representation of the library health.  # noqa: E501

        :return: The health_level_string of this TargetLibraries.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this TargetLibraries.

        Localised string representation of the library health.  # noqa: E501

        :param health_level_string: The health_level_string of this TargetLibraries.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def library_status(self):
        """Gets the library_status of this TargetLibraries.  # noqa: E501

        Gives additional information about the current health state.  # noqa: E501

        :return: The library_status of this TargetLibraries.  # noqa: E501
        :rtype: int
        """
        return self._library_status

    @library_status.setter
    def library_status(self, library_status):
        """Sets the library_status of this TargetLibraries.

        Gives additional information about the current health state.  # noqa: E501

        :param library_status: The library_status of this TargetLibraries.  # noqa: E501
        :type: int
        """

        self._library_status = library_status

    @property
    def library_status_string(self):
        """Gets the library_status_string of this TargetLibraries.  # noqa: E501

        Localised string value which may give additional detail pertaining to the current health state.  # noqa: E501

        :return: The library_status_string of this TargetLibraries.  # noqa: E501
        :rtype: str
        """
        return self._library_status_string

    @library_status_string.setter
    def library_status_string(self, library_status_string):
        """Sets the library_status_string of this TargetLibraries.

        Localised string value which may give additional detail pertaining to the current health state.  # noqa: E501

        :param library_status_string: The library_status_string of this TargetLibraries.  # noqa: E501
        :type: str
        """

        self._library_status_string = library_status_string

    @property
    def slots(self):
        """Gets the slots of this TargetLibraries.  # noqa: E501

        Provides the details of Vtl target library slots  # noqa: E501

        :return: The slots of this TargetLibraries.  # noqa: E501
        :rtype: list[TargetLibrariesSlot]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this TargetLibraries.

        Provides the details of Vtl target library slots  # noqa: E501

        :param slots: The slots of this TargetLibraries.  # noqa: E501
        :type: list[TargetLibrariesSlot]
        """

        self._slots = slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetLibraries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetLibraries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
