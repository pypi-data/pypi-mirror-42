# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class PartnerApplianceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appliance_id': 'int',
        'appliance_online': 'bool',
        'appliance_name': 'str',
        'appliance_address': 'str',
        'appliance_serial_number': 'str',
        'appliance_product_class': 'str',
        'library_id': 'int',
        'library_name': 'str',
        'mapping_id': 'int',
        'replication_version': 'int',
        'rep_role': 'int',
        'rep_role_string': 'str',
        'num_mappings': 'int',
        'num_slots': 'int',
        'num_mapped_slots': 'int',
        'library_health_status_level': 'int',
        'library_health_status_level_string': 'str',
        'library_status': 'int',
        'library_status_string': 'str',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'appliance_health_status_level': 'int',
        'appliance_health_status_level_string': 'str'
    }

    attribute_map = {
        'appliance_id': 'applianceId',
        'appliance_online': 'applianceOnline',
        'appliance_name': 'applianceName',
        'appliance_address': 'applianceAddress',
        'appliance_serial_number': 'applianceSerialNumber',
        'appliance_product_class': 'applianceProductClass',
        'library_id': 'libraryId',
        'library_name': 'libraryName',
        'mapping_id': 'mappingId',
        'replication_version': 'replicationVersion',
        'rep_role': 'repRole',
        'rep_role_string': 'repRoleString',
        'num_mappings': 'numMappings',
        'num_slots': 'numSlots',
        'num_mapped_slots': 'numMappedSlots',
        'library_health_status_level': 'libraryHealthStatusLevel',
        'library_health_status_level_string': 'libraryHealthStatusLevelString',
        'library_status': 'libraryStatus',
        'library_status_string': 'libraryStatusString',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'appliance_health_status_level': 'applianceHealthStatusLevel',
        'appliance_health_status_level_string': 'applianceHealthStatusLevelString'
    }

    def __init__(self, appliance_id=None, appliance_online=False, appliance_name=None, appliance_address=None, appliance_serial_number=None, appliance_product_class=None, library_id=None, library_name=None, mapping_id=None, replication_version=None, rep_role=None, rep_role_string=None, num_mappings=None, num_slots=None, num_mapped_slots=None, library_health_status_level=None, library_health_status_level_string=None, library_status=None, library_status_string=None, user_bytes=None, disk_bytes=None, appliance_health_status_level=None, appliance_health_status_level_string=None):  # noqa: E501
        """PartnerApplianceModel - a model defined in Swagger"""  # noqa: E501

        self._appliance_id = None
        self._appliance_online = None
        self._appliance_name = None
        self._appliance_address = None
        self._appliance_serial_number = None
        self._appliance_product_class = None
        self._library_id = None
        self._library_name = None
        self._mapping_id = None
        self._replication_version = None
        self._rep_role = None
        self._rep_role_string = None
        self._num_mappings = None
        self._num_slots = None
        self._num_mapped_slots = None
        self._library_health_status_level = None
        self._library_health_status_level_string = None
        self._library_status = None
        self._library_status_string = None
        self._user_bytes = None
        self._disk_bytes = None
        self._appliance_health_status_level = None
        self._appliance_health_status_level_string = None
        self.discriminator = None

        if appliance_id is not None:
            self.appliance_id = appliance_id
        if appliance_online is not None:
            self.appliance_online = appliance_online
        if appliance_name is not None:
            self.appliance_name = appliance_name
        if appliance_address is not None:
            self.appliance_address = appliance_address
        if appliance_serial_number is not None:
            self.appliance_serial_number = appliance_serial_number
        if appliance_product_class is not None:
            self.appliance_product_class = appliance_product_class
        if library_id is not None:
            self.library_id = library_id
        if library_name is not None:
            self.library_name = library_name
        if mapping_id is not None:
            self.mapping_id = mapping_id
        if replication_version is not None:
            self.replication_version = replication_version
        if rep_role is not None:
            self.rep_role = rep_role
        if rep_role_string is not None:
            self.rep_role_string = rep_role_string
        if num_mappings is not None:
            self.num_mappings = num_mappings
        if num_slots is not None:
            self.num_slots = num_slots
        if num_mapped_slots is not None:
            self.num_mapped_slots = num_mapped_slots
        if library_health_status_level is not None:
            self.library_health_status_level = library_health_status_level
        if library_health_status_level_string is not None:
            self.library_health_status_level_string = library_health_status_level_string
        if library_status is not None:
            self.library_status = library_status
        if library_status_string is not None:
            self.library_status_string = library_status_string
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if appliance_health_status_level is not None:
            self.appliance_health_status_level = appliance_health_status_level
        if appliance_health_status_level_string is not None:
            self.appliance_health_status_level_string = appliance_health_status_level_string

    @property
    def appliance_id(self):
        """Gets the appliance_id of this PartnerApplianceModel.  # noqa: E501

        Id of the partner appliance.  # noqa: E501

        :return: The appliance_id of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._appliance_id

    @appliance_id.setter
    def appliance_id(self, appliance_id):
        """Sets the appliance_id of this PartnerApplianceModel.

        Id of the partner appliance.  # noqa: E501

        :param appliance_id: The appliance_id of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._appliance_id = appliance_id

    @property
    def appliance_online(self):
        """Gets the appliance_online of this PartnerApplianceModel.  # noqa: E501

        Flag stating whether or not the partner appliance is currently online.  # noqa: E501

        :return: The appliance_online of this PartnerApplianceModel.  # noqa: E501
        :rtype: bool
        """
        return self._appliance_online

    @appliance_online.setter
    def appliance_online(self, appliance_online):
        """Sets the appliance_online of this PartnerApplianceModel.

        Flag stating whether or not the partner appliance is currently online.  # noqa: E501

        :param appliance_online: The appliance_online of this PartnerApplianceModel.  # noqa: E501
        :type: bool
        """

        self._appliance_online = appliance_online

    @property
    def appliance_name(self):
        """Gets the appliance_name of this PartnerApplianceModel.  # noqa: E501

        The name of the parner appliance.  # noqa: E501

        :return: The appliance_name of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._appliance_name

    @appliance_name.setter
    def appliance_name(self, appliance_name):
        """Sets the appliance_name of this PartnerApplianceModel.

        The name of the parner appliance.  # noqa: E501

        :param appliance_name: The appliance_name of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._appliance_name = appliance_name

    @property
    def appliance_address(self):
        """Gets the appliance_address of this PartnerApplianceModel.  # noqa: E501

        The IP or hostname string of the partner appliance.  # noqa: E501

        :return: The appliance_address of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._appliance_address

    @appliance_address.setter
    def appliance_address(self, appliance_address):
        """Sets the appliance_address of this PartnerApplianceModel.

        The IP or hostname string of the partner appliance.  # noqa: E501

        :param appliance_address: The appliance_address of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._appliance_address = appliance_address

    @property
    def appliance_serial_number(self):
        """Gets the appliance_serial_number of this PartnerApplianceModel.  # noqa: E501

        The serial number of the partner appliance.  # noqa: E501

        :return: The appliance_serial_number of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._appliance_serial_number

    @appliance_serial_number.setter
    def appliance_serial_number(self, appliance_serial_number):
        """Sets the appliance_serial_number of this PartnerApplianceModel.

        The serial number of the partner appliance.  # noqa: E501

        :param appliance_serial_number: The appliance_serial_number of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._appliance_serial_number = appliance_serial_number

    @property
    def appliance_product_class(self):
        """Gets the appliance_product_class of this PartnerApplianceModel.  # noqa: E501

        The product class of the partner appliance.  # noqa: E501

        :return: The appliance_product_class of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._appliance_product_class

    @appliance_product_class.setter
    def appliance_product_class(self, appliance_product_class):
        """Sets the appliance_product_class of this PartnerApplianceModel.

        The product class of the partner appliance.  # noqa: E501

        :param appliance_product_class: The appliance_product_class of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._appliance_product_class = appliance_product_class

    @property
    def library_id(self):
        """Gets the library_id of this PartnerApplianceModel.  # noqa: E501

        Id of the partner library.  # noqa: E501

        :return: The library_id of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._library_id

    @library_id.setter
    def library_id(self, library_id):
        """Sets the library_id of this PartnerApplianceModel.

        Id of the partner library.  # noqa: E501

        :param library_id: The library_id of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._library_id = library_id

    @property
    def library_name(self):
        """Gets the library_name of this PartnerApplianceModel.  # noqa: E501

        The partner library name.  # noqa: E501

        :return: The library_name of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._library_name

    @library_name.setter
    def library_name(self, library_name):
        """Sets the library_name of this PartnerApplianceModel.

        The partner library name.  # noqa: E501

        :param library_name: The library_name of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._library_name = library_name

    @property
    def mapping_id(self):
        """Gets the mapping_id of this PartnerApplianceModel.  # noqa: E501

        Id of the mapping as seen by the partner appliance.  # noqa: E501

        :return: The mapping_id of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._mapping_id

    @mapping_id.setter
    def mapping_id(self, mapping_id):
        """Sets the mapping_id of this PartnerApplianceModel.

        Id of the mapping as seen by the partner appliance.  # noqa: E501

        :param mapping_id: The mapping_id of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._mapping_id = mapping_id

    @property
    def replication_version(self):
        """Gets the replication_version of this PartnerApplianceModel.  # noqa: E501

        Replication Version of the partner library.  # noqa: E501

        :return: The replication_version of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._replication_version

    @replication_version.setter
    def replication_version(self, replication_version):
        """Sets the replication_version of this PartnerApplianceModel.

        Replication Version of the partner library.  # noqa: E501

        :param replication_version: The replication_version of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._replication_version = replication_version

    @property
    def rep_role(self):
        """Gets the rep_role of this PartnerApplianceModel.  # noqa: E501

        Integer corresponding to replication Role of the partner library.  # noqa: E501

        :return: The rep_role of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._rep_role

    @rep_role.setter
    def rep_role(self, rep_role):
        """Sets the rep_role of this PartnerApplianceModel.

        Integer corresponding to replication Role of the partner library.  # noqa: E501

        :param rep_role: The rep_role of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._rep_role = rep_role

    @property
    def rep_role_string(self):
        """Gets the rep_role_string of this PartnerApplianceModel.  # noqa: E501

        String corresponding to replication role of the partner library.  # noqa: E501

        :return: The rep_role_string of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._rep_role_string

    @rep_role_string.setter
    def rep_role_string(self, rep_role_string):
        """Sets the rep_role_string of this PartnerApplianceModel.

        String corresponding to replication role of the partner library.  # noqa: E501

        :param rep_role_string: The rep_role_string of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._rep_role_string = rep_role_string

    @property
    def num_mappings(self):
        """Gets the num_mappings of this PartnerApplianceModel.  # noqa: E501

        Number of mappings on the partner library.  # noqa: E501

        :return: The num_mappings of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mappings

    @num_mappings.setter
    def num_mappings(self, num_mappings):
        """Sets the num_mappings of this PartnerApplianceModel.

        Number of mappings on the partner library.  # noqa: E501

        :param num_mappings: The num_mappings of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._num_mappings = num_mappings

    @property
    def num_slots(self):
        """Gets the num_slots of this PartnerApplianceModel.  # noqa: E501

        Number of slots on the partner library  # noqa: E501

        :return: The num_slots of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this PartnerApplianceModel.

        Number of slots on the partner library  # noqa: E501

        :param num_slots: The num_slots of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def num_mapped_slots(self):
        """Gets the num_mapped_slots of this PartnerApplianceModel.  # noqa: E501

        Number of mapped slots in the partner library.  # noqa: E501

        :return: The num_mapped_slots of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._num_mapped_slots

    @num_mapped_slots.setter
    def num_mapped_slots(self, num_mapped_slots):
        """Sets the num_mapped_slots of this PartnerApplianceModel.

        Number of mapped slots in the partner library.  # noqa: E501

        :param num_mapped_slots: The num_mapped_slots of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._num_mapped_slots = num_mapped_slots

    @property
    def library_health_status_level(self):
        """Gets the library_health_status_level of this PartnerApplianceModel.  # noqa: E501

        Integer detailing the status level of the library.  # noqa: E501

        :return: The library_health_status_level of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._library_health_status_level

    @library_health_status_level.setter
    def library_health_status_level(self, library_health_status_level):
        """Sets the library_health_status_level of this PartnerApplianceModel.

        Integer detailing the status level of the library.  # noqa: E501

        :param library_health_status_level: The library_health_status_level of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._library_health_status_level = library_health_status_level

    @property
    def library_health_status_level_string(self):
        """Gets the library_health_status_level_string of this PartnerApplianceModel.  # noqa: E501

        String detailing the status level of the library.  # noqa: E501

        :return: The library_health_status_level_string of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._library_health_status_level_string

    @library_health_status_level_string.setter
    def library_health_status_level_string(self, library_health_status_level_string):
        """Sets the library_health_status_level_string of this PartnerApplianceModel.

        String detailing the status level of the library.  # noqa: E501

        :param library_health_status_level_string: The library_health_status_level_string of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._library_health_status_level_string = library_health_status_level_string

    @property
    def library_status(self):
        """Gets the library_status of this PartnerApplianceModel.  # noqa: E501

        Integer detailing the reason for ill health of the library if any.  # noqa: E501

        :return: The library_status of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._library_status

    @library_status.setter
    def library_status(self, library_status):
        """Sets the library_status of this PartnerApplianceModel.

        Integer detailing the reason for ill health of the library if any.  # noqa: E501

        :param library_status: The library_status of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._library_status = library_status

    @property
    def library_status_string(self):
        """Gets the library_status_string of this PartnerApplianceModel.  # noqa: E501

        String detailing the reason for ill health of the library if any.  # noqa: E501

        :return: The library_status_string of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._library_status_string

    @library_status_string.setter
    def library_status_string(self, library_status_string):
        """Sets the library_status_string of this PartnerApplianceModel.

        String detailing the reason for ill health of the library if any.  # noqa: E501

        :param library_status_string: The library_status_string of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._library_status_string = library_status_string

    @property
    def user_bytes(self):
        """Gets the user_bytes of this PartnerApplianceModel.  # noqa: E501

        The total size of the user data that has been stored in the library before dedupe in Bytes.  # noqa: E501

        :return: The user_bytes of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this PartnerApplianceModel.

        The total size of the user data that has been stored in the library before dedupe in Bytes.  # noqa: E501

        :param user_bytes: The user_bytes of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this PartnerApplianceModel.  # noqa: E501

        The actual size data in the library before dedupe in Bytes.  # noqa: E501

        :return: The disk_bytes of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this PartnerApplianceModel.

        The actual size data in the library before dedupe in Bytes.  # noqa: E501

        :param disk_bytes: The disk_bytes of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def appliance_health_status_level(self):
        """Gets the appliance_health_status_level of this PartnerApplianceModel.  # noqa: E501

        Enum denoting health level of the partner appliance.  # noqa: E501

        :return: The appliance_health_status_level of this PartnerApplianceModel.  # noqa: E501
        :rtype: int
        """
        return self._appliance_health_status_level

    @appliance_health_status_level.setter
    def appliance_health_status_level(self, appliance_health_status_level):
        """Sets the appliance_health_status_level of this PartnerApplianceModel.

        Enum denoting health level of the partner appliance.  # noqa: E501

        :param appliance_health_status_level: The appliance_health_status_level of this PartnerApplianceModel.  # noqa: E501
        :type: int
        """

        self._appliance_health_status_level = appliance_health_status_level

    @property
    def appliance_health_status_level_string(self):
        """Gets the appliance_health_status_level_string of this PartnerApplianceModel.  # noqa: E501

        String representation of health level of the partner appliance.  # noqa: E501

        :return: The appliance_health_status_level_string of this PartnerApplianceModel.  # noqa: E501
        :rtype: str
        """
        return self._appliance_health_status_level_string

    @appliance_health_status_level_string.setter
    def appliance_health_status_level_string(self, appliance_health_status_level_string):
        """Sets the appliance_health_status_level_string of this PartnerApplianceModel.

        String representation of health level of the partner appliance.  # noqa: E501

        :param appliance_health_status_level_string: The appliance_health_status_level_string of this PartnerApplianceModel.  # noqa: E501
        :type: str
        """

        self._appliance_health_status_level_string = appliance_health_status_level_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartnerApplianceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerApplianceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
