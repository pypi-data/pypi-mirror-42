# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class EventModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'time_stamp': 'str',
        'category': 'int',
        'category_string': 'str',
        'message_string': 'str',
        'reason': 'int',
        'reason_string': 'str',
        'severity': 'int',
        'severity_string': 'str',
        'source_appliance_name': 'str',
        'source_appliance_address': 'str',
        'source_appliance_serial_number': 'str',
        'target_appliance_name': 'str',
        'target_appliance_address': 'str',
        'target_appliance_serial_number': 'str',
        'connection_failure_reason': 'int',
        'connection_failure_reason_string': 'str',
        'mapping_name': 'str',
        'source_library_or_share_name': 'str',
        'target_library_or_share_name': 'str',
        'source_slot_or_entry_id': 'int',
        'target_slot_or_entry_id': 'int',
        'job_started_date': 'datetime',
        'job_stopped_date': 'datetime',
        'job_direction': 'int',
        'job_direction_string': 'str',
        'job_stage': 'int',
        'job_stage_string': 'str',
        'percentage_job_progress': 'float',
        'job_duration_seconds': 'int',
        'job_throughput': 'int',
        'job_status_code': 'int'
    }

    attribute_map = {
        'id': 'id',
        'time_stamp': 'timeStamp',
        'category': 'category',
        'category_string': 'categoryString',
        'message_string': 'messageString',
        'reason': 'reason',
        'reason_string': 'reasonString',
        'severity': 'severity',
        'severity_string': 'severityString',
        'source_appliance_name': 'sourceApplianceName',
        'source_appliance_address': 'sourceApplianceAddress',
        'source_appliance_serial_number': 'sourceApplianceSerialNumber',
        'target_appliance_name': 'targetApplianceName',
        'target_appliance_address': 'targetApplianceAddress',
        'target_appliance_serial_number': 'targetApplianceSerialNumber',
        'connection_failure_reason': 'connectionFailureReason',
        'connection_failure_reason_string': 'connectionFailureReasonString',
        'mapping_name': 'mappingName',
        'source_library_or_share_name': 'sourceLibraryOrShareName',
        'target_library_or_share_name': 'targetLibraryOrShareName',
        'source_slot_or_entry_id': 'sourceSlotOrEntryId',
        'target_slot_or_entry_id': 'targetSlotOrEntryId',
        'job_started_date': 'jobStartedDate',
        'job_stopped_date': 'jobStoppedDate',
        'job_direction': 'jobDirection',
        'job_direction_string': 'jobDirectionString',
        'job_stage': 'jobStage',
        'job_stage_string': 'jobStageString',
        'percentage_job_progress': 'percentageJobProgress',
        'job_duration_seconds': 'jobDurationSeconds',
        'job_throughput': 'jobThroughput',
        'job_status_code': 'jobStatusCode'
    }

    def __init__(self, id=None, time_stamp=None, category=None, category_string=None, message_string=None, reason=None, reason_string=None, severity=None, severity_string=None, source_appliance_name=None, source_appliance_address=None, source_appliance_serial_number=None, target_appliance_name=None, target_appliance_address=None, target_appliance_serial_number=None, connection_failure_reason=None, connection_failure_reason_string=None, mapping_name=None, source_library_or_share_name=None, target_library_or_share_name=None, source_slot_or_entry_id=None, target_slot_or_entry_id=None, job_started_date=None, job_stopped_date=None, job_direction=None, job_direction_string=None, job_stage=None, job_stage_string=None, percentage_job_progress=None, job_duration_seconds=None, job_throughput=None, job_status_code=None):  # noqa: E501
        """EventModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._time_stamp = None
        self._category = None
        self._category_string = None
        self._message_string = None
        self._reason = None
        self._reason_string = None
        self._severity = None
        self._severity_string = None
        self._source_appliance_name = None
        self._source_appliance_address = None
        self._source_appliance_serial_number = None
        self._target_appliance_name = None
        self._target_appliance_address = None
        self._target_appliance_serial_number = None
        self._connection_failure_reason = None
        self._connection_failure_reason_string = None
        self._mapping_name = None
        self._source_library_or_share_name = None
        self._target_library_or_share_name = None
        self._source_slot_or_entry_id = None
        self._target_slot_or_entry_id = None
        self._job_started_date = None
        self._job_stopped_date = None
        self._job_direction = None
        self._job_direction_string = None
        self._job_stage = None
        self._job_stage_string = None
        self._percentage_job_progress = None
        self._job_duration_seconds = None
        self._job_throughput = None
        self._job_status_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if category is not None:
            self.category = category
        if category_string is not None:
            self.category_string = category_string
        if message_string is not None:
            self.message_string = message_string
        if reason is not None:
            self.reason = reason
        if reason_string is not None:
            self.reason_string = reason_string
        if severity is not None:
            self.severity = severity
        if severity_string is not None:
            self.severity_string = severity_string
        if source_appliance_name is not None:
            self.source_appliance_name = source_appliance_name
        if source_appliance_address is not None:
            self.source_appliance_address = source_appliance_address
        if source_appliance_serial_number is not None:
            self.source_appliance_serial_number = source_appliance_serial_number
        if target_appliance_name is not None:
            self.target_appliance_name = target_appliance_name
        if target_appliance_address is not None:
            self.target_appliance_address = target_appliance_address
        if target_appliance_serial_number is not None:
            self.target_appliance_serial_number = target_appliance_serial_number
        if connection_failure_reason is not None:
            self.connection_failure_reason = connection_failure_reason
        if connection_failure_reason_string is not None:
            self.connection_failure_reason_string = connection_failure_reason_string
        if mapping_name is not None:
            self.mapping_name = mapping_name
        if source_library_or_share_name is not None:
            self.source_library_or_share_name = source_library_or_share_name
        if target_library_or_share_name is not None:
            self.target_library_or_share_name = target_library_or_share_name
        if source_slot_or_entry_id is not None:
            self.source_slot_or_entry_id = source_slot_or_entry_id
        if target_slot_or_entry_id is not None:
            self.target_slot_or_entry_id = target_slot_or_entry_id
        if job_started_date is not None:
            self.job_started_date = job_started_date
        if job_stopped_date is not None:
            self.job_stopped_date = job_stopped_date
        if job_direction is not None:
            self.job_direction = job_direction
        if job_direction_string is not None:
            self.job_direction_string = job_direction_string
        if job_stage is not None:
            self.job_stage = job_stage
        if job_stage_string is not None:
            self.job_stage_string = job_stage_string
        if percentage_job_progress is not None:
            self.percentage_job_progress = percentage_job_progress
        if job_duration_seconds is not None:
            self.job_duration_seconds = job_duration_seconds
        if job_throughput is not None:
            self.job_throughput = job_throughput
        if job_status_code is not None:
            self.job_status_code = job_status_code

    @property
    def id(self):
        """Gets the id of this EventModel.  # noqa: E501

        The id of the event.  # noqa: E501

        :return: The id of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventModel.

        The id of the event.  # noqa: E501

        :param id: The id of this EventModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this EventModel.  # noqa: E501

        Date and time of the event  # noqa: E501

        :return: The time_stamp of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this EventModel.

        Date and time of the event  # noqa: E501

        :param time_stamp: The time_stamp of this EventModel.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def category(self):
        """Gets the category of this EventModel.  # noqa: E501

        The event category  # noqa: E501

        :return: The category of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventModel.

        The event category  # noqa: E501

        :param category: The category of this EventModel.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def category_string(self):
        """Gets the category_string of this EventModel.  # noqa: E501

        The string representation of the event category  # noqa: E501

        :return: The category_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._category_string

    @category_string.setter
    def category_string(self, category_string):
        """Sets the category_string of this EventModel.

        The string representation of the event category  # noqa: E501

        :param category_string: The category_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._category_string = category_string

    @property
    def message_string(self):
        """Gets the message_string of this EventModel.  # noqa: E501

        Message of the event  # noqa: E501

        :return: The message_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._message_string

    @message_string.setter
    def message_string(self, message_string):
        """Sets the message_string of this EventModel.

        Message of the event  # noqa: E501

        :param message_string: The message_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._message_string = message_string

    @property
    def reason(self):
        """Gets the reason of this EventModel.  # noqa: E501

        Numeric reason code of event  # noqa: E501

        :return: The reason of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this EventModel.

        Numeric reason code of event  # noqa: E501

        :param reason: The reason of this EventModel.  # noqa: E501
        :type: int
        """

        self._reason = reason

    @property
    def reason_string(self):
        """Gets the reason_string of this EventModel.  # noqa: E501

        String representation of event reason  # noqa: E501

        :return: The reason_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._reason_string

    @reason_string.setter
    def reason_string(self, reason_string):
        """Sets the reason_string of this EventModel.

        String representation of event reason  # noqa: E501

        :param reason_string: The reason_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._reason_string = reason_string

    @property
    def severity(self):
        """Gets the severity of this EventModel.  # noqa: E501

        Severity of the event  # noqa: E501

        :return: The severity of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventModel.

        Severity of the event  # noqa: E501

        :param severity: The severity of this EventModel.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def severity_string(self):
        """Gets the severity_string of this EventModel.  # noqa: E501

        String representation of event severity  # noqa: E501

        :return: The severity_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._severity_string

    @severity_string.setter
    def severity_string(self, severity_string):
        """Sets the severity_string of this EventModel.

        String representation of event severity  # noqa: E501

        :param severity_string: The severity_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._severity_string = severity_string

    @property
    def source_appliance_name(self):
        """Gets the source_appliance_name of this EventModel.  # noqa: E501

        Name of the source appliance if present  # noqa: E501

        :return: The source_appliance_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._source_appliance_name

    @source_appliance_name.setter
    def source_appliance_name(self, source_appliance_name):
        """Sets the source_appliance_name of this EventModel.

        Name of the source appliance if present  # noqa: E501

        :param source_appliance_name: The source_appliance_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._source_appliance_name = source_appliance_name

    @property
    def source_appliance_address(self):
        """Gets the source_appliance_address of this EventModel.  # noqa: E501

        Address of the source appliance if present  # noqa: E501

        :return: The source_appliance_address of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._source_appliance_address

    @source_appliance_address.setter
    def source_appliance_address(self, source_appliance_address):
        """Sets the source_appliance_address of this EventModel.

        Address of the source appliance if present  # noqa: E501

        :param source_appliance_address: The source_appliance_address of this EventModel.  # noqa: E501
        :type: str
        """

        self._source_appliance_address = source_appliance_address

    @property
    def source_appliance_serial_number(self):
        """Gets the source_appliance_serial_number of this EventModel.  # noqa: E501

        Serial number of the source appliance if present  # noqa: E501

        :return: The source_appliance_serial_number of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._source_appliance_serial_number

    @source_appliance_serial_number.setter
    def source_appliance_serial_number(self, source_appliance_serial_number):
        """Sets the source_appliance_serial_number of this EventModel.

        Serial number of the source appliance if present  # noqa: E501

        :param source_appliance_serial_number: The source_appliance_serial_number of this EventModel.  # noqa: E501
        :type: str
        """

        self._source_appliance_serial_number = source_appliance_serial_number

    @property
    def target_appliance_name(self):
        """Gets the target_appliance_name of this EventModel.  # noqa: E501

        Name of the target appliance if present  # noqa: E501

        :return: The target_appliance_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._target_appliance_name

    @target_appliance_name.setter
    def target_appliance_name(self, target_appliance_name):
        """Sets the target_appliance_name of this EventModel.

        Name of the target appliance if present  # noqa: E501

        :param target_appliance_name: The target_appliance_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._target_appliance_name = target_appliance_name

    @property
    def target_appliance_address(self):
        """Gets the target_appliance_address of this EventModel.  # noqa: E501

        Address of the target appliance if present  # noqa: E501

        :return: The target_appliance_address of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._target_appliance_address

    @target_appliance_address.setter
    def target_appliance_address(self, target_appliance_address):
        """Sets the target_appliance_address of this EventModel.

        Address of the target appliance if present  # noqa: E501

        :param target_appliance_address: The target_appliance_address of this EventModel.  # noqa: E501
        :type: str
        """

        self._target_appliance_address = target_appliance_address

    @property
    def target_appliance_serial_number(self):
        """Gets the target_appliance_serial_number of this EventModel.  # noqa: E501

        Serial number of the target appliance if present  # noqa: E501

        :return: The target_appliance_serial_number of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._target_appliance_serial_number

    @target_appliance_serial_number.setter
    def target_appliance_serial_number(self, target_appliance_serial_number):
        """Sets the target_appliance_serial_number of this EventModel.

        Serial number of the target appliance if present  # noqa: E501

        :param target_appliance_serial_number: The target_appliance_serial_number of this EventModel.  # noqa: E501
        :type: str
        """

        self._target_appliance_serial_number = target_appliance_serial_number

    @property
    def connection_failure_reason(self):
        """Gets the connection_failure_reason of this EventModel.  # noqa: E501

        Reason for connection failure  # noqa: E501

        :return: The connection_failure_reason of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._connection_failure_reason

    @connection_failure_reason.setter
    def connection_failure_reason(self, connection_failure_reason):
        """Sets the connection_failure_reason of this EventModel.

        Reason for connection failure  # noqa: E501

        :param connection_failure_reason: The connection_failure_reason of this EventModel.  # noqa: E501
        :type: int
        """

        self._connection_failure_reason = connection_failure_reason

    @property
    def connection_failure_reason_string(self):
        """Gets the connection_failure_reason_string of this EventModel.  # noqa: E501

        String representation of the connection failure reason  # noqa: E501

        :return: The connection_failure_reason_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._connection_failure_reason_string

    @connection_failure_reason_string.setter
    def connection_failure_reason_string(self, connection_failure_reason_string):
        """Sets the connection_failure_reason_string of this EventModel.

        String representation of the connection failure reason  # noqa: E501

        :param connection_failure_reason_string: The connection_failure_reason_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._connection_failure_reason_string = connection_failure_reason_string

    @property
    def mapping_name(self):
        """Gets the mapping_name of this EventModel.  # noqa: E501

        Name of mapping that produced the event  # noqa: E501

        :return: The mapping_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._mapping_name

    @mapping_name.setter
    def mapping_name(self, mapping_name):
        """Sets the mapping_name of this EventModel.

        Name of mapping that produced the event  # noqa: E501

        :param mapping_name: The mapping_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._mapping_name = mapping_name

    @property
    def source_library_or_share_name(self):
        """Gets the source_library_or_share_name of this EventModel.  # noqa: E501

        Name of source library or share  # noqa: E501

        :return: The source_library_or_share_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._source_library_or_share_name

    @source_library_or_share_name.setter
    def source_library_or_share_name(self, source_library_or_share_name):
        """Sets the source_library_or_share_name of this EventModel.

        Name of source library or share  # noqa: E501

        :param source_library_or_share_name: The source_library_or_share_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._source_library_or_share_name = source_library_or_share_name

    @property
    def target_library_or_share_name(self):
        """Gets the target_library_or_share_name of this EventModel.  # noqa: E501

        Name of target library or share  # noqa: E501

        :return: The target_library_or_share_name of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._target_library_or_share_name

    @target_library_or_share_name.setter
    def target_library_or_share_name(self, target_library_or_share_name):
        """Sets the target_library_or_share_name of this EventModel.

        Name of target library or share  # noqa: E501

        :param target_library_or_share_name: The target_library_or_share_name of this EventModel.  # noqa: E501
        :type: str
        """

        self._target_library_or_share_name = target_library_or_share_name

    @property
    def source_slot_or_entry_id(self):
        """Gets the source_slot_or_entry_id of this EventModel.  # noqa: E501

        ID of source entry or slot that produced event  # noqa: E501

        :return: The source_slot_or_entry_id of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._source_slot_or_entry_id

    @source_slot_or_entry_id.setter
    def source_slot_or_entry_id(self, source_slot_or_entry_id):
        """Sets the source_slot_or_entry_id of this EventModel.

        ID of source entry or slot that produced event  # noqa: E501

        :param source_slot_or_entry_id: The source_slot_or_entry_id of this EventModel.  # noqa: E501
        :type: int
        """

        self._source_slot_or_entry_id = source_slot_or_entry_id

    @property
    def target_slot_or_entry_id(self):
        """Gets the target_slot_or_entry_id of this EventModel.  # noqa: E501

        Id of target entry or slot that produced event  # noqa: E501

        :return: The target_slot_or_entry_id of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_or_entry_id

    @target_slot_or_entry_id.setter
    def target_slot_or_entry_id(self, target_slot_or_entry_id):
        """Sets the target_slot_or_entry_id of this EventModel.

        Id of target entry or slot that produced event  # noqa: E501

        :param target_slot_or_entry_id: The target_slot_or_entry_id of this EventModel.  # noqa: E501
        :type: int
        """

        self._target_slot_or_entry_id = target_slot_or_entry_id

    @property
    def job_started_date(self):
        """Gets the job_started_date of this EventModel.  # noqa: E501

        The date and time replication job was started  # noqa: E501

        :return: The job_started_date of this EventModel.  # noqa: E501
        :rtype: datetime
        """
        return self._job_started_date

    @job_started_date.setter
    def job_started_date(self, job_started_date):
        """Sets the job_started_date of this EventModel.

        The date and time replication job was started  # noqa: E501

        :param job_started_date: The job_started_date of this EventModel.  # noqa: E501
        :type: datetime
        """

        self._job_started_date = job_started_date

    @property
    def job_stopped_date(self):
        """Gets the job_stopped_date of this EventModel.  # noqa: E501

        The date and time replication job was stopped  # noqa: E501

        :return: The job_stopped_date of this EventModel.  # noqa: E501
        :rtype: datetime
        """
        return self._job_stopped_date

    @job_stopped_date.setter
    def job_stopped_date(self, job_stopped_date):
        """Sets the job_stopped_date of this EventModel.

        The date and time replication job was stopped  # noqa: E501

        :param job_stopped_date: The job_stopped_date of this EventModel.  # noqa: E501
        :type: datetime
        """

        self._job_stopped_date = job_stopped_date

    @property
    def job_direction(self):
        """Gets the job_direction of this EventModel.  # noqa: E501

        Enum denoting job direction  # noqa: E501

        :return: The job_direction of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._job_direction

    @job_direction.setter
    def job_direction(self, job_direction):
        """Sets the job_direction of this EventModel.

        Enum denoting job direction  # noqa: E501

        :param job_direction: The job_direction of this EventModel.  # noqa: E501
        :type: int
        """

        self._job_direction = job_direction

    @property
    def job_direction_string(self):
        """Gets the job_direction_string of this EventModel.  # noqa: E501

        String representation of job direction  # noqa: E501

        :return: The job_direction_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._job_direction_string

    @job_direction_string.setter
    def job_direction_string(self, job_direction_string):
        """Sets the job_direction_string of this EventModel.

        String representation of job direction  # noqa: E501

        :param job_direction_string: The job_direction_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._job_direction_string = job_direction_string

    @property
    def job_stage(self):
        """Gets the job_stage of this EventModel.  # noqa: E501

        Enum denoting stage of replication job  # noqa: E501

        :return: The job_stage of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._job_stage

    @job_stage.setter
    def job_stage(self, job_stage):
        """Sets the job_stage of this EventModel.

        Enum denoting stage of replication job  # noqa: E501

        :param job_stage: The job_stage of this EventModel.  # noqa: E501
        :type: int
        """

        self._job_stage = job_stage

    @property
    def job_stage_string(self):
        """Gets the job_stage_string of this EventModel.  # noqa: E501

        String representation of replication job stage  # noqa: E501

        :return: The job_stage_string of this EventModel.  # noqa: E501
        :rtype: str
        """
        return self._job_stage_string

    @job_stage_string.setter
    def job_stage_string(self, job_stage_string):
        """Sets the job_stage_string of this EventModel.

        String representation of replication job stage  # noqa: E501

        :param job_stage_string: The job_stage_string of this EventModel.  # noqa: E501
        :type: str
        """

        self._job_stage_string = job_stage_string

    @property
    def percentage_job_progress(self):
        """Gets the percentage_job_progress of this EventModel.  # noqa: E501

        Percentage progress of replication job  # noqa: E501

        :return: The percentage_job_progress of this EventModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage_job_progress

    @percentage_job_progress.setter
    def percentage_job_progress(self, percentage_job_progress):
        """Sets the percentage_job_progress of this EventModel.

        Percentage progress of replication job  # noqa: E501

        :param percentage_job_progress: The percentage_job_progress of this EventModel.  # noqa: E501
        :type: float
        """

        self._percentage_job_progress = percentage_job_progress

    @property
    def job_duration_seconds(self):
        """Gets the job_duration_seconds of this EventModel.  # noqa: E501

        Duration in seconds of the replication job  # noqa: E501

        :return: The job_duration_seconds of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._job_duration_seconds

    @job_duration_seconds.setter
    def job_duration_seconds(self, job_duration_seconds):
        """Sets the job_duration_seconds of this EventModel.

        Duration in seconds of the replication job  # noqa: E501

        :param job_duration_seconds: The job_duration_seconds of this EventModel.  # noqa: E501
        :type: int
        """

        self._job_duration_seconds = job_duration_seconds

    @property
    def job_throughput(self):
        """Gets the job_throughput of this EventModel.  # noqa: E501

        Current throughput of slot or entry datajob in bytes  # noqa: E501

        :return: The job_throughput of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._job_throughput

    @job_throughput.setter
    def job_throughput(self, job_throughput):
        """Sets the job_throughput of this EventModel.

        Current throughput of slot or entry datajob in bytes  # noqa: E501

        :param job_throughput: The job_throughput of this EventModel.  # noqa: E501
        :type: int
        """

        self._job_throughput = job_throughput

    @property
    def job_status_code(self):
        """Gets the job_status_code of this EventModel.  # noqa: E501

        Numeric value representing job status  # noqa: E501

        :return: The job_status_code of this EventModel.  # noqa: E501
        :rtype: int
        """
        return self._job_status_code

    @job_status_code.setter
    def job_status_code(self, job_status_code):
        """Sets the job_status_code of this EventModel.

        Numeric value representing job status  # noqa: E501

        :param job_status_code: The job_status_code of this EventModel.  # noqa: E501
        :type: int
        """

        self._job_status_code = job_status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
