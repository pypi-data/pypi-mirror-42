# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ShareMappingFileFilterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'filters': 'NasFileFilters',
        'waypoint': 'str'
    }

    attribute_map = {
        'count': 'count',
        'filters': 'filters',
        'waypoint': 'waypoint'
    }

    def __init__(self, count=None, filters=None, waypoint=None):  # noqa: E501
        """ShareMappingFileFilterModel - a model defined in Swagger"""  # noqa: E501

        self._count = None
        self._filters = None
        self._waypoint = None
        self.discriminator = None

        if count is not None:
            self.count = count
        if filters is not None:
            self.filters = filters
        if waypoint is not None:
            self.waypoint = waypoint

    @property
    def count(self):
        """Gets the count of this ShareMappingFileFilterModel.  # noqa: E501

        Count of files returned by the search using this filter  # noqa: E501

        :return: The count of this ShareMappingFileFilterModel.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ShareMappingFileFilterModel.

        Count of files returned by the search using this filter  # noqa: E501

        :param count: The count of this ShareMappingFileFilterModel.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def filters(self):
        """Gets the filters of this ShareMappingFileFilterModel.  # noqa: E501

        Replication Nas mapping file filter settings for the search  # noqa: E501

        :return: The filters of this ShareMappingFileFilterModel.  # noqa: E501
        :rtype: NasFileFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ShareMappingFileFilterModel.

        Replication Nas mapping file filter settings for the search  # noqa: E501

        :param filters: The filters of this ShareMappingFileFilterModel.  # noqa: E501
        :type: NasFileFilters
        """

        self._filters = filters

    @property
    def waypoint(self):
        """Gets the waypoint of this ShareMappingFileFilterModel.  # noqa: E501

        Waypoint to navigate the data returned using this filter  # noqa: E501

        :return: The waypoint of this ShareMappingFileFilterModel.  # noqa: E501
        :rtype: str
        """
        return self._waypoint

    @waypoint.setter
    def waypoint(self, waypoint):
        """Sets the waypoint of this ShareMappingFileFilterModel.

        Waypoint to navigate the data returned using this filter  # noqa: E501

        :param waypoint: The waypoint of this ShareMappingFileFilterModel.  # noqa: E501
        :type: str
        """

        self._waypoint = waypoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareMappingFileFilterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareMappingFileFilterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
