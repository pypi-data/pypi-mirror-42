# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class VtlLibraryDefaultMappingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_appliance_id': 'int',
        'target_library_id': 'int',
        'target_mapping_id': 'int',
        'target_slot_start': 'int',
        'mode': 'str'
    }

    attribute_map = {
        'target_appliance_id': 'targetApplianceId',
        'target_library_id': 'targetLibraryId',
        'target_mapping_id': 'targetMappingId',
        'target_slot_start': 'targetSlotStart',
        'mode': 'mode'
    }

    def __init__(self, target_appliance_id=None, target_library_id=None, target_mapping_id=None, target_slot_start=None, mode=None):  # noqa: E501
        """VtlLibraryDefaultMappingModel - a model defined in Swagger"""  # noqa: E501

        self._target_appliance_id = None
        self._target_library_id = None
        self._target_mapping_id = None
        self._target_slot_start = None
        self._mode = None
        self.discriminator = None

        if target_appliance_id is not None:
            self.target_appliance_id = target_appliance_id
        if target_library_id is not None:
            self.target_library_id = target_library_id
        if target_mapping_id is not None:
            self.target_mapping_id = target_mapping_id
        if target_slot_start is not None:
            self.target_slot_start = target_slot_start
        if mode is not None:
            self.mode = mode

    @property
    def target_appliance_id(self):
        """Gets the target_appliance_id of this VtlLibraryDefaultMappingModel.  # noqa: E501

        Id of the target appliance.  # noqa: E501

        :return: The target_appliance_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._target_appliance_id

    @target_appliance_id.setter
    def target_appliance_id(self, target_appliance_id):
        """Sets the target_appliance_id of this VtlLibraryDefaultMappingModel.

        Id of the target appliance.  # noqa: E501

        :param target_appliance_id: The target_appliance_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :type: int
        """

        self._target_appliance_id = target_appliance_id

    @property
    def target_library_id(self):
        """Gets the target_library_id of this VtlLibraryDefaultMappingModel.  # noqa: E501

        Id of the target library.  # noqa: E501

        :return: The target_library_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._target_library_id

    @target_library_id.setter
    def target_library_id(self, target_library_id):
        """Sets the target_library_id of this VtlLibraryDefaultMappingModel.

        Id of the target library.  # noqa: E501

        :param target_library_id: The target_library_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :type: int
        """

        self._target_library_id = target_library_id

    @property
    def target_mapping_id(self):
        """Gets the target_mapping_id of this VtlLibraryDefaultMappingModel.  # noqa: E501

        Id of the existing mapping on target library if adopting an existing mapping.  # noqa: E501

        :return: The target_mapping_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._target_mapping_id

    @target_mapping_id.setter
    def target_mapping_id(self, target_mapping_id):
        """Sets the target_mapping_id of this VtlLibraryDefaultMappingModel.

        Id of the existing mapping on target library if adopting an existing mapping.  # noqa: E501

        :param target_mapping_id: The target_mapping_id of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :type: int
        """

        self._target_mapping_id = target_mapping_id

    @property
    def target_slot_start(self):
        """Gets the target_slot_start of this VtlLibraryDefaultMappingModel.  # noqa: E501

        Id of the target slot from which we want the mapping to start.  # noqa: E501

        :return: The target_slot_start of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._target_slot_start

    @target_slot_start.setter
    def target_slot_start(self, target_slot_start):
        """Sets the target_slot_start of this VtlLibraryDefaultMappingModel.

        Id of the target slot from which we want the mapping to start.  # noqa: E501

        :param target_slot_start: The target_slot_start of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :type: int
        """

        self._target_slot_start = target_slot_start

    @property
    def mode(self):
        """Gets the mode of this VtlLibraryDefaultMappingModel.  # noqa: E501

        Value which controls how the recoverSlots & mappedSlots fields will be set.  # noqa: E501

        :return: The mode of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this VtlLibraryDefaultMappingModel.

        Value which controls how the recoverSlots & mappedSlots fields will be set.  # noqa: E501

        :param mode: The mode of this VtlLibraryDefaultMappingModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIRST", "FIRST_RECOVER", "ANOTHER", "ANOTHER_RECOVER", "ADOPT", "MODIFY"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VtlLibraryDefaultMappingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VtlLibraryDefaultMappingModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
