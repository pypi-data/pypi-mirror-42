# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TargetLibrariesSlot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'barcode': 'str',
        'size_bytes': 'int',
        'num_changes': 'int',
        'mapped': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'barcode': 'barcode',
        'size_bytes': 'sizeBytes',
        'num_changes': 'numChanges',
        'mapped': 'mapped'
    }

    def __init__(self, id=None, barcode=None, size_bytes=None, num_changes=None, mapped=False):  # noqa: E501
        """TargetLibrariesSlot - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._barcode = None
        self._size_bytes = None
        self._num_changes = None
        self._mapped = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if barcode is not None:
            self.barcode = barcode
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if num_changes is not None:
            self.num_changes = num_changes
        if mapped is not None:
            self.mapped = mapped

    @property
    def id(self):
        """Gets the id of this TargetLibrariesSlot.  # noqa: E501

        Unique ID for this slot  # noqa: E501

        :return: The id of this TargetLibrariesSlot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetLibrariesSlot.

        Unique ID for this slot  # noqa: E501

        :param id: The id of this TargetLibrariesSlot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def barcode(self):
        """Gets the barcode of this TargetLibrariesSlot.  # noqa: E501

        Barcode of the cartridge  # noqa: E501

        :return: The barcode of this TargetLibrariesSlot.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this TargetLibrariesSlot.

        Barcode of the cartridge  # noqa: E501

        :param barcode: The barcode of this TargetLibrariesSlot.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def size_bytes(self):
        """Gets the size_bytes of this TargetLibrariesSlot.  # noqa: E501

        Cartridge max size in bytes  # noqa: E501

        :return: The size_bytes of this TargetLibrariesSlot.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this TargetLibrariesSlot.

        Cartridge max size in bytes  # noqa: E501

        :param size_bytes: The size_bytes of this TargetLibrariesSlot.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def num_changes(self):
        """Gets the num_changes of this TargetLibrariesSlot.  # noqa: E501

        The number of times the cartridge has been modified.  # noqa: E501

        :return: The num_changes of this TargetLibrariesSlot.  # noqa: E501
        :rtype: int
        """
        return self._num_changes

    @num_changes.setter
    def num_changes(self, num_changes):
        """Sets the num_changes of this TargetLibrariesSlot.

        The number of times the cartridge has been modified.  # noqa: E501

        :param num_changes: The num_changes of this TargetLibrariesSlot.  # noqa: E501
        :type: int
        """

        self._num_changes = num_changes

    @property
    def mapped(self):
        """Gets the mapped of this TargetLibrariesSlot.  # noqa: E501

        True if the slot is mapped. False otherwise.  # noqa: E501

        :return: The mapped of this TargetLibrariesSlot.  # noqa: E501
        :rtype: bool
        """
        return self._mapped

    @mapped.setter
    def mapped(self, mapped):
        """Sets the mapped of this TargetLibrariesSlot.

        True if the slot is mapped. False otherwise.  # noqa: E501

        :param mapped: The mapped of this TargetLibrariesSlot.  # noqa: E501
        :type: bool
        """

        self._mapped = mapped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetLibrariesSlot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetLibrariesSlot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
