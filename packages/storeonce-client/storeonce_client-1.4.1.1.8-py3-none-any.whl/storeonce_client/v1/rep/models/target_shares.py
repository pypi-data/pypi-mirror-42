# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Replication

    unused  # noqa: E501

    Component version: 3.3.11-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TargetShares(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'access_protocol': 'int',
        'access_protocol_string': 'str',
        'share_version': 'int',
        'rep_role': 'int',
        'rep_role_string': 'str',
        'encryption_enabled': 'bool',
        'deduplication_enabled': 'bool',
        'disk_bytes': 'int',
        'user_bytes': 'int',
        'num_files': 'int',
        'num_directories': 'int',
        'health_level': 'int',
        'health_level_string': 'str',
        'share_status': 'int',
        'share_status_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'access_protocol': 'accessProtocol',
        'access_protocol_string': 'accessProtocolString',
        'share_version': 'shareVersion',
        'rep_role': 'repRole',
        'rep_role_string': 'repRoleString',
        'encryption_enabled': 'encryptionEnabled',
        'deduplication_enabled': 'deduplicationEnabled',
        'disk_bytes': 'diskBytes',
        'user_bytes': 'userBytes',
        'num_files': 'numFiles',
        'num_directories': 'numDirectories',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'share_status': 'shareStatus',
        'share_status_string': 'shareStatusString'
    }

    def __init__(self, id=None, name=None, description=None, access_protocol=None, access_protocol_string=None, share_version=None, rep_role=None, rep_role_string=None, encryption_enabled=False, deduplication_enabled=False, disk_bytes=None, user_bytes=None, num_files=None, num_directories=None, health_level=None, health_level_string=None, share_status=None, share_status_string=None):  # noqa: E501
        """TargetShares - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._access_protocol = None
        self._access_protocol_string = None
        self._share_version = None
        self._rep_role = None
        self._rep_role_string = None
        self._encryption_enabled = None
        self._deduplication_enabled = None
        self._disk_bytes = None
        self._user_bytes = None
        self._num_files = None
        self._num_directories = None
        self._health_level = None
        self._health_level_string = None
        self._share_status = None
        self._share_status_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if access_protocol is not None:
            self.access_protocol = access_protocol
        if access_protocol_string is not None:
            self.access_protocol_string = access_protocol_string
        if share_version is not None:
            self.share_version = share_version
        if rep_role is not None:
            self.rep_role = rep_role
        if rep_role_string is not None:
            self.rep_role_string = rep_role_string
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if deduplication_enabled is not None:
            self.deduplication_enabled = deduplication_enabled
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if num_files is not None:
            self.num_files = num_files
        if num_directories is not None:
            self.num_directories = num_directories
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if share_status is not None:
            self.share_status = share_status
        if share_status_string is not None:
            self.share_status_string = share_status_string

    @property
    def id(self):
        """Gets the id of this TargetShares.  # noqa: E501

        Unique ID identifying the share in the target.  # noqa: E501

        :return: The id of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetShares.

        Unique ID identifying the share in the target.  # noqa: E501

        :param id: The id of this TargetShares.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TargetShares.  # noqa: E501

        Name of the share.  # noqa: E501

        :return: The name of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TargetShares.

        Name of the share.  # noqa: E501

        :param name: The name of this TargetShares.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TargetShares.  # noqa: E501

        Description of the share.  # noqa: E501

        :return: The description of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TargetShares.

        Description of the share.  # noqa: E501

        :param description: The description of this TargetShares.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def access_protocol(self):
        """Gets the access_protocol of this TargetShares.  # noqa: E501

        Enum representing the access protocol of the share.  # noqa: E501

        :return: The access_protocol of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this TargetShares.

        Enum representing the access protocol of the share.  # noqa: E501

        :param access_protocol: The access_protocol of this TargetShares.  # noqa: E501
        :type: int
        """

        self._access_protocol = access_protocol

    @property
    def access_protocol_string(self):
        """Gets the access_protocol_string of this TargetShares.  # noqa: E501

        String representing the access protocol of the share.  # noqa: E501

        :return: The access_protocol_string of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._access_protocol_string

    @access_protocol_string.setter
    def access_protocol_string(self, access_protocol_string):
        """Sets the access_protocol_string of this TargetShares.

        String representing the access protocol of the share.  # noqa: E501

        :param access_protocol_string: The access_protocol_string of this TargetShares.  # noqa: E501
        :type: str
        """

        self._access_protocol_string = access_protocol_string

    @property
    def share_version(self):
        """Gets the share_version of this TargetShares.  # noqa: E501

        Share replication version.  # noqa: E501

        :return: The share_version of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._share_version

    @share_version.setter
    def share_version(self, share_version):
        """Sets the share_version of this TargetShares.

        Share replication version.  # noqa: E501

        :param share_version: The share_version of this TargetShares.  # noqa: E501
        :type: int
        """

        self._share_version = share_version

    @property
    def rep_role(self):
        """Gets the rep_role of this TargetShares.  # noqa: E501

        Enum value corresponding to the replication role of the target share.  # noqa: E501

        :return: The rep_role of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._rep_role

    @rep_role.setter
    def rep_role(self, rep_role):
        """Sets the rep_role of this TargetShares.

        Enum value corresponding to the replication role of the target share.  # noqa: E501

        :param rep_role: The rep_role of this TargetShares.  # noqa: E501
        :type: int
        """

        self._rep_role = rep_role

    @property
    def rep_role_string(self):
        """Gets the rep_role_string of this TargetShares.  # noqa: E501

        String representation of the replication role of the target share.  # noqa: E501

        :return: The rep_role_string of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._rep_role_string

    @rep_role_string.setter
    def rep_role_string(self, rep_role_string):
        """Sets the rep_role_string of this TargetShares.

        String representation of the replication role of the target share.  # noqa: E501

        :param rep_role_string: The rep_role_string of this TargetShares.  # noqa: E501
        :type: str
        """

        self._rep_role_string = rep_role_string

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this TargetShares.  # noqa: E501

        True if encryption is enabled, false otherwise.  # noqa: E501

        :return: The encryption_enabled of this TargetShares.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this TargetShares.

        True if encryption is enabled, false otherwise.  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this TargetShares.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def deduplication_enabled(self):
        """Gets the deduplication_enabled of this TargetShares.  # noqa: E501

        True if the share has deduplication enabled. False otherwise.  # noqa: E501

        :return: The deduplication_enabled of this TargetShares.  # noqa: E501
        :rtype: bool
        """
        return self._deduplication_enabled

    @deduplication_enabled.setter
    def deduplication_enabled(self, deduplication_enabled):
        """Sets the deduplication_enabled of this TargetShares.

        True if the share has deduplication enabled. False otherwise.  # noqa: E501

        :param deduplication_enabled: The deduplication_enabled of this TargetShares.  # noqa: E501
        :type: bool
        """

        self._deduplication_enabled = deduplication_enabled

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this TargetShares.  # noqa: E501

        Size On Disk In Bytes  # noqa: E501

        :return: The disk_bytes of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this TargetShares.

        Size On Disk In Bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this TargetShares.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def user_bytes(self):
        """Gets the user_bytes of this TargetShares.  # noqa: E501

        User Data Stored In Bytes   # noqa: E501

        :return: The user_bytes of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this TargetShares.

        User Data Stored In Bytes   # noqa: E501

        :param user_bytes: The user_bytes of this TargetShares.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def num_files(self):
        """Gets the num_files of this TargetShares.  # noqa: E501

        The number of files.  # noqa: E501

        :return: The num_files of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """Sets the num_files of this TargetShares.

        The number of files.  # noqa: E501

        :param num_files: The num_files of this TargetShares.  # noqa: E501
        :type: int
        """

        self._num_files = num_files

    @property
    def num_directories(self):
        """Gets the num_directories of this TargetShares.  # noqa: E501

        The number of directories.  # noqa: E501

        :return: The num_directories of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._num_directories

    @num_directories.setter
    def num_directories(self, num_directories):
        """Sets the num_directories of this TargetShares.

        The number of directories.  # noqa: E501

        :param num_directories: The num_directories of this TargetShares.  # noqa: E501
        :type: int
        """

        self._num_directories = num_directories

    @property
    def health_level(self):
        """Gets the health_level of this TargetShares.  # noqa: E501

        Represents the health level of the share.  # noqa: E501

        :return: The health_level of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this TargetShares.

        Represents the health level of the share.  # noqa: E501

        :param health_level: The health_level of this TargetShares.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this TargetShares.  # noqa: E501

        A String representation of the share health.  # noqa: E501

        :return: The health_level_string of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this TargetShares.

        A String representation of the share health.  # noqa: E501

        :param health_level_string: The health_level_string of this TargetShares.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def share_status(self):
        """Gets the share_status of this TargetShares.  # noqa: E501

        Enum giving additional details on the current health level  # noqa: E501

        :return: The share_status of this TargetShares.  # noqa: E501
        :rtype: int
        """
        return self._share_status

    @share_status.setter
    def share_status(self, share_status):
        """Sets the share_status of this TargetShares.

        Enum giving additional details on the current health level  # noqa: E501

        :param share_status: The share_status of this TargetShares.  # noqa: E501
        :type: int
        """

        self._share_status = share_status

    @property
    def share_status_string(self):
        """Gets the share_status_string of this TargetShares.  # noqa: E501

        String value which may give additional detail pertaining to the current health state.  # noqa: E501

        :return: The share_status_string of this TargetShares.  # noqa: E501
        :rtype: str
        """
        return self._share_status_string

    @share_status_string.setter
    def share_status_string(self, share_status_string):
        """Sets the share_status_string of this TargetShares.

        String value which may give additional detail pertaining to the current health state.  # noqa: E501

        :param share_status_string: The share_status_string of this TargetShares.  # noqa: E501
        :type: str
        """

        self._share_status_string = share_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetShares, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetShares):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
