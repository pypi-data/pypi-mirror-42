# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class NfsHosts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'hostname': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'hostname': 'hostname',
        'description': 'description'
    }

    def __init__(self, id=None, hostname=None, description=None):  # noqa: E501
        """NfsHosts - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._hostname = None
        self._description = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hostname is not None:
            self.hostname = hostname
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this NfsHosts.  # noqa: E501

        Id of the host.  # noqa: E501

        :return: The id of this NfsHosts.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NfsHosts.

        Id of the host.  # noqa: E501

        :param id: The id of this NfsHosts.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hostname(self):
        """Gets the hostname of this NfsHosts.  # noqa: E501

        Name of the host.  # noqa: E501

        :return: The hostname of this NfsHosts.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NfsHosts.

        Name of the host.  # noqa: E501

        :param hostname: The hostname of this NfsHosts.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def description(self):
        """Gets the description of this NfsHosts.  # noqa: E501

        Description of the host.  # noqa: E501

        :return: The description of this NfsHosts.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NfsHosts.

        Description of the host.  # noqa: E501

        :param description: The description of this NfsHosts.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NfsHosts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NfsHosts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
