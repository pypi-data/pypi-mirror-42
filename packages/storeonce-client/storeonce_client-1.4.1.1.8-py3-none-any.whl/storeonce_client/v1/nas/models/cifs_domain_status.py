# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CifsDomainStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain_login_status': 'int',
        'domain_login_status_string': 'L10nStringStruct'
    }

    attribute_map = {
        'domain_login_status': 'domainLoginStatus',
        'domain_login_status_string': 'domainLoginStatusString'
    }

    def __init__(self, domain_login_status=None, domain_login_status_string=None):  # noqa: E501
        """CifsDomainStatus - a model defined in Swagger"""  # noqa: E501

        self._domain_login_status = None
        self._domain_login_status_string = None
        self.discriminator = None

        if domain_login_status is not None:
            self.domain_login_status = domain_login_status
        if domain_login_status_string is not None:
            self.domain_login_status_string = domain_login_status_string

    @property
    def domain_login_status(self):
        """Gets the domain_login_status of this CifsDomainStatus.  # noqa: E501

        Status of the current Login  # noqa: E501

        :return: The domain_login_status of this CifsDomainStatus.  # noqa: E501
        :rtype: int
        """
        return self._domain_login_status

    @domain_login_status.setter
    def domain_login_status(self, domain_login_status):
        """Sets the domain_login_status of this CifsDomainStatus.

        Status of the current Login  # noqa: E501

        :param domain_login_status: The domain_login_status of this CifsDomainStatus.  # noqa: E501
        :type: int
        """

        self._domain_login_status = domain_login_status

    @property
    def domain_login_status_string(self):
        """Gets the domain_login_status_string of this CifsDomainStatus.  # noqa: E501

        Localized representation of the domain login status  # noqa: E501

        :return: The domain_login_status_string of this CifsDomainStatus.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._domain_login_status_string

    @domain_login_status_string.setter
    def domain_login_status_string(self, domain_login_status_string):
        """Sets the domain_login_status_string of this CifsDomainStatus.

        Localized representation of the domain login status  # noqa: E501

        :param domain_login_status_string: The domain_login_status_string of this CifsDomainStatus.  # noqa: E501
        :type: L10nStringStruct
        """

        self._domain_login_status_string = domain_login_status_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CifsDomainStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CifsDomainStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
