# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ReplicationMappingModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'synchronisation_status': 'int',
        'synchronisation_status_string': 'L10nStringStruct',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'synchronisation_status': 'synchronisationStatus',
        'synchronisation_status_string': 'synchronisationStatusString',
        'url': 'url'
    }

    def __init__(self, id=None, synchronisation_status=None, synchronisation_status_string=None, url=None):  # noqa: E501
        """ReplicationMappingModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._synchronisation_status = None
        self._synchronisation_status_string = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if synchronisation_status is not None:
            self.synchronisation_status = synchronisation_status
        if synchronisation_status_string is not None:
            self.synchronisation_status_string = synchronisation_status_string
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this ReplicationMappingModel.  # noqa: E501

        Unique ID of replication mapping  # noqa: E501

        :return: The id of this ReplicationMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationMappingModel.

        Unique ID of replication mapping  # noqa: E501

        :param id: The id of this ReplicationMappingModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def synchronisation_status(self):
        """Gets the synchronisation_status of this ReplicationMappingModel.  # noqa: E501

        Synchronisation status of the NAS Share  # noqa: E501

        :return: The synchronisation_status of this ReplicationMappingModel.  # noqa: E501
        :rtype: int
        """
        return self._synchronisation_status

    @synchronisation_status.setter
    def synchronisation_status(self, synchronisation_status):
        """Sets the synchronisation_status of this ReplicationMappingModel.

        Synchronisation status of the NAS Share  # noqa: E501

        :param synchronisation_status: The synchronisation_status of this ReplicationMappingModel.  # noqa: E501
        :type: int
        """

        self._synchronisation_status = synchronisation_status

    @property
    def synchronisation_status_string(self):
        """Gets the synchronisation_status_string of this ReplicationMappingModel.  # noqa: E501

        Localized representation of Synchronization Status  # noqa: E501

        :return: The synchronisation_status_string of this ReplicationMappingModel.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._synchronisation_status_string

    @synchronisation_status_string.setter
    def synchronisation_status_string(self, synchronisation_status_string):
        """Sets the synchronisation_status_string of this ReplicationMappingModel.

        Localized representation of Synchronization Status  # noqa: E501

        :param synchronisation_status_string: The synchronisation_status_string of this ReplicationMappingModel.  # noqa: E501
        :type: L10nStringStruct
        """

        self._synchronisation_status_string = synchronisation_status_string

    @property
    def url(self):
        """Gets the url of this ReplicationMappingModel.  # noqa: E501

        URL for further details of replication mapping  # noqa: E501

        :return: The url of this ReplicationMappingModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ReplicationMappingModel.

        URL for further details of replication mapping  # noqa: E501

        :param url: The url of this ReplicationMappingModel.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationMappingModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationMappingModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
