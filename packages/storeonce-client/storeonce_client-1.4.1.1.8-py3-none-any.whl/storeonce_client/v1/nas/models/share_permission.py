# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SharePermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'share_id': 'int',
        'name': 'str',
        'user_id': 'int',
        'host_id': 'int',
        'authentication_mode_string': 'L10nStringStruct',
        'read_only_permission': 'bool',
        'read_write_permission': 'bool',
        'root_squash_enabled': 'bool',
        'nfs_secure_enabled': 'bool',
        'wdelay_enabled': 'bool',
        'readdirplus_enabled': 'bool',
        'authentication_mode': 'int'
    }

    attribute_map = {
        'id': 'id',
        'share_id': 'shareId',
        'name': 'name',
        'user_id': 'userId',
        'host_id': 'hostId',
        'authentication_mode_string': 'authenticationModeString',
        'read_only_permission': 'readOnlyPermission',
        'read_write_permission': 'readWritePermission',
        'root_squash_enabled': 'rootSquashEnabled',
        'nfs_secure_enabled': 'nfsSecureEnabled',
        'wdelay_enabled': 'wdelayEnabled',
        'readdirplus_enabled': 'readdirplusEnabled',
        'authentication_mode': 'authenticationMode'
    }

    def __init__(self, id=None, share_id=None, name=None, user_id=None, host_id=None, authentication_mode_string=None, read_only_permission=False, read_write_permission=False, root_squash_enabled=False, nfs_secure_enabled=False, wdelay_enabled=False, readdirplus_enabled=False, authentication_mode=None):  # noqa: E501
        """SharePermission - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._share_id = None
        self._name = None
        self._user_id = None
        self._host_id = None
        self._authentication_mode_string = None
        self._read_only_permission = None
        self._read_write_permission = None
        self._root_squash_enabled = None
        self._nfs_secure_enabled = None
        self._wdelay_enabled = None
        self._readdirplus_enabled = None
        self._authentication_mode = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if share_id is not None:
            self.share_id = share_id
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if host_id is not None:
            self.host_id = host_id
        if authentication_mode_string is not None:
            self.authentication_mode_string = authentication_mode_string
        if read_only_permission is not None:
            self.read_only_permission = read_only_permission
        if read_write_permission is not None:
            self.read_write_permission = read_write_permission
        if root_squash_enabled is not None:
            self.root_squash_enabled = root_squash_enabled
        if nfs_secure_enabled is not None:
            self.nfs_secure_enabled = nfs_secure_enabled
        if wdelay_enabled is not None:
            self.wdelay_enabled = wdelay_enabled
        if readdirplus_enabled is not None:
            self.readdirplus_enabled = readdirplus_enabled
        if authentication_mode is not None:
            self.authentication_mode = authentication_mode

    @property
    def id(self):
        """Gets the id of this SharePermission.  # noqa: E501

        Unique ID of the permission  # noqa: E501

        :return: The id of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharePermission.

        Unique ID of the permission  # noqa: E501

        :param id: The id of this SharePermission.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def share_id(self):
        """Gets the share_id of this SharePermission.  # noqa: E501

        ID of the share these permissions are for  # noqa: E501

        :return: The share_id of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this SharePermission.

        ID of the share these permissions are for  # noqa: E501

        :param share_id: The share_id of this SharePermission.  # noqa: E501
        :type: int
        """

        self._share_id = share_id

    @property
    def name(self):
        """Gets the name of this SharePermission.  # noqa: E501

        CIFS username or NFS hostname that the permission belongs to  # noqa: E501

        :return: The name of this SharePermission.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharePermission.

        CIFS username or NFS hostname that the permission belongs to  # noqa: E501

        :param name: The name of this SharePermission.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this SharePermission.  # noqa: E501

        If authentication mode is User, the CIFS user ID  # noqa: E501

        :return: The user_id of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SharePermission.

        If authentication mode is User, the CIFS user ID  # noqa: E501

        :param user_id: The user_id of this SharePermission.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def host_id(self):
        """Gets the host_id of this SharePermission.  # noqa: E501

        If authentication mode is Host, the NFS host ID  # noqa: E501

        :return: The host_id of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this SharePermission.

        If authentication mode is Host, the NFS host ID  # noqa: E501

        :param host_id: The host_id of this SharePermission.  # noqa: E501
        :type: int
        """

        self._host_id = host_id

    @property
    def authentication_mode_string(self):
        """Gets the authentication_mode_string of this SharePermission.  # noqa: E501

        Localized representation of the authentication mode  # noqa: E501

        :return: The authentication_mode_string of this SharePermission.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._authentication_mode_string

    @authentication_mode_string.setter
    def authentication_mode_string(self, authentication_mode_string):
        """Sets the authentication_mode_string of this SharePermission.

        Localized representation of the authentication mode  # noqa: E501

        :param authentication_mode_string: The authentication_mode_string of this SharePermission.  # noqa: E501
        :type: L10nStringStruct
        """

        self._authentication_mode_string = authentication_mode_string

    @property
    def read_only_permission(self):
        """Gets the read_only_permission of this SharePermission.  # noqa: E501

        If the authentication mode is Host. True if the user has read permission on the share  # noqa: E501

        :return: The read_only_permission of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._read_only_permission

    @read_only_permission.setter
    def read_only_permission(self, read_only_permission):
        """Sets the read_only_permission of this SharePermission.

        If the authentication mode is Host. True if the user has read permission on the share  # noqa: E501

        :param read_only_permission: The read_only_permission of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._read_only_permission = read_only_permission

    @property
    def read_write_permission(self):
        """Gets the read_write_permission of this SharePermission.  # noqa: E501

        True if the user has read/write permission on the share.  # noqa: E501

        :return: The read_write_permission of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._read_write_permission

    @read_write_permission.setter
    def read_write_permission(self, read_write_permission):
        """Sets the read_write_permission of this SharePermission.

        True if the user has read/write permission on the share.  # noqa: E501

        :param read_write_permission: The read_write_permission of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._read_write_permission = read_write_permission

    @property
    def root_squash_enabled(self):
        """Gets the root_squash_enabled of this SharePermission.  # noqa: E501

        If the authentication mode is Host. True if the NFS root_squash property is enabled for the specified user  # noqa: E501

        :return: The root_squash_enabled of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._root_squash_enabled

    @root_squash_enabled.setter
    def root_squash_enabled(self, root_squash_enabled):
        """Sets the root_squash_enabled of this SharePermission.

        If the authentication mode is Host. True if the NFS root_squash property is enabled for the specified user  # noqa: E501

        :param root_squash_enabled: The root_squash_enabled of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._root_squash_enabled = root_squash_enabled

    @property
    def nfs_secure_enabled(self):
        """Gets the nfs_secure_enabled of this SharePermission.  # noqa: E501

        If the authentication mode is Host. False if the NFS insecure property is set for the specified user  # noqa: E501

        :return: The nfs_secure_enabled of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._nfs_secure_enabled

    @nfs_secure_enabled.setter
    def nfs_secure_enabled(self, nfs_secure_enabled):
        """Sets the nfs_secure_enabled of this SharePermission.

        If the authentication mode is Host. False if the NFS insecure property is set for the specified user  # noqa: E501

        :param nfs_secure_enabled: The nfs_secure_enabled of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._nfs_secure_enabled = nfs_secure_enabled

    @property
    def wdelay_enabled(self):
        """Gets the wdelay_enabled of this SharePermission.  # noqa: E501

        If the authentication mode is Host. False if the NFS no_wdelay property is set for the specified user  # noqa: E501

        :return: The wdelay_enabled of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._wdelay_enabled

    @wdelay_enabled.setter
    def wdelay_enabled(self, wdelay_enabled):
        """Sets the wdelay_enabled of this SharePermission.

        If the authentication mode is Host. False if the NFS no_wdelay property is set for the specified user  # noqa: E501

        :param wdelay_enabled: The wdelay_enabled of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._wdelay_enabled = wdelay_enabled

    @property
    def readdirplus_enabled(self):
        """Gets the readdirplus_enabled of this SharePermission.  # noqa: E501

        If the authentication mode is Host. False if the NFS nordirplus property is set for the specified user  # noqa: E501

        :return: The readdirplus_enabled of this SharePermission.  # noqa: E501
        :rtype: bool
        """
        return self._readdirplus_enabled

    @readdirplus_enabled.setter
    def readdirplus_enabled(self, readdirplus_enabled):
        """Sets the readdirplus_enabled of this SharePermission.

        If the authentication mode is Host. False if the NFS nordirplus property is set for the specified user  # noqa: E501

        :param readdirplus_enabled: The readdirplus_enabled of this SharePermission.  # noqa: E501
        :type: bool
        """

        self._readdirplus_enabled = readdirplus_enabled

    @property
    def authentication_mode(self):
        """Gets the authentication_mode of this SharePermission.  # noqa: E501

        Enumertaion of authentication mode used for the share  # noqa: E501

        :return: The authentication_mode of this SharePermission.  # noqa: E501
        :rtype: int
        """
        return self._authentication_mode

    @authentication_mode.setter
    def authentication_mode(self, authentication_mode):
        """Sets the authentication_mode of this SharePermission.

        Enumertaion of authentication mode used for the share  # noqa: E501

        :param authentication_mode: The authentication_mode of this SharePermission.  # noqa: E501
        :type: int
        """

        self._authentication_mode = authentication_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharePermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharePermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
