# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    NAS

    unused  # noqa: E501

    Component version: 3.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ShareParametricsThroughputSample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'int',
        'transmitted_throughput': 'int',
        'received_throughput': 'int',
        'num_open_file_descriptors': 'int',
        'num_dedupe_sessions': 'int',
        'num_open_file_descriptors_peak': 'int',
        'num_dedupe_sessions_peak': 'int',
        'timestamp': 'str'
    }

    attribute_map = {
        'period': 'period',
        'transmitted_throughput': 'transmittedThroughput',
        'received_throughput': 'receivedThroughput',
        'num_open_file_descriptors': 'numOpenFileDescriptors',
        'num_dedupe_sessions': 'numDedupeSessions',
        'num_open_file_descriptors_peak': 'numOpenFileDescriptorsPeak',
        'num_dedupe_sessions_peak': 'numDedupeSessionsPeak',
        'timestamp': 'timestamp'
    }

    def __init__(self, period=None, transmitted_throughput=None, received_throughput=None, num_open_file_descriptors=None, num_dedupe_sessions=None, num_open_file_descriptors_peak=None, num_dedupe_sessions_peak=None, timestamp=None):  # noqa: E501
        """ShareParametricsThroughputSample - a model defined in Swagger"""  # noqa: E501

        self._period = None
        self._transmitted_throughput = None
        self._received_throughput = None
        self._num_open_file_descriptors = None
        self._num_dedupe_sessions = None
        self._num_open_file_descriptors_peak = None
        self._num_dedupe_sessions_peak = None
        self._timestamp = None
        self.discriminator = None

        if period is not None:
            self.period = period
        if transmitted_throughput is not None:
            self.transmitted_throughput = transmitted_throughput
        if received_throughput is not None:
            self.received_throughput = received_throughput
        if num_open_file_descriptors is not None:
            self.num_open_file_descriptors = num_open_file_descriptors
        if num_dedupe_sessions is not None:
            self.num_dedupe_sessions = num_dedupe_sessions
        if num_open_file_descriptors_peak is not None:
            self.num_open_file_descriptors_peak = num_open_file_descriptors_peak
        if num_dedupe_sessions_peak is not None:
            self.num_dedupe_sessions_peak = num_dedupe_sessions_peak
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def period(self):
        """Gets the period of this ShareParametricsThroughputSample.  # noqa: E501

        Period this sample represents, in seconds  # noqa: E501

        :return: The period of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this ShareParametricsThroughputSample.

        Period this sample represents, in seconds  # noqa: E501

        :param period: The period of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def transmitted_throughput(self):
        """Gets the transmitted_throughput of this ShareParametricsThroughputSample.  # noqa: E501

        Average share read throughput in Bytes per second  # noqa: E501

        :return: The transmitted_throughput of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._transmitted_throughput

    @transmitted_throughput.setter
    def transmitted_throughput(self, transmitted_throughput):
        """Sets the transmitted_throughput of this ShareParametricsThroughputSample.

        Average share read throughput in Bytes per second  # noqa: E501

        :param transmitted_throughput: The transmitted_throughput of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._transmitted_throughput = transmitted_throughput

    @property
    def received_throughput(self):
        """Gets the received_throughput of this ShareParametricsThroughputSample.  # noqa: E501

        Average share write throughput in Bytes per second  # noqa: E501

        :return: The received_throughput of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._received_throughput

    @received_throughput.setter
    def received_throughput(self, received_throughput):
        """Sets the received_throughput of this ShareParametricsThroughputSample.

        Average share write throughput in Bytes per second  # noqa: E501

        :param received_throughput: The received_throughput of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._received_throughput = received_throughput

    @property
    def num_open_file_descriptors(self):
        """Gets the num_open_file_descriptors of this ShareParametricsThroughputSample.  # noqa: E501

        Number of open file descriptors, sampled every 5 seconds and averaged across the timestamp  # noqa: E501

        :return: The num_open_file_descriptors of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._num_open_file_descriptors

    @num_open_file_descriptors.setter
    def num_open_file_descriptors(self, num_open_file_descriptors):
        """Sets the num_open_file_descriptors of this ShareParametricsThroughputSample.

        Number of open file descriptors, sampled every 5 seconds and averaged across the timestamp  # noqa: E501

        :param num_open_file_descriptors: The num_open_file_descriptors of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._num_open_file_descriptors = num_open_file_descriptors

    @property
    def num_dedupe_sessions(self):
        """Gets the num_dedupe_sessions of this ShareParametricsThroughputSample.  # noqa: E501

        The number of dedupe sessions currently running  # noqa: E501

        :return: The num_dedupe_sessions of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._num_dedupe_sessions

    @num_dedupe_sessions.setter
    def num_dedupe_sessions(self, num_dedupe_sessions):
        """Sets the num_dedupe_sessions of this ShareParametricsThroughputSample.

        The number of dedupe sessions currently running  # noqa: E501

        :param num_dedupe_sessions: The num_dedupe_sessions of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._num_dedupe_sessions = num_dedupe_sessions

    @property
    def num_open_file_descriptors_peak(self):
        """Gets the num_open_file_descriptors_peak of this ShareParametricsThroughputSample.  # noqa: E501

        The number of peak open file descriptors  # noqa: E501

        :return: The num_open_file_descriptors_peak of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._num_open_file_descriptors_peak

    @num_open_file_descriptors_peak.setter
    def num_open_file_descriptors_peak(self, num_open_file_descriptors_peak):
        """Sets the num_open_file_descriptors_peak of this ShareParametricsThroughputSample.

        The number of peak open file descriptors  # noqa: E501

        :param num_open_file_descriptors_peak: The num_open_file_descriptors_peak of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._num_open_file_descriptors_peak = num_open_file_descriptors_peak

    @property
    def num_dedupe_sessions_peak(self):
        """Gets the num_dedupe_sessions_peak of this ShareParametricsThroughputSample.  # noqa: E501

        The number of peak open dedupe sessions  # noqa: E501

        :return: The num_dedupe_sessions_peak of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: int
        """
        return self._num_dedupe_sessions_peak

    @num_dedupe_sessions_peak.setter
    def num_dedupe_sessions_peak(self, num_dedupe_sessions_peak):
        """Sets the num_dedupe_sessions_peak of this ShareParametricsThroughputSample.

        The number of peak open dedupe sessions  # noqa: E501

        :param num_dedupe_sessions_peak: The num_dedupe_sessions_peak of this ShareParametricsThroughputSample.  # noqa: E501
        :type: int
        """

        self._num_dedupe_sessions_peak = num_dedupe_sessions_peak

    @property
    def timestamp(self):
        """Gets the timestamp of this ShareParametricsThroughputSample.  # noqa: E501

        Timestamp for the metric sample  # noqa: E501

        :return: The timestamp of this ShareParametricsThroughputSample.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ShareParametricsThroughputSample.

        Timestamp for the metric sample  # noqa: E501

        :param timestamp: The timestamp of this ShareParametricsThroughputSample.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareParametricsThroughputSample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareParametricsThroughputSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
