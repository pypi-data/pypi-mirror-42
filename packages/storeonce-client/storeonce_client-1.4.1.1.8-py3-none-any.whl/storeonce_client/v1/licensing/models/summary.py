# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Summary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode_name': 'str',
        'mode_string': 'str',
        'mode': 'int',
        'capacity_bytes': 'int',
        'capacity_bytes_fs': 'int',
        'license_defined_capacity': 'str',
        'storage_demo_license_status': 'int',
        'demo_status': 'str',
        'licensing_status_enum': 'str',
        'licensing_status': 'int',
        'status_summary': 'str',
        'license_lock_id': 'str',
        'server_status': 'str',
        'in_grace_period': 'bool',
        'days_till_lock': 'int'
    }

    attribute_map = {
        'mode_name': 'modeName',
        'mode_string': 'modeString',
        'mode': 'mode',
        'capacity_bytes': 'capacityBytes',
        'capacity_bytes_fs': 'capacityBytesFS',
        'license_defined_capacity': 'licenseDefinedCapacity',
        'storage_demo_license_status': 'storageDemoLicenseStatus',
        'demo_status': 'demoStatus',
        'licensing_status_enum': 'licensingStatusEnum',
        'licensing_status': 'licensingStatus',
        'status_summary': 'statusSummary',
        'license_lock_id': 'licenseLockId',
        'server_status': 'serverStatus',
        'in_grace_period': 'inGracePeriod',
        'days_till_lock': 'daysTillLock'
    }

    def __init__(self, mode_name=None, mode_string=None, mode=None, capacity_bytes=None, capacity_bytes_fs=None, license_defined_capacity=None, storage_demo_license_status=None, demo_status=None, licensing_status_enum=None, licensing_status=None, status_summary=None, license_lock_id=None, server_status=None, in_grace_period=False, days_till_lock=None):  # noqa: E501
        """Summary - a model defined in Swagger"""  # noqa: E501

        self._mode_name = None
        self._mode_string = None
        self._mode = None
        self._capacity_bytes = None
        self._capacity_bytes_fs = None
        self._license_defined_capacity = None
        self._storage_demo_license_status = None
        self._demo_status = None
        self._licensing_status_enum = None
        self._licensing_status = None
        self._status_summary = None
        self._license_lock_id = None
        self._server_status = None
        self._in_grace_period = None
        self._days_till_lock = None
        self.discriminator = None

        self.mode_name = mode_name
        self.mode_string = mode_string
        self.mode = mode
        self.capacity_bytes = capacity_bytes
        self.capacity_bytes_fs = capacity_bytes_fs
        self.license_defined_capacity = license_defined_capacity
        if storage_demo_license_status is not None:
            self.storage_demo_license_status = storage_demo_license_status
        self.demo_status = demo_status
        self.licensing_status_enum = licensing_status_enum
        self.licensing_status = licensing_status
        self.status_summary = status_summary
        self.license_lock_id = license_lock_id
        self.server_status = server_status
        self.in_grace_period = in_grace_period
        if days_till_lock is not None:
            self.days_till_lock = days_till_lock

    @property
    def mode_name(self):
        """Gets the mode_name of this Summary.  # noqa: E501

        System mode enum name  # noqa: E501

        :return: The mode_name of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._mode_name

    @mode_name.setter
    def mode_name(self, mode_name):
        """Sets the mode_name of this Summary.

        System mode enum name  # noqa: E501

        :param mode_name: The mode_name of this Summary.  # noqa: E501
        :type: str
        """
        if mode_name is None:
            raise ValueError("Invalid value for `mode_name`, must not be `None`")  # noqa: E501

        self._mode_name = mode_name

    @property
    def mode_string(self):
        """Gets the mode_string of this Summary.  # noqa: E501

        System mode description  # noqa: E501

        :return: The mode_string of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._mode_string

    @mode_string.setter
    def mode_string(self, mode_string):
        """Sets the mode_string of this Summary.

        System mode description  # noqa: E501

        :param mode_string: The mode_string of this Summary.  # noqa: E501
        :type: str
        """
        if mode_string is None:
            raise ValueError("Invalid value for `mode_string`, must not be `None`")  # noqa: E501

        self._mode_string = mode_string

    @property
    def mode(self):
        """Gets the mode of this Summary.  # noqa: E501

        System mode enum value  # noqa: E501

        :return: The mode of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Summary.

        System mode enum value  # noqa: E501

        :param mode: The mode of this Summary.  # noqa: E501
        :type: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this Summary.  # noqa: E501

        Licensed raw capacity in bytes  # noqa: E501

        :return: The capacity_bytes of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this Summary.

        Licensed raw capacity in bytes  # noqa: E501

        :param capacity_bytes: The capacity_bytes of this Summary.  # noqa: E501
        :type: int
        """
        if capacity_bytes is None:
            raise ValueError("Invalid value for `capacity_bytes`, must not be `None`")  # noqa: E501

        self._capacity_bytes = capacity_bytes

    @property
    def capacity_bytes_fs(self):
        """Gets the capacity_bytes_fs of this Summary.  # noqa: E501

        Max FS available in bytes  # noqa: E501

        :return: The capacity_bytes_fs of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes_fs

    @capacity_bytes_fs.setter
    def capacity_bytes_fs(self, capacity_bytes_fs):
        """Sets the capacity_bytes_fs of this Summary.

        Max FS available in bytes  # noqa: E501

        :param capacity_bytes_fs: The capacity_bytes_fs of this Summary.  # noqa: E501
        :type: int
        """
        if capacity_bytes_fs is None:
            raise ValueError("Invalid value for `capacity_bytes_fs`, must not be `None`")  # noqa: E501

        self._capacity_bytes_fs = capacity_bytes_fs

    @property
    def license_defined_capacity(self):
        """Gets the license_defined_capacity of this Summary.  # noqa: E501

        Capacity display.  # noqa: E501

        :return: The license_defined_capacity of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._license_defined_capacity

    @license_defined_capacity.setter
    def license_defined_capacity(self, license_defined_capacity):
        """Sets the license_defined_capacity of this Summary.

        Capacity display.  # noqa: E501

        :param license_defined_capacity: The license_defined_capacity of this Summary.  # noqa: E501
        :type: str
        """
        if license_defined_capacity is None:
            raise ValueError("Invalid value for `license_defined_capacity`, must not be `None`")  # noqa: E501

        self._license_defined_capacity = license_defined_capacity

    @property
    def storage_demo_license_status(self):
        """Gets the storage_demo_license_status of this Summary.  # noqa: E501

        Demo license status. -1 : not yet activated, 0 : expired, > 0 : Active; number of days remaining or null if on physical products  # noqa: E501

        :return: The storage_demo_license_status of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._storage_demo_license_status

    @storage_demo_license_status.setter
    def storage_demo_license_status(self, storage_demo_license_status):
        """Sets the storage_demo_license_status of this Summary.

        Demo license status. -1 : not yet activated, 0 : expired, > 0 : Active; number of days remaining or null if on physical products  # noqa: E501

        :param storage_demo_license_status: The storage_demo_license_status of this Summary.  # noqa: E501
        :type: int
        """

        self._storage_demo_license_status = storage_demo_license_status

    @property
    def demo_status(self):
        """Gets the demo_status of this Summary.  # noqa: E501

        Demo license status; not yet activated, expired, or Active with number of days remaining.  # noqa: E501

        :return: The demo_status of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._demo_status

    @demo_status.setter
    def demo_status(self, demo_status):
        """Sets the demo_status of this Summary.

        Demo license status; not yet activated, expired, or Active with number of days remaining.  # noqa: E501

        :param demo_status: The demo_status of this Summary.  # noqa: E501
        :type: str
        """
        if demo_status is None:
            raise ValueError("Invalid value for `demo_status`, must not be `None`")  # noqa: E501

        self._demo_status = demo_status

    @property
    def licensing_status_enum(self):
        """Gets the licensing_status_enum of this Summary.  # noqa: E501

        Top level summary of licensing component status.  # noqa: E501

        :return: The licensing_status_enum of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._licensing_status_enum

    @licensing_status_enum.setter
    def licensing_status_enum(self, licensing_status_enum):
        """Sets the licensing_status_enum of this Summary.

        Top level summary of licensing component status.  # noqa: E501

        :param licensing_status_enum: The licensing_status_enum of this Summary.  # noqa: E501
        :type: str
        """
        if licensing_status_enum is None:
            raise ValueError("Invalid value for `licensing_status_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["GOOD", "ATTENTION", "LOCKED", "FAULT", "WARNING"]  # noqa: E501
        if licensing_status_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `licensing_status_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(licensing_status_enum, allowed_values)
            )

        self._licensing_status_enum = licensing_status_enum

    @property
    def licensing_status(self):
        """Gets the licensing_status of this Summary.  # noqa: E501

        Top level summary of licensing component status.  # noqa: E501

        :return: The licensing_status of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._licensing_status

    @licensing_status.setter
    def licensing_status(self, licensing_status):
        """Sets the licensing_status of this Summary.

        Top level summary of licensing component status.  # noqa: E501

        :param licensing_status: The licensing_status of this Summary.  # noqa: E501
        :type: int
        """
        if licensing_status is None:
            raise ValueError("Invalid value for `licensing_status`, must not be `None`")  # noqa: E501

        self._licensing_status = licensing_status

    @property
    def status_summary(self):
        """Gets the status_summary of this Summary.  # noqa: E501

        Localised string for top level summary of licensing component status.  # noqa: E501

        :return: The status_summary of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._status_summary

    @status_summary.setter
    def status_summary(self, status_summary):
        """Sets the status_summary of this Summary.

        Localised string for top level summary of licensing component status.  # noqa: E501

        :param status_summary: The status_summary of this Summary.  # noqa: E501
        :type: str
        """
        if status_summary is None:
            raise ValueError("Invalid value for `status_summary`, must not be `None`")  # noqa: E501

        self._status_summary = status_summary

    @property
    def license_lock_id(self):
        """Gets the license_lock_id of this Summary.  # noqa: E501

        The locking Id used by the license module to verify licenses.  # noqa: E501

        :return: The license_lock_id of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._license_lock_id

    @license_lock_id.setter
    def license_lock_id(self, license_lock_id):
        """Sets the license_lock_id of this Summary.

        The locking Id used by the license module to verify licenses.  # noqa: E501

        :param license_lock_id: The license_lock_id of this Summary.  # noqa: E501
        :type: str
        """
        if license_lock_id is None:
            raise ValueError("Invalid value for `license_lock_id`, must not be `None`")  # noqa: E501

        self._license_lock_id = license_lock_id

    @property
    def server_status(self):
        """Gets the server_status of this Summary.  # noqa: E501

        The server status string or null if not in enterprise mode  # noqa: E501

        :return: The server_status of this Summary.  # noqa: E501
        :rtype: str
        """
        return self._server_status

    @server_status.setter
    def server_status(self, server_status):
        """Sets the server_status of this Summary.

        The server status string or null if not in enterprise mode  # noqa: E501

        :param server_status: The server_status of this Summary.  # noqa: E501
        :type: str
        """
        if server_status is None:
            raise ValueError("Invalid value for `server_status`, must not be `None`")  # noqa: E501

        self._server_status = server_status

    @property
    def in_grace_period(self):
        """Gets the in_grace_period of this Summary.  # noqa: E501

        If true system is unlicensed and in grace period.  # noqa: E501

        :return: The in_grace_period of this Summary.  # noqa: E501
        :rtype: bool
        """
        return self._in_grace_period

    @in_grace_period.setter
    def in_grace_period(self, in_grace_period):
        """Sets the in_grace_period of this Summary.

        If true system is unlicensed and in grace period.  # noqa: E501

        :param in_grace_period: The in_grace_period of this Summary.  # noqa: E501
        :type: bool
        """
        if in_grace_period is None:
            raise ValueError("Invalid value for `in_grace_period`, must not be `None`")  # noqa: E501

        self._in_grace_period = in_grace_period

    @property
    def days_till_lock(self):
        """Gets the days_till_lock of this Summary.  # noqa: E501

        If unlicnesed, the remaining days before system locks.  # noqa: E501

        :return: The days_till_lock of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._days_till_lock

    @days_till_lock.setter
    def days_till_lock(self, days_till_lock):
        """Sets the days_till_lock of this Summary.

        If unlicnesed, the remaining days before system locks.  # noqa: E501

        :param days_till_lock: The days_till_lock of this Summary.  # noqa: E501
        :type: int
        """

        self._days_till_lock = days_till_lock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Summary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
