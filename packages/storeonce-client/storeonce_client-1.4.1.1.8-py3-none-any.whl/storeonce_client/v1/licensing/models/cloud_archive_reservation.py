# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CloudArchiveReservation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw_license': 'str',
        'license_uid': 'str',
        'valid_until': 'int',
        'valid_until_date': 'datetime',
        'bytes': 'int',
        'uid': 'int',
        'ssid': 'int',
        'store': 'int'
    }

    attribute_map = {
        'raw_license': 'rawLicense',
        'license_uid': 'licenseUID',
        'valid_until': 'validUntil',
        'valid_until_date': 'validUntilDate',
        'bytes': 'bytes',
        'uid': 'uid',
        'ssid': 'ssid',
        'store': 'store'
    }

    def __init__(self, raw_license=None, license_uid=None, valid_until=None, valid_until_date=None, bytes=None, uid=None, ssid=None, store=None):  # noqa: E501
        """CloudArchiveReservation - a model defined in Swagger"""  # noqa: E501

        self._raw_license = None
        self._license_uid = None
        self._valid_until = None
        self._valid_until_date = None
        self._bytes = None
        self._uid = None
        self._ssid = None
        self._store = None
        self.discriminator = None

        self.raw_license = raw_license
        self.license_uid = license_uid
        self.valid_until = valid_until
        self.valid_until_date = valid_until_date
        self.bytes = bytes
        self.uid = uid
        self.ssid = ssid
        self.store = store

    @property
    def raw_license(self):
        """Gets the raw_license of this CloudArchiveReservation.  # noqa: E501

        Raw license key  # noqa: E501

        :return: The raw_license of this CloudArchiveReservation.  # noqa: E501
        :rtype: str
        """
        return self._raw_license

    @raw_license.setter
    def raw_license(self, raw_license):
        """Sets the raw_license of this CloudArchiveReservation.

        Raw license key  # noqa: E501

        :param raw_license: The raw_license of this CloudArchiveReservation.  # noqa: E501
        :type: str
        """
        if raw_license is None:
            raise ValueError("Invalid value for `raw_license`, must not be `None`")  # noqa: E501

        self._raw_license = raw_license

    @property
    def license_uid(self):
        """Gets the license_uid of this CloudArchiveReservation.  # noqa: E501

        License UID is reserved  # noqa: E501

        :return: The license_uid of this CloudArchiveReservation.  # noqa: E501
        :rtype: str
        """
        return self._license_uid

    @license_uid.setter
    def license_uid(self, license_uid):
        """Sets the license_uid of this CloudArchiveReservation.

        License UID is reserved  # noqa: E501

        :param license_uid: The license_uid of this CloudArchiveReservation.  # noqa: E501
        :type: str
        """
        if license_uid is None:
            raise ValueError("Invalid value for `license_uid`, must not be `None`")  # noqa: E501

        self._license_uid = license_uid

    @property
    def valid_until(self):
        """Gets the valid_until of this CloudArchiveReservation.  # noqa: E501

        Licenseexpiry date or 0 if permenent  # noqa: E501

        :return: The valid_until of this CloudArchiveReservation.  # noqa: E501
        :rtype: int
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this CloudArchiveReservation.

        Licenseexpiry date or 0 if permenent  # noqa: E501

        :param valid_until: The valid_until of this CloudArchiveReservation.  # noqa: E501
        :type: int
        """
        if valid_until is None:
            raise ValueError("Invalid value for `valid_until`, must not be `None`")  # noqa: E501

        self._valid_until = valid_until

    @property
    def valid_until_date(self):
        """Gets the valid_until_date of this CloudArchiveReservation.  # noqa: E501

        ISO formatted expiry date  # noqa: E501

        :return: The valid_until_date of this CloudArchiveReservation.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until_date

    @valid_until_date.setter
    def valid_until_date(self, valid_until_date):
        """Sets the valid_until_date of this CloudArchiveReservation.

        ISO formatted expiry date  # noqa: E501

        :param valid_until_date: The valid_until_date of this CloudArchiveReservation.  # noqa: E501
        :type: datetime
        """
        if valid_until_date is None:
            raise ValueError("Invalid value for `valid_until_date`, must not be `None`")  # noqa: E501

        self._valid_until_date = valid_until_date

    @property
    def bytes(self):
        """Gets the bytes of this CloudArchiveReservation.  # noqa: E501

        Reserved/Consumed bytes  # noqa: E501

        :return: The bytes of this CloudArchiveReservation.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this CloudArchiveReservation.

        Reserved/Consumed bytes  # noqa: E501

        :param bytes: The bytes of this CloudArchiveReservation.  # noqa: E501
        :type: int
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501

        self._bytes = bytes

    @property
    def uid(self):
        """Gets the uid of this CloudArchiveReservation.  # noqa: E501

        Request Unique id  # noqa: E501

        :return: The uid of this CloudArchiveReservation.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CloudArchiveReservation.

        Request Unique id  # noqa: E501

        :param uid: The uid of this CloudArchiveReservation.  # noqa: E501
        :type: int
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def ssid(self):
        """Gets the ssid of this CloudArchiveReservation.  # noqa: E501

        SSID or originating store  # noqa: E501

        :return: The ssid of this CloudArchiveReservation.  # noqa: E501
        :rtype: int
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this CloudArchiveReservation.

        SSID or originating store  # noqa: E501

        :param ssid: The ssid of this CloudArchiveReservation.  # noqa: E501
        :type: int
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")  # noqa: E501

        self._ssid = ssid

    @property
    def store(self):
        """Gets the store of this CloudArchiveReservation.  # noqa: E501

        ID or originating store  # noqa: E501

        :return: The store of this CloudArchiveReservation.  # noqa: E501
        :rtype: int
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this CloudArchiveReservation.

        ID or originating store  # noqa: E501

        :param store: The store of this CloudArchiveReservation.  # noqa: E501
        :type: int
        """
        if store is None:
            raise ValueError("Invalid value for `store`, must not be `None`")  # noqa: E501

        self._store = store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudArchiveReservation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudArchiveReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
