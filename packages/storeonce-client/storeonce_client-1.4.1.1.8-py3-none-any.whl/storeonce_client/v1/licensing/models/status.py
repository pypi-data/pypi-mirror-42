# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'license_category_enum': 'str',
        'license_category_string': 'str',
        'license_category': 'int',
        'feature_type_enum': 'str',
        'feature_type_string': 'str',
        'feature_type': 'int',
        'category_type_enum': 'str',
        'category_type_string': 'str',
        'category_type': 'int',
        'license_state_enum': 'str',
        'license_state_string': 'str',
        'license_state': 'int',
        'feature_active': 'bool',
        'trial_active': 'bool',
        'detail': 'str',
        'capacity': 'int',
        'license_defined_capacity': 'int',
        'support_qty_release': 'bool',
        'support_unused_release': 'bool'
    }

    attribute_map = {
        'license_category_enum': 'licenseCategoryEnum',
        'license_category_string': 'licenseCategoryString',
        'license_category': 'licenseCategory',
        'feature_type_enum': 'featureTypeEnum',
        'feature_type_string': 'featureTypeString',
        'feature_type': 'featureType',
        'category_type_enum': 'categoryTypeEnum',
        'category_type_string': 'categoryTypeString',
        'category_type': 'categoryType',
        'license_state_enum': 'licenseStateEnum',
        'license_state_string': 'licenseStateString',
        'license_state': 'licenseState',
        'feature_active': 'featureActive',
        'trial_active': 'trialActive',
        'detail': 'detail',
        'capacity': 'capacity',
        'license_defined_capacity': 'licenseDefinedCapacity',
        'support_qty_release': 'supportQtyRelease',
        'support_unused_release': 'supportUnusedRelease'
    }

    def __init__(self, license_category_enum=None, license_category_string=None, license_category=None, feature_type_enum=None, feature_type_string=None, feature_type=None, category_type_enum=None, category_type_string=None, category_type=None, license_state_enum=None, license_state_string=None, license_state=None, feature_active=False, trial_active=False, detail=None, capacity=None, license_defined_capacity=None, support_qty_release=False, support_unused_release=False):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501

        self._license_category_enum = None
        self._license_category_string = None
        self._license_category = None
        self._feature_type_enum = None
        self._feature_type_string = None
        self._feature_type = None
        self._category_type_enum = None
        self._category_type_string = None
        self._category_type = None
        self._license_state_enum = None
        self._license_state_string = None
        self._license_state = None
        self._feature_active = None
        self._trial_active = None
        self._detail = None
        self._capacity = None
        self._license_defined_capacity = None
        self._support_qty_release = None
        self._support_unused_release = None
        self.discriminator = None

        self.license_category_enum = license_category_enum
        self.license_category_string = license_category_string
        self.license_category = license_category
        self.feature_type_enum = feature_type_enum
        self.feature_type_string = feature_type_string
        self.feature_type = feature_type
        self.category_type_enum = category_type_enum
        self.category_type_string = category_type_string
        self.category_type = category_type
        self.license_state_enum = license_state_enum
        self.license_state_string = license_state_string
        self.license_state = license_state
        self.feature_active = feature_active
        self.trial_active = trial_active
        if detail is not None:
            self.detail = detail
        if capacity is not None:
            self.capacity = capacity
        if license_defined_capacity is not None:
            self.license_defined_capacity = license_defined_capacity
        if support_qty_release is not None:
            self.support_qty_release = support_qty_release
        if support_unused_release is not None:
            self.support_unused_release = support_unused_release

    @property
    def license_category_enum(self):
        """Gets the license_category_enum of this Status.  # noqa: E501

        The licensing group this category belongs to; e.g. software, hardware etc  # noqa: E501

        :return: The license_category_enum of this Status.  # noqa: E501
        :rtype: str
        """
        return self._license_category_enum

    @license_category_enum.setter
    def license_category_enum(self, license_category_enum):
        """Sets the license_category_enum of this Status.

        The licensing group this category belongs to; e.g. software, hardware etc  # noqa: E501

        :param license_category_enum: The license_category_enum of this Status.  # noqa: E501
        :type: str
        """
        if license_category_enum is None:
            raise ValueError("Invalid value for `license_category_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "SOFTWARE", "STORAGE", "HARDWARE", "SYSTEM"]  # noqa: E501
        if license_category_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `license_category_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(license_category_enum, allowed_values)
            )

        self._license_category_enum = license_category_enum

    @property
    def license_category_string(self):
        """Gets the license_category_string of this Status.  # noqa: E501

        Licensable Category  # noqa: E501

        :return: The license_category_string of this Status.  # noqa: E501
        :rtype: str
        """
        return self._license_category_string

    @license_category_string.setter
    def license_category_string(self, license_category_string):
        """Sets the license_category_string of this Status.

        Licensable Category  # noqa: E501

        :param license_category_string: The license_category_string of this Status.  # noqa: E501
        :type: str
        """
        if license_category_string is None:
            raise ValueError("Invalid value for `license_category_string`, must not be `None`")  # noqa: E501

        self._license_category_string = license_category_string

    @property
    def license_category(self):
        """Gets the license_category of this Status.  # noqa: E501

        category  # noqa: E501

        :return: The license_category of this Status.  # noqa: E501
        :rtype: int
        """
        return self._license_category

    @license_category.setter
    def license_category(self, license_category):
        """Sets the license_category of this Status.

        category  # noqa: E501

        :param license_category: The license_category of this Status.  # noqa: E501
        :type: int
        """
        if license_category is None:
            raise ValueError("Invalid value for `license_category`, must not be `None`")  # noqa: E501

        self._license_category = license_category

    @property
    def feature_type_enum(self):
        """Gets the feature_type_enum of this Status.  # noqa: E501

        The feature that this category represents; e.g. encryption or capacity etc  # noqa: E501

        :return: The feature_type_enum of this Status.  # noqa: E501
        :rtype: str
        """
        return self._feature_type_enum

    @feature_type_enum.setter
    def feature_type_enum(self, feature_type_enum):
        """Sets the feature_type_enum of this Status.

        The feature that this category represents; e.g. encryption or capacity etc  # noqa: E501

        :param feature_type_enum: The feature_type_enum of this Status.  # noqa: E501
        :type: str
        """
        if feature_type_enum is None:
            raise ValueError("Invalid value for `feature_type_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "BASE", "CAPACITY", "ENCRYPTION", "CLOUD", "CLOUD_ARCHIVE", "SERVICE", "FLEXIO_FC", "FLEXIO_NIC", "UPGRADE", "CATALYST", "REPLICATION", "DEMO", "MEMORY", "ARCHIVE"]  # noqa: E501
        if feature_type_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_type_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(feature_type_enum, allowed_values)
            )

        self._feature_type_enum = feature_type_enum

    @property
    def feature_type_string(self):
        """Gets the feature_type_string of this Status.  # noqa: E501

        Feature Type  # noqa: E501

        :return: The feature_type_string of this Status.  # noqa: E501
        :rtype: str
        """
        return self._feature_type_string

    @feature_type_string.setter
    def feature_type_string(self, feature_type_string):
        """Sets the feature_type_string of this Status.

        Feature Type  # noqa: E501

        :param feature_type_string: The feature_type_string of this Status.  # noqa: E501
        :type: str
        """
        if feature_type_string is None:
            raise ValueError("Invalid value for `feature_type_string`, must not be `None`")  # noqa: E501

        self._feature_type_string = feature_type_string

    @property
    def feature_type(self):
        """Gets the feature_type of this Status.  # noqa: E501

        Feature Type  # noqa: E501

        :return: The feature_type of this Status.  # noqa: E501
        :rtype: int
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this Status.

        Feature Type  # noqa: E501

        :param feature_type: The feature_type of this Status.  # noqa: E501
        :type: int
        """
        if feature_type is None:
            raise ValueError("Invalid value for `feature_type`, must not be `None`")  # noqa: E501

        self._feature_type = feature_type

    @property
    def category_type_enum(self):
        """Gets the category_type_enum of this Status.  # noqa: E501

        The licensing mechanism for this category; enabled by default, requiring a license or disabled.  # noqa: E501

        :return: The category_type_enum of this Status.  # noqa: E501
        :rtype: str
        """
        return self._category_type_enum

    @category_type_enum.setter
    def category_type_enum(self, category_type_enum):
        """Sets the category_type_enum of this Status.

        The licensing mechanism for this category; enabled by default, requiring a license or disabled.  # noqa: E501

        :param category_type_enum: The category_type_enum of this Status.  # noqa: E501
        :type: str
        """
        if category_type_enum is None:
            raise ValueError("Invalid value for `category_type_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["LOCKED", "UNSET", "ENABLED", "DISABLED", "LICENSE", "NOTAVAILABLE"]  # noqa: E501
        if category_type_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type_enum, allowed_values)
            )

        self._category_type_enum = category_type_enum

    @property
    def category_type_string(self):
        """Gets the category_type_string of this Status.  # noqa: E501

        Category String  # noqa: E501

        :return: The category_type_string of this Status.  # noqa: E501
        :rtype: str
        """
        return self._category_type_string

    @category_type_string.setter
    def category_type_string(self, category_type_string):
        """Sets the category_type_string of this Status.

        Category String  # noqa: E501

        :param category_type_string: The category_type_string of this Status.  # noqa: E501
        :type: str
        """
        if category_type_string is None:
            raise ValueError("Invalid value for `category_type_string`, must not be `None`")  # noqa: E501

        self._category_type_string = category_type_string

    @property
    def category_type(self):
        """Gets the category_type of this Status.  # noqa: E501

        Category Type  # noqa: E501

        :return: The category_type of this Status.  # noqa: E501
        :rtype: int
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this Status.

        Category Type  # noqa: E501

        :param category_type: The category_type of this Status.  # noqa: E501
        :type: int
        """
        if category_type is None:
            raise ValueError("Invalid value for `category_type`, must not be `None`")  # noqa: E501

        self._category_type = category_type

    @property
    def license_state_enum(self):
        """Gets the license_state_enum of this Status.  # noqa: E501

        The current license state enum for this category. Shows if this category is enabled, disabled, licensed or unlicensed.  # noqa: E501

        :return: The license_state_enum of this Status.  # noqa: E501
        :rtype: str
        """
        return self._license_state_enum

    @license_state_enum.setter
    def license_state_enum(self, license_state_enum):
        """Sets the license_state_enum of this Status.

        The current license state enum for this category. Shows if this category is enabled, disabled, licensed or unlicensed.  # noqa: E501

        :param license_state_enum: The license_state_enum of this Status.  # noqa: E501
        :type: str
        """
        if license_state_enum is None:
            raise ValueError("Invalid value for `license_state_enum`, must not be `None`")  # noqa: E501
        allowed_values = ["TRIALLICENSE", "LICENSED", "UNLICENSED", "SEEOTHER", "FREEWARE"]  # noqa: E501
        if license_state_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `license_state_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(license_state_enum, allowed_values)
            )

        self._license_state_enum = license_state_enum

    @property
    def license_state_string(self):
        """Gets the license_state_string of this Status.  # noqa: E501

        License state  # noqa: E501

        :return: The license_state_string of this Status.  # noqa: E501
        :rtype: str
        """
        return self._license_state_string

    @license_state_string.setter
    def license_state_string(self, license_state_string):
        """Sets the license_state_string of this Status.

        License state  # noqa: E501

        :param license_state_string: The license_state_string of this Status.  # noqa: E501
        :type: str
        """
        if license_state_string is None:
            raise ValueError("Invalid value for `license_state_string`, must not be `None`")  # noqa: E501

        self._license_state_string = license_state_string

    @property
    def license_state(self):
        """Gets the license_state of this Status.  # noqa: E501

        License state  # noqa: E501

        :return: The license_state of this Status.  # noqa: E501
        :rtype: int
        """
        return self._license_state

    @license_state.setter
    def license_state(self, license_state):
        """Sets the license_state of this Status.

        License state  # noqa: E501

        :param license_state: The license_state of this Status.  # noqa: E501
        :type: int
        """
        if license_state is None:
            raise ValueError("Invalid value for `license_state`, must not be `None`")  # noqa: E501

        self._license_state = license_state

    @property
    def feature_active(self):
        """Gets the feature_active of this Status.  # noqa: E501

        True is this feature is active - i.e. licensed  # noqa: E501

        :return: The feature_active of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._feature_active

    @feature_active.setter
    def feature_active(self, feature_active):
        """Sets the feature_active of this Status.

        True is this feature is active - i.e. licensed  # noqa: E501

        :param feature_active: The feature_active of this Status.  # noqa: E501
        :type: bool
        """
        if feature_active is None:
            raise ValueError("Invalid value for `feature_active`, must not be `None`")  # noqa: E501

        self._feature_active = feature_active

    @property
    def trial_active(self):
        """Gets the trial_active of this Status.  # noqa: E501

        Trial active flag  # noqa: E501

        :return: The trial_active of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._trial_active

    @trial_active.setter
    def trial_active(self, trial_active):
        """Sets the trial_active of this Status.

        Trial active flag  # noqa: E501

        :param trial_active: The trial_active of this Status.  # noqa: E501
        :type: bool
        """
        if trial_active is None:
            raise ValueError("Invalid value for `trial_active`, must not be `None`")  # noqa: E501

        self._trial_active = trial_active

    @property
    def detail(self):
        """Gets the detail of this Status.  # noqa: E501

        Extra details  # noqa: E501

        :return: The detail of this Status.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Status.

        Extra details  # noqa: E501

        :param detail: The detail of this Status.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def capacity(self):
        """Gets the capacity of this Status.  # noqa: E501

        Capacity  # noqa: E501

        :return: The capacity of this Status.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Status.

        Capacity  # noqa: E501

        :param capacity: The capacity of this Status.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def license_defined_capacity(self):
        """Gets the license_defined_capacity of this Status.  # noqa: E501

        The licens defined capacity.  # noqa: E501

        :return: The license_defined_capacity of this Status.  # noqa: E501
        :rtype: int
        """
        return self._license_defined_capacity

    @license_defined_capacity.setter
    def license_defined_capacity(self, license_defined_capacity):
        """Sets the license_defined_capacity of this Status.

        The licens defined capacity.  # noqa: E501

        :param license_defined_capacity: The license_defined_capacity of this Status.  # noqa: E501
        :type: int
        """

        self._license_defined_capacity = license_defined_capacity

    @property
    def support_qty_release(self):
        """Gets the support_qty_release of this Status.  # noqa: E501

        True if token release is supported by quantity.  # noqa: E501

        :return: The support_qty_release of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._support_qty_release

    @support_qty_release.setter
    def support_qty_release(self, support_qty_release):
        """Sets the support_qty_release of this Status.

        True if token release is supported by quantity.  # noqa: E501

        :param support_qty_release: The support_qty_release of this Status.  # noqa: E501
        :type: bool
        """

        self._support_qty_release = support_qty_release

    @property
    def support_unused_release(self):
        """Gets the support_unused_release of this Status.  # noqa: E501

        True if release all uinused tokens is supported  # noqa: E501

        :return: The support_unused_release of this Status.  # noqa: E501
        :rtype: bool
        """
        return self._support_unused_release

    @support_unused_release.setter
    def support_unused_release(self, support_unused_release):
        """Sets the support_unused_release of this Status.

        True if release all uinused tokens is supported  # noqa: E501

        :param support_unused_release: The support_unused_release of this Status.  # noqa: E501
        :type: bool
        """

        self._support_unused_release = support_unused_release

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
