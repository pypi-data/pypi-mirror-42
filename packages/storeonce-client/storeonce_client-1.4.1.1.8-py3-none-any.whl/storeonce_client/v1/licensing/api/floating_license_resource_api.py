# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class FloatingLicenseResourceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def acquire_token_post(self, body, **kwargs):  # noqa: E501
        """Attempts to checkout the tokens specified in the given license feature object  # noqa: E501

        Will not chekcout a partial request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.acquire_token_post(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param LicenseFeature body: LicenseFeature, Object holding the feature ID of the token and the qty (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.acquire_token_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.acquire_token_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def acquire_token_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Attempts to checkout the tokens specified in the given license feature object  # noqa: E501

        Will not chekcout a partial request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.acquire_token_post_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param LicenseFeature body: LicenseFeature, Object holding the feature ID of the token and the qty (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method acquire_token_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `acquire_token_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseCollectionWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_get_all(self, **kwargs):  # noqa: E501
        """Returns a list of currently installed licenses  # noqa: E501

        Can be filtered by license category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_get_all(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str category_type: CategoryType, if set will filter the licenses by category
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.perform_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def perform_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of currently installed licenses  # noqa: E501

        Can be filtered by license category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_get_all_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str category_type: CategoryType, if set will filter the licenses by category
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_type']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_type' in params:
            query_params.append(('categoryType', params['category_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseCollectionWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_get_floatingby_id(self, id, **kwargs):  # noqa: E501
        """Searches the store and returns the license specified if found  # noqa: E501

        Can be filtered by license category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_get_floatingby_id(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: The UID of the license to be returned (required)
        :return: StoreonceLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_get_floatingby_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_get_floatingby_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def perform_get_floatingby_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Searches the store and returns the license specified if found  # noqa: E501

        Can be filtered by license category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_get_floatingby_id_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: The UID of the license to be returned (required)
        :return: StoreonceLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_get_floatingby_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `perform_get_floatingby_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license/license/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoreonceLicense',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_all_unused_local(self, **kwargs):  # noqa: E501
        """Any unused capacity licenses for the specified feature.  # noqa: E501

        Releases unused capacity licenses back to the server pool.When connected to a license server, if this results in all capacity licenses being release (no configured storage) then all other licenses will be released and the client will disconnect from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.release_all_unused_local(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.release_all_unused_local_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.release_all_unused_local_with_http_info(**kwargs)  # noqa: E501
            return data

    def release_all_unused_local_with_http_info(self, **kwargs):  # noqa: E501
        """Any unused capacity licenses for the specified feature.  # noqa: E501

        Releases unused capacity licenses back to the server pool.When connected to a license server, if this results in all capacity licenses being release (no configured storage) then all other licenses will be released and the client will disconnect from the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.release_all_unused_local_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_all_unused_local" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license/local-capacity', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_feature_quantity(self, feature_type, **kwargs):  # noqa: E501
        """Will release tokens for the given feature. The default quantity is one token unless specified. Attempts to release more than the number of tokens installed with be rejected. Local capacity licenses cannot be released via this resource.  # noqa: E501

        Releases requested capacity licenses back to the server pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.release_feature_quantity(feature_type, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str feature_type: The feature for which to return licenses. (required)
        :param str number_of_tokens: The quantity of license tokens to be released.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.release_feature_quantity_with_http_info(feature_type, **kwargs)  # noqa: E501
        else:
            (data) = self.release_feature_quantity_with_http_info(feature_type, **kwargs)  # noqa: E501
            return data

    def release_feature_quantity_with_http_info(self, feature_type, **kwargs):  # noqa: E501
        """Will release tokens for the given feature. The default quantity is one token unless specified. Attempts to release more than the number of tokens installed with be rejected. Local capacity licenses cannot be released via this resource.  # noqa: E501

        Releases requested capacity licenses back to the server pool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.release_feature_quantity_with_http_info(feature_type, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str feature_type: The feature for which to return licenses. (required)
        :param str number_of_tokens: The quantity of license tokens to be released.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['feature_type', 'number_of_tokens']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_feature_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'feature_type' is set
        if ('feature_type' not in params or
                params['feature_type'] is None):
            raise ValueError("Missing the required parameter `feature_type` when calling `release_feature_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'feature_type' in params:
            path_params['featureType'] = params['feature_type']  # noqa: E501

        query_params = []
        if 'number_of_tokens' in params:
            query_params.append(('numberOfTokens', params['number_of_tokens']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license/featureType/{featureType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def release_token(self, id, **kwargs):  # noqa: E501
        """Release the given token if found.  # noqa: E501

        The license token with the matching UID is released back to the server pool.When connected to a license server, deleting the base license or all of the capacity will result in all other licenses being deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.release_token(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: The UID of the license to be released (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.release_token_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.release_token_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def release_token_with_http_info(self, id, **kwargs):  # noqa: E501
        """Release the given token if found.  # noqa: E501

        The license token with the matching UID is released back to the server pool.When connected to a license server, deleting the base license or all of the capacity will result in all other licenses being deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.release_token_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: The UID of the license to be released (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method release_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `release_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/float-license/license/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseCollectionWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
