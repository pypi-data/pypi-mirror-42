# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Licensing

    unused  # noqa: E501

    Component version: 6.0.31-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class SeatLicenseResourceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def new_license_file(self, file, **kwargs):  # noqa: E501
        """Validates and installs the licenses  # noqa: E501

        Parses the xml document and extract the HPE license keys. Each key is then validated and added to the store or rejected as needed.The HTTP response determines the success of the POST and NOT if the licenses were valid or accepted. If the xml was a valid list of licenses, a 200 response is returned.The validity of each individual license key must be determined by the caller by checking the validation result and the valid flag in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.new_license_file(file, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param file file: The license file (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.new_license_file_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.new_license_file_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def new_license_file_with_http_info(self, file, **kwargs):  # noqa: E501
        """Validates and installs the licenses  # noqa: E501

        Parses the xml document and extract the HPE license keys. Each key is then validated and added to the store or rejected as needed.The HTTP response determines the success of the POST and NOT if the licenses were valid or accepted. If the xml was a valid list of licenses, a 200 response is returned.The validity of each individual license key must be determined by the caller by checking the validation result and the valid flag in the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.new_license_file_with_http_info(file, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param file file: The license file (required)
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_license_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `new_license_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/seat-license', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseCollectionWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_delete(self, id, **kwargs):  # noqa: E501
        """Deletes the licenses identified but the UID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_delete(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique ID of the license to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def perform_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the licenses identified but the UID  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_delete_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique ID of the license to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `perform_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/seat-license/license/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_get(self, id, **kwargs):  # noqa: E501
        """Searches the store and returns the license specified if found  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_get(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique ID of the license to retrieve (required)
        :return: StoreonceLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def perform_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Searches the store and returns the license specified if found  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_get_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique ID of the license to retrieve (required)
        :return: StoreonceLicense
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `perform_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/seat-license/license/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoreonceLicense',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_get_all(self, **kwargs):  # noqa: E501
        """Returns a list of currently installed seat licenses  # noqa: E501

        A list of installed licenses. Note: instant on licenses will not be listed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_get_all(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str category_type: CategoryType, if set will filter the licenses by category
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.perform_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def perform_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of currently installed seat licenses  # noqa: E501

        A list of installed licenses. Note: instant on licenses will not be listed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_get_all_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str category_type: CategoryType, if set will filter the licenses by category
        :return: LicenseCollectionWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_type']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category_type' in params:
            query_params.append(('categoryType', params['category_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/licensing/seat-license', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LicenseCollectionWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
