# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ActionStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node': 'str',
        'error': 'int',
        'suggested_action': 'str',
        'message': 'MessageInfoEx',
        'message_info': 'MessageInfo'
    }

    attribute_map = {
        'node': 'node',
        'error': 'error',
        'suggested_action': 'suggestedAction',
        'message': 'message',
        'message_info': 'messageInfo'
    }

    def __init__(self, node=None, error=None, suggested_action=None, message=None, message_info=None):  # noqa: E501
        """ActionStatus - a model defined in Swagger"""  # noqa: E501

        self._node = None
        self._error = None
        self._suggested_action = None
        self._message = None
        self._message_info = None
        self.discriminator = None

        if node is not None:
            self.node = node
        if error is not None:
            self.error = error
        if suggested_action is not None:
            self.suggested_action = suggested_action
        if message is not None:
            self.message = message
        if message_info is not None:
            self.message_info = message_info

    @property
    def node(self):
        """Gets the node of this ActionStatus.  # noqa: E501


        :return: The node of this ActionStatus.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this ActionStatus.


        :param node: The node of this ActionStatus.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def error(self):
        """Gets the error of this ActionStatus.  # noqa: E501


        :return: The error of this ActionStatus.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ActionStatus.


        :param error: The error of this ActionStatus.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def suggested_action(self):
        """Gets the suggested_action of this ActionStatus.  # noqa: E501


        :return: The suggested_action of this ActionStatus.  # noqa: E501
        :rtype: str
        """
        return self._suggested_action

    @suggested_action.setter
    def suggested_action(self, suggested_action):
        """Sets the suggested_action of this ActionStatus.


        :param suggested_action: The suggested_action of this ActionStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOACTION", "REPEAT_AFTER_DELAY", "REPEAT_NO_DELAY", "FAIL"]  # noqa: E501
        if suggested_action not in allowed_values:
            raise ValueError(
                "Invalid value for `suggested_action` ({0}), must be one of {1}"  # noqa: E501
                .format(suggested_action, allowed_values)
            )

        self._suggested_action = suggested_action

    @property
    def message(self):
        """Gets the message of this ActionStatus.  # noqa: E501


        :return: The message of this ActionStatus.  # noqa: E501
        :rtype: MessageInfoEx
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActionStatus.


        :param message: The message of this ActionStatus.  # noqa: E501
        :type: MessageInfoEx
        """

        self._message = message

    @property
    def message_info(self):
        """Gets the message_info of this ActionStatus.  # noqa: E501


        :return: The message_info of this ActionStatus.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._message_info

    @message_info.setter
    def message_info(self, message_info):
        """Sets the message_info of this ActionStatus.


        :param message_info: The message_info of this ActionStatus.  # noqa: E501
        :type: MessageInfo
        """

        self._message_info = message_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
