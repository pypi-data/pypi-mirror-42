# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Management Services

    unused  # noqa: E501

    Component version: 3.10.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class IloNetworkInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dhcp_enabled': 'bool',
        'ip4_address': 'str',
        'ip4_subnet': 'str',
        'ip4_gateway': 'str',
        'ip4_dns_server': 'str',
        'ip6_address': 'str',
        'ip6_prefix': 'int',
        'ip6_gateway': 'str',
        'ip6_dns_server': 'str',
        'http_status_code': 'int'
    }

    attribute_map = {
        'dhcp_enabled': 'dhcpEnabled',
        'ip4_address': 'ip4Address',
        'ip4_subnet': 'ip4Subnet',
        'ip4_gateway': 'ip4Gateway',
        'ip4_dns_server': 'ip4DnsServer',
        'ip6_address': 'ip6Address',
        'ip6_prefix': 'ip6Prefix',
        'ip6_gateway': 'ip6Gateway',
        'ip6_dns_server': 'ip6DnsServer',
        'http_status_code': 'httpStatusCode'
    }

    def __init__(self, dhcp_enabled=False, ip4_address=None, ip4_subnet=None, ip4_gateway=None, ip4_dns_server=None, ip6_address=None, ip6_prefix=None, ip6_gateway=None, ip6_dns_server=None, http_status_code=None):  # noqa: E501
        """IloNetworkInformation - a model defined in Swagger"""  # noqa: E501

        self._dhcp_enabled = None
        self._ip4_address = None
        self._ip4_subnet = None
        self._ip4_gateway = None
        self._ip4_dns_server = None
        self._ip6_address = None
        self._ip6_prefix = None
        self._ip6_gateway = None
        self._ip6_dns_server = None
        self._http_status_code = None
        self.discriminator = None

        if dhcp_enabled is not None:
            self.dhcp_enabled = dhcp_enabled
        if ip4_address is not None:
            self.ip4_address = ip4_address
        if ip4_subnet is not None:
            self.ip4_subnet = ip4_subnet
        if ip4_gateway is not None:
            self.ip4_gateway = ip4_gateway
        if ip4_dns_server is not None:
            self.ip4_dns_server = ip4_dns_server
        if ip6_address is not None:
            self.ip6_address = ip6_address
        if ip6_prefix is not None:
            self.ip6_prefix = ip6_prefix
        if ip6_gateway is not None:
            self.ip6_gateway = ip6_gateway
        if ip6_dns_server is not None:
            self.ip6_dns_server = ip6_dns_server
        if http_status_code is not None:
            self.http_status_code = http_status_code

    @property
    def dhcp_enabled(self):
        """Gets the dhcp_enabled of this IloNetworkInformation.  # noqa: E501

        Flag indicating whether ip addressing is static or dynamic  # noqa: E501

        :return: The dhcp_enabled of this IloNetworkInformation.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp_enabled

    @dhcp_enabled.setter
    def dhcp_enabled(self, dhcp_enabled):
        """Sets the dhcp_enabled of this IloNetworkInformation.

        Flag indicating whether ip addressing is static or dynamic  # noqa: E501

        :param dhcp_enabled: The dhcp_enabled of this IloNetworkInformation.  # noqa: E501
        :type: bool
        """

        self._dhcp_enabled = dhcp_enabled

    @property
    def ip4_address(self):
        """Gets the ip4_address of this IloNetworkInformation.  # noqa: E501

        iLO address in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :return: The ip4_address of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip4_address

    @ip4_address.setter
    def ip4_address(self, ip4_address):
        """Sets the ip4_address of this IloNetworkInformation.

        iLO address in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :param ip4_address: The ip4_address of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip4_address = ip4_address

    @property
    def ip4_subnet(self):
        """Gets the ip4_subnet of this IloNetworkInformation.  # noqa: E501

        iLO subnet mask in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :return: The ip4_subnet of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip4_subnet

    @ip4_subnet.setter
    def ip4_subnet(self, ip4_subnet):
        """Sets the ip4_subnet of this IloNetworkInformation.

        iLO subnet mask in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :param ip4_subnet: The ip4_subnet of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip4_subnet = ip4_subnet

    @property
    def ip4_gateway(self):
        """Gets the ip4_gateway of this IloNetworkInformation.  # noqa: E501

        iLO gateway in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :return: The ip4_gateway of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip4_gateway

    @ip4_gateway.setter
    def ip4_gateway(self, ip4_gateway):
        """Sets the ip4_gateway of this IloNetworkInformation.

        iLO gateway in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :param ip4_gateway: The ip4_gateway of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip4_gateway = ip4_gateway

    @property
    def ip4_dns_server(self):
        """Gets the ip4_dns_server of this IloNetworkInformation.  # noqa: E501

        iLO Dns server address in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :return: The ip4_dns_server of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip4_dns_server

    @ip4_dns_server.setter
    def ip4_dns_server(self, ip4_dns_server):
        """Sets the ip4_dns_server of this IloNetworkInformation.

        iLO Dns server address in ipv4 dotted format (x.x.x.x)  # noqa: E501

        :param ip4_dns_server: The ip4_dns_server of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip4_dns_server = ip4_dns_server

    @property
    def ip6_address(self):
        """Gets the ip6_address of this IloNetworkInformation.  # noqa: E501

        iLO address in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :return: The ip6_address of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip6_address

    @ip6_address.setter
    def ip6_address(self, ip6_address):
        """Sets the ip6_address of this IloNetworkInformation.

        iLO address in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :param ip6_address: The ip6_address of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip6_address = ip6_address

    @property
    def ip6_prefix(self):
        """Gets the ip6_prefix of this IloNetworkInformation.  # noqa: E501

        iLO address prefix (1-127) range  # noqa: E501

        :return: The ip6_prefix of this IloNetworkInformation.  # noqa: E501
        :rtype: int
        """
        return self._ip6_prefix

    @ip6_prefix.setter
    def ip6_prefix(self, ip6_prefix):
        """Sets the ip6_prefix of this IloNetworkInformation.

        iLO address prefix (1-127) range  # noqa: E501

        :param ip6_prefix: The ip6_prefix of this IloNetworkInformation.  # noqa: E501
        :type: int
        """

        self._ip6_prefix = ip6_prefix

    @property
    def ip6_gateway(self):
        """Gets the ip6_gateway of this IloNetworkInformation.  # noqa: E501

        iLO gateway in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :return: The ip6_gateway of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip6_gateway

    @ip6_gateway.setter
    def ip6_gateway(self, ip6_gateway):
        """Sets the ip6_gateway of this IloNetworkInformation.

        iLO gateway in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :param ip6_gateway: The ip6_gateway of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip6_gateway = ip6_gateway

    @property
    def ip6_dns_server(self):
        """Gets the ip6_dns_server of this IloNetworkInformation.  # noqa: E501

        iLO gateway in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :return: The ip6_dns_server of this IloNetworkInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip6_dns_server

    @ip6_dns_server.setter
    def ip6_dns_server(self, ip6_dns_server):
        """Sets the ip6_dns_server of this IloNetworkInformation.

        iLO gateway in ipv6 format (x:x:x:x:x:x:x:x)  # noqa: E501

        :param ip6_dns_server: The ip6_dns_server of this IloNetworkInformation.  # noqa: E501
        :type: str
        """

        self._ip6_dns_server = ip6_dns_server

    @property
    def http_status_code(self):
        """Gets the http_status_code of this IloNetworkInformation.  # noqa: E501


        :return: The http_status_code of this IloNetworkInformation.  # noqa: E501
        :rtype: int
        """
        return self._http_status_code

    @http_status_code.setter
    def http_status_code(self, http_status_code):
        """Sets the http_status_code of this IloNetworkInformation.


        :param http_status_code: The http_status_code of this IloNetworkInformation.  # noqa: E501
        :type: int
        """

        self._http_status_code = http_status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IloNetworkInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IloNetworkInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
