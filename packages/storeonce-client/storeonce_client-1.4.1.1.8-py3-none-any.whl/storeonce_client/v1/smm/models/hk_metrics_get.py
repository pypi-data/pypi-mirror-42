# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SMM

    unused  # noqa: E501

    Component version: 2.0.9-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class HkMetricsGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'DateTimeOffset',
        'compacted_bytes': 'int',
        'compacted_duration_microseconds': 'int',
        'dereferenced_bytes': 'int',
        'dereferenced_duration_microseconds': 'int',
        'freed_bytes': 'int',
        'pending_bytes': 'int',
        'processed_bytes': 'int',
        'processed_bytes_per_second': 'int',
        'removed_bytes': 'int',
        'removed_duration_microseconds': 'int',
        'jobs_processed': 'int',
        'jobs_received': 'int',
        'queue_size': 'int',
        'secure_compacted_bytes': 'int',
        'secure_compacted_duration_microseconds': 'int',
        'secure_dereferenced_bytes': 'int',
        'secure_dereferenced_duration_microseconds': 'int',
        'secure_freed_bytes': 'int',
        'secure_pending_bytes': 'int',
        'secure_processed_bytes': 'int',
        'secure_processed_bytes_per_second': 'int',
        'secure_removed_bytes': 'int',
        'secure_removed_duration_microseconds': 'int',
        'secure_jobs_processed': 'int',
        'secure_jobs_received': 'int',
        'secure_queue_size': 'int',
        'store_id': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'compacted_bytes': 'compactedBytes',
        'compacted_duration_microseconds': 'compactedDurationMicroseconds',
        'dereferenced_bytes': 'dereferencedBytes',
        'dereferenced_duration_microseconds': 'dereferencedDurationMicroseconds',
        'freed_bytes': 'freedBytes',
        'pending_bytes': 'pendingBytes',
        'processed_bytes': 'processedBytes',
        'processed_bytes_per_second': 'processedBytesPerSecond',
        'removed_bytes': 'removedBytes',
        'removed_duration_microseconds': 'removedDurationMicroseconds',
        'jobs_processed': 'jobsProcessed',
        'jobs_received': 'jobsReceived',
        'queue_size': 'queueSize',
        'secure_compacted_bytes': 'secureCompactedBytes',
        'secure_compacted_duration_microseconds': 'secureCompactedDurationMicroseconds',
        'secure_dereferenced_bytes': 'secureDereferencedBytes',
        'secure_dereferenced_duration_microseconds': 'secureDereferencedDurationMicroseconds',
        'secure_freed_bytes': 'secureFreedBytes',
        'secure_pending_bytes': 'securePendingBytes',
        'secure_processed_bytes': 'secureProcessedBytes',
        'secure_processed_bytes_per_second': 'secureProcessedBytesPerSecond',
        'secure_removed_bytes': 'secureRemovedBytes',
        'secure_removed_duration_microseconds': 'secureRemovedDurationMicroseconds',
        'secure_jobs_processed': 'secureJobsProcessed',
        'secure_jobs_received': 'secureJobsReceived',
        'secure_queue_size': 'secureQueueSize',
        'store_id': 'storeId'
    }

    def __init__(self, timestamp=None, compacted_bytes=None, compacted_duration_microseconds=None, dereferenced_bytes=None, dereferenced_duration_microseconds=None, freed_bytes=None, pending_bytes=None, processed_bytes=None, processed_bytes_per_second=None, removed_bytes=None, removed_duration_microseconds=None, jobs_processed=None, jobs_received=None, queue_size=None, secure_compacted_bytes=None, secure_compacted_duration_microseconds=None, secure_dereferenced_bytes=None, secure_dereferenced_duration_microseconds=None, secure_freed_bytes=None, secure_pending_bytes=None, secure_processed_bytes=None, secure_processed_bytes_per_second=None, secure_removed_bytes=None, secure_removed_duration_microseconds=None, secure_jobs_processed=None, secure_jobs_received=None, secure_queue_size=None, store_id=None):  # noqa: E501
        """HkMetricsGet - a model defined in Swagger"""  # noqa: E501

        self._timestamp = None
        self._compacted_bytes = None
        self._compacted_duration_microseconds = None
        self._dereferenced_bytes = None
        self._dereferenced_duration_microseconds = None
        self._freed_bytes = None
        self._pending_bytes = None
        self._processed_bytes = None
        self._processed_bytes_per_second = None
        self._removed_bytes = None
        self._removed_duration_microseconds = None
        self._jobs_processed = None
        self._jobs_received = None
        self._queue_size = None
        self._secure_compacted_bytes = None
        self._secure_compacted_duration_microseconds = None
        self._secure_dereferenced_bytes = None
        self._secure_dereferenced_duration_microseconds = None
        self._secure_freed_bytes = None
        self._secure_pending_bytes = None
        self._secure_processed_bytes = None
        self._secure_processed_bytes_per_second = None
        self._secure_removed_bytes = None
        self._secure_removed_duration_microseconds = None
        self._secure_jobs_processed = None
        self._secure_jobs_received = None
        self._secure_queue_size = None
        self._store_id = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if compacted_bytes is not None:
            self.compacted_bytes = compacted_bytes
        if compacted_duration_microseconds is not None:
            self.compacted_duration_microseconds = compacted_duration_microseconds
        if dereferenced_bytes is not None:
            self.dereferenced_bytes = dereferenced_bytes
        if dereferenced_duration_microseconds is not None:
            self.dereferenced_duration_microseconds = dereferenced_duration_microseconds
        if freed_bytes is not None:
            self.freed_bytes = freed_bytes
        if pending_bytes is not None:
            self.pending_bytes = pending_bytes
        if processed_bytes is not None:
            self.processed_bytes = processed_bytes
        if processed_bytes_per_second is not None:
            self.processed_bytes_per_second = processed_bytes_per_second
        if removed_bytes is not None:
            self.removed_bytes = removed_bytes
        if removed_duration_microseconds is not None:
            self.removed_duration_microseconds = removed_duration_microseconds
        if jobs_processed is not None:
            self.jobs_processed = jobs_processed
        if jobs_received is not None:
            self.jobs_received = jobs_received
        if queue_size is not None:
            self.queue_size = queue_size
        if secure_compacted_bytes is not None:
            self.secure_compacted_bytes = secure_compacted_bytes
        if secure_compacted_duration_microseconds is not None:
            self.secure_compacted_duration_microseconds = secure_compacted_duration_microseconds
        if secure_dereferenced_bytes is not None:
            self.secure_dereferenced_bytes = secure_dereferenced_bytes
        if secure_dereferenced_duration_microseconds is not None:
            self.secure_dereferenced_duration_microseconds = secure_dereferenced_duration_microseconds
        if secure_freed_bytes is not None:
            self.secure_freed_bytes = secure_freed_bytes
        if secure_pending_bytes is not None:
            self.secure_pending_bytes = secure_pending_bytes
        if secure_processed_bytes is not None:
            self.secure_processed_bytes = secure_processed_bytes
        if secure_processed_bytes_per_second is not None:
            self.secure_processed_bytes_per_second = secure_processed_bytes_per_second
        if secure_removed_bytes is not None:
            self.secure_removed_bytes = secure_removed_bytes
        if secure_removed_duration_microseconds is not None:
            self.secure_removed_duration_microseconds = secure_removed_duration_microseconds
        if secure_jobs_processed is not None:
            self.secure_jobs_processed = secure_jobs_processed
        if secure_jobs_received is not None:
            self.secure_jobs_received = secure_jobs_received
        if secure_queue_size is not None:
            self.secure_queue_size = secure_queue_size
        if store_id is not None:
            self.store_id = store_id

    @property
    def timestamp(self):
        """Gets the timestamp of this HkMetricsGet.  # noqa: E501

        Timestamp for the metric sample  # noqa: E501

        :return: The timestamp of this HkMetricsGet.  # noqa: E501
        :rtype: DateTimeOffset
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this HkMetricsGet.

        Timestamp for the metric sample  # noqa: E501

        :param timestamp: The timestamp of this HkMetricsGet.  # noqa: E501
        :type: DateTimeOffset
        """

        self._timestamp = timestamp

    @property
    def compacted_bytes(self):
        """Gets the compacted_bytes of this HkMetricsGet.  # noqa: E501

        The number of bytes compacted.  # noqa: E501

        :return: The compacted_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._compacted_bytes

    @compacted_bytes.setter
    def compacted_bytes(self, compacted_bytes):
        """Sets the compacted_bytes of this HkMetricsGet.

        The number of bytes compacted.  # noqa: E501

        :param compacted_bytes: The compacted_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._compacted_bytes = compacted_bytes

    @property
    def compacted_duration_microseconds(self):
        """Gets the compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501

        Time spent compating bytes  # noqa: E501

        :return: The compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._compacted_duration_microseconds

    @compacted_duration_microseconds.setter
    def compacted_duration_microseconds(self, compacted_duration_microseconds):
        """Sets the compacted_duration_microseconds of this HkMetricsGet.

        Time spent compating bytes  # noqa: E501

        :param compacted_duration_microseconds: The compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._compacted_duration_microseconds = compacted_duration_microseconds

    @property
    def dereferenced_bytes(self):
        """Gets the dereferenced_bytes of this HkMetricsGet.  # noqa: E501

        Number of bytes dereferenced  # noqa: E501

        :return: The dereferenced_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._dereferenced_bytes

    @dereferenced_bytes.setter
    def dereferenced_bytes(self, dereferenced_bytes):
        """Sets the dereferenced_bytes of this HkMetricsGet.

        Number of bytes dereferenced  # noqa: E501

        :param dereferenced_bytes: The dereferenced_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._dereferenced_bytes = dereferenced_bytes

    @property
    def dereferenced_duration_microseconds(self):
        """Gets the dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501

        Time spent dereferencing bytes  # noqa: E501

        :return: The dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._dereferenced_duration_microseconds

    @dereferenced_duration_microseconds.setter
    def dereferenced_duration_microseconds(self, dereferenced_duration_microseconds):
        """Sets the dereferenced_duration_microseconds of this HkMetricsGet.

        Time spent dereferencing bytes  # noqa: E501

        :param dereferenced_duration_microseconds: The dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._dereferenced_duration_microseconds = dereferenced_duration_microseconds

    @property
    def freed_bytes(self):
        """Gets the freed_bytes of this HkMetricsGet.  # noqa: E501

        Amount of space freed in bytes  # noqa: E501

        :return: The freed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._freed_bytes

    @freed_bytes.setter
    def freed_bytes(self, freed_bytes):
        """Sets the freed_bytes of this HkMetricsGet.

        Amount of space freed in bytes  # noqa: E501

        :param freed_bytes: The freed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._freed_bytes = freed_bytes

    @property
    def pending_bytes(self):
        """Gets the pending_bytes of this HkMetricsGet.  # noqa: E501

        The number of bytes pending to delete  # noqa: E501

        :return: The pending_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._pending_bytes

    @pending_bytes.setter
    def pending_bytes(self, pending_bytes):
        """Sets the pending_bytes of this HkMetricsGet.

        The number of bytes pending to delete  # noqa: E501

        :param pending_bytes: The pending_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._pending_bytes = pending_bytes

    @property
    def processed_bytes(self):
        """Gets the processed_bytes of this HkMetricsGet.  # noqa: E501

        Bytes processed  # noqa: E501

        :return: The processed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._processed_bytes

    @processed_bytes.setter
    def processed_bytes(self, processed_bytes):
        """Sets the processed_bytes of this HkMetricsGet.

        Bytes processed  # noqa: E501

        :param processed_bytes: The processed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._processed_bytes = processed_bytes

    @property
    def processed_bytes_per_second(self):
        """Gets the processed_bytes_per_second of this HkMetricsGet.  # noqa: E501

        Bytes processed per second  # noqa: E501

        :return: The processed_bytes_per_second of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._processed_bytes_per_second

    @processed_bytes_per_second.setter
    def processed_bytes_per_second(self, processed_bytes_per_second):
        """Sets the processed_bytes_per_second of this HkMetricsGet.

        Bytes processed per second  # noqa: E501

        :param processed_bytes_per_second: The processed_bytes_per_second of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._processed_bytes_per_second = processed_bytes_per_second

    @property
    def removed_bytes(self):
        """Gets the removed_bytes of this HkMetricsGet.  # noqa: E501

        Bytes removed  # noqa: E501

        :return: The removed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._removed_bytes

    @removed_bytes.setter
    def removed_bytes(self, removed_bytes):
        """Sets the removed_bytes of this HkMetricsGet.

        Bytes removed  # noqa: E501

        :param removed_bytes: The removed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._removed_bytes = removed_bytes

    @property
    def removed_duration_microseconds(self):
        """Gets the removed_duration_microseconds of this HkMetricsGet.  # noqa: E501

        Time spend removing bytes  # noqa: E501

        :return: The removed_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._removed_duration_microseconds

    @removed_duration_microseconds.setter
    def removed_duration_microseconds(self, removed_duration_microseconds):
        """Sets the removed_duration_microseconds of this HkMetricsGet.

        Time spend removing bytes  # noqa: E501

        :param removed_duration_microseconds: The removed_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._removed_duration_microseconds = removed_duration_microseconds

    @property
    def jobs_processed(self):
        """Gets the jobs_processed of this HkMetricsGet.  # noqa: E501

        Number of jobs processed  # noqa: E501

        :return: The jobs_processed of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._jobs_processed

    @jobs_processed.setter
    def jobs_processed(self, jobs_processed):
        """Sets the jobs_processed of this HkMetricsGet.

        Number of jobs processed  # noqa: E501

        :param jobs_processed: The jobs_processed of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._jobs_processed = jobs_processed

    @property
    def jobs_received(self):
        """Gets the jobs_received of this HkMetricsGet.  # noqa: E501

        Number of jobs received  # noqa: E501

        :return: The jobs_received of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._jobs_received

    @jobs_received.setter
    def jobs_received(self, jobs_received):
        """Sets the jobs_received of this HkMetricsGet.

        Number of jobs received  # noqa: E501

        :param jobs_received: The jobs_received of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._jobs_received = jobs_received

    @property
    def queue_size(self):
        """Gets the queue_size of this HkMetricsGet.  # noqa: E501

        Queue size  # noqa: E501

        :return: The queue_size of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._queue_size

    @queue_size.setter
    def queue_size(self, queue_size):
        """Sets the queue_size of this HkMetricsGet.

        Queue size  # noqa: E501

        :param queue_size: The queue_size of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._queue_size = queue_size

    @property
    def secure_compacted_bytes(self):
        """Gets the secure_compacted_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes compacted  # noqa: E501

        :return: The secure_compacted_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_compacted_bytes

    @secure_compacted_bytes.setter
    def secure_compacted_bytes(self, secure_compacted_bytes):
        """Sets the secure_compacted_bytes of this HkMetricsGet.

        Number of secure bytes compacted  # noqa: E501

        :param secure_compacted_bytes: The secure_compacted_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_compacted_bytes = secure_compacted_bytes

    @property
    def secure_compacted_duration_microseconds(self):
        """Gets the secure_compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501

        The compaction duration in microseconds  # noqa: E501

        :return: The secure_compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_compacted_duration_microseconds

    @secure_compacted_duration_microseconds.setter
    def secure_compacted_duration_microseconds(self, secure_compacted_duration_microseconds):
        """Sets the secure_compacted_duration_microseconds of this HkMetricsGet.

        The compaction duration in microseconds  # noqa: E501

        :param secure_compacted_duration_microseconds: The secure_compacted_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_compacted_duration_microseconds = secure_compacted_duration_microseconds

    @property
    def secure_dereferenced_bytes(self):
        """Gets the secure_dereferenced_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes dereferenced  # noqa: E501

        :return: The secure_dereferenced_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_dereferenced_bytes

    @secure_dereferenced_bytes.setter
    def secure_dereferenced_bytes(self, secure_dereferenced_bytes):
        """Sets the secure_dereferenced_bytes of this HkMetricsGet.

        Number of secure bytes dereferenced  # noqa: E501

        :param secure_dereferenced_bytes: The secure_dereferenced_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_dereferenced_bytes = secure_dereferenced_bytes

    @property
    def secure_dereferenced_duration_microseconds(self):
        """Gets the secure_dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501

        Time spent dereferencing secure bytes  # noqa: E501

        :return: The secure_dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_dereferenced_duration_microseconds

    @secure_dereferenced_duration_microseconds.setter
    def secure_dereferenced_duration_microseconds(self, secure_dereferenced_duration_microseconds):
        """Sets the secure_dereferenced_duration_microseconds of this HkMetricsGet.

        Time spent dereferencing secure bytes  # noqa: E501

        :param secure_dereferenced_duration_microseconds: The secure_dereferenced_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_dereferenced_duration_microseconds = secure_dereferenced_duration_microseconds

    @property
    def secure_freed_bytes(self):
        """Gets the secure_freed_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes freed  # noqa: E501

        :return: The secure_freed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_freed_bytes

    @secure_freed_bytes.setter
    def secure_freed_bytes(self, secure_freed_bytes):
        """Sets the secure_freed_bytes of this HkMetricsGet.

        Number of secure bytes freed  # noqa: E501

        :param secure_freed_bytes: The secure_freed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_freed_bytes = secure_freed_bytes

    @property
    def secure_pending_bytes(self):
        """Gets the secure_pending_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes pending  # noqa: E501

        :return: The secure_pending_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_pending_bytes

    @secure_pending_bytes.setter
    def secure_pending_bytes(self, secure_pending_bytes):
        """Sets the secure_pending_bytes of this HkMetricsGet.

        Number of secure bytes pending  # noqa: E501

        :param secure_pending_bytes: The secure_pending_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_pending_bytes = secure_pending_bytes

    @property
    def secure_processed_bytes(self):
        """Gets the secure_processed_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes processed  # noqa: E501

        :return: The secure_processed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_processed_bytes

    @secure_processed_bytes.setter
    def secure_processed_bytes(self, secure_processed_bytes):
        """Sets the secure_processed_bytes of this HkMetricsGet.

        Number of secure bytes processed  # noqa: E501

        :param secure_processed_bytes: The secure_processed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_processed_bytes = secure_processed_bytes

    @property
    def secure_processed_bytes_per_second(self):
        """Gets the secure_processed_bytes_per_second of this HkMetricsGet.  # noqa: E501

        Secure bytes processed per second  # noqa: E501

        :return: The secure_processed_bytes_per_second of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_processed_bytes_per_second

    @secure_processed_bytes_per_second.setter
    def secure_processed_bytes_per_second(self, secure_processed_bytes_per_second):
        """Sets the secure_processed_bytes_per_second of this HkMetricsGet.

        Secure bytes processed per second  # noqa: E501

        :param secure_processed_bytes_per_second: The secure_processed_bytes_per_second of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_processed_bytes_per_second = secure_processed_bytes_per_second

    @property
    def secure_removed_bytes(self):
        """Gets the secure_removed_bytes of this HkMetricsGet.  # noqa: E501

        Number of secure bytes removed  # noqa: E501

        :return: The secure_removed_bytes of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_removed_bytes

    @secure_removed_bytes.setter
    def secure_removed_bytes(self, secure_removed_bytes):
        """Sets the secure_removed_bytes of this HkMetricsGet.

        Number of secure bytes removed  # noqa: E501

        :param secure_removed_bytes: The secure_removed_bytes of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_removed_bytes = secure_removed_bytes

    @property
    def secure_removed_duration_microseconds(self):
        """Gets the secure_removed_duration_microseconds of this HkMetricsGet.  # noqa: E501

        Time spent removing secure bytes  # noqa: E501

        :return: The secure_removed_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_removed_duration_microseconds

    @secure_removed_duration_microseconds.setter
    def secure_removed_duration_microseconds(self, secure_removed_duration_microseconds):
        """Sets the secure_removed_duration_microseconds of this HkMetricsGet.

        Time spent removing secure bytes  # noqa: E501

        :param secure_removed_duration_microseconds: The secure_removed_duration_microseconds of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_removed_duration_microseconds = secure_removed_duration_microseconds

    @property
    def secure_jobs_processed(self):
        """Gets the secure_jobs_processed of this HkMetricsGet.  # noqa: E501

        Number of secure jobs processed  # noqa: E501

        :return: The secure_jobs_processed of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_jobs_processed

    @secure_jobs_processed.setter
    def secure_jobs_processed(self, secure_jobs_processed):
        """Sets the secure_jobs_processed of this HkMetricsGet.

        Number of secure jobs processed  # noqa: E501

        :param secure_jobs_processed: The secure_jobs_processed of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_jobs_processed = secure_jobs_processed

    @property
    def secure_jobs_received(self):
        """Gets the secure_jobs_received of this HkMetricsGet.  # noqa: E501

        Number of secure jobs received  # noqa: E501

        :return: The secure_jobs_received of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_jobs_received

    @secure_jobs_received.setter
    def secure_jobs_received(self, secure_jobs_received):
        """Sets the secure_jobs_received of this HkMetricsGet.

        Number of secure jobs received  # noqa: E501

        :param secure_jobs_received: The secure_jobs_received of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_jobs_received = secure_jobs_received

    @property
    def secure_queue_size(self):
        """Gets the secure_queue_size of this HkMetricsGet.  # noqa: E501

        Secure queue size  # noqa: E501

        :return: The secure_queue_size of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._secure_queue_size

    @secure_queue_size.setter
    def secure_queue_size(self, secure_queue_size):
        """Sets the secure_queue_size of this HkMetricsGet.

        Secure queue size  # noqa: E501

        :param secure_queue_size: The secure_queue_size of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._secure_queue_size = secure_queue_size

    @property
    def store_id(self):
        """Gets the store_id of this HkMetricsGet.  # noqa: E501

        Store ID  # noqa: E501

        :return: The store_id of this HkMetricsGet.  # noqa: E501
        :rtype: int
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this HkMetricsGet.

        Store ID  # noqa: E501

        :param store_id: The store_id of this HkMetricsGet.  # noqa: E501
        :type: int
        """

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HkMetricsGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HkMetricsGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
