# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorageOperationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_state': 'int',
        'operation_state_string': 'str',
        'started_date': 'datetime',
        'completed_date': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'operation_state': 'operationState',
        'operation_state_string': 'operationStateString',
        'started_date': 'startedDate',
        'completed_date': 'completedDate',
        'status': 'status'
    }

    def __init__(self, operation_state=None, operation_state_string=None, started_date=None, completed_date=None, status=None):  # noqa: E501
        """StorageOperationStatus - a model defined in Swagger"""  # noqa: E501

        self._operation_state = None
        self._operation_state_string = None
        self._started_date = None
        self._completed_date = None
        self._status = None
        self.discriminator = None

        self.operation_state = operation_state
        if operation_state_string is not None:
            self.operation_state_string = operation_state_string
        if started_date is not None:
            self.started_date = started_date
        if completed_date is not None:
            self.completed_date = completed_date
        if status is not None:
            self.status = status

    @property
    def operation_state(self):
        """Gets the operation_state of this StorageOperationStatus.  # noqa: E501

        State of storage operation  # noqa: E501

        :return: The operation_state of this StorageOperationStatus.  # noqa: E501
        :rtype: int
        """
        return self._operation_state

    @operation_state.setter
    def operation_state(self, operation_state):
        """Sets the operation_state of this StorageOperationStatus.

        State of storage operation  # noqa: E501

        :param operation_state: The operation_state of this StorageOperationStatus.  # noqa: E501
        :type: int
        """
        if operation_state is None:
            raise ValueError("Invalid value for `operation_state`, must not be `None`")  # noqa: E501

        self._operation_state = operation_state

    @property
    def operation_state_string(self):
        """Gets the operation_state_string of this StorageOperationStatus.  # noqa: E501

        Localised string representation of the operation state  # noqa: E501

        :return: The operation_state_string of this StorageOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._operation_state_string

    @operation_state_string.setter
    def operation_state_string(self, operation_state_string):
        """Sets the operation_state_string of this StorageOperationStatus.

        Localised string representation of the operation state  # noqa: E501

        :param operation_state_string: The operation_state_string of this StorageOperationStatus.  # noqa: E501
        :type: str
        """

        self._operation_state_string = operation_state_string

    @property
    def started_date(self):
        """Gets the started_date of this StorageOperationStatus.  # noqa: E501

        Time at which the last creation or expansion operation started  # noqa: E501

        :return: The started_date of this StorageOperationStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._started_date

    @started_date.setter
    def started_date(self, started_date):
        """Sets the started_date of this StorageOperationStatus.

        Time at which the last creation or expansion operation started  # noqa: E501

        :param started_date: The started_date of this StorageOperationStatus.  # noqa: E501
        :type: datetime
        """

        self._started_date = started_date

    @property
    def completed_date(self):
        """Gets the completed_date of this StorageOperationStatus.  # noqa: E501

        Time at which the last creation or expansion ended  # noqa: E501

        :return: The completed_date of this StorageOperationStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this StorageOperationStatus.

        Time at which the last creation or expansion ended  # noqa: E501

        :param completed_date: The completed_date of this StorageOperationStatus.  # noqa: E501
        :type: datetime
        """

        self._completed_date = completed_date

    @property
    def status(self):
        """Gets the status of this StorageOperationStatus.  # noqa: E501

        Shows extra status operation about the ongoing or last run storage operation  # noqa: E501

        :return: The status of this StorageOperationStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StorageOperationStatus.

        Shows extra status operation about the ongoing or last run storage operation  # noqa: E501

        :param status: The status of this StorageOperationStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageOperationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageOperationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
