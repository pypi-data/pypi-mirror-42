# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Storage

    unused  # noqa: E501

    Component version: 4.3.12-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ThresholdProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentage_threshold': 'int',
        'threshold_level_string': 'str',
        'threshold_level': 'int'
    }

    attribute_map = {
        'percentage_threshold': 'percentageThreshold',
        'threshold_level_string': 'thresholdLevelString',
        'threshold_level': 'thresholdLevel'
    }

    def __init__(self, percentage_threshold=None, threshold_level_string=None, threshold_level=None):  # noqa: E501
        """ThresholdProperties - a model defined in Swagger"""  # noqa: E501

        self._percentage_threshold = None
        self._threshold_level_string = None
        self._threshold_level = None
        self.discriminator = None

        self.percentage_threshold = percentage_threshold
        if threshold_level_string is not None:
            self.threshold_level_string = threshold_level_string
        self.threshold_level = threshold_level

    @property
    def percentage_threshold(self):
        """Gets the percentage_threshold of this ThresholdProperties.  # noqa: E501

        Defines the percentage of the used capacity required to trigger the threshold event  # noqa: E501

        :return: The percentage_threshold of this ThresholdProperties.  # noqa: E501
        :rtype: int
        """
        return self._percentage_threshold

    @percentage_threshold.setter
    def percentage_threshold(self, percentage_threshold):
        """Sets the percentage_threshold of this ThresholdProperties.

        Defines the percentage of the used capacity required to trigger the threshold event  # noqa: E501

        :param percentage_threshold: The percentage_threshold of this ThresholdProperties.  # noqa: E501
        :type: int
        """
        if percentage_threshold is None:
            raise ValueError("Invalid value for `percentage_threshold`, must not be `None`")  # noqa: E501

        self._percentage_threshold = percentage_threshold

    @property
    def threshold_level_string(self):
        """Gets the threshold_level_string of this ThresholdProperties.  # noqa: E501

        Localised representation of the threshold event level  # noqa: E501

        :return: The threshold_level_string of this ThresholdProperties.  # noqa: E501
        :rtype: str
        """
        return self._threshold_level_string

    @threshold_level_string.setter
    def threshold_level_string(self, threshold_level_string):
        """Sets the threshold_level_string of this ThresholdProperties.

        Localised representation of the threshold event level  # noqa: E501

        :param threshold_level_string: The threshold_level_string of this ThresholdProperties.  # noqa: E501
        :type: str
        """

        self._threshold_level_string = threshold_level_string

    @property
    def threshold_level(self):
        """Gets the threshold_level of this ThresholdProperties.  # noqa: E501

        Level of the event to raise when the threshold is triggered  # noqa: E501

        :return: The threshold_level of this ThresholdProperties.  # noqa: E501
        :rtype: int
        """
        return self._threshold_level

    @threshold_level.setter
    def threshold_level(self, threshold_level):
        """Sets the threshold_level of this ThresholdProperties.

        Level of the event to raise when the threshold is triggered  # noqa: E501

        :param threshold_level: The threshold_level of this ThresholdProperties.  # noqa: E501
        :type: int
        """
        if threshold_level is None:
            raise ValueError("Invalid value for `threshold_level`, must not be `None`")  # noqa: E501

        self._threshold_level = threshold_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThresholdProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThresholdProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
