# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Fibre Channel

    unused  # noqa: E501

    Component version: 3.0.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ModifyFcPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configured_speed': 'int',
        'beacon_enabled': 'bool',
        'topology': 'int'
    }

    attribute_map = {
        'configured_speed': 'configuredSpeed',
        'beacon_enabled': 'beaconEnabled',
        'topology': 'topology'
    }

    def __init__(self, configured_speed=None, beacon_enabled=False, topology=None):  # noqa: E501
        """ModifyFcPort - a model defined in Swagger"""  # noqa: E501

        self._configured_speed = None
        self._beacon_enabled = None
        self._topology = None
        self.discriminator = None

        if configured_speed is not None:
            self.configured_speed = configured_speed
        if beacon_enabled is not None:
            self.beacon_enabled = beacon_enabled
        if topology is not None:
            self.topology = topology

    @property
    def configured_speed(self):
        """Gets the configured_speed of this ModifyFcPort.  # noqa: E501

        Configured speed to use.  # noqa: E501

        :return: The configured_speed of this ModifyFcPort.  # noqa: E501
        :rtype: int
        """
        return self._configured_speed

    @configured_speed.setter
    def configured_speed(self, configured_speed):
        """Sets the configured_speed of this ModifyFcPort.

        Configured speed to use.  # noqa: E501

        :param configured_speed: The configured_speed of this ModifyFcPort.  # noqa: E501
        :type: int
        """

        self._configured_speed = configured_speed

    @property
    def beacon_enabled(self):
        """Gets the beacon_enabled of this ModifyFcPort.  # noqa: E501

        Enable/Disable the beacon on the port.  # noqa: E501

        :return: The beacon_enabled of this ModifyFcPort.  # noqa: E501
        :rtype: bool
        """
        return self._beacon_enabled

    @beacon_enabled.setter
    def beacon_enabled(self, beacon_enabled):
        """Sets the beacon_enabled of this ModifyFcPort.

        Enable/Disable the beacon on the port.  # noqa: E501

        :param beacon_enabled: The beacon_enabled of this ModifyFcPort.  # noqa: E501
        :type: bool
        """

        self._beacon_enabled = beacon_enabled

    @property
    def topology(self):
        """Gets the topology of this ModifyFcPort.  # noqa: E501

        Configured topology to use.  # noqa: E501

        :return: The topology of this ModifyFcPort.  # noqa: E501
        :rtype: int
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """Sets the topology of this ModifyFcPort.

        Configured topology to use.  # noqa: E501

        :param topology: The topology of this ModifyFcPort.  # noqa: E501
        :type: int
        """

        self._topology = topology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyFcPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyFcPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
