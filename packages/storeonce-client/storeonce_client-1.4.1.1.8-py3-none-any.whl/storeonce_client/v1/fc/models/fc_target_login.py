# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Fibre Channel

    unused  # noqa: E501

    Component version: 3.0.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FcTargetLogin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fcid': 'str',
        'wwnn': 'str',
        'wwpn': 'str',
        'num_aborts': 'int',
        'num_retransmissions': 'int'
    }

    attribute_map = {
        'fcid': 'fcid',
        'wwnn': 'wwnn',
        'wwpn': 'wwpn',
        'num_aborts': 'numAborts',
        'num_retransmissions': 'numRetransmissions'
    }

    def __init__(self, fcid=None, wwnn=None, wwpn=None, num_aborts=None, num_retransmissions=None):  # noqa: E501
        """FcTargetLogin - a model defined in Swagger"""  # noqa: E501

        self._fcid = None
        self._wwnn = None
        self._wwpn = None
        self._num_aborts = None
        self._num_retransmissions = None
        self.discriminator = None

        if fcid is not None:
            self.fcid = fcid
        if wwnn is not None:
            self.wwnn = wwnn
        if wwpn is not None:
            self.wwpn = wwpn
        if num_aborts is not None:
            self.num_aborts = num_aborts
        if num_retransmissions is not None:
            self.num_retransmissions = num_retransmissions

    @property
    def fcid(self):
        """Gets the fcid of this FcTargetLogin.  # noqa: E501

        Hexadecimal string representing the FCID of the logged in device.  # noqa: E501

        :return: The fcid of this FcTargetLogin.  # noqa: E501
        :rtype: str
        """
        return self._fcid

    @fcid.setter
    def fcid(self, fcid):
        """Sets the fcid of this FcTargetLogin.

        Hexadecimal string representing the FCID of the logged in device.  # noqa: E501

        :param fcid: The fcid of this FcTargetLogin.  # noqa: E501
        :type: str
        """

        self._fcid = fcid

    @property
    def wwnn(self):
        """Gets the wwnn of this FcTargetLogin.  # noqa: E501

        World Wide Node Name of the logged in device.  # noqa: E501

        :return: The wwnn of this FcTargetLogin.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this FcTargetLogin.

        World Wide Node Name of the logged in device.  # noqa: E501

        :param wwnn: The wwnn of this FcTargetLogin.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def wwpn(self):
        """Gets the wwpn of this FcTargetLogin.  # noqa: E501

        World Wide Port Name of the logged in device.  # noqa: E501

        :return: The wwpn of this FcTargetLogin.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this FcTargetLogin.

        World Wide Port Name of the logged in device.  # noqa: E501

        :param wwpn: The wwpn of this FcTargetLogin.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    @property
    def num_aborts(self):
        """Gets the num_aborts of this FcTargetLogin.  # noqa: E501

        Number of Aborts (ABTS) that have been received from this device.  # noqa: E501

        :return: The num_aborts of this FcTargetLogin.  # noqa: E501
        :rtype: int
        """
        return self._num_aborts

    @num_aborts.setter
    def num_aborts(self, num_aborts):
        """Sets the num_aborts of this FcTargetLogin.

        Number of Aborts (ABTS) that have been received from this device.  # noqa: E501

        :param num_aborts: The num_aborts of this FcTargetLogin.  # noqa: E501
        :type: int
        """

        self._num_aborts = num_aborts

    @property
    def num_retransmissions(self):
        """Gets the num_retransmissions of this FcTargetLogin.  # noqa: E501

        Number of Selective Retransmission Requests (SRR) that have been received from this device.  # noqa: E501

        :return: The num_retransmissions of this FcTargetLogin.  # noqa: E501
        :rtype: int
        """
        return self._num_retransmissions

    @num_retransmissions.setter
    def num_retransmissions(self, num_retransmissions):
        """Sets the num_retransmissions of this FcTargetLogin.

        Number of Selective Retransmission Requests (SRR) that have been received from this device.  # noqa: E501

        :param num_retransmissions: The num_retransmissions of this FcTargetLogin.  # noqa: E501
        :type: int
        """

        self._num_retransmissions = num_retransmissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FcTargetLogin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FcTargetLogin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
