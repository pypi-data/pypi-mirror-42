# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Fibre Channel

    unused  # noqa: E501

    Component version: 3.0.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FcTarget(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_id': 'int',
        'wwnn': 'str',
        'wwpn': 'str',
        'fcid': 'str',
        'fcid_state': 'int',
        'fcid_state_string': 'L10nStringStruct',
        'max_logins_reached': 'bool',
        'num_logins': 'int',
        'device_url': 'str'
    }

    attribute_map = {
        'port_id': 'portId',
        'wwnn': 'wwnn',
        'wwpn': 'wwpn',
        'fcid': 'fcid',
        'fcid_state': 'fcidState',
        'fcid_state_string': 'fcidStateString',
        'max_logins_reached': 'maxLoginsReached',
        'num_logins': 'numLogins',
        'device_url': 'deviceUrl'
    }

    def __init__(self, port_id=None, wwnn=None, wwpn=None, fcid=None, fcid_state=None, fcid_state_string=None, max_logins_reached=False, num_logins=None, device_url=None):  # noqa: E501
        """FcTarget - a model defined in Swagger"""  # noqa: E501

        self._port_id = None
        self._wwnn = None
        self._wwpn = None
        self._fcid = None
        self._fcid_state = None
        self._fcid_state_string = None
        self._max_logins_reached = None
        self._num_logins = None
        self._device_url = None
        self.discriminator = None

        if port_id is not None:
            self.port_id = port_id
        if wwnn is not None:
            self.wwnn = wwnn
        if wwpn is not None:
            self.wwpn = wwpn
        if fcid is not None:
            self.fcid = fcid
        if fcid_state is not None:
            self.fcid_state = fcid_state
        if fcid_state_string is not None:
            self.fcid_state_string = fcid_state_string
        if max_logins_reached is not None:
            self.max_logins_reached = max_logins_reached
        if num_logins is not None:
            self.num_logins = num_logins
        if device_url is not None:
            self.device_url = device_url

    @property
    def port_id(self):
        """Gets the port_id of this FcTarget.  # noqa: E501

        ID of the FC Port that the target is on.  # noqa: E501

        :return: The port_id of this FcTarget.  # noqa: E501
        :rtype: int
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this FcTarget.

        ID of the FC Port that the target is on.  # noqa: E501

        :param port_id: The port_id of this FcTarget.  # noqa: E501
        :type: int
        """

        self._port_id = port_id

    @property
    def wwnn(self):
        """Gets the wwnn of this FcTarget.  # noqa: E501

        World Wide Node Name of the target.  # noqa: E501

        :return: The wwnn of this FcTarget.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this FcTarget.

        World Wide Node Name of the target.  # noqa: E501

        :param wwnn: The wwnn of this FcTarget.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def wwpn(self):
        """Gets the wwpn of this FcTarget.  # noqa: E501

        World Wide Port Name of the target.  # noqa: E501

        :return: The wwpn of this FcTarget.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this FcTarget.

        World Wide Port Name of the target.  # noqa: E501

        :param wwpn: The wwpn of this FcTarget.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    @property
    def fcid(self):
        """Gets the fcid of this FcTarget.  # noqa: E501

        Hexadecimal string representing the FCID of the target. Valid only if the target is logged in.  # noqa: E501

        :return: The fcid of this FcTarget.  # noqa: E501
        :rtype: str
        """
        return self._fcid

    @fcid.setter
    def fcid(self, fcid):
        """Sets the fcid of this FcTarget.

        Hexadecimal string representing the FCID of the target. Valid only if the target is logged in.  # noqa: E501

        :param fcid: The fcid of this FcTarget.  # noqa: E501
        :type: str
        """

        self._fcid = fcid

    @property
    def fcid_state(self):
        """Gets the fcid_state of this FcTarget.  # noqa: E501

        Representation of the current state of the FCID. If no FCID has been acquired, this will provide more information as to why this occurred.  # noqa: E501

        :return: The fcid_state of this FcTarget.  # noqa: E501
        :rtype: int
        """
        return self._fcid_state

    @fcid_state.setter
    def fcid_state(self, fcid_state):
        """Sets the fcid_state of this FcTarget.

        Representation of the current state of the FCID. If no FCID has been acquired, this will provide more information as to why this occurred.  # noqa: E501

        :param fcid_state: The fcid_state of this FcTarget.  # noqa: E501
        :type: int
        """

        self._fcid_state = fcid_state

    @property
    def fcid_state_string(self):
        """Gets the fcid_state_string of this FcTarget.  # noqa: E501

        Localised version of fcidState.  # noqa: E501

        :return: The fcid_state_string of this FcTarget.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._fcid_state_string

    @fcid_state_string.setter
    def fcid_state_string(self, fcid_state_string):
        """Sets the fcid_state_string of this FcTarget.

        Localised version of fcidState.  # noqa: E501

        :param fcid_state_string: The fcid_state_string of this FcTarget.  # noqa: E501
        :type: L10nStringStruct
        """

        self._fcid_state_string = fcid_state_string

    @property
    def max_logins_reached(self):
        """Gets the max_logins_reached of this FcTarget.  # noqa: E501

        Has the target reached the maximum number of logins it can support?  # noqa: E501

        :return: The max_logins_reached of this FcTarget.  # noqa: E501
        :rtype: bool
        """
        return self._max_logins_reached

    @max_logins_reached.setter
    def max_logins_reached(self, max_logins_reached):
        """Sets the max_logins_reached of this FcTarget.

        Has the target reached the maximum number of logins it can support?  # noqa: E501

        :param max_logins_reached: The max_logins_reached of this FcTarget.  # noqa: E501
        :type: bool
        """

        self._max_logins_reached = max_logins_reached

    @property
    def num_logins(self):
        """Gets the num_logins of this FcTarget.  # noqa: E501

        Number of initiators currently logged into the device.  # noqa: E501

        :return: The num_logins of this FcTarget.  # noqa: E501
        :rtype: int
        """
        return self._num_logins

    @num_logins.setter
    def num_logins(self, num_logins):
        """Sets the num_logins of this FcTarget.

        Number of initiators currently logged into the device.  # noqa: E501

        :param num_logins: The num_logins of this FcTarget.  # noqa: E501
        :type: int
        """

        self._num_logins = num_logins

    @property
    def device_url(self):
        """Gets the device_url of this FcTarget.  # noqa: E501

        URL to follow to find more information about the device.  # noqa: E501

        :return: The device_url of this FcTarget.  # noqa: E501
        :rtype: str
        """
        return self._device_url

    @device_url.setter
    def device_url(self, device_url):
        """Sets the device_url of this FcTarget.

        URL to follow to find more information about the device.  # noqa: E501

        :param device_url: The device_url of this FcTarget.  # noqa: E501
        :type: str
        """

        self._device_url = device_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FcTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FcTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
