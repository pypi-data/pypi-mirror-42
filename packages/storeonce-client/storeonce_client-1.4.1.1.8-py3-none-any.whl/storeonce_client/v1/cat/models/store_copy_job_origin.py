# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StoreCopyJobOrigin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'address': 'str',
        'serial_number': 'str',
        'store_name': 'str',
        'item_name': 'str',
        'user_bytes': 'int',
        'data_modified_date': 'datetime',
        'copy_size_bytes': 'int',
        'copy_offset_bytes': 'int',
        'fixed_block_size_bytes': 'int',
        'storage_mode': 'int',
        'storage_mode_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'address': 'address',
        'serial_number': 'serialNumber',
        'store_name': 'storeName',
        'item_name': 'itemName',
        'user_bytes': 'userBytes',
        'data_modified_date': 'dataModifiedDate',
        'copy_size_bytes': 'copySizeBytes',
        'copy_offset_bytes': 'copyOffsetBytes',
        'fixed_block_size_bytes': 'fixedBlockSizeBytes',
        'storage_mode': 'storageMode',
        'storage_mode_string': 'storageModeString'
    }

    def __init__(self, id=None, address=None, serial_number=None, store_name=None, item_name=None, user_bytes=None, data_modified_date=None, copy_size_bytes=None, copy_offset_bytes=None, fixed_block_size_bytes=None, storage_mode=None, storage_mode_string=None):  # noqa: E501
        """StoreCopyJobOrigin - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._address = None
        self._serial_number = None
        self._store_name = None
        self._item_name = None
        self._user_bytes = None
        self._data_modified_date = None
        self._copy_size_bytes = None
        self._copy_offset_bytes = None
        self._fixed_block_size_bytes = None
        self._storage_mode = None
        self._storage_mode_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if serial_number is not None:
            self.serial_number = serial_number
        if store_name is not None:
            self.store_name = store_name
        if item_name is not None:
            self.item_name = item_name
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if data_modified_date is not None:
            self.data_modified_date = data_modified_date
        if copy_size_bytes is not None:
            self.copy_size_bytes = copy_size_bytes
        if copy_offset_bytes is not None:
            self.copy_offset_bytes = copy_offset_bytes
        if fixed_block_size_bytes is not None:
            self.fixed_block_size_bytes = fixed_block_size_bytes
        if storage_mode is not None:
            self.storage_mode = storage_mode
        if storage_mode_string is not None:
            self.storage_mode_string = storage_mode_string

    @property
    def id(self):
        """Gets the id of this StoreCopyJobOrigin.  # noqa: E501

        Unique ID for the copyjob at the origin  # noqa: E501

        :return: The id of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreCopyJobOrigin.

        Unique ID for the copyjob at the origin  # noqa: E501

        :param id: The id of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this StoreCopyJobOrigin.  # noqa: E501

        The IP Address or FQDN of the source appliance  # noqa: E501

        :return: The address of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StoreCopyJobOrigin.

        The IP Address or FQDN of the source appliance  # noqa: E501

        :param address: The address of this StoreCopyJobOrigin.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def serial_number(self):
        """Gets the serial_number of this StoreCopyJobOrigin.  # noqa: E501

        The serial number of the source appliance  # noqa: E501

        :return: The serial_number of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this StoreCopyJobOrigin.

        The serial number of the source appliance  # noqa: E501

        :param serial_number: The serial_number of this StoreCopyJobOrigin.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def store_name(self):
        """Gets the store_name of this StoreCopyJobOrigin.  # noqa: E501

        The name of the source store  # noqa: E501

        :return: The store_name of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this StoreCopyJobOrigin.

        The name of the source store  # noqa: E501

        :param store_name: The store_name of this StoreCopyJobOrigin.  # noqa: E501
        :type: str
        """

        self._store_name = store_name

    @property
    def item_name(self):
        """Gets the item_name of this StoreCopyJobOrigin.  # noqa: E501

        The name of the source item  # noqa: E501

        :return: The item_name of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this StoreCopyJobOrigin.

        The name of the source item  # noqa: E501

        :param item_name: The item_name of this StoreCopyJobOrigin.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def user_bytes(self):
        """Gets the user_bytes of this StoreCopyJobOrigin.  # noqa: E501

        The size of the source item  # noqa: E501

        :return: The user_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this StoreCopyJobOrigin.

        The size of the source item  # noqa: E501

        :param user_bytes: The user_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def data_modified_date(self):
        """Gets the data_modified_date of this StoreCopyJobOrigin.  # noqa: E501

        The date that the source object was last modified  # noqa: E501

        :return: The data_modified_date of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: datetime
        """
        return self._data_modified_date

    @data_modified_date.setter
    def data_modified_date(self, data_modified_date):
        """Sets the data_modified_date of this StoreCopyJobOrigin.

        The date that the source object was last modified  # noqa: E501

        :param data_modified_date: The data_modified_date of this StoreCopyJobOrigin.  # noqa: E501
        :type: datetime
        """

        self._data_modified_date = data_modified_date

    @property
    def copy_size_bytes(self):
        """Gets the copy_size_bytes of this StoreCopyJobOrigin.  # noqa: E501

        The size of the data to be copied  # noqa: E501

        :return: The copy_size_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._copy_size_bytes

    @copy_size_bytes.setter
    def copy_size_bytes(self, copy_size_bytes):
        """Sets the copy_size_bytes of this StoreCopyJobOrigin.

        The size of the data to be copied  # noqa: E501

        :param copy_size_bytes: The copy_size_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._copy_size_bytes = copy_size_bytes

    @property
    def copy_offset_bytes(self):
        """Gets the copy_offset_bytes of this StoreCopyJobOrigin.  # noqa: E501

        The offset within the source item from which to start the copy  # noqa: E501

        :return: The copy_offset_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._copy_offset_bytes

    @copy_offset_bytes.setter
    def copy_offset_bytes(self, copy_offset_bytes):
        """Sets the copy_offset_bytes of this StoreCopyJobOrigin.

        The offset within the source item from which to start the copy  # noqa: E501

        :param copy_offset_bytes: The copy_offset_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._copy_offset_bytes = copy_offset_bytes

    @property
    def fixed_block_size_bytes(self):
        """Gets the fixed_block_size_bytes of this StoreCopyJobOrigin.  # noqa: E501

        The size of the fixed block dedupe  # noqa: E501

        :return: The fixed_block_size_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._fixed_block_size_bytes

    @fixed_block_size_bytes.setter
    def fixed_block_size_bytes(self, fixed_block_size_bytes):
        """Sets the fixed_block_size_bytes of this StoreCopyJobOrigin.

        The size of the fixed block dedupe  # noqa: E501

        :param fixed_block_size_bytes: The fixed_block_size_bytes of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._fixed_block_size_bytes = fixed_block_size_bytes

    @property
    def storage_mode(self):
        """Gets the storage_mode of this StoreCopyJobOrigin.  # noqa: E501

        Storage mode  # noqa: E501

        :return: The storage_mode of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: int
        """
        return self._storage_mode

    @storage_mode.setter
    def storage_mode(self, storage_mode):
        """Sets the storage_mode of this StoreCopyJobOrigin.

        Storage mode  # noqa: E501

        :param storage_mode: The storage_mode of this StoreCopyJobOrigin.  # noqa: E501
        :type: int
        """

        self._storage_mode = storage_mode

    @property
    def storage_mode_string(self):
        """Gets the storage_mode_string of this StoreCopyJobOrigin.  # noqa: E501

        Localised representation of the storage mode  # noqa: E501

        :return: The storage_mode_string of this StoreCopyJobOrigin.  # noqa: E501
        :rtype: str
        """
        return self._storage_mode_string

    @storage_mode_string.setter
    def storage_mode_string(self, storage_mode_string):
        """Sets the storage_mode_string of this StoreCopyJobOrigin.

        Localised representation of the storage mode  # noqa: E501

        :param storage_mode_string: The storage_mode_string of this StoreCopyJobOrigin.  # noqa: E501
        :type: str
        """

        self._storage_mode_string = storage_mode_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoreCopyJobOrigin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreCopyJobOrigin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
