# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CloudConnectivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid_proxy': 'bool',
        'valid_host': 'bool',
        'valid_credentials': 'bool',
        'trusted_encryption_certificate': 'bool',
        'can_put_object': 'bool',
        'can_get_object': 'bool',
        'can_get_objects': 'bool',
        'can_delete_object': 'bool'
    }

    attribute_map = {
        'valid_proxy': 'validProxy',
        'valid_host': 'validHost',
        'valid_credentials': 'validCredentials',
        'trusted_encryption_certificate': 'trustedEncryptionCertificate',
        'can_put_object': 'canPutObject',
        'can_get_object': 'canGetObject',
        'can_get_objects': 'canGetObjects',
        'can_delete_object': 'canDeleteObject'
    }

    def __init__(self, valid_proxy=False, valid_host=False, valid_credentials=False, trusted_encryption_certificate=False, can_put_object=False, can_get_object=False, can_get_objects=False, can_delete_object=False):  # noqa: E501
        """CloudConnectivity - a model defined in Swagger"""  # noqa: E501

        self._valid_proxy = None
        self._valid_host = None
        self._valid_credentials = None
        self._trusted_encryption_certificate = None
        self._can_put_object = None
        self._can_get_object = None
        self._can_get_objects = None
        self._can_delete_object = None
        self.discriminator = None

        if valid_proxy is not None:
            self.valid_proxy = valid_proxy
        if valid_host is not None:
            self.valid_host = valid_host
        if valid_credentials is not None:
            self.valid_credentials = valid_credentials
        if trusted_encryption_certificate is not None:
            self.trusted_encryption_certificate = trusted_encryption_certificate
        if can_put_object is not None:
            self.can_put_object = can_put_object
        if can_get_object is not None:
            self.can_get_object = can_get_object
        if can_get_objects is not None:
            self.can_get_objects = can_get_objects
        if can_delete_object is not None:
            self.can_delete_object = can_delete_object

    @property
    def valid_proxy(self):
        """Gets the valid_proxy of this CloudConnectivity.  # noqa: E501

        True if connection to cloud provider does not return proxy error  # noqa: E501

        :return: The valid_proxy of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._valid_proxy

    @valid_proxy.setter
    def valid_proxy(self, valid_proxy):
        """Sets the valid_proxy of this CloudConnectivity.

        True if connection to cloud provider does not return proxy error  # noqa: E501

        :param valid_proxy: The valid_proxy of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._valid_proxy = valid_proxy

    @property
    def valid_host(self):
        """Gets the valid_host of this CloudConnectivity.  # noqa: E501

        True if host address/port can be reached  # noqa: E501

        :return: The valid_host of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._valid_host

    @valid_host.setter
    def valid_host(self, valid_host):
        """Sets the valid_host of this CloudConnectivity.

        True if host address/port can be reached  # noqa: E501

        :param valid_host: The valid_host of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._valid_host = valid_host

    @property
    def valid_credentials(self):
        """Gets the valid_credentials of this CloudConnectivity.  # noqa: E501

        True if credentials are valid and can connect successfully  # noqa: E501

        :return: The valid_credentials of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._valid_credentials

    @valid_credentials.setter
    def valid_credentials(self, valid_credentials):
        """Sets the valid_credentials of this CloudConnectivity.

        True if credentials are valid and can connect successfully  # noqa: E501

        :param valid_credentials: The valid_credentials of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._valid_credentials = valid_credentials

    @property
    def trusted_encryption_certificate(self):
        """Gets the trusted_encryption_certificate of this CloudConnectivity.  # noqa: E501

        True if the certificate for the given cloud provider is trusted  # noqa: E501

        :return: The trusted_encryption_certificate of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._trusted_encryption_certificate

    @trusted_encryption_certificate.setter
    def trusted_encryption_certificate(self, trusted_encryption_certificate):
        """Sets the trusted_encryption_certificate of this CloudConnectivity.

        True if the certificate for the given cloud provider is trusted  # noqa: E501

        :param trusted_encryption_certificate: The trusted_encryption_certificate of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._trusted_encryption_certificate = trusted_encryption_certificate

    @property
    def can_put_object(self):
        """Gets the can_put_object of this CloudConnectivity.  # noqa: E501

        True if a successful PUT is executed  # noqa: E501

        :return: The can_put_object of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._can_put_object

    @can_put_object.setter
    def can_put_object(self, can_put_object):
        """Sets the can_put_object of this CloudConnectivity.

        True if a successful PUT is executed  # noqa: E501

        :param can_put_object: The can_put_object of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._can_put_object = can_put_object

    @property
    def can_get_object(self):
        """Gets the can_get_object of this CloudConnectivity.  # noqa: E501

        True if a successful GET is executed  # noqa: E501

        :return: The can_get_object of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._can_get_object

    @can_get_object.setter
    def can_get_object(self, can_get_object):
        """Sets the can_get_object of this CloudConnectivity.

        True if a successful GET is executed  # noqa: E501

        :param can_get_object: The can_get_object of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._can_get_object = can_get_object

    @property
    def can_get_objects(self):
        """Gets the can_get_objects of this CloudConnectivity.  # noqa: E501

        True if a successful list of objects is executed  # noqa: E501

        :return: The can_get_objects of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._can_get_objects

    @can_get_objects.setter
    def can_get_objects(self, can_get_objects):
        """Sets the can_get_objects of this CloudConnectivity.

        True if a successful list of objects is executed  # noqa: E501

        :param can_get_objects: The can_get_objects of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._can_get_objects = can_get_objects

    @property
    def can_delete_object(self):
        """Gets the can_delete_object of this CloudConnectivity.  # noqa: E501

        True if a successful DELETE is executed  # noqa: E501

        :return: The can_delete_object of this CloudConnectivity.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete_object

    @can_delete_object.setter
    def can_delete_object(self, can_delete_object):
        """Sets the can_delete_object of this CloudConnectivity.

        True if a successful DELETE is executed  # noqa: E501

        :param can_delete_object: The can_delete_object of this CloudConnectivity.  # noqa: E501
        :type: bool
        """

        self._can_delete_object = can_delete_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudConnectivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudConnectivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
