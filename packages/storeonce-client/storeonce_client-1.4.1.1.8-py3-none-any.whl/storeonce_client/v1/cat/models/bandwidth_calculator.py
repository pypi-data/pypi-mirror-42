# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class BandwidthCalculator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wan_speed_enum': 'int',
        'wan_speed_custom': 'int',
        'limit_percentage': 'int',
        'num_concurrent_jobs': 'int',
        'requested_limit_bytes': 'int',
        'threshold_limit_bytes': 'int',
        'below_threshold': 'bool'
    }

    attribute_map = {
        'wan_speed_enum': 'wanSpeedEnum',
        'wan_speed_custom': 'wanSpeedCustom',
        'limit_percentage': 'limitPercentage',
        'num_concurrent_jobs': 'numConcurrentJobs',
        'requested_limit_bytes': 'requestedLimitBytes',
        'threshold_limit_bytes': 'thresholdLimitBytes',
        'below_threshold': 'belowThreshold'
    }

    def __init__(self, wan_speed_enum=None, wan_speed_custom=None, limit_percentage=None, num_concurrent_jobs=None, requested_limit_bytes=None, threshold_limit_bytes=None, below_threshold=False):  # noqa: E501
        """BandwidthCalculator - a model defined in Swagger"""  # noqa: E501

        self._wan_speed_enum = None
        self._wan_speed_custom = None
        self._limit_percentage = None
        self._num_concurrent_jobs = None
        self._requested_limit_bytes = None
        self._threshold_limit_bytes = None
        self._below_threshold = None
        self.discriminator = None

        self.wan_speed_enum = wan_speed_enum
        self.wan_speed_custom = wan_speed_custom
        self.limit_percentage = limit_percentage
        self.num_concurrent_jobs = num_concurrent_jobs
        if requested_limit_bytes is not None:
            self.requested_limit_bytes = requested_limit_bytes
        if threshold_limit_bytes is not None:
            self.threshold_limit_bytes = threshold_limit_bytes
        if below_threshold is not None:
            self.below_threshold = below_threshold

    @property
    def wan_speed_enum(self):
        """Gets the wan_speed_enum of this BandwidthCalculator.  # noqa: E501

        The bandwidth of the WAN connection, chosen from a list of enum values  # noqa: E501

        :return: The wan_speed_enum of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._wan_speed_enum

    @wan_speed_enum.setter
    def wan_speed_enum(self, wan_speed_enum):
        """Sets the wan_speed_enum of this BandwidthCalculator.

        The bandwidth of the WAN connection, chosen from a list of enum values  # noqa: E501

        :param wan_speed_enum: The wan_speed_enum of this BandwidthCalculator.  # noqa: E501
        :type: int
        """
        if wan_speed_enum is None:
            raise ValueError("Invalid value for `wan_speed_enum`, must not be `None`")  # noqa: E501

        self._wan_speed_enum = wan_speed_enum

    @property
    def wan_speed_custom(self):
        """Gets the wan_speed_custom of this BandwidthCalculator.  # noqa: E501

        The user defined custom bandwidth of the WAN connection, used if custom is chosen for wanSpeedEnum  # noqa: E501

        :return: The wan_speed_custom of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._wan_speed_custom

    @wan_speed_custom.setter
    def wan_speed_custom(self, wan_speed_custom):
        """Sets the wan_speed_custom of this BandwidthCalculator.

        The user defined custom bandwidth of the WAN connection, used if custom is chosen for wanSpeedEnum  # noqa: E501

        :param wan_speed_custom: The wan_speed_custom of this BandwidthCalculator.  # noqa: E501
        :type: int
        """
        if wan_speed_custom is None:
            raise ValueError("Invalid value for `wan_speed_custom`, must not be `None`")  # noqa: E501

        self._wan_speed_custom = wan_speed_custom

    @property
    def limit_percentage(self):
        """Gets the limit_percentage of this BandwidthCalculator.  # noqa: E501

        The percentage of the available WAN bandwidth that should be used  # noqa: E501

        :return: The limit_percentage of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._limit_percentage

    @limit_percentage.setter
    def limit_percentage(self, limit_percentage):
        """Sets the limit_percentage of this BandwidthCalculator.

        The percentage of the available WAN bandwidth that should be used  # noqa: E501

        :param limit_percentage: The limit_percentage of this BandwidthCalculator.  # noqa: E501
        :type: int
        """
        if limit_percentage is None:
            raise ValueError("Invalid value for `limit_percentage`, must not be `None`")  # noqa: E501

        self._limit_percentage = limit_percentage

    @property
    def num_concurrent_jobs(self):
        """Gets the num_concurrent_jobs of this BandwidthCalculator.  # noqa: E501

        The number of concurrent copy jobs the user expects to run  # noqa: E501

        :return: The num_concurrent_jobs of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._num_concurrent_jobs

    @num_concurrent_jobs.setter
    def num_concurrent_jobs(self, num_concurrent_jobs):
        """Sets the num_concurrent_jobs of this BandwidthCalculator.

        The number of concurrent copy jobs the user expects to run  # noqa: E501

        :param num_concurrent_jobs: The num_concurrent_jobs of this BandwidthCalculator.  # noqa: E501
        :type: int
        """
        if num_concurrent_jobs is None:
            raise ValueError("Invalid value for `num_concurrent_jobs`, must not be `None`")  # noqa: E501

        self._num_concurrent_jobs = num_concurrent_jobs

    @property
    def requested_limit_bytes(self):
        """Gets the requested_limit_bytes of this BandwidthCalculator.  # noqa: E501

        The calculated recommended bandwidth limit  # noqa: E501

        :return: The requested_limit_bytes of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._requested_limit_bytes

    @requested_limit_bytes.setter
    def requested_limit_bytes(self, requested_limit_bytes):
        """Sets the requested_limit_bytes of this BandwidthCalculator.

        The calculated recommended bandwidth limit  # noqa: E501

        :param requested_limit_bytes: The requested_limit_bytes of this BandwidthCalculator.  # noqa: E501
        :type: int
        """

        self._requested_limit_bytes = requested_limit_bytes

    @property
    def threshold_limit_bytes(self):
        """Gets the threshold_limit_bytes of this BandwidthCalculator.  # noqa: E501

        The calculated threshold limit  # noqa: E501

        :return: The threshold_limit_bytes of this BandwidthCalculator.  # noqa: E501
        :rtype: int
        """
        return self._threshold_limit_bytes

    @threshold_limit_bytes.setter
    def threshold_limit_bytes(self, threshold_limit_bytes):
        """Sets the threshold_limit_bytes of this BandwidthCalculator.

        The calculated threshold limit  # noqa: E501

        :param threshold_limit_bytes: The threshold_limit_bytes of this BandwidthCalculator.  # noqa: E501
        :type: int
        """

        self._threshold_limit_bytes = threshold_limit_bytes

    @property
    def below_threshold(self):
        """Gets the below_threshold of this BandwidthCalculator.  # noqa: E501

        True if the recommended limit is lower than the threshold limit  # noqa: E501

        :return: The below_threshold of this BandwidthCalculator.  # noqa: E501
        :rtype: bool
        """
        return self._below_threshold

    @below_threshold.setter
    def below_threshold(self, below_threshold):
        """Sets the below_threshold of this BandwidthCalculator.

        True if the recommended limit is lower than the threshold limit  # noqa: E501

        :param below_threshold: The below_threshold of this BandwidthCalculator.  # noqa: E501
        :type: bool
        """

        self._below_threshold = below_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BandwidthCalculator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BandwidthCalculator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
