# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'health_level': 'int',
        'health_level_string': 'str',
        'cat_status': 'int',
        'cat_status_string': 'str',
        'max_outbound_copy_jobs': 'int',
        'max_data_and_inbound_copy_jobs': 'int',
        'max_protocol_version': 'int',
        'min_protocol_version': 'int',
        'num_remaining_stores': 'int',
        'cofc_supported': 'bool',
        'num_inbound_copyjob_sessions': 'int',
        'num_outbound_copyjob_sessions': 'int',
        'num_data_job_sessions': 'int',
        'cloud_capacity_bytes': 'int',
        'cloud_disk_bytes': 'int',
        'cloud_free_bytes': 'int',
        'cloud_user_bytes': 'int'
    }

    attribute_map = {
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'cat_status': 'catStatus',
        'cat_status_string': 'catStatusString',
        'max_outbound_copy_jobs': 'maxOutboundCopyJobs',
        'max_data_and_inbound_copy_jobs': 'maxDataAndInboundCopyJobs',
        'max_protocol_version': 'maxProtocolVersion',
        'min_protocol_version': 'minProtocolVersion',
        'num_remaining_stores': 'numRemainingStores',
        'cofc_supported': 'cofcSupported',
        'num_inbound_copyjob_sessions': 'numInboundCopyjobSessions',
        'num_outbound_copyjob_sessions': 'numOutboundCopyjobSessions',
        'num_data_job_sessions': 'numDataJobSessions',
        'cloud_capacity_bytes': 'cloudCapacityBytes',
        'cloud_disk_bytes': 'cloudDiskBytes',
        'cloud_free_bytes': 'cloudFreeBytes',
        'cloud_user_bytes': 'cloudUserBytes'
    }

    def __init__(self, health_level=None, health_level_string=None, cat_status=None, cat_status_string=None, max_outbound_copy_jobs=None, max_data_and_inbound_copy_jobs=None, max_protocol_version=None, min_protocol_version=None, num_remaining_stores=None, cofc_supported=False, num_inbound_copyjob_sessions=None, num_outbound_copyjob_sessions=None, num_data_job_sessions=None, cloud_capacity_bytes=None, cloud_disk_bytes=None, cloud_free_bytes=None, cloud_user_bytes=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501

        self._health_level = None
        self._health_level_string = None
        self._cat_status = None
        self._cat_status_string = None
        self._max_outbound_copy_jobs = None
        self._max_data_and_inbound_copy_jobs = None
        self._max_protocol_version = None
        self._min_protocol_version = None
        self._num_remaining_stores = None
        self._cofc_supported = None
        self._num_inbound_copyjob_sessions = None
        self._num_outbound_copyjob_sessions = None
        self._num_data_job_sessions = None
        self._cloud_capacity_bytes = None
        self._cloud_disk_bytes = None
        self._cloud_free_bytes = None
        self._cloud_user_bytes = None
        self.discriminator = None

        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if cat_status is not None:
            self.cat_status = cat_status
        if cat_status_string is not None:
            self.cat_status_string = cat_status_string
        if max_outbound_copy_jobs is not None:
            self.max_outbound_copy_jobs = max_outbound_copy_jobs
        if max_data_and_inbound_copy_jobs is not None:
            self.max_data_and_inbound_copy_jobs = max_data_and_inbound_copy_jobs
        if max_protocol_version is not None:
            self.max_protocol_version = max_protocol_version
        if min_protocol_version is not None:
            self.min_protocol_version = min_protocol_version
        if num_remaining_stores is not None:
            self.num_remaining_stores = num_remaining_stores
        if cofc_supported is not None:
            self.cofc_supported = cofc_supported
        if num_inbound_copyjob_sessions is not None:
            self.num_inbound_copyjob_sessions = num_inbound_copyjob_sessions
        if num_outbound_copyjob_sessions is not None:
            self.num_outbound_copyjob_sessions = num_outbound_copyjob_sessions
        if num_data_job_sessions is not None:
            self.num_data_job_sessions = num_data_job_sessions
        if cloud_capacity_bytes is not None:
            self.cloud_capacity_bytes = cloud_capacity_bytes
        if cloud_disk_bytes is not None:
            self.cloud_disk_bytes = cloud_disk_bytes
        if cloud_free_bytes is not None:
            self.cloud_free_bytes = cloud_free_bytes
        if cloud_user_bytes is not None:
            self.cloud_user_bytes = cloud_user_bytes

    @property
    def health_level(self):
        """Gets the health_level of this Service.  # noqa: E501

        The health level of the service  # noqa: E501

        :return: The health_level of this Service.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Service.

        The health level of the service  # noqa: E501

        :param health_level: The health_level of this Service.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Service.  # noqa: E501

        Localised string representing the health level  # noqa: E501

        :return: The health_level_string of this Service.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Service.

        Localised string representing the health level  # noqa: E501

        :param health_level_string: The health_level_string of this Service.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    @property
    def cat_status(self):
        """Gets the cat_status of this Service.  # noqa: E501

        Status of the service  # noqa: E501

        :return: The cat_status of this Service.  # noqa: E501
        :rtype: int
        """
        return self._cat_status

    @cat_status.setter
    def cat_status(self, cat_status):
        """Sets the cat_status of this Service.

        Status of the service  # noqa: E501

        :param cat_status: The cat_status of this Service.  # noqa: E501
        :type: int
        """

        self._cat_status = cat_status

    @property
    def cat_status_string(self):
        """Gets the cat_status_string of this Service.  # noqa: E501

        Localised string representing the service status  # noqa: E501

        :return: The cat_status_string of this Service.  # noqa: E501
        :rtype: str
        """
        return self._cat_status_string

    @cat_status_string.setter
    def cat_status_string(self, cat_status_string):
        """Sets the cat_status_string of this Service.

        Localised string representing the service status  # noqa: E501

        :param cat_status_string: The cat_status_string of this Service.  # noqa: E501
        :type: str
        """

        self._cat_status_string = cat_status_string

    @property
    def max_outbound_copy_jobs(self):
        """Gets the max_outbound_copy_jobs of this Service.  # noqa: E501

        Maximum concurrent outbound copyjobs that can occur  # noqa: E501

        :return: The max_outbound_copy_jobs of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_outbound_copy_jobs

    @max_outbound_copy_jobs.setter
    def max_outbound_copy_jobs(self, max_outbound_copy_jobs):
        """Sets the max_outbound_copy_jobs of this Service.

        Maximum concurrent outbound copyjobs that can occur  # noqa: E501

        :param max_outbound_copy_jobs: The max_outbound_copy_jobs of this Service.  # noqa: E501
        :type: int
        """

        self._max_outbound_copy_jobs = max_outbound_copy_jobs

    @property
    def max_data_and_inbound_copy_jobs(self):
        """Gets the max_data_and_inbound_copy_jobs of this Service.  # noqa: E501

        Maximum concurrent data and inbound copyjobs that can occur  # noqa: E501

        :return: The max_data_and_inbound_copy_jobs of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_data_and_inbound_copy_jobs

    @max_data_and_inbound_copy_jobs.setter
    def max_data_and_inbound_copy_jobs(self, max_data_and_inbound_copy_jobs):
        """Sets the max_data_and_inbound_copy_jobs of this Service.

        Maximum concurrent data and inbound copyjobs that can occur  # noqa: E501

        :param max_data_and_inbound_copy_jobs: The max_data_and_inbound_copy_jobs of this Service.  # noqa: E501
        :type: int
        """

        self._max_data_and_inbound_copy_jobs = max_data_and_inbound_copy_jobs

    @property
    def max_protocol_version(self):
        """Gets the max_protocol_version of this Service.  # noqa: E501

        Maximum protocol version supported  # noqa: E501

        :return: The max_protocol_version of this Service.  # noqa: E501
        :rtype: int
        """
        return self._max_protocol_version

    @max_protocol_version.setter
    def max_protocol_version(self, max_protocol_version):
        """Sets the max_protocol_version of this Service.

        Maximum protocol version supported  # noqa: E501

        :param max_protocol_version: The max_protocol_version of this Service.  # noqa: E501
        :type: int
        """

        self._max_protocol_version = max_protocol_version

    @property
    def min_protocol_version(self):
        """Gets the min_protocol_version of this Service.  # noqa: E501

        Minimum protocol version supported  # noqa: E501

        :return: The min_protocol_version of this Service.  # noqa: E501
        :rtype: int
        """
        return self._min_protocol_version

    @min_protocol_version.setter
    def min_protocol_version(self, min_protocol_version):
        """Sets the min_protocol_version of this Service.

        Minimum protocol version supported  # noqa: E501

        :param min_protocol_version: The min_protocol_version of this Service.  # noqa: E501
        :type: int
        """

        self._min_protocol_version = min_protocol_version

    @property
    def num_remaining_stores(self):
        """Gets the num_remaining_stores of this Service.  # noqa: E501

        Number of stores which can be created on this service set  # noqa: E501

        :return: The num_remaining_stores of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_remaining_stores

    @num_remaining_stores.setter
    def num_remaining_stores(self, num_remaining_stores):
        """Sets the num_remaining_stores of this Service.

        Number of stores which can be created on this service set  # noqa: E501

        :param num_remaining_stores: The num_remaining_stores of this Service.  # noqa: E501
        :type: int
        """

        self._num_remaining_stores = num_remaining_stores

    @property
    def cofc_supported(self):
        """Gets the cofc_supported of this Service.  # noqa: E501

        True if Catalyst over fibre channel is supported on this device  # noqa: E501

        :return: The cofc_supported of this Service.  # noqa: E501
        :rtype: bool
        """
        return self._cofc_supported

    @cofc_supported.setter
    def cofc_supported(self, cofc_supported):
        """Sets the cofc_supported of this Service.

        True if Catalyst over fibre channel is supported on this device  # noqa: E501

        :param cofc_supported: The cofc_supported of this Service.  # noqa: E501
        :type: bool
        """

        self._cofc_supported = cofc_supported

    @property
    def num_inbound_copyjob_sessions(self):
        """Gets the num_inbound_copyjob_sessions of this Service.  # noqa: E501

        Number of active inbound copy jobs on the appliance  # noqa: E501

        :return: The num_inbound_copyjob_sessions of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_inbound_copyjob_sessions

    @num_inbound_copyjob_sessions.setter
    def num_inbound_copyjob_sessions(self, num_inbound_copyjob_sessions):
        """Sets the num_inbound_copyjob_sessions of this Service.

        Number of active inbound copy jobs on the appliance  # noqa: E501

        :param num_inbound_copyjob_sessions: The num_inbound_copyjob_sessions of this Service.  # noqa: E501
        :type: int
        """

        self._num_inbound_copyjob_sessions = num_inbound_copyjob_sessions

    @property
    def num_outbound_copyjob_sessions(self):
        """Gets the num_outbound_copyjob_sessions of this Service.  # noqa: E501

        Number of active outbound copy jobs on the appliance  # noqa: E501

        :return: The num_outbound_copyjob_sessions of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_outbound_copyjob_sessions

    @num_outbound_copyjob_sessions.setter
    def num_outbound_copyjob_sessions(self, num_outbound_copyjob_sessions):
        """Sets the num_outbound_copyjob_sessions of this Service.

        Number of active outbound copy jobs on the appliance  # noqa: E501

        :param num_outbound_copyjob_sessions: The num_outbound_copyjob_sessions of this Service.  # noqa: E501
        :type: int
        """

        self._num_outbound_copyjob_sessions = num_outbound_copyjob_sessions

    @property
    def num_data_job_sessions(self):
        """Gets the num_data_job_sessions of this Service.  # noqa: E501

        Number of active data jobs on the appliance  # noqa: E501

        :return: The num_data_job_sessions of this Service.  # noqa: E501
        :rtype: int
        """
        return self._num_data_job_sessions

    @num_data_job_sessions.setter
    def num_data_job_sessions(self, num_data_job_sessions):
        """Sets the num_data_job_sessions of this Service.

        Number of active data jobs on the appliance  # noqa: E501

        :param num_data_job_sessions: The num_data_job_sessions of this Service.  # noqa: E501
        :type: int
        """

        self._num_data_job_sessions = num_data_job_sessions

    @property
    def cloud_capacity_bytes(self):
        """Gets the cloud_capacity_bytes of this Service.  # noqa: E501

        Total capacity licensed for cloud storage (in bytes)  # noqa: E501

        :return: The cloud_capacity_bytes of this Service.  # noqa: E501
        :rtype: int
        """
        return self._cloud_capacity_bytes

    @cloud_capacity_bytes.setter
    def cloud_capacity_bytes(self, cloud_capacity_bytes):
        """Sets the cloud_capacity_bytes of this Service.

        Total capacity licensed for cloud storage (in bytes)  # noqa: E501

        :param cloud_capacity_bytes: The cloud_capacity_bytes of this Service.  # noqa: E501
        :type: int
        """

        self._cloud_capacity_bytes = cloud_capacity_bytes

    @property
    def cloud_disk_bytes(self):
        """Gets the cloud_disk_bytes of this Service.  # noqa: E501

        The amount of capacity used (post dedupe) in the cloud (in bytes)  # noqa: E501

        :return: The cloud_disk_bytes of this Service.  # noqa: E501
        :rtype: int
        """
        return self._cloud_disk_bytes

    @cloud_disk_bytes.setter
    def cloud_disk_bytes(self, cloud_disk_bytes):
        """Sets the cloud_disk_bytes of this Service.

        The amount of capacity used (post dedupe) in the cloud (in bytes)  # noqa: E501

        :param cloud_disk_bytes: The cloud_disk_bytes of this Service.  # noqa: E501
        :type: int
        """

        self._cloud_disk_bytes = cloud_disk_bytes

    @property
    def cloud_free_bytes(self):
        """Gets the cloud_free_bytes of this Service.  # noqa: E501

        The amount of licensed free space in the cloud (in bytes)  # noqa: E501

        :return: The cloud_free_bytes of this Service.  # noqa: E501
        :rtype: int
        """
        return self._cloud_free_bytes

    @cloud_free_bytes.setter
    def cloud_free_bytes(self, cloud_free_bytes):
        """Sets the cloud_free_bytes of this Service.

        The amount of licensed free space in the cloud (in bytes)  # noqa: E501

        :param cloud_free_bytes: The cloud_free_bytes of this Service.  # noqa: E501
        :type: int
        """

        self._cloud_free_bytes = cloud_free_bytes

    @property
    def cloud_user_bytes(self):
        """Gets the cloud_user_bytes of this Service.  # noqa: E501

        The amount of data stored in the cloud (in bytes )  # noqa: E501

        :return: The cloud_user_bytes of this Service.  # noqa: E501
        :rtype: int
        """
        return self._cloud_user_bytes

    @cloud_user_bytes.setter
    def cloud_user_bytes(self, cloud_user_bytes):
        """Sets the cloud_user_bytes of this Service.

        The amount of data stored in the cloud (in bytes )  # noqa: E501

        :param cloud_user_bytes: The cloud_user_bytes of this Service.  # noqa: E501
        :type: int
        """

        self._cloud_user_bytes = cloud_user_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
