# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Catalyst

    unused  # noqa: E501

    Component version: 10.3.15-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class UsageSummariesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_cat_store_usage_summaries(self, storeid, **kwargs):  # noqa: E501
        """Get a single store usage summaries  # noqa: E501

        Returns a single store usage summaries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cat_store_usage_summaries(storeid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storeid: ID of the Catalyst store (required)
        :param datetime start_date: Query start date
        :param datetime end_date: Query end date
        :return: StoreUsageSummaryCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_cat_store_usage_summaries_with_http_info(storeid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cat_store_usage_summaries_with_http_info(storeid, **kwargs)  # noqa: E501
            return data

    def get_cat_store_usage_summaries_with_http_info(self, storeid, **kwargs):  # noqa: E501
        """Get a single store usage summaries  # noqa: E501

        Returns a single store usage summaries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_cat_store_usage_summaries_with_http_info(storeid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storeid: ID of the Catalyst store (required)
        :param datetime start_date: Query start date
        :param datetime end_date: Query end date
        :return: StoreUsageSummaryCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storeid', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cat_store_usage_summaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storeid' is set
        if ('storeid' not in params or
                params['storeid'] is None):
            raise ValueError("Missing the required parameter `storeid` when calling `get_cat_store_usage_summaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storeid' in params:
            path_params['storeid'] = params['storeid']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cat/usage-summaries/store/{storeid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoreUsageSummaryCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cat_store_usage_summaries_for_vendor(self, storeid, vendor, **kwargs):  # noqa: E501
        """Get a single store usage summaries for the vendor specified  # noqa: E501

        Returns specified store and vendor usage summaries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cat_store_usage_summaries_for_vendor(storeid, vendor, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storeid: ID of the Catalyst store (required)
        :param str vendor: Vendor name (required)
        :param datetime start_date: Query start date
        :param datetime end_date: Query end date
        :return: StoreUsageSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_cat_store_usage_summaries_for_vendor_with_http_info(storeid, vendor, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cat_store_usage_summaries_for_vendor_with_http_info(storeid, vendor, **kwargs)  # noqa: E501
            return data

    def get_cat_store_usage_summaries_for_vendor_with_http_info(self, storeid, vendor, **kwargs):  # noqa: E501
        """Get a single store usage summaries for the vendor specified  # noqa: E501

        Returns specified store and vendor usage summaries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_cat_store_usage_summaries_for_vendor_with_http_info(storeid, vendor, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storeid: ID of the Catalyst store (required)
        :param str vendor: Vendor name (required)
        :param datetime start_date: Query start date
        :param datetime end_date: Query end date
        :return: StoreUsageSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storeid', 'vendor', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cat_store_usage_summaries_for_vendor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storeid' is set
        if ('storeid' not in params or
                params['storeid'] is None):
            raise ValueError("Missing the required parameter `storeid` when calling `get_cat_store_usage_summaries_for_vendor`")  # noqa: E501
        # verify the required parameter 'vendor' is set
        if ('vendor' not in params or
                params['vendor'] is None):
            raise ValueError("Missing the required parameter `vendor` when calling `get_cat_store_usage_summaries_for_vendor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storeid' in params:
            path_params['storeid'] = params['storeid']  # noqa: E501
        if 'vendor' in params:
            path_params['vendor'] = params['vendor']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/cat/usage-summaries/store/{storeid}/vendor/{vendor}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoreUsageSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
