# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TaskOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'id': 'str',
        'target_node': 'Node',
        'state': 'str',
        'message_info': 'MessageInfo',
        'message': 'MessageInfo',
        'error_code': 'int',
        'resource_category': 'str',
        'resource_name': 'str',
        'url': 'str',
        'type': 'str',
        'percent_complete': 'int',
        'parameters': 'dict(str, str)',
        'call_timeout': 'int',
        'suggested_call_timeout': 'int'
    }

    attribute_map = {
        'owner': 'owner',
        'id': 'id',
        'target_node': 'targetNode',
        'state': 'state',
        'message_info': 'messageInfo',
        'message': 'message',
        'error_code': 'errorCode',
        'resource_category': 'resourceCategory',
        'resource_name': 'resourceName',
        'url': 'url',
        'type': 'type',
        'percent_complete': 'percentComplete',
        'parameters': 'parameters',
        'call_timeout': 'callTimeout',
        'suggested_call_timeout': 'suggestedCallTimeout'
    }

    def __init__(self, owner=None, id=None, target_node=None, state=None, message_info=None, message=None, error_code=None, resource_category=None, resource_name=None, url=None, type=None, percent_complete=None, parameters=None, call_timeout=None, suggested_call_timeout=None):  # noqa: E501
        """TaskOperation - a model defined in Swagger"""  # noqa: E501

        self._owner = None
        self._id = None
        self._target_node = None
        self._state = None
        self._message_info = None
        self._message = None
        self._error_code = None
        self._resource_category = None
        self._resource_name = None
        self._url = None
        self._type = None
        self._percent_complete = None
        self._parameters = None
        self._call_timeout = None
        self._suggested_call_timeout = None
        self.discriminator = None

        if owner is not None:
            self.owner = owner
        if id is not None:
            self.id = id
        if target_node is not None:
            self.target_node = target_node
        if state is not None:
            self.state = state
        if message_info is not None:
            self.message_info = message_info
        if message is not None:
            self.message = message
        if error_code is not None:
            self.error_code = error_code
        if resource_category is not None:
            self.resource_category = resource_category
        if resource_name is not None:
            self.resource_name = resource_name
        if url is not None:
            self.url = url
        if type is not None:
            self.type = type
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if parameters is not None:
            self.parameters = parameters
        if call_timeout is not None:
            self.call_timeout = call_timeout
        if suggested_call_timeout is not None:
            self.suggested_call_timeout = suggested_call_timeout

    @property
    def owner(self):
        """Gets the owner of this TaskOperation.  # noqa: E501


        :return: The owner of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TaskOperation.


        :param owner: The owner of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def id(self):
        """Gets the id of this TaskOperation.  # noqa: E501


        :return: The id of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskOperation.


        :param id: The id of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def target_node(self):
        """Gets the target_node of this TaskOperation.  # noqa: E501


        :return: The target_node of this TaskOperation.  # noqa: E501
        :rtype: Node
        """
        return self._target_node

    @target_node.setter
    def target_node(self, target_node):
        """Sets the target_node of this TaskOperation.


        :param target_node: The target_node of this TaskOperation.  # noqa: E501
        :type: Node
        """

        self._target_node = target_node

    @property
    def state(self):
        """Gets the state of this TaskOperation.  # noqa: E501


        :return: The state of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskOperation.


        :param state: The state of this TaskOperation.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_STARTED", "RUNNING", "STOPPED", "SUSPENDED", "COMPLETED", "FAILED", "KILLED", "INFAILOVER", "UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def message_info(self):
        """Gets the message_info of this TaskOperation.  # noqa: E501


        :return: The message_info of this TaskOperation.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._message_info

    @message_info.setter
    def message_info(self, message_info):
        """Sets the message_info of this TaskOperation.


        :param message_info: The message_info of this TaskOperation.  # noqa: E501
        :type: MessageInfo
        """

        self._message_info = message_info

    @property
    def message(self):
        """Gets the message of this TaskOperation.  # noqa: E501


        :return: The message of this TaskOperation.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskOperation.


        :param message: The message of this TaskOperation.  # noqa: E501
        :type: MessageInfo
        """

        self._message = message

    @property
    def error_code(self):
        """Gets the error_code of this TaskOperation.  # noqa: E501


        :return: The error_code of this TaskOperation.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this TaskOperation.


        :param error_code: The error_code of this TaskOperation.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def resource_category(self):
        """Gets the resource_category of this TaskOperation.  # noqa: E501


        :return: The resource_category of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._resource_category

    @resource_category.setter
    def resource_category(self, resource_category):
        """Sets the resource_category of this TaskOperation.


        :param resource_category: The resource_category of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._resource_category = resource_category

    @property
    def resource_name(self):
        """Gets the resource_name of this TaskOperation.  # noqa: E501


        :return: The resource_name of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this TaskOperation.


        :param resource_name: The resource_name of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def url(self):
        """Gets the url of this TaskOperation.  # noqa: E501


        :return: The url of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskOperation.


        :param url: The url of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """Gets the type of this TaskOperation.  # noqa: E501


        :return: The type of this TaskOperation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskOperation.


        :param type: The type of this TaskOperation.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def percent_complete(self):
        """Gets the percent_complete of this TaskOperation.  # noqa: E501


        :return: The percent_complete of this TaskOperation.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this TaskOperation.


        :param percent_complete: The percent_complete of this TaskOperation.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def parameters(self):
        """Gets the parameters of this TaskOperation.  # noqa: E501


        :return: The parameters of this TaskOperation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this TaskOperation.


        :param parameters: The parameters of this TaskOperation.  # noqa: E501
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def call_timeout(self):
        """Gets the call_timeout of this TaskOperation.  # noqa: E501


        :return: The call_timeout of this TaskOperation.  # noqa: E501
        :rtype: int
        """
        return self._call_timeout

    @call_timeout.setter
    def call_timeout(self, call_timeout):
        """Sets the call_timeout of this TaskOperation.


        :param call_timeout: The call_timeout of this TaskOperation.  # noqa: E501
        :type: int
        """

        self._call_timeout = call_timeout

    @property
    def suggested_call_timeout(self):
        """Gets the suggested_call_timeout of this TaskOperation.  # noqa: E501


        :return: The suggested_call_timeout of this TaskOperation.  # noqa: E501
        :rtype: int
        """
        return self._suggested_call_timeout

    @suggested_call_timeout.setter
    def suggested_call_timeout(self, suggested_call_timeout):
        """Sets the suggested_call_timeout of this TaskOperation.


        :param suggested_call_timeout: The suggested_call_timeout of this TaskOperation.  # noqa: E501
        :type: int
        """

        self._suggested_call_timeout = suggested_call_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
