# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class RestClientControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classes_to_register': 'list[object]',
        'instances_to_register': 'list[object]',
        'protocol': 'str',
        'port': 'int',
        'ssl_context': 'SSLContext',
        'hostname_verifier': 'HostnameVerifier',
        'request_filters': 'list[ClientRequestFilter]',
        'response_filters': 'list[ClientResponseFilter]',
        'authentication_features': 'list[HttpAuthenticationFeature]',
        'headers': 'dict(str, str)',
        'cookies': 'list[Cookie]',
        'cookies_targeted_to_classic': 'list[Cookie]',
        'throw_on_error_status': 'bool',
        'need_chuncked': 'bool',
        'auto_retry_on_bad_connection': 'bool',
        'client_inject_binding': 'list[BindPairObject]'
    }

    attribute_map = {
        'classes_to_register': 'classesToRegister',
        'instances_to_register': 'instancesToRegister',
        'protocol': 'protocol',
        'port': 'port',
        'ssl_context': 'sslContext',
        'hostname_verifier': 'hostnameVerifier',
        'request_filters': 'requestFilters',
        'response_filters': 'responseFilters',
        'authentication_features': 'authenticationFeatures',
        'headers': 'headers',
        'cookies': 'cookies',
        'cookies_targeted_to_classic': 'cookiesTargetedToClassic',
        'throw_on_error_status': 'throwOnErrorStatus',
        'need_chuncked': 'needChuncked',
        'auto_retry_on_bad_connection': 'autoRetryOnBadConnection',
        'client_inject_binding': 'clientInjectBinding'
    }

    def __init__(self, classes_to_register=None, instances_to_register=None, protocol=None, port=None, ssl_context=None, hostname_verifier=None, request_filters=None, response_filters=None, authentication_features=None, headers=None, cookies=None, cookies_targeted_to_classic=None, throw_on_error_status=False, need_chuncked=False, auto_retry_on_bad_connection=False, client_inject_binding=None):  # noqa: E501
        """RestClientControl - a model defined in Swagger"""  # noqa: E501

        self._classes_to_register = None
        self._instances_to_register = None
        self._protocol = None
        self._port = None
        self._ssl_context = None
        self._hostname_verifier = None
        self._request_filters = None
        self._response_filters = None
        self._authentication_features = None
        self._headers = None
        self._cookies = None
        self._cookies_targeted_to_classic = None
        self._throw_on_error_status = None
        self._need_chuncked = None
        self._auto_retry_on_bad_connection = None
        self._client_inject_binding = None
        self.discriminator = None

        if classes_to_register is not None:
            self.classes_to_register = classes_to_register
        if instances_to_register is not None:
            self.instances_to_register = instances_to_register
        if protocol is not None:
            self.protocol = protocol
        if port is not None:
            self.port = port
        if ssl_context is not None:
            self.ssl_context = ssl_context
        if hostname_verifier is not None:
            self.hostname_verifier = hostname_verifier
        if request_filters is not None:
            self.request_filters = request_filters
        if response_filters is not None:
            self.response_filters = response_filters
        if authentication_features is not None:
            self.authentication_features = authentication_features
        if headers is not None:
            self.headers = headers
        if cookies is not None:
            self.cookies = cookies
        if cookies_targeted_to_classic is not None:
            self.cookies_targeted_to_classic = cookies_targeted_to_classic
        if throw_on_error_status is not None:
            self.throw_on_error_status = throw_on_error_status
        if need_chuncked is not None:
            self.need_chuncked = need_chuncked
        if auto_retry_on_bad_connection is not None:
            self.auto_retry_on_bad_connection = auto_retry_on_bad_connection
        if client_inject_binding is not None:
            self.client_inject_binding = client_inject_binding

    @property
    def classes_to_register(self):
        """Gets the classes_to_register of this RestClientControl.  # noqa: E501


        :return: The classes_to_register of this RestClientControl.  # noqa: E501
        :rtype: list[object]
        """
        return self._classes_to_register

    @classes_to_register.setter
    def classes_to_register(self, classes_to_register):
        """Sets the classes_to_register of this RestClientControl.


        :param classes_to_register: The classes_to_register of this RestClientControl.  # noqa: E501
        :type: list[object]
        """

        self._classes_to_register = classes_to_register

    @property
    def instances_to_register(self):
        """Gets the instances_to_register of this RestClientControl.  # noqa: E501


        :return: The instances_to_register of this RestClientControl.  # noqa: E501
        :rtype: list[object]
        """
        return self._instances_to_register

    @instances_to_register.setter
    def instances_to_register(self, instances_to_register):
        """Sets the instances_to_register of this RestClientControl.


        :param instances_to_register: The instances_to_register of this RestClientControl.  # noqa: E501
        :type: list[object]
        """

        self._instances_to_register = instances_to_register

    @property
    def protocol(self):
        """Gets the protocol of this RestClientControl.  # noqa: E501


        :return: The protocol of this RestClientControl.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RestClientControl.


        :param protocol: The protocol of this RestClientControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this RestClientControl.  # noqa: E501


        :return: The port of this RestClientControl.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RestClientControl.


        :param port: The port of this RestClientControl.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def ssl_context(self):
        """Gets the ssl_context of this RestClientControl.  # noqa: E501


        :return: The ssl_context of this RestClientControl.  # noqa: E501
        :rtype: SSLContext
        """
        return self._ssl_context

    @ssl_context.setter
    def ssl_context(self, ssl_context):
        """Sets the ssl_context of this RestClientControl.


        :param ssl_context: The ssl_context of this RestClientControl.  # noqa: E501
        :type: SSLContext
        """

        self._ssl_context = ssl_context

    @property
    def hostname_verifier(self):
        """Gets the hostname_verifier of this RestClientControl.  # noqa: E501


        :return: The hostname_verifier of this RestClientControl.  # noqa: E501
        :rtype: HostnameVerifier
        """
        return self._hostname_verifier

    @hostname_verifier.setter
    def hostname_verifier(self, hostname_verifier):
        """Sets the hostname_verifier of this RestClientControl.


        :param hostname_verifier: The hostname_verifier of this RestClientControl.  # noqa: E501
        :type: HostnameVerifier
        """

        self._hostname_verifier = hostname_verifier

    @property
    def request_filters(self):
        """Gets the request_filters of this RestClientControl.  # noqa: E501


        :return: The request_filters of this RestClientControl.  # noqa: E501
        :rtype: list[ClientRequestFilter]
        """
        return self._request_filters

    @request_filters.setter
    def request_filters(self, request_filters):
        """Sets the request_filters of this RestClientControl.


        :param request_filters: The request_filters of this RestClientControl.  # noqa: E501
        :type: list[ClientRequestFilter]
        """

        self._request_filters = request_filters

    @property
    def response_filters(self):
        """Gets the response_filters of this RestClientControl.  # noqa: E501


        :return: The response_filters of this RestClientControl.  # noqa: E501
        :rtype: list[ClientResponseFilter]
        """
        return self._response_filters

    @response_filters.setter
    def response_filters(self, response_filters):
        """Sets the response_filters of this RestClientControl.


        :param response_filters: The response_filters of this RestClientControl.  # noqa: E501
        :type: list[ClientResponseFilter]
        """

        self._response_filters = response_filters

    @property
    def authentication_features(self):
        """Gets the authentication_features of this RestClientControl.  # noqa: E501


        :return: The authentication_features of this RestClientControl.  # noqa: E501
        :rtype: list[HttpAuthenticationFeature]
        """
        return self._authentication_features

    @authentication_features.setter
    def authentication_features(self, authentication_features):
        """Sets the authentication_features of this RestClientControl.


        :param authentication_features: The authentication_features of this RestClientControl.  # noqa: E501
        :type: list[HttpAuthenticationFeature]
        """

        self._authentication_features = authentication_features

    @property
    def headers(self):
        """Gets the headers of this RestClientControl.  # noqa: E501


        :return: The headers of this RestClientControl.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this RestClientControl.


        :param headers: The headers of this RestClientControl.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def cookies(self):
        """Gets the cookies of this RestClientControl.  # noqa: E501


        :return: The cookies of this RestClientControl.  # noqa: E501
        :rtype: list[Cookie]
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this RestClientControl.


        :param cookies: The cookies of this RestClientControl.  # noqa: E501
        :type: list[Cookie]
        """

        self._cookies = cookies

    @property
    def cookies_targeted_to_classic(self):
        """Gets the cookies_targeted_to_classic of this RestClientControl.  # noqa: E501


        :return: The cookies_targeted_to_classic of this RestClientControl.  # noqa: E501
        :rtype: list[Cookie]
        """
        return self._cookies_targeted_to_classic

    @cookies_targeted_to_classic.setter
    def cookies_targeted_to_classic(self, cookies_targeted_to_classic):
        """Sets the cookies_targeted_to_classic of this RestClientControl.


        :param cookies_targeted_to_classic: The cookies_targeted_to_classic of this RestClientControl.  # noqa: E501
        :type: list[Cookie]
        """

        self._cookies_targeted_to_classic = cookies_targeted_to_classic

    @property
    def throw_on_error_status(self):
        """Gets the throw_on_error_status of this RestClientControl.  # noqa: E501


        :return: The throw_on_error_status of this RestClientControl.  # noqa: E501
        :rtype: bool
        """
        return self._throw_on_error_status

    @throw_on_error_status.setter
    def throw_on_error_status(self, throw_on_error_status):
        """Sets the throw_on_error_status of this RestClientControl.


        :param throw_on_error_status: The throw_on_error_status of this RestClientControl.  # noqa: E501
        :type: bool
        """

        self._throw_on_error_status = throw_on_error_status

    @property
    def need_chuncked(self):
        """Gets the need_chuncked of this RestClientControl.  # noqa: E501


        :return: The need_chuncked of this RestClientControl.  # noqa: E501
        :rtype: bool
        """
        return self._need_chuncked

    @need_chuncked.setter
    def need_chuncked(self, need_chuncked):
        """Sets the need_chuncked of this RestClientControl.


        :param need_chuncked: The need_chuncked of this RestClientControl.  # noqa: E501
        :type: bool
        """

        self._need_chuncked = need_chuncked

    @property
    def auto_retry_on_bad_connection(self):
        """Gets the auto_retry_on_bad_connection of this RestClientControl.  # noqa: E501


        :return: The auto_retry_on_bad_connection of this RestClientControl.  # noqa: E501
        :rtype: bool
        """
        return self._auto_retry_on_bad_connection

    @auto_retry_on_bad_connection.setter
    def auto_retry_on_bad_connection(self, auto_retry_on_bad_connection):
        """Sets the auto_retry_on_bad_connection of this RestClientControl.


        :param auto_retry_on_bad_connection: The auto_retry_on_bad_connection of this RestClientControl.  # noqa: E501
        :type: bool
        """

        self._auto_retry_on_bad_connection = auto_retry_on_bad_connection

    @property
    def client_inject_binding(self):
        """Gets the client_inject_binding of this RestClientControl.  # noqa: E501


        :return: The client_inject_binding of this RestClientControl.  # noqa: E501
        :rtype: list[BindPairObject]
        """
        return self._client_inject_binding

    @client_inject_binding.setter
    def client_inject_binding(self, client_inject_binding):
        """Sets the client_inject_binding of this RestClientControl.


        :param client_inject_binding: The client_inject_binding of this RestClientControl.  # noqa: E501
        :type: list[BindPairObject]
        """

        self._client_inject_binding = client_inject_binding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RestClientControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RestClientControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
