# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class HTTPServerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_thread_pool_size': 'int',
        'server_waiting_requests_queue_size': 'int',
        'server_port': 'int',
        'server_secure_port': 'int'
    }

    attribute_map = {
        'server_thread_pool_size': 'serverThreadPoolSize',
        'server_waiting_requests_queue_size': 'serverWaitingRequestsQueueSize',
        'server_port': 'serverPort',
        'server_secure_port': 'serverSecurePort'
    }

    def __init__(self, server_thread_pool_size=None, server_waiting_requests_queue_size=None, server_port=None, server_secure_port=None):  # noqa: E501
        """HTTPServerConfiguration - a model defined in Swagger"""  # noqa: E501

        self._server_thread_pool_size = None
        self._server_waiting_requests_queue_size = None
        self._server_port = None
        self._server_secure_port = None
        self.discriminator = None

        if server_thread_pool_size is not None:
            self.server_thread_pool_size = server_thread_pool_size
        if server_waiting_requests_queue_size is not None:
            self.server_waiting_requests_queue_size = server_waiting_requests_queue_size
        if server_port is not None:
            self.server_port = server_port
        if server_secure_port is not None:
            self.server_secure_port = server_secure_port

    @property
    def server_thread_pool_size(self):
        """Gets the server_thread_pool_size of this HTTPServerConfiguration.  # noqa: E501


        :return: The server_thread_pool_size of this HTTPServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._server_thread_pool_size

    @server_thread_pool_size.setter
    def server_thread_pool_size(self, server_thread_pool_size):
        """Sets the server_thread_pool_size of this HTTPServerConfiguration.


        :param server_thread_pool_size: The server_thread_pool_size of this HTTPServerConfiguration.  # noqa: E501
        :type: int
        """

        self._server_thread_pool_size = server_thread_pool_size

    @property
    def server_waiting_requests_queue_size(self):
        """Gets the server_waiting_requests_queue_size of this HTTPServerConfiguration.  # noqa: E501


        :return: The server_waiting_requests_queue_size of this HTTPServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._server_waiting_requests_queue_size

    @server_waiting_requests_queue_size.setter
    def server_waiting_requests_queue_size(self, server_waiting_requests_queue_size):
        """Sets the server_waiting_requests_queue_size of this HTTPServerConfiguration.


        :param server_waiting_requests_queue_size: The server_waiting_requests_queue_size of this HTTPServerConfiguration.  # noqa: E501
        :type: int
        """

        self._server_waiting_requests_queue_size = server_waiting_requests_queue_size

    @property
    def server_port(self):
        """Gets the server_port of this HTTPServerConfiguration.  # noqa: E501


        :return: The server_port of this HTTPServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this HTTPServerConfiguration.


        :param server_port: The server_port of this HTTPServerConfiguration.  # noqa: E501
        :type: int
        """

        self._server_port = server_port

    @property
    def server_secure_port(self):
        """Gets the server_secure_port of this HTTPServerConfiguration.  # noqa: E501


        :return: The server_secure_port of this HTTPServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._server_secure_port

    @server_secure_port.setter
    def server_secure_port(self, server_secure_port):
        """Sets the server_secure_port of this HTTPServerConfiguration.


        :param server_secure_port: The server_secure_port of this HTTPServerConfiguration.  # noqa: E501
        :type: int
        """

        self._server_secure_port = server_secure_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HTTPServerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HTTPServerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
