# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class RetentionPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'high_frequency_retention_seconds': 'int',
        'medium_frequency_retention_seconds': 'int',
        'low_frequency_retention_seconds': 'int'
    }

    attribute_map = {
        'high_frequency_retention_seconds': 'highFrequencyRetentionSeconds',
        'medium_frequency_retention_seconds': 'mediumFrequencyRetentionSeconds',
        'low_frequency_retention_seconds': 'lowFrequencyRetentionSeconds'
    }

    def __init__(self, high_frequency_retention_seconds=None, medium_frequency_retention_seconds=None, low_frequency_retention_seconds=None):  # noqa: E501
        """RetentionPeriod - a model defined in Swagger"""  # noqa: E501

        self._high_frequency_retention_seconds = None
        self._medium_frequency_retention_seconds = None
        self._low_frequency_retention_seconds = None
        self.discriminator = None

        if high_frequency_retention_seconds is not None:
            self.high_frequency_retention_seconds = high_frequency_retention_seconds
        if medium_frequency_retention_seconds is not None:
            self.medium_frequency_retention_seconds = medium_frequency_retention_seconds
        if low_frequency_retention_seconds is not None:
            self.low_frequency_retention_seconds = low_frequency_retention_seconds

    @property
    def high_frequency_retention_seconds(self):
        """Gets the high_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501

        High Frequency Retention Seconds  # noqa: E501

        :return: The high_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :rtype: int
        """
        return self._high_frequency_retention_seconds

    @high_frequency_retention_seconds.setter
    def high_frequency_retention_seconds(self, high_frequency_retention_seconds):
        """Sets the high_frequency_retention_seconds of this RetentionPeriod.

        High Frequency Retention Seconds  # noqa: E501

        :param high_frequency_retention_seconds: The high_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :type: int
        """

        self._high_frequency_retention_seconds = high_frequency_retention_seconds

    @property
    def medium_frequency_retention_seconds(self):
        """Gets the medium_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501

        Medium Frequency Retention Seconds  # noqa: E501

        :return: The medium_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :rtype: int
        """
        return self._medium_frequency_retention_seconds

    @medium_frequency_retention_seconds.setter
    def medium_frequency_retention_seconds(self, medium_frequency_retention_seconds):
        """Sets the medium_frequency_retention_seconds of this RetentionPeriod.

        Medium Frequency Retention Seconds  # noqa: E501

        :param medium_frequency_retention_seconds: The medium_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :type: int
        """

        self._medium_frequency_retention_seconds = medium_frequency_retention_seconds

    @property
    def low_frequency_retention_seconds(self):
        """Gets the low_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501

        Low Frequency Retention Seconds  # noqa: E501

        :return: The low_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :rtype: int
        """
        return self._low_frequency_retention_seconds

    @low_frequency_retention_seconds.setter
    def low_frequency_retention_seconds(self, low_frequency_retention_seconds):
        """Sets the low_frequency_retention_seconds of this RetentionPeriod.

        Low Frequency Retention Seconds  # noqa: E501

        :param low_frequency_retention_seconds: The low_frequency_retention_seconds of this RetentionPeriod.  # noqa: E501
        :type: int
        """

        self._low_frequency_retention_seconds = low_frequency_retention_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RetentionPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetentionPeriod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
