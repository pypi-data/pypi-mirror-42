# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SSLParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cipher_suites': 'list[str]',
        'protocols': 'list[str]',
        'want_client_auth': 'bool',
        'need_client_auth': 'bool',
        'algorithm_constraints': 'AlgorithmConstraints',
        'endpoint_identification_algorithm': 'str',
        'server_names': 'list[SNIServerName]',
        'snimatchers': 'list[SNIMatcher]',
        'use_cipher_suites_order': 'bool'
    }

    attribute_map = {
        'cipher_suites': 'cipherSuites',
        'protocols': 'protocols',
        'want_client_auth': 'wantClientAuth',
        'need_client_auth': 'needClientAuth',
        'algorithm_constraints': 'algorithmConstraints',
        'endpoint_identification_algorithm': 'endpointIdentificationAlgorithm',
        'server_names': 'serverNames',
        'snimatchers': 'snimatchers',
        'use_cipher_suites_order': 'useCipherSuitesOrder'
    }

    def __init__(self, cipher_suites=None, protocols=None, want_client_auth=False, need_client_auth=False, algorithm_constraints=None, endpoint_identification_algorithm=None, server_names=None, snimatchers=None, use_cipher_suites_order=False):  # noqa: E501
        """SSLParameters - a model defined in Swagger"""  # noqa: E501

        self._cipher_suites = None
        self._protocols = None
        self._want_client_auth = None
        self._need_client_auth = None
        self._algorithm_constraints = None
        self._endpoint_identification_algorithm = None
        self._server_names = None
        self._snimatchers = None
        self._use_cipher_suites_order = None
        self.discriminator = None

        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if protocols is not None:
            self.protocols = protocols
        if want_client_auth is not None:
            self.want_client_auth = want_client_auth
        if need_client_auth is not None:
            self.need_client_auth = need_client_auth
        if algorithm_constraints is not None:
            self.algorithm_constraints = algorithm_constraints
        if endpoint_identification_algorithm is not None:
            self.endpoint_identification_algorithm = endpoint_identification_algorithm
        if server_names is not None:
            self.server_names = server_names
        if snimatchers is not None:
            self.snimatchers = snimatchers
        if use_cipher_suites_order is not None:
            self.use_cipher_suites_order = use_cipher_suites_order

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this SSLParameters.  # noqa: E501


        :return: The cipher_suites of this SSLParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this SSLParameters.


        :param cipher_suites: The cipher_suites of this SSLParameters.  # noqa: E501
        :type: list[str]
        """

        self._cipher_suites = cipher_suites

    @property
    def protocols(self):
        """Gets the protocols of this SSLParameters.  # noqa: E501


        :return: The protocols of this SSLParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this SSLParameters.


        :param protocols: The protocols of this SSLParameters.  # noqa: E501
        :type: list[str]
        """

        self._protocols = protocols

    @property
    def want_client_auth(self):
        """Gets the want_client_auth of this SSLParameters.  # noqa: E501


        :return: The want_client_auth of this SSLParameters.  # noqa: E501
        :rtype: bool
        """
        return self._want_client_auth

    @want_client_auth.setter
    def want_client_auth(self, want_client_auth):
        """Sets the want_client_auth of this SSLParameters.


        :param want_client_auth: The want_client_auth of this SSLParameters.  # noqa: E501
        :type: bool
        """

        self._want_client_auth = want_client_auth

    @property
    def need_client_auth(self):
        """Gets the need_client_auth of this SSLParameters.  # noqa: E501


        :return: The need_client_auth of this SSLParameters.  # noqa: E501
        :rtype: bool
        """
        return self._need_client_auth

    @need_client_auth.setter
    def need_client_auth(self, need_client_auth):
        """Sets the need_client_auth of this SSLParameters.


        :param need_client_auth: The need_client_auth of this SSLParameters.  # noqa: E501
        :type: bool
        """

        self._need_client_auth = need_client_auth

    @property
    def algorithm_constraints(self):
        """Gets the algorithm_constraints of this SSLParameters.  # noqa: E501


        :return: The algorithm_constraints of this SSLParameters.  # noqa: E501
        :rtype: AlgorithmConstraints
        """
        return self._algorithm_constraints

    @algorithm_constraints.setter
    def algorithm_constraints(self, algorithm_constraints):
        """Sets the algorithm_constraints of this SSLParameters.


        :param algorithm_constraints: The algorithm_constraints of this SSLParameters.  # noqa: E501
        :type: AlgorithmConstraints
        """

        self._algorithm_constraints = algorithm_constraints

    @property
    def endpoint_identification_algorithm(self):
        """Gets the endpoint_identification_algorithm of this SSLParameters.  # noqa: E501


        :return: The endpoint_identification_algorithm of this SSLParameters.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_identification_algorithm

    @endpoint_identification_algorithm.setter
    def endpoint_identification_algorithm(self, endpoint_identification_algorithm):
        """Sets the endpoint_identification_algorithm of this SSLParameters.


        :param endpoint_identification_algorithm: The endpoint_identification_algorithm of this SSLParameters.  # noqa: E501
        :type: str
        """

        self._endpoint_identification_algorithm = endpoint_identification_algorithm

    @property
    def server_names(self):
        """Gets the server_names of this SSLParameters.  # noqa: E501


        :return: The server_names of this SSLParameters.  # noqa: E501
        :rtype: list[SNIServerName]
        """
        return self._server_names

    @server_names.setter
    def server_names(self, server_names):
        """Sets the server_names of this SSLParameters.


        :param server_names: The server_names of this SSLParameters.  # noqa: E501
        :type: list[SNIServerName]
        """

        self._server_names = server_names

    @property
    def snimatchers(self):
        """Gets the snimatchers of this SSLParameters.  # noqa: E501


        :return: The snimatchers of this SSLParameters.  # noqa: E501
        :rtype: list[SNIMatcher]
        """
        return self._snimatchers

    @snimatchers.setter
    def snimatchers(self, snimatchers):
        """Sets the snimatchers of this SSLParameters.


        :param snimatchers: The snimatchers of this SSLParameters.  # noqa: E501
        :type: list[SNIMatcher]
        """

        self._snimatchers = snimatchers

    @property
    def use_cipher_suites_order(self):
        """Gets the use_cipher_suites_order of this SSLParameters.  # noqa: E501


        :return: The use_cipher_suites_order of this SSLParameters.  # noqa: E501
        :rtype: bool
        """
        return self._use_cipher_suites_order

    @use_cipher_suites_order.setter
    def use_cipher_suites_order(self, use_cipher_suites_order):
        """Sets the use_cipher_suites_order of this SSLParameters.


        :param use_cipher_suites_order: The use_cipher_suites_order of this SSLParameters.  # noqa: E501
        :type: bool
        """

        self._use_cipher_suites_order = use_cipher_suites_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSLParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSLParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
