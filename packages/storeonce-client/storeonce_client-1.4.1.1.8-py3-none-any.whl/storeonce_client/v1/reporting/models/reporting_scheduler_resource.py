# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ReportingSchedulerResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application': 'Application',
        'uriinfo': 'UriInfo',
        'request': 'Request',
        'taskmanager': 'TaskManager',
        'api_version': 'int',
        'route_prefix': 'str',
        'query': 'str',
        'view': 'str',
        'start': 'int',
        'count': 'int',
        'sort': 'str',
        'resource_context': 'ResourceContext',
        'all_scheduled_reports': 'Collection',
        'metadata': 'Response',
        'active_server_name': 'str',
        'i18n_manager': 'I18nManager',
        'infrastructure_server_object': 'InfrastructureServerServices'
    }

    attribute_map = {
        'application': 'application',
        'uriinfo': 'uriinfo',
        'request': 'request',
        'taskmanager': 'taskmanager',
        'api_version': 'apiVersion',
        'route_prefix': 'routePrefix',
        'query': 'query',
        'view': 'view',
        'start': 'start',
        'count': 'count',
        'sort': 'sort',
        'resource_context': 'resourceContext',
        'all_scheduled_reports': 'allScheduledReports',
        'metadata': 'metadata',
        'active_server_name': 'activeServerName',
        'i18n_manager': 'i18nManager',
        'infrastructure_server_object': 'infrastructureServerObject'
    }

    def __init__(self, application=None, uriinfo=None, request=None, taskmanager=None, api_version=None, route_prefix=None, query=None, view=None, start=None, count=None, sort=None, resource_context=None, all_scheduled_reports=None, metadata=None, active_server_name=None, i18n_manager=None, infrastructure_server_object=None):  # noqa: E501
        """ReportingSchedulerResource - a model defined in Swagger"""  # noqa: E501

        self._application = None
        self._uriinfo = None
        self._request = None
        self._taskmanager = None
        self._api_version = None
        self._route_prefix = None
        self._query = None
        self._view = None
        self._start = None
        self._count = None
        self._sort = None
        self._resource_context = None
        self._all_scheduled_reports = None
        self._metadata = None
        self._active_server_name = None
        self._i18n_manager = None
        self._infrastructure_server_object = None
        self.discriminator = None

        if application is not None:
            self.application = application
        if uriinfo is not None:
            self.uriinfo = uriinfo
        if request is not None:
            self.request = request
        if taskmanager is not None:
            self.taskmanager = taskmanager
        if api_version is not None:
            self.api_version = api_version
        if route_prefix is not None:
            self.route_prefix = route_prefix
        if query is not None:
            self.query = query
        if view is not None:
            self.view = view
        if start is not None:
            self.start = start
        if count is not None:
            self.count = count
        if sort is not None:
            self.sort = sort
        if resource_context is not None:
            self.resource_context = resource_context
        if all_scheduled_reports is not None:
            self.all_scheduled_reports = all_scheduled_reports
        if metadata is not None:
            self.metadata = metadata
        if active_server_name is not None:
            self.active_server_name = active_server_name
        if i18n_manager is not None:
            self.i18n_manager = i18n_manager
        if infrastructure_server_object is not None:
            self.infrastructure_server_object = infrastructure_server_object

    @property
    def application(self):
        """Gets the application of this ReportingSchedulerResource.  # noqa: E501


        :return: The application of this ReportingSchedulerResource.  # noqa: E501
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ReportingSchedulerResource.


        :param application: The application of this ReportingSchedulerResource.  # noqa: E501
        :type: Application
        """

        self._application = application

    @property
    def uriinfo(self):
        """Gets the uriinfo of this ReportingSchedulerResource.  # noqa: E501


        :return: The uriinfo of this ReportingSchedulerResource.  # noqa: E501
        :rtype: UriInfo
        """
        return self._uriinfo

    @uriinfo.setter
    def uriinfo(self, uriinfo):
        """Sets the uriinfo of this ReportingSchedulerResource.


        :param uriinfo: The uriinfo of this ReportingSchedulerResource.  # noqa: E501
        :type: UriInfo
        """

        self._uriinfo = uriinfo

    @property
    def request(self):
        """Gets the request of this ReportingSchedulerResource.  # noqa: E501


        :return: The request of this ReportingSchedulerResource.  # noqa: E501
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ReportingSchedulerResource.


        :param request: The request of this ReportingSchedulerResource.  # noqa: E501
        :type: Request
        """

        self._request = request

    @property
    def taskmanager(self):
        """Gets the taskmanager of this ReportingSchedulerResource.  # noqa: E501


        :return: The taskmanager of this ReportingSchedulerResource.  # noqa: E501
        :rtype: TaskManager
        """
        return self._taskmanager

    @taskmanager.setter
    def taskmanager(self, taskmanager):
        """Sets the taskmanager of this ReportingSchedulerResource.


        :param taskmanager: The taskmanager of this ReportingSchedulerResource.  # noqa: E501
        :type: TaskManager
        """

        self._taskmanager = taskmanager

    @property
    def api_version(self):
        """Gets the api_version of this ReportingSchedulerResource.  # noqa: E501


        :return: The api_version of this ReportingSchedulerResource.  # noqa: E501
        :rtype: int
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ReportingSchedulerResource.


        :param api_version: The api_version of this ReportingSchedulerResource.  # noqa: E501
        :type: int
        """

        self._api_version = api_version

    @property
    def route_prefix(self):
        """Gets the route_prefix of this ReportingSchedulerResource.  # noqa: E501


        :return: The route_prefix of this ReportingSchedulerResource.  # noqa: E501
        :rtype: str
        """
        return self._route_prefix

    @route_prefix.setter
    def route_prefix(self, route_prefix):
        """Sets the route_prefix of this ReportingSchedulerResource.


        :param route_prefix: The route_prefix of this ReportingSchedulerResource.  # noqa: E501
        :type: str
        """

        self._route_prefix = route_prefix

    @property
    def query(self):
        """Gets the query of this ReportingSchedulerResource.  # noqa: E501


        :return: The query of this ReportingSchedulerResource.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ReportingSchedulerResource.


        :param query: The query of this ReportingSchedulerResource.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def view(self):
        """Gets the view of this ReportingSchedulerResource.  # noqa: E501


        :return: The view of this ReportingSchedulerResource.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ReportingSchedulerResource.


        :param view: The view of this ReportingSchedulerResource.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def start(self):
        """Gets the start of this ReportingSchedulerResource.  # noqa: E501


        :return: The start of this ReportingSchedulerResource.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ReportingSchedulerResource.


        :param start: The start of this ReportingSchedulerResource.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def count(self):
        """Gets the count of this ReportingSchedulerResource.  # noqa: E501


        :return: The count of this ReportingSchedulerResource.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ReportingSchedulerResource.


        :param count: The count of this ReportingSchedulerResource.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def sort(self):
        """Gets the sort of this ReportingSchedulerResource.  # noqa: E501


        :return: The sort of this ReportingSchedulerResource.  # noqa: E501
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ReportingSchedulerResource.


        :param sort: The sort of this ReportingSchedulerResource.  # noqa: E501
        :type: str
        """

        self._sort = sort

    @property
    def resource_context(self):
        """Gets the resource_context of this ReportingSchedulerResource.  # noqa: E501


        :return: The resource_context of this ReportingSchedulerResource.  # noqa: E501
        :rtype: ResourceContext
        """
        return self._resource_context

    @resource_context.setter
    def resource_context(self, resource_context):
        """Sets the resource_context of this ReportingSchedulerResource.


        :param resource_context: The resource_context of this ReportingSchedulerResource.  # noqa: E501
        :type: ResourceContext
        """

        self._resource_context = resource_context

    @property
    def all_scheduled_reports(self):
        """Gets the all_scheduled_reports of this ReportingSchedulerResource.  # noqa: E501


        :return: The all_scheduled_reports of this ReportingSchedulerResource.  # noqa: E501
        :rtype: Collection
        """
        return self._all_scheduled_reports

    @all_scheduled_reports.setter
    def all_scheduled_reports(self, all_scheduled_reports):
        """Sets the all_scheduled_reports of this ReportingSchedulerResource.


        :param all_scheduled_reports: The all_scheduled_reports of this ReportingSchedulerResource.  # noqa: E501
        :type: Collection
        """

        self._all_scheduled_reports = all_scheduled_reports

    @property
    def metadata(self):
        """Gets the metadata of this ReportingSchedulerResource.  # noqa: E501


        :return: The metadata of this ReportingSchedulerResource.  # noqa: E501
        :rtype: Response
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ReportingSchedulerResource.


        :param metadata: The metadata of this ReportingSchedulerResource.  # noqa: E501
        :type: Response
        """

        self._metadata = metadata

    @property
    def active_server_name(self):
        """Gets the active_server_name of this ReportingSchedulerResource.  # noqa: E501


        :return: The active_server_name of this ReportingSchedulerResource.  # noqa: E501
        :rtype: str
        """
        return self._active_server_name

    @active_server_name.setter
    def active_server_name(self, active_server_name):
        """Sets the active_server_name of this ReportingSchedulerResource.


        :param active_server_name: The active_server_name of this ReportingSchedulerResource.  # noqa: E501
        :type: str
        """

        self._active_server_name = active_server_name

    @property
    def i18n_manager(self):
        """Gets the i18n_manager of this ReportingSchedulerResource.  # noqa: E501


        :return: The i18n_manager of this ReportingSchedulerResource.  # noqa: E501
        :rtype: I18nManager
        """
        return self._i18n_manager

    @i18n_manager.setter
    def i18n_manager(self, i18n_manager):
        """Sets the i18n_manager of this ReportingSchedulerResource.


        :param i18n_manager: The i18n_manager of this ReportingSchedulerResource.  # noqa: E501
        :type: I18nManager
        """

        self._i18n_manager = i18n_manager

    @property
    def infrastructure_server_object(self):
        """Gets the infrastructure_server_object of this ReportingSchedulerResource.  # noqa: E501


        :return: The infrastructure_server_object of this ReportingSchedulerResource.  # noqa: E501
        :rtype: InfrastructureServerServices
        """
        return self._infrastructure_server_object

    @infrastructure_server_object.setter
    def infrastructure_server_object(self, infrastructure_server_object):
        """Sets the infrastructure_server_object of this ReportingSchedulerResource.


        :param infrastructure_server_object: The infrastructure_server_object of this ReportingSchedulerResource.  # noqa: E501
        :type: InfrastructureServerServices
        """

        self._infrastructure_server_object = infrastructure_server_object

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportingSchedulerResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportingSchedulerResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
