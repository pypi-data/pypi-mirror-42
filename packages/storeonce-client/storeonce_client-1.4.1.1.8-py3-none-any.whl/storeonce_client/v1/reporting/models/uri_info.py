# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class UriInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_parameters': 'dict(str, list[str])',
        'base_uri': 'str',
        'path_segments': 'list[PathSegment]',
        'request_uri': 'str',
        'request_uri_builder': 'UriBuilder',
        'absolute_path_builder': 'UriBuilder',
        'base_uri_builder': 'UriBuilder',
        'path_parameters': 'dict(str, list[str])',
        'matched_ur_is': 'list[str]',
        'matched_resources': 'list[object]',
        'path': 'str',
        'absolute_path': 'str'
    }

    attribute_map = {
        'query_parameters': 'queryParameters',
        'base_uri': 'baseUri',
        'path_segments': 'pathSegments',
        'request_uri': 'requestUri',
        'request_uri_builder': 'requestUriBuilder',
        'absolute_path_builder': 'absolutePathBuilder',
        'base_uri_builder': 'baseUriBuilder',
        'path_parameters': 'pathParameters',
        'matched_ur_is': 'matchedURIs',
        'matched_resources': 'matchedResources',
        'path': 'path',
        'absolute_path': 'absolutePath'
    }

    def __init__(self, query_parameters=None, base_uri=None, path_segments=None, request_uri=None, request_uri_builder=None, absolute_path_builder=None, base_uri_builder=None, path_parameters=None, matched_ur_is=None, matched_resources=None, path=None, absolute_path=None):  # noqa: E501
        """UriInfo - a model defined in Swagger"""  # noqa: E501

        self._query_parameters = None
        self._base_uri = None
        self._path_segments = None
        self._request_uri = None
        self._request_uri_builder = None
        self._absolute_path_builder = None
        self._base_uri_builder = None
        self._path_parameters = None
        self._matched_ur_is = None
        self._matched_resources = None
        self._path = None
        self._absolute_path = None
        self.discriminator = None

        if query_parameters is not None:
            self.query_parameters = query_parameters
        if base_uri is not None:
            self.base_uri = base_uri
        if path_segments is not None:
            self.path_segments = path_segments
        if request_uri is not None:
            self.request_uri = request_uri
        if request_uri_builder is not None:
            self.request_uri_builder = request_uri_builder
        if absolute_path_builder is not None:
            self.absolute_path_builder = absolute_path_builder
        if base_uri_builder is not None:
            self.base_uri_builder = base_uri_builder
        if path_parameters is not None:
            self.path_parameters = path_parameters
        if matched_ur_is is not None:
            self.matched_ur_is = matched_ur_is
        if matched_resources is not None:
            self.matched_resources = matched_resources
        if path is not None:
            self.path = path
        if absolute_path is not None:
            self.absolute_path = absolute_path

    @property
    def query_parameters(self):
        """Gets the query_parameters of this UriInfo.  # noqa: E501


        :return: The query_parameters of this UriInfo.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this UriInfo.


        :param query_parameters: The query_parameters of this UriInfo.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._query_parameters = query_parameters

    @property
    def base_uri(self):
        """Gets the base_uri of this UriInfo.  # noqa: E501


        :return: The base_uri of this UriInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_uri

    @base_uri.setter
    def base_uri(self, base_uri):
        """Sets the base_uri of this UriInfo.


        :param base_uri: The base_uri of this UriInfo.  # noqa: E501
        :type: str
        """

        self._base_uri = base_uri

    @property
    def path_segments(self):
        """Gets the path_segments of this UriInfo.  # noqa: E501


        :return: The path_segments of this UriInfo.  # noqa: E501
        :rtype: list[PathSegment]
        """
        return self._path_segments

    @path_segments.setter
    def path_segments(self, path_segments):
        """Sets the path_segments of this UriInfo.


        :param path_segments: The path_segments of this UriInfo.  # noqa: E501
        :type: list[PathSegment]
        """

        self._path_segments = path_segments

    @property
    def request_uri(self):
        """Gets the request_uri of this UriInfo.  # noqa: E501


        :return: The request_uri of this UriInfo.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this UriInfo.


        :param request_uri: The request_uri of this UriInfo.  # noqa: E501
        :type: str
        """

        self._request_uri = request_uri

    @property
    def request_uri_builder(self):
        """Gets the request_uri_builder of this UriInfo.  # noqa: E501


        :return: The request_uri_builder of this UriInfo.  # noqa: E501
        :rtype: UriBuilder
        """
        return self._request_uri_builder

    @request_uri_builder.setter
    def request_uri_builder(self, request_uri_builder):
        """Sets the request_uri_builder of this UriInfo.


        :param request_uri_builder: The request_uri_builder of this UriInfo.  # noqa: E501
        :type: UriBuilder
        """

        self._request_uri_builder = request_uri_builder

    @property
    def absolute_path_builder(self):
        """Gets the absolute_path_builder of this UriInfo.  # noqa: E501


        :return: The absolute_path_builder of this UriInfo.  # noqa: E501
        :rtype: UriBuilder
        """
        return self._absolute_path_builder

    @absolute_path_builder.setter
    def absolute_path_builder(self, absolute_path_builder):
        """Sets the absolute_path_builder of this UriInfo.


        :param absolute_path_builder: The absolute_path_builder of this UriInfo.  # noqa: E501
        :type: UriBuilder
        """

        self._absolute_path_builder = absolute_path_builder

    @property
    def base_uri_builder(self):
        """Gets the base_uri_builder of this UriInfo.  # noqa: E501


        :return: The base_uri_builder of this UriInfo.  # noqa: E501
        :rtype: UriBuilder
        """
        return self._base_uri_builder

    @base_uri_builder.setter
    def base_uri_builder(self, base_uri_builder):
        """Sets the base_uri_builder of this UriInfo.


        :param base_uri_builder: The base_uri_builder of this UriInfo.  # noqa: E501
        :type: UriBuilder
        """

        self._base_uri_builder = base_uri_builder

    @property
    def path_parameters(self):
        """Gets the path_parameters of this UriInfo.  # noqa: E501


        :return: The path_parameters of this UriInfo.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._path_parameters

    @path_parameters.setter
    def path_parameters(self, path_parameters):
        """Sets the path_parameters of this UriInfo.


        :param path_parameters: The path_parameters of this UriInfo.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._path_parameters = path_parameters

    @property
    def matched_ur_is(self):
        """Gets the matched_ur_is of this UriInfo.  # noqa: E501


        :return: The matched_ur_is of this UriInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._matched_ur_is

    @matched_ur_is.setter
    def matched_ur_is(self, matched_ur_is):
        """Sets the matched_ur_is of this UriInfo.


        :param matched_ur_is: The matched_ur_is of this UriInfo.  # noqa: E501
        :type: list[str]
        """

        self._matched_ur_is = matched_ur_is

    @property
    def matched_resources(self):
        """Gets the matched_resources of this UriInfo.  # noqa: E501


        :return: The matched_resources of this UriInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._matched_resources

    @matched_resources.setter
    def matched_resources(self, matched_resources):
        """Sets the matched_resources of this UriInfo.


        :param matched_resources: The matched_resources of this UriInfo.  # noqa: E501
        :type: list[object]
        """

        self._matched_resources = matched_resources

    @property
    def path(self):
        """Gets the path of this UriInfo.  # noqa: E501


        :return: The path of this UriInfo.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this UriInfo.


        :param path: The path of this UriInfo.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def absolute_path(self):
        """Gets the absolute_path of this UriInfo.  # noqa: E501


        :return: The absolute_path of this UriInfo.  # noqa: E501
        :rtype: str
        """
        return self._absolute_path

    @absolute_path.setter
    def absolute_path(self, absolute_path):
        """Sets the absolute_path of this UriInfo.


        :param absolute_path: The absolute_path of this UriInfo.  # noqa: E501
        :type: str
        """

        self._absolute_path = absolute_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UriInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UriInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
