# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TaskActionImpl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'done': 'bool',
        'result': 'str',
        'id': 'str',
        'operation_class': 'str',
        'raw_operation': 'str',
        'task': 'Task',
        'started': 'bool',
        'endtime': 'int',
        'infailover': 'bool',
        'failed_node': 'str',
        'completed': 'bool',
        'failed': 'bool',
        'confirmed_completed': 'bool',
        'raw_task_info': 'str',
        'task_info_class': 'str',
        'route_prefix': 'str',
        'abs_uri_path': 'str',
        'force_notification': 'bool',
        'operation': 'TaskOperation',
        'stopped': 'bool'
    }

    attribute_map = {
        'done': 'done',
        'result': 'result',
        'id': 'id',
        'operation_class': 'operationClass',
        'raw_operation': 'rawOperation',
        'task': 'task',
        'started': 'started',
        'endtime': 'endtime',
        'infailover': 'infailover',
        'failed_node': 'failedNode',
        'completed': 'completed',
        'failed': 'failed',
        'confirmed_completed': 'confirmed_completed',
        'raw_task_info': 'rawTaskInfo',
        'task_info_class': 'taskInfoClass',
        'route_prefix': 'routePrefix',
        'abs_uri_path': 'absUriPath',
        'force_notification': 'forceNotification',
        'operation': 'operation',
        'stopped': 'stopped'
    }

    def __init__(self, done=False, result=None, id=None, operation_class=None, raw_operation=None, task=None, started=False, endtime=None, infailover=False, failed_node=None, completed=False, failed=False, confirmed_completed=False, raw_task_info=None, task_info_class=None, route_prefix=None, abs_uri_path=None, force_notification=False, operation=None, stopped=False):  # noqa: E501
        """TaskActionImpl - a model defined in Swagger"""  # noqa: E501

        self._done = None
        self._result = None
        self._id = None
        self._operation_class = None
        self._raw_operation = None
        self._task = None
        self._started = None
        self._endtime = None
        self._infailover = None
        self._failed_node = None
        self._completed = None
        self._failed = None
        self._confirmed_completed = None
        self._raw_task_info = None
        self._task_info_class = None
        self._route_prefix = None
        self._abs_uri_path = None
        self._force_notification = None
        self._operation = None
        self._stopped = None
        self.discriminator = None

        if done is not None:
            self.done = done
        if result is not None:
            self.result = result
        if id is not None:
            self.id = id
        if operation_class is not None:
            self.operation_class = operation_class
        if raw_operation is not None:
            self.raw_operation = raw_operation
        if task is not None:
            self.task = task
        if started is not None:
            self.started = started
        if endtime is not None:
            self.endtime = endtime
        if infailover is not None:
            self.infailover = infailover
        if failed_node is not None:
            self.failed_node = failed_node
        if completed is not None:
            self.completed = completed
        if failed is not None:
            self.failed = failed
        if confirmed_completed is not None:
            self.confirmed_completed = confirmed_completed
        if raw_task_info is not None:
            self.raw_task_info = raw_task_info
        if task_info_class is not None:
            self.task_info_class = task_info_class
        if route_prefix is not None:
            self.route_prefix = route_prefix
        if abs_uri_path is not None:
            self.abs_uri_path = abs_uri_path
        if force_notification is not None:
            self.force_notification = force_notification
        if operation is not None:
            self.operation = operation
        if stopped is not None:
            self.stopped = stopped

    @property
    def done(self):
        """Gets the done of this TaskActionImpl.  # noqa: E501


        :return: The done of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this TaskActionImpl.


        :param done: The done of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def result(self):
        """Gets the result of this TaskActionImpl.  # noqa: E501


        :return: The result of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TaskActionImpl.


        :param result: The result of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def id(self):
        """Gets the id of this TaskActionImpl.  # noqa: E501


        :return: The id of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskActionImpl.


        :param id: The id of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def operation_class(self):
        """Gets the operation_class of this TaskActionImpl.  # noqa: E501


        :return: The operation_class of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._operation_class

    @operation_class.setter
    def operation_class(self, operation_class):
        """Sets the operation_class of this TaskActionImpl.


        :param operation_class: The operation_class of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._operation_class = operation_class

    @property
    def raw_operation(self):
        """Gets the raw_operation of this TaskActionImpl.  # noqa: E501


        :return: The raw_operation of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._raw_operation

    @raw_operation.setter
    def raw_operation(self, raw_operation):
        """Sets the raw_operation of this TaskActionImpl.


        :param raw_operation: The raw_operation of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._raw_operation = raw_operation

    @property
    def task(self):
        """Gets the task of this TaskActionImpl.  # noqa: E501


        :return: The task of this TaskActionImpl.  # noqa: E501
        :rtype: Task
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TaskActionImpl.


        :param task: The task of this TaskActionImpl.  # noqa: E501
        :type: Task
        """

        self._task = task

    @property
    def started(self):
        """Gets the started of this TaskActionImpl.  # noqa: E501


        :return: The started of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this TaskActionImpl.


        :param started: The started of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._started = started

    @property
    def endtime(self):
        """Gets the endtime of this TaskActionImpl.  # noqa: E501


        :return: The endtime of this TaskActionImpl.  # noqa: E501
        :rtype: int
        """
        return self._endtime

    @endtime.setter
    def endtime(self, endtime):
        """Sets the endtime of this TaskActionImpl.


        :param endtime: The endtime of this TaskActionImpl.  # noqa: E501
        :type: int
        """

        self._endtime = endtime

    @property
    def infailover(self):
        """Gets the infailover of this TaskActionImpl.  # noqa: E501


        :return: The infailover of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._infailover

    @infailover.setter
    def infailover(self, infailover):
        """Sets the infailover of this TaskActionImpl.


        :param infailover: The infailover of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._infailover = infailover

    @property
    def failed_node(self):
        """Gets the failed_node of this TaskActionImpl.  # noqa: E501


        :return: The failed_node of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._failed_node

    @failed_node.setter
    def failed_node(self, failed_node):
        """Sets the failed_node of this TaskActionImpl.


        :param failed_node: The failed_node of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._failed_node = failed_node

    @property
    def completed(self):
        """Gets the completed of this TaskActionImpl.  # noqa: E501


        :return: The completed of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TaskActionImpl.


        :param completed: The completed of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def failed(self):
        """Gets the failed of this TaskActionImpl.  # noqa: E501


        :return: The failed of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TaskActionImpl.


        :param failed: The failed of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._failed = failed

    @property
    def confirmed_completed(self):
        """Gets the confirmed_completed of this TaskActionImpl.  # noqa: E501


        :return: The confirmed_completed of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed_completed

    @confirmed_completed.setter
    def confirmed_completed(self, confirmed_completed):
        """Sets the confirmed_completed of this TaskActionImpl.


        :param confirmed_completed: The confirmed_completed of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._confirmed_completed = confirmed_completed

    @property
    def raw_task_info(self):
        """Gets the raw_task_info of this TaskActionImpl.  # noqa: E501


        :return: The raw_task_info of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._raw_task_info

    @raw_task_info.setter
    def raw_task_info(self, raw_task_info):
        """Sets the raw_task_info of this TaskActionImpl.


        :param raw_task_info: The raw_task_info of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._raw_task_info = raw_task_info

    @property
    def task_info_class(self):
        """Gets the task_info_class of this TaskActionImpl.  # noqa: E501


        :return: The task_info_class of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._task_info_class

    @task_info_class.setter
    def task_info_class(self, task_info_class):
        """Sets the task_info_class of this TaskActionImpl.


        :param task_info_class: The task_info_class of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._task_info_class = task_info_class

    @property
    def route_prefix(self):
        """Gets the route_prefix of this TaskActionImpl.  # noqa: E501


        :return: The route_prefix of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._route_prefix

    @route_prefix.setter
    def route_prefix(self, route_prefix):
        """Sets the route_prefix of this TaskActionImpl.


        :param route_prefix: The route_prefix of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._route_prefix = route_prefix

    @property
    def abs_uri_path(self):
        """Gets the abs_uri_path of this TaskActionImpl.  # noqa: E501


        :return: The abs_uri_path of this TaskActionImpl.  # noqa: E501
        :rtype: str
        """
        return self._abs_uri_path

    @abs_uri_path.setter
    def abs_uri_path(self, abs_uri_path):
        """Sets the abs_uri_path of this TaskActionImpl.


        :param abs_uri_path: The abs_uri_path of this TaskActionImpl.  # noqa: E501
        :type: str
        """

        self._abs_uri_path = abs_uri_path

    @property
    def force_notification(self):
        """Gets the force_notification of this TaskActionImpl.  # noqa: E501


        :return: The force_notification of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._force_notification

    @force_notification.setter
    def force_notification(self, force_notification):
        """Sets the force_notification of this TaskActionImpl.


        :param force_notification: The force_notification of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._force_notification = force_notification

    @property
    def operation(self):
        """Gets the operation of this TaskActionImpl.  # noqa: E501


        :return: The operation of this TaskActionImpl.  # noqa: E501
        :rtype: TaskOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this TaskActionImpl.


        :param operation: The operation of this TaskActionImpl.  # noqa: E501
        :type: TaskOperation
        """

        self._operation = operation

    @property
    def stopped(self):
        """Gets the stopped of this TaskActionImpl.  # noqa: E501


        :return: The stopped of this TaskActionImpl.  # noqa: E501
        :rtype: bool
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this TaskActionImpl.


        :param stopped: The stopped of this TaskActionImpl.  # noqa: E501
        :type: bool
        """

        self._stopped = stopped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskActionImpl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskActionImpl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
