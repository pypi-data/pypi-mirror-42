# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Reporting

    unused  # noqa: E501

    Component version: 2.0.13-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Cookie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'version': 'int',
        'path': 'str',
        'domain': 'str'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'version': 'version',
        'path': 'path',
        'domain': 'domain'
    }

    def __init__(self, name=None, value=None, version=None, path=None, domain=None):  # noqa: E501
        """Cookie - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._value = None
        self._version = None
        self._path = None
        self._domain = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if version is not None:
            self.version = version
        if path is not None:
            self.path = path
        if domain is not None:
            self.domain = domain

    @property
    def name(self):
        """Gets the name of this Cookie.  # noqa: E501


        :return: The name of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cookie.


        :param name: The name of this Cookie.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this Cookie.  # noqa: E501


        :return: The value of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Cookie.


        :param value: The value of this Cookie.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def version(self):
        """Gets the version of this Cookie.  # noqa: E501


        :return: The version of this Cookie.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Cookie.


        :param version: The version of this Cookie.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def path(self):
        """Gets the path of this Cookie.  # noqa: E501


        :return: The path of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Cookie.


        :param path: The path of this Cookie.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def domain(self):
        """Gets the domain of this Cookie.  # noqa: E501


        :return: The domain of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Cookie.


        :param domain: The domain of this Cookie.  # noqa: E501
        :type: str
        """

        self._domain = domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cookie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cookie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
