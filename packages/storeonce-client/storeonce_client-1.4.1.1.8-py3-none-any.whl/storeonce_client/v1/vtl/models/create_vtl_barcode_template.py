# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CreateVtlBarcodeTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode_template_enabled': 'bool',
        'barcode_template_prefix': 'str',
        'barcode_template_start_value': 'str',
        'barcode_template_suffix': 'str'
    }

    attribute_map = {
        'barcode_template_enabled': 'barcodeTemplateEnabled',
        'barcode_template_prefix': 'barcodeTemplatePrefix',
        'barcode_template_start_value': 'barcodeTemplateStartValue',
        'barcode_template_suffix': 'barcodeTemplateSuffix'
    }

    def __init__(self, barcode_template_enabled=False, barcode_template_prefix=None, barcode_template_start_value=None, barcode_template_suffix=None):  # noqa: E501
        """CreateVtlBarcodeTemplate - a model defined in Swagger"""  # noqa: E501

        self._barcode_template_enabled = None
        self._barcode_template_prefix = None
        self._barcode_template_start_value = None
        self._barcode_template_suffix = None
        self.discriminator = None

        if barcode_template_enabled is not None:
            self.barcode_template_enabled = barcode_template_enabled
        if barcode_template_prefix is not None:
            self.barcode_template_prefix = barcode_template_prefix
        if barcode_template_start_value is not None:
            self.barcode_template_start_value = barcode_template_start_value
        if barcode_template_suffix is not None:
            self.barcode_template_suffix = barcode_template_suffix

    @property
    def barcode_template_enabled(self):
        """Gets the barcode_template_enabled of this CreateVtlBarcodeTemplate.  # noqa: E501

        Flag true or false decides library uses a custom barcode. Optional: if not present, defaults to false  # noqa: E501

        :return: The barcode_template_enabled of this CreateVtlBarcodeTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._barcode_template_enabled

    @barcode_template_enabled.setter
    def barcode_template_enabled(self, barcode_template_enabled):
        """Sets the barcode_template_enabled of this CreateVtlBarcodeTemplate.

        Flag true or false decides library uses a custom barcode. Optional: if not present, defaults to false  # noqa: E501

        :param barcode_template_enabled: The barcode_template_enabled of this CreateVtlBarcodeTemplate.  # noqa: E501
        :type: bool
        """

        self._barcode_template_enabled = barcode_template_enabled

    @property
    def barcode_template_prefix(self):
        """Gets the barcode_template_prefix of this CreateVtlBarcodeTemplate.  # noqa: E501

        Alphanumeric string representing the barcode template prefix. Can be 0-3 characters. Ignored if barcodeTemplateEnabled is false  # noqa: E501

        :return: The barcode_template_prefix of this CreateVtlBarcodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._barcode_template_prefix

    @barcode_template_prefix.setter
    def barcode_template_prefix(self, barcode_template_prefix):
        """Sets the barcode_template_prefix of this CreateVtlBarcodeTemplate.

        Alphanumeric string representing the barcode template prefix. Can be 0-3 characters. Ignored if barcodeTemplateEnabled is false  # noqa: E501

        :param barcode_template_prefix: The barcode_template_prefix of this CreateVtlBarcodeTemplate.  # noqa: E501
        :type: str
        """

        self._barcode_template_prefix = barcode_template_prefix

    @property
    def barcode_template_start_value(self):
        """Gets the barcode_template_start_value of this CreateVtlBarcodeTemplate.  # noqa: E501

        Alphanumeric string representing the initial value of the incremental part of the barcode template. Required if barcode template enabled is true. Ignored if barcode template enabled is false.  # noqa: E501

        :return: The barcode_template_start_value of this CreateVtlBarcodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._barcode_template_start_value

    @barcode_template_start_value.setter
    def barcode_template_start_value(self, barcode_template_start_value):
        """Sets the barcode_template_start_value of this CreateVtlBarcodeTemplate.

        Alphanumeric string representing the initial value of the incremental part of the barcode template. Required if barcode template enabled is true. Ignored if barcode template enabled is false.  # noqa: E501

        :param barcode_template_start_value: The barcode_template_start_value of this CreateVtlBarcodeTemplate.  # noqa: E501
        :type: str
        """

        self._barcode_template_start_value = barcode_template_start_value

    @property
    def barcode_template_suffix(self):
        """Gets the barcode_template_suffix of this CreateVtlBarcodeTemplate.  # noqa: E501

        Alphanumeric string representing the barcode template suffix. Can be 0-2 characters. Ignored if barcodeTemplateEnabled is false.  # noqa: E501

        :return: The barcode_template_suffix of this CreateVtlBarcodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._barcode_template_suffix

    @barcode_template_suffix.setter
    def barcode_template_suffix(self, barcode_template_suffix):
        """Sets the barcode_template_suffix of this CreateVtlBarcodeTemplate.

        Alphanumeric string representing the barcode template suffix. Can be 0-2 characters. Ignored if barcodeTemplateEnabled is false.  # noqa: E501

        :param barcode_template_suffix: The barcode_template_suffix of this CreateVtlBarcodeTemplate.  # noqa: E501
        :type: str
        """

        self._barcode_template_suffix = barcode_template_suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVtlBarcodeTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVtlBarcodeTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
