# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CreateVtlCartridge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slot_id': 'int',
        'mail_slot_id': 'int',
        'barcode': 'str',
        'cartridge_size_bytes': 'int',
        'write_protection_enabled': 'bool',
        'cartridge_size_bytes_enum': 'int'
    }

    attribute_map = {
        'slot_id': 'slotId',
        'mail_slot_id': 'mailSlotId',
        'barcode': 'barcode',
        'cartridge_size_bytes': 'cartridgeSizeBytes',
        'write_protection_enabled': 'writeProtectionEnabled',
        'cartridge_size_bytes_enum': 'cartridgeSizeBytesEnum'
    }

    def __init__(self, slot_id=None, mail_slot_id=None, barcode=None, cartridge_size_bytes=None, write_protection_enabled=False, cartridge_size_bytes_enum=None):  # noqa: E501
        """CreateVtlCartridge - a model defined in Swagger"""  # noqa: E501

        self._slot_id = None
        self._mail_slot_id = None
        self._barcode = None
        self._cartridge_size_bytes = None
        self._write_protection_enabled = None
        self._cartridge_size_bytes_enum = None
        self.discriminator = None

        if slot_id is not None:
            self.slot_id = slot_id
        if mail_slot_id is not None:
            self.mail_slot_id = mail_slot_id
        if barcode is not None:
            self.barcode = barcode
        if cartridge_size_bytes is not None:
            self.cartridge_size_bytes = cartridge_size_bytes
        if write_protection_enabled is not None:
            self.write_protection_enabled = write_protection_enabled
        if cartridge_size_bytes_enum is not None:
            self.cartridge_size_bytes_enum = cartridge_size_bytes_enum

    @property
    def slot_id(self):
        """Gets the slot_id of this CreateVtlCartridge.  # noqa: E501

        ID of the Slot to create the cartridge in. Optional as long as field mailSlotId is defined  # noqa: E501

        :return: The slot_id of this CreateVtlCartridge.  # noqa: E501
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this CreateVtlCartridge.

        ID of the Slot to create the cartridge in. Optional as long as field mailSlotId is defined  # noqa: E501

        :param slot_id: The slot_id of this CreateVtlCartridge.  # noqa: E501
        :type: int
        """

        self._slot_id = slot_id

    @property
    def mail_slot_id(self):
        """Gets the mail_slot_id of this CreateVtlCartridge.  # noqa: E501

        ID of the Mail Slot to create the cartridge in. Optional as long as field slotId is defined  # noqa: E501

        :return: The mail_slot_id of this CreateVtlCartridge.  # noqa: E501
        :rtype: int
        """
        return self._mail_slot_id

    @mail_slot_id.setter
    def mail_slot_id(self, mail_slot_id):
        """Sets the mail_slot_id of this CreateVtlCartridge.

        ID of the Mail Slot to create the cartridge in. Optional as long as field slotId is defined  # noqa: E501

        :param mail_slot_id: The mail_slot_id of this CreateVtlCartridge.  # noqa: E501
        :type: int
        """

        self._mail_slot_id = mail_slot_id

    @property
    def barcode(self):
        """Gets the barcode of this CreateVtlCartridge.  # noqa: E501

        8 character alphanumeric barcode used for the cartridge. Optional: If not present, barcode will be set to the next value in the barcode template  # noqa: E501

        :return: The barcode of this CreateVtlCartridge.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this CreateVtlCartridge.

        8 character alphanumeric barcode used for the cartridge. Optional: If not present, barcode will be set to the next value in the barcode template  # noqa: E501

        :param barcode: The barcode of this CreateVtlCartridge.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def cartridge_size_bytes(self):
        """Gets the cartridge_size_bytes of this CreateVtlCartridge.  # noqa: E501

        Maximum amount of data that can be stored in the cartridge, in bytes. Optional: If not present, will default to size specified in library configuration  # noqa: E501

        :return: The cartridge_size_bytes of this CreateVtlCartridge.  # noqa: E501
        :rtype: int
        """
        return self._cartridge_size_bytes

    @cartridge_size_bytes.setter
    def cartridge_size_bytes(self, cartridge_size_bytes):
        """Sets the cartridge_size_bytes of this CreateVtlCartridge.

        Maximum amount of data that can be stored in the cartridge, in bytes. Optional: If not present, will default to size specified in library configuration  # noqa: E501

        :param cartridge_size_bytes: The cartridge_size_bytes of this CreateVtlCartridge.  # noqa: E501
        :type: int
        """

        self._cartridge_size_bytes = cartridge_size_bytes

    @property
    def write_protection_enabled(self):
        """Gets the write_protection_enabled of this CreateVtlCartridge.  # noqa: E501

        Flag true or false decides cartridge should be write protected. Optional: If not present, will default to false  # noqa: E501

        :return: The write_protection_enabled of this CreateVtlCartridge.  # noqa: E501
        :rtype: bool
        """
        return self._write_protection_enabled

    @write_protection_enabled.setter
    def write_protection_enabled(self, write_protection_enabled):
        """Sets the write_protection_enabled of this CreateVtlCartridge.

        Flag true or false decides cartridge should be write protected. Optional: If not present, will default to false  # noqa: E501

        :param write_protection_enabled: The write_protection_enabled of this CreateVtlCartridge.  # noqa: E501
        :type: bool
        """

        self._write_protection_enabled = write_protection_enabled

    @property
    def cartridge_size_bytes_enum(self):
        """Gets the cartridge_size_bytes_enum of this CreateVtlCartridge.  # noqa: E501


        :return: The cartridge_size_bytes_enum of this CreateVtlCartridge.  # noqa: E501
        :rtype: int
        """
        return self._cartridge_size_bytes_enum

    @cartridge_size_bytes_enum.setter
    def cartridge_size_bytes_enum(self, cartridge_size_bytes_enum):
        """Sets the cartridge_size_bytes_enum of this CreateVtlCartridge.


        :param cartridge_size_bytes_enum: The cartridge_size_bytes_enum of this CreateVtlCartridge.  # noqa: E501
        :type: int
        """

        self._cartridge_size_bytes_enum = cartridge_size_bytes_enum

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVtlCartridge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVtlCartridge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
