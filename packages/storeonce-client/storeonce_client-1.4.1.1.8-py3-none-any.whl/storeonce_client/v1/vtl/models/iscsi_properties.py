# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ISCSIProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_name': 'str',
        'target_alias': 'str',
        'node_name': 'str',
        'port_string': 'L10nStringStruct'
    }

    attribute_map = {
        'target_name': 'targetName',
        'target_alias': 'targetAlias',
        'node_name': 'nodeName',
        'port_string': 'portString'
    }

    def __init__(self, target_name=None, target_alias=None, node_name=None, port_string=None):  # noqa: E501
        """ISCSIProperties - a model defined in Swagger"""  # noqa: E501

        self._target_name = None
        self._target_alias = None
        self._node_name = None
        self._port_string = None
        self.discriminator = None

        if target_name is not None:
            self.target_name = target_name
        if target_alias is not None:
            self.target_alias = target_alias
        if node_name is not None:
            self.node_name = node_name
        if port_string is not None:
            self.port_string = port_string

    @property
    def target_name(self):
        """Gets the target_name of this ISCSIProperties.  # noqa: E501

        ISCSI qualified name for the drive  # noqa: E501

        :return: The target_name of this ISCSIProperties.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this ISCSIProperties.

        ISCSI qualified name for the drive  # noqa: E501

        :param target_name: The target_name of this ISCSIProperties.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def target_alias(self):
        """Gets the target_alias of this ISCSIProperties.  # noqa: E501

        ISCSI alias for the drive  # noqa: E501

        :return: The target_alias of this ISCSIProperties.  # noqa: E501
        :rtype: str
        """
        return self._target_alias

    @target_alias.setter
    def target_alias(self, target_alias):
        """Sets the target_alias of this ISCSIProperties.

        ISCSI alias for the drive  # noqa: E501

        :param target_alias: The target_alias of this ISCSIProperties.  # noqa: E501
        :type: str
        """

        self._target_alias = target_alias

    @property
    def node_name(self):
        """Gets the node_name of this ISCSIProperties.  # noqa: E501

        The World Wide Node Name for the drive  # noqa: E501

        :return: The node_name of this ISCSIProperties.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this ISCSIProperties.

        The World Wide Node Name for the drive  # noqa: E501

        :param node_name: The node_name of this ISCSIProperties.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def port_string(self):
        """Gets the port_string of this ISCSIProperties.  # noqa: E501

        Localised string representing port (iSCSI Port)  # noqa: E501

        :return: The port_string of this ISCSIProperties.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._port_string

    @port_string.setter
    def port_string(self, port_string):
        """Sets the port_string of this ISCSIProperties.

        Localised string representing port (iSCSI Port)  # noqa: E501

        :param port_string: The port_string of this ISCSIProperties.  # noqa: E501
        :type: L10nStringStruct
        """

        self._port_string = port_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ISCSIProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ISCSIProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
