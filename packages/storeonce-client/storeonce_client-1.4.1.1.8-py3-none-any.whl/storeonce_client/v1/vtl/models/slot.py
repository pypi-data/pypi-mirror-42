# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Slot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cartridge': 'DriveCartridgeGetModel',
        'name': 'L10nStringStruct',
        'current_cartridge_location': 'L10nStringStruct'
    }

    attribute_map = {
        'id': 'id',
        'cartridge': 'cartridge',
        'name': 'name',
        'current_cartridge_location': 'currentCartridgeLocation'
    }

    def __init__(self, id=None, cartridge=None, name=None, current_cartridge_location=None):  # noqa: E501
        """Slot - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._cartridge = None
        self._name = None
        self._current_cartridge_location = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if cartridge is not None:
            self.cartridge = cartridge
        if name is not None:
            self.name = name
        if current_cartridge_location is not None:
            self.current_cartridge_location = current_cartridge_location

    @property
    def id(self):
        """Gets the id of this Slot.  # noqa: E501

        The slot ID which this object corresponds to  # noqa: E501

        :return: The id of this Slot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Slot.

        The slot ID which this object corresponds to  # noqa: E501

        :param id: The id of this Slot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cartridge(self):
        """Gets the cartridge of this Slot.  # noqa: E501

        Properties of the cartridge present in the slot. Valid only if a cartridge is present into the slot.  # noqa: E501

        :return: The cartridge of this Slot.  # noqa: E501
        :rtype: DriveCartridgeGetModel
        """
        return self._cartridge

    @cartridge.setter
    def cartridge(self, cartridge):
        """Sets the cartridge of this Slot.

        Properties of the cartridge present in the slot. Valid only if a cartridge is present into the slot.  # noqa: E501

        :param cartridge: The cartridge of this Slot.  # noqa: E501
        :type: DriveCartridgeGetModel
        """

        self._cartridge = cartridge

    @property
    def name(self):
        """Gets the name of this Slot.  # noqa: E501

        Localized string representing the slot as a string (Slot 1, Slot 2)  # noqa: E501

        :return: The name of this Slot.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Slot.

        Localized string representing the slot as a string (Slot 1, Slot 2)  # noqa: E501

        :param name: The name of this Slot.  # noqa: E501
        :type: L10nStringStruct
        """

        self._name = name

    @property
    def current_cartridge_location(self):
        """Gets the current_cartridge_location of this Slot.  # noqa: E501

        Localized string representing location of cartridge if it is moved out of slot  # noqa: E501

        :return: The current_cartridge_location of this Slot.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._current_cartridge_location

    @current_cartridge_location.setter
    def current_cartridge_location(self, current_cartridge_location):
        """Sets the current_cartridge_location of this Slot.

        Localized string representing location of cartridge if it is moved out of slot  # noqa: E501

        :param current_cartridge_location: The current_cartridge_location of this Slot.  # noqa: E501
        :type: L10nStringStruct
        """

        self._current_cartridge_location = current_cartridge_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Slot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Slot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
