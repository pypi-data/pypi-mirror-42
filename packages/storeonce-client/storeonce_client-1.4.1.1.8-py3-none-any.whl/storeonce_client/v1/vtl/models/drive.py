# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Drive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'drive_status': 'int',
        'drive_status_string': 'L10nStringStruct',
        'serial_number': 'str',
        'drive_emulation': 'int',
        'drive_emulation_string': 'L10nStringStruct',
        'fibre_channel_properties': 'FibreChannelProperties',
        'iscsi_properties': 'ISCSIProperties',
        'cartridge': 'DriveCartridgeGetModel',
        'name': 'L10nStringStruct',
        'protocol_type': 'int',
        'protocol_type_string': 'L10nStringStruct'
    }

    attribute_map = {
        'id': 'id',
        'drive_status': 'driveStatus',
        'drive_status_string': 'driveStatusString',
        'serial_number': 'serialNumber',
        'drive_emulation': 'driveEmulation',
        'drive_emulation_string': 'driveEmulationString',
        'fibre_channel_properties': 'fibreChannelProperties',
        'iscsi_properties': 'iscsiProperties',
        'cartridge': 'cartridge',
        'name': 'name',
        'protocol_type': 'protocolType',
        'protocol_type_string': 'protocolTypeString'
    }

    def __init__(self, id=None, drive_status=None, drive_status_string=None, serial_number=None, drive_emulation=None, drive_emulation_string=None, fibre_channel_properties=None, iscsi_properties=None, cartridge=None, name=None, protocol_type=None, protocol_type_string=None):  # noqa: E501
        """Drive - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._drive_status = None
        self._drive_status_string = None
        self._serial_number = None
        self._drive_emulation = None
        self._drive_emulation_string = None
        self._fibre_channel_properties = None
        self._iscsi_properties = None
        self._cartridge = None
        self._name = None
        self._protocol_type = None
        self._protocol_type_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if drive_status is not None:
            self.drive_status = drive_status
        if drive_status_string is not None:
            self.drive_status_string = drive_status_string
        if serial_number is not None:
            self.serial_number = serial_number
        if drive_emulation is not None:
            self.drive_emulation = drive_emulation
        if drive_emulation_string is not None:
            self.drive_emulation_string = drive_emulation_string
        if fibre_channel_properties is not None:
            self.fibre_channel_properties = fibre_channel_properties
        if iscsi_properties is not None:
            self.iscsi_properties = iscsi_properties
        if cartridge is not None:
            self.cartridge = cartridge
        if name is not None:
            self.name = name
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if protocol_type_string is not None:
            self.protocol_type_string = protocol_type_string

    @property
    def id(self):
        """Gets the id of this Drive.  # noqa: E501

        The drive ID which this object corresponds to  # noqa: E501

        :return: The id of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Drive.

        The drive ID which this object corresponds to  # noqa: E501

        :param id: The id of this Drive.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def drive_status(self):
        """Gets the drive_status of this Drive.  # noqa: E501

        Enumeration of the status of the drive  # noqa: E501

        :return: The drive_status of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._drive_status

    @drive_status.setter
    def drive_status(self, drive_status):
        """Sets the drive_status of this Drive.

        Enumeration of the status of the drive  # noqa: E501

        :param drive_status: The drive_status of this Drive.  # noqa: E501
        :type: int
        """

        self._drive_status = drive_status

    @property
    def drive_status_string(self):
        """Gets the drive_status_string of this Drive.  # noqa: E501

        Localised string representing drive status.  # noqa: E501

        :return: The drive_status_string of this Drive.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._drive_status_string

    @drive_status_string.setter
    def drive_status_string(self, drive_status_string):
        """Sets the drive_status_string of this Drive.

        Localised string representing drive status.  # noqa: E501

        :param drive_status_string: The drive_status_string of this Drive.  # noqa: E501
        :type: L10nStringStruct
        """

        self._drive_status_string = drive_status_string

    @property
    def serial_number(self):
        """Gets the serial_number of this Drive.  # noqa: E501

        Serial number of the drive  # noqa: E501

        :return: The serial_number of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Drive.

        Serial number of the drive  # noqa: E501

        :param serial_number: The serial_number of this Drive.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def drive_emulation(self):
        """Gets the drive_emulation of this Drive.  # noqa: E501

        The type of drive emulation used for this drive  # noqa: E501

        :return: The drive_emulation of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._drive_emulation

    @drive_emulation.setter
    def drive_emulation(self, drive_emulation):
        """Sets the drive_emulation of this Drive.

        The type of drive emulation used for this drive  # noqa: E501

        :param drive_emulation: The drive_emulation of this Drive.  # noqa: E501
        :type: int
        """

        self._drive_emulation = drive_emulation

    @property
    def drive_emulation_string(self):
        """Gets the drive_emulation_string of this Drive.  # noqa: E501

        Localised string representing drive emulation.  # noqa: E501

        :return: The drive_emulation_string of this Drive.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._drive_emulation_string

    @drive_emulation_string.setter
    def drive_emulation_string(self, drive_emulation_string):
        """Sets the drive_emulation_string of this Drive.

        Localised string representing drive emulation.  # noqa: E501

        :param drive_emulation_string: The drive_emulation_string of this Drive.  # noqa: E501
        :type: L10nStringStruct
        """

        self._drive_emulation_string = drive_emulation_string

    @property
    def fibre_channel_properties(self):
        """Gets the fibre_channel_properties of this Drive.  # noqa: E501

        Fibre Channel related properties. Valid only if the library is set to FC  # noqa: E501

        :return: The fibre_channel_properties of this Drive.  # noqa: E501
        :rtype: FibreChannelProperties
        """
        return self._fibre_channel_properties

    @fibre_channel_properties.setter
    def fibre_channel_properties(self, fibre_channel_properties):
        """Sets the fibre_channel_properties of this Drive.

        Fibre Channel related properties. Valid only if the library is set to FC  # noqa: E501

        :param fibre_channel_properties: The fibre_channel_properties of this Drive.  # noqa: E501
        :type: FibreChannelProperties
        """

        self._fibre_channel_properties = fibre_channel_properties

    @property
    def iscsi_properties(self):
        """Gets the iscsi_properties of this Drive.  # noqa: E501

        iSCSI related properties. Valid only if the library is set to iSCSI  # noqa: E501

        :return: The iscsi_properties of this Drive.  # noqa: E501
        :rtype: ISCSIProperties
        """
        return self._iscsi_properties

    @iscsi_properties.setter
    def iscsi_properties(self, iscsi_properties):
        """Sets the iscsi_properties of this Drive.

        iSCSI related properties. Valid only if the library is set to iSCSI  # noqa: E501

        :param iscsi_properties: The iscsi_properties of this Drive.  # noqa: E501
        :type: ISCSIProperties
        """

        self._iscsi_properties = iscsi_properties

    @property
    def cartridge(self):
        """Gets the cartridge of this Drive.  # noqa: E501

        Properties of the cartridge loaded in the drive. Valid only if a cartridge is loaded into the drive  # noqa: E501

        :return: The cartridge of this Drive.  # noqa: E501
        :rtype: DriveCartridgeGetModel
        """
        return self._cartridge

    @cartridge.setter
    def cartridge(self, cartridge):
        """Sets the cartridge of this Drive.

        Properties of the cartridge loaded in the drive. Valid only if a cartridge is loaded into the drive  # noqa: E501

        :param cartridge: The cartridge of this Drive.  # noqa: E501
        :type: DriveCartridgeGetModel
        """

        self._cartridge = cartridge

    @property
    def name(self):
        """Gets the name of this Drive.  # noqa: E501

        Localized string representing the drive name as string (Drive 1, Drive 2)  # noqa: E501

        :return: The name of this Drive.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Drive.

        Localized string representing the drive name as string (Drive 1, Drive 2)  # noqa: E501

        :param name: The name of this Drive.  # noqa: E501
        :type: L10nStringStruct
        """

        self._name = name

    @property
    def protocol_type(self):
        """Gets the protocol_type of this Drive.  # noqa: E501

        The Type of protocol used for this drive.  # noqa: E501

        :return: The protocol_type of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this Drive.

        The Type of protocol used for this drive.  # noqa: E501

        :param protocol_type: The protocol_type of this Drive.  # noqa: E501
        :type: int
        """

        self._protocol_type = protocol_type

    @property
    def protocol_type_string(self):
        """Gets the protocol_type_string of this Drive.  # noqa: E501

        Localised string representing type of protocol type.  # noqa: E501

        :return: The protocol_type_string of this Drive.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._protocol_type_string

    @protocol_type_string.setter
    def protocol_type_string(self, protocol_type_string):
        """Sets the protocol_type_string of this Drive.

        Localised string representing type of protocol type.  # noqa: E501

        :param protocol_type_string: The protocol_type_string of this Drive.  # noqa: E501
        :type: L10nStringStruct
        """

        self._protocol_type_string = protocol_type_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Drive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Drive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
