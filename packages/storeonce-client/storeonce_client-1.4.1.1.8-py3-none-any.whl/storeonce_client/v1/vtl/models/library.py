# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Library(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'health_level': 'int',
        'health_level_string': 'L10nStringStruct',
        'library_status': 'int',
        'library_status_string': 'L10nStringStruct',
        'replication': 'LibraryReplication',
        'serial_number': 'str',
        'num_slots': 'int',
        'num_mail_slots': 'int',
        'default_cartridge_size_bytes': 'int',
        'num_cartridges': 'int',
        'num_drives': 'int',
        'num_online_drives': 'int',
        'user_bytes': 'int',
        'disk_bytes': 'int',
        'dedupe_ratio': 'float',
        'library_emulation': 'int',
        'library_emulation_string': 'L10nStringStruct',
        'drive_emulation': 'int',
        'drive_emulation_string': 'L10nStringStruct',
        'barcode_length': 'int',
        'encryption_enabled': 'bool',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'backup_application': 'int',
        'backup_application_string': 'L10nStringStruct',
        'backup_application_other': 'str',
        'backup_data': 'int',
        'backup_data_string': 'L10nStringStruct',
        'backup_data_other': 'str',
        'secure_erase_mode': 'int',
        'secure_erase_mode_string': 'L10nStringStruct',
        'barcode_template': 'BarcodeTemplate',
        'protocol': 'Protocol',
        'dedupe_store_id': 'int',
        'media_changer_device': 'L10nStringStruct',
        'media_changer_status': 'int',
        'media_changer_status_string': 'L10nStringStruct',
        'created_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'health_level': 'healthLevel',
        'health_level_string': 'healthLevelString',
        'library_status': 'libraryStatus',
        'library_status_string': 'libraryStatusString',
        'replication': 'replication',
        'serial_number': 'serialNumber',
        'num_slots': 'numSlots',
        'num_mail_slots': 'numMailSlots',
        'default_cartridge_size_bytes': 'defaultCartridgeSizeBytes',
        'num_cartridges': 'numCartridges',
        'num_drives': 'numDrives',
        'num_online_drives': 'numOnlineDrives',
        'user_bytes': 'userBytes',
        'disk_bytes': 'diskBytes',
        'dedupe_ratio': 'dedupeRatio',
        'library_emulation': 'libraryEmulation',
        'library_emulation_string': 'libraryEmulationString',
        'drive_emulation': 'driveEmulation',
        'drive_emulation_string': 'driveEmulationString',
        'barcode_length': 'barcodeLength',
        'encryption_enabled': 'encryptionEnabled',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'backup_application': 'backupApplication',
        'backup_application_string': 'backupApplicationString',
        'backup_application_other': 'backupApplicationOther',
        'backup_data': 'backupData',
        'backup_data_string': 'backupDataString',
        'backup_data_other': 'backupDataOther',
        'secure_erase_mode': 'secureEraseMode',
        'secure_erase_mode_string': 'secureEraseModeString',
        'barcode_template': 'barcodeTemplate',
        'protocol': 'protocol',
        'dedupe_store_id': 'dedupeStoreId',
        'media_changer_device': 'mediaChangerDevice',
        'media_changer_status': 'mediaChangerStatus',
        'media_changer_status_string': 'mediaChangerStatusString',
        'created_date': 'createdDate'
    }

    def __init__(self, id=None, name=None, health_level=None, health_level_string=None, library_status=None, library_status_string=None, replication=None, serial_number=None, num_slots=None, num_mail_slots=None, default_cartridge_size_bytes=None, num_cartridges=None, num_drives=None, num_online_drives=None, user_bytes=None, disk_bytes=None, dedupe_ratio=None, library_emulation=None, library_emulation_string=None, drive_emulation=None, drive_emulation_string=None, barcode_length=None, encryption_enabled=False, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, backup_application=None, backup_application_string=None, backup_application_other=None, backup_data=None, backup_data_string=None, backup_data_other=None, secure_erase_mode=None, secure_erase_mode_string=None, barcode_template=None, protocol=None, dedupe_store_id=None, media_changer_device=None, media_changer_status=None, media_changer_status_string=None, created_date=None):  # noqa: E501
        """Library - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._health_level = None
        self._health_level_string = None
        self._library_status = None
        self._library_status_string = None
        self._replication = None
        self._serial_number = None
        self._num_slots = None
        self._num_mail_slots = None
        self._default_cartridge_size_bytes = None
        self._num_cartridges = None
        self._num_drives = None
        self._num_online_drives = None
        self._user_bytes = None
        self._disk_bytes = None
        self._dedupe_ratio = None
        self._library_emulation = None
        self._library_emulation_string = None
        self._drive_emulation = None
        self._drive_emulation_string = None
        self._barcode_length = None
        self._encryption_enabled = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._backup_application = None
        self._backup_application_string = None
        self._backup_application_other = None
        self._backup_data = None
        self._backup_data_string = None
        self._backup_data_other = None
        self._secure_erase_mode = None
        self._secure_erase_mode_string = None
        self._barcode_template = None
        self._protocol = None
        self._dedupe_store_id = None
        self._media_changer_device = None
        self._media_changer_status = None
        self._media_changer_status_string = None
        self._created_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if health_level is not None:
            self.health_level = health_level
        if health_level_string is not None:
            self.health_level_string = health_level_string
        if library_status is not None:
            self.library_status = library_status
        if library_status_string is not None:
            self.library_status_string = library_status_string
        if replication is not None:
            self.replication = replication
        if serial_number is not None:
            self.serial_number = serial_number
        if num_slots is not None:
            self.num_slots = num_slots
        if num_mail_slots is not None:
            self.num_mail_slots = num_mail_slots
        if default_cartridge_size_bytes is not None:
            self.default_cartridge_size_bytes = default_cartridge_size_bytes
        if num_cartridges is not None:
            self.num_cartridges = num_cartridges
        if num_drives is not None:
            self.num_drives = num_drives
        if num_online_drives is not None:
            self.num_online_drives = num_online_drives
        if user_bytes is not None:
            self.user_bytes = user_bytes
        if disk_bytes is not None:
            self.disk_bytes = disk_bytes
        if dedupe_ratio is not None:
            self.dedupe_ratio = dedupe_ratio
        if library_emulation is not None:
            self.library_emulation = library_emulation
        if library_emulation_string is not None:
            self.library_emulation_string = library_emulation_string
        if drive_emulation is not None:
            self.drive_emulation = drive_emulation
        if drive_emulation_string is not None:
            self.drive_emulation_string = drive_emulation_string
        if barcode_length is not None:
            self.barcode_length = barcode_length
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if user_data_stored_quota_enabled is not None:
            self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        if user_data_stored_quota_bytes is not None:
            self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        if size_on_disk_quota_enabled is not None:
            self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        if size_on_disk_quota_bytes is not None:
            self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        if backup_application is not None:
            self.backup_application = backup_application
        if backup_application_string is not None:
            self.backup_application_string = backup_application_string
        if backup_application_other is not None:
            self.backup_application_other = backup_application_other
        if backup_data is not None:
            self.backup_data = backup_data
        if backup_data_string is not None:
            self.backup_data_string = backup_data_string
        if backup_data_other is not None:
            self.backup_data_other = backup_data_other
        if secure_erase_mode is not None:
            self.secure_erase_mode = secure_erase_mode
        if secure_erase_mode_string is not None:
            self.secure_erase_mode_string = secure_erase_mode_string
        if barcode_template is not None:
            self.barcode_template = barcode_template
        if protocol is not None:
            self.protocol = protocol
        if dedupe_store_id is not None:
            self.dedupe_store_id = dedupe_store_id
        if media_changer_device is not None:
            self.media_changer_device = media_changer_device
        if media_changer_status is not None:
            self.media_changer_status = media_changer_status
        if media_changer_status_string is not None:
            self.media_changer_status_string = media_changer_status_string
        if created_date is not None:
            self.created_date = created_date

    @property
    def id(self):
        """Gets the id of this Library.  # noqa: E501

        The library ID which this object corresponds to  # noqa: E501

        :return: The id of this Library.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Library.

        The library ID which this object corresponds to  # noqa: E501

        :param id: The id of this Library.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Library.  # noqa: E501

        Name of the Library  # noqa: E501

        :return: The name of this Library.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Library.

        Name of the Library  # noqa: E501

        :param name: The name of this Library.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def health_level(self):
        """Gets the health_level of this Library.  # noqa: E501

        Enumeration of the health level of the library  # noqa: E501

        :return: The health_level of this Library.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this Library.

        Enumeration of the health level of the library  # noqa: E501

        :param health_level: The health_level of this Library.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def health_level_string(self):
        """Gets the health_level_string of this Library.  # noqa: E501

        Localised string representing Health level  # noqa: E501

        :return: The health_level_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this Library.

        Localised string representing Health level  # noqa: E501

        :param health_level_string: The health_level_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._health_level_string = health_level_string

    @property
    def library_status(self):
        """Gets the library_status of this Library.  # noqa: E501

        Enumeration of the status of the library  # noqa: E501

        :return: The library_status of this Library.  # noqa: E501
        :rtype: int
        """
        return self._library_status

    @library_status.setter
    def library_status(self, library_status):
        """Sets the library_status of this Library.

        Enumeration of the status of the library  # noqa: E501

        :param library_status: The library_status of this Library.  # noqa: E501
        :type: int
        """

        self._library_status = library_status

    @property
    def library_status_string(self):
        """Gets the library_status_string of this Library.  # noqa: E501

        Localised string representing Library status  # noqa: E501

        :return: The library_status_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._library_status_string

    @library_status_string.setter
    def library_status_string(self, library_status_string):
        """Sets the library_status_string of this Library.

        Localised string representing Library status  # noqa: E501

        :param library_status_string: The library_status_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._library_status_string = library_status_string

    @property
    def replication(self):
        """Gets the replication of this Library.  # noqa: E501

        Replication Information for the library  # noqa: E501

        :return: The replication of this Library.  # noqa: E501
        :rtype: LibraryReplication
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this Library.

        Replication Information for the library  # noqa: E501

        :param replication: The replication of this Library.  # noqa: E501
        :type: LibraryReplication
        """

        self._replication = replication

    @property
    def serial_number(self):
        """Gets the serial_number of this Library.  # noqa: E501

        Serial Number of the Media Changer in the library  # noqa: E501

        :return: The serial_number of this Library.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Library.

        Serial Number of the Media Changer in the library  # noqa: E501

        :param serial_number: The serial_number of this Library.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def num_slots(self):
        """Gets the num_slots of this Library.  # noqa: E501

        Number of slots currently in the library  # noqa: E501

        :return: The num_slots of this Library.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this Library.

        Number of slots currently in the library  # noqa: E501

        :param num_slots: The num_slots of this Library.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def num_mail_slots(self):
        """Gets the num_mail_slots of this Library.  # noqa: E501

        Number of mail slots currently in the library  # noqa: E501

        :return: The num_mail_slots of this Library.  # noqa: E501
        :rtype: int
        """
        return self._num_mail_slots

    @num_mail_slots.setter
    def num_mail_slots(self, num_mail_slots):
        """Sets the num_mail_slots of this Library.

        Number of mail slots currently in the library  # noqa: E501

        :param num_mail_slots: The num_mail_slots of this Library.  # noqa: E501
        :type: int
        """

        self._num_mail_slots = num_mail_slots

    @property
    def default_cartridge_size_bytes(self):
        """Gets the default_cartridge_size_bytes of this Library.  # noqa: E501

        Default size for all new cartridges created in this library  # noqa: E501

        :return: The default_cartridge_size_bytes of this Library.  # noqa: E501
        :rtype: int
        """
        return self._default_cartridge_size_bytes

    @default_cartridge_size_bytes.setter
    def default_cartridge_size_bytes(self, default_cartridge_size_bytes):
        """Sets the default_cartridge_size_bytes of this Library.

        Default size for all new cartridges created in this library  # noqa: E501

        :param default_cartridge_size_bytes: The default_cartridge_size_bytes of this Library.  # noqa: E501
        :type: int
        """

        self._default_cartridge_size_bytes = default_cartridge_size_bytes

    @property
    def num_cartridges(self):
        """Gets the num_cartridges of this Library.  # noqa: E501

        Number of cartridges currently in the library  # noqa: E501

        :return: The num_cartridges of this Library.  # noqa: E501
        :rtype: int
        """
        return self._num_cartridges

    @num_cartridges.setter
    def num_cartridges(self, num_cartridges):
        """Sets the num_cartridges of this Library.

        Number of cartridges currently in the library  # noqa: E501

        :param num_cartridges: The num_cartridges of this Library.  # noqa: E501
        :type: int
        """

        self._num_cartridges = num_cartridges

    @property
    def num_drives(self):
        """Gets the num_drives of this Library.  # noqa: E501

        Total number of drives in this library  # noqa: E501

        :return: The num_drives of this Library.  # noqa: E501
        :rtype: int
        """
        return self._num_drives

    @num_drives.setter
    def num_drives(self, num_drives):
        """Sets the num_drives of this Library.

        Total number of drives in this library  # noqa: E501

        :param num_drives: The num_drives of this Library.  # noqa: E501
        :type: int
        """

        self._num_drives = num_drives

    @property
    def num_online_drives(self):
        """Gets the num_online_drives of this Library.  # noqa: E501

        Total number of drives in this library that are online and ready for use  # noqa: E501

        :return: The num_online_drives of this Library.  # noqa: E501
        :rtype: int
        """
        return self._num_online_drives

    @num_online_drives.setter
    def num_online_drives(self, num_online_drives):
        """Sets the num_online_drives of this Library.

        Total number of drives in this library that are online and ready for use  # noqa: E501

        :param num_online_drives: The num_online_drives of this Library.  # noqa: E501
        :type: int
        """

        self._num_online_drives = num_online_drives

    @property
    def user_bytes(self):
        """Gets the user_bytes of this Library.  # noqa: E501

        Total logical size of the user data that has been stored in this library, in bytes  # noqa: E501

        :return: The user_bytes of this Library.  # noqa: E501
        :rtype: int
        """
        return self._user_bytes

    @user_bytes.setter
    def user_bytes(self, user_bytes):
        """Sets the user_bytes of this Library.

        Total logical size of the user data that has been stored in this library, in bytes  # noqa: E501

        :param user_bytes: The user_bytes of this Library.  # noqa: E501
        :type: int
        """

        self._user_bytes = user_bytes

    @property
    def disk_bytes(self):
        """Gets the disk_bytes of this Library.  # noqa: E501

        Total physical size of the user data that has been stored in this library, in bytes  # noqa: E501

        :return: The disk_bytes of this Library.  # noqa: E501
        :rtype: int
        """
        return self._disk_bytes

    @disk_bytes.setter
    def disk_bytes(self, disk_bytes):
        """Sets the disk_bytes of this Library.

        Total physical size of the user data that has been stored in this library, in bytes  # noqa: E501

        :param disk_bytes: The disk_bytes of this Library.  # noqa: E501
        :type: int
        """

        self._disk_bytes = disk_bytes

    @property
    def dedupe_ratio(self):
        """Gets the dedupe_ratio of this Library.  # noqa: E501

        Current deduplication ratio for this library  # noqa: E501

        :return: The dedupe_ratio of this Library.  # noqa: E501
        :rtype: float
        """
        return self._dedupe_ratio

    @dedupe_ratio.setter
    def dedupe_ratio(self, dedupe_ratio):
        """Sets the dedupe_ratio of this Library.

        Current deduplication ratio for this library  # noqa: E501

        :param dedupe_ratio: The dedupe_ratio of this Library.  # noqa: E501
        :type: float
        """

        self._dedupe_ratio = dedupe_ratio

    @property
    def library_emulation(self):
        """Gets the library_emulation of this Library.  # noqa: E501

        The type of library emulation used for this library  # noqa: E501

        :return: The library_emulation of this Library.  # noqa: E501
        :rtype: int
        """
        return self._library_emulation

    @library_emulation.setter
    def library_emulation(self, library_emulation):
        """Sets the library_emulation of this Library.

        The type of library emulation used for this library  # noqa: E501

        :param library_emulation: The library_emulation of this Library.  # noqa: E501
        :type: int
        """

        self._library_emulation = library_emulation

    @property
    def library_emulation_string(self):
        """Gets the library_emulation_string of this Library.  # noqa: E501

        Localised string representing Library emulation  # noqa: E501

        :return: The library_emulation_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._library_emulation_string

    @library_emulation_string.setter
    def library_emulation_string(self, library_emulation_string):
        """Sets the library_emulation_string of this Library.

        Localised string representing Library emulation  # noqa: E501

        :param library_emulation_string: The library_emulation_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._library_emulation_string = library_emulation_string

    @property
    def drive_emulation(self):
        """Gets the drive_emulation of this Library.  # noqa: E501

        The type of drive emulation used for this library  # noqa: E501

        :return: The drive_emulation of this Library.  # noqa: E501
        :rtype: int
        """
        return self._drive_emulation

    @drive_emulation.setter
    def drive_emulation(self, drive_emulation):
        """Sets the drive_emulation of this Library.

        The type of drive emulation used for this library  # noqa: E501

        :param drive_emulation: The drive_emulation of this Library.  # noqa: E501
        :type: int
        """

        self._drive_emulation = drive_emulation

    @property
    def drive_emulation_string(self):
        """Gets the drive_emulation_string of this Library.  # noqa: E501

        Localised string representing Drive emulation  # noqa: E501

        :return: The drive_emulation_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._drive_emulation_string

    @drive_emulation_string.setter
    def drive_emulation_string(self, drive_emulation_string):
        """Sets the drive_emulation_string of this Library.

        Localised string representing Drive emulation  # noqa: E501

        :param drive_emulation_string: The drive_emulation_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._drive_emulation_string = drive_emulation_string

    @property
    def barcode_length(self):
        """Gets the barcode_length of this Library.  # noqa: E501

        Barcode length used in this library  # noqa: E501

        :return: The barcode_length of this Library.  # noqa: E501
        :rtype: int
        """
        return self._barcode_length

    @barcode_length.setter
    def barcode_length(self, barcode_length):
        """Sets the barcode_length of this Library.

        Barcode length used in this library  # noqa: E501

        :param barcode_length: The barcode_length of this Library.  # noqa: E501
        :type: int
        """

        self._barcode_length = barcode_length

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this Library.  # noqa: E501

        Flag true or false decides encryption is enabled on this library  # noqa: E501

        :return: The encryption_enabled of this Library.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this Library.

        Flag true or false decides encryption is enabled on this library  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this Library.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this Library.  # noqa: E501

        Flag true or false decides logical data size quota is enabled  # noqa: E501

        :return: The user_data_stored_quota_enabled of this Library.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this Library.

        Flag true or false decides logical data size quota is enabled  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this Library.  # noqa: E501
        :type: bool
        """

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this Library.  # noqa: E501

        The logical data size quota in bytes. Valid only if field userDataStoredQuotaEnabled is true.  # noqa: E501

        :return: The user_data_stored_quota_bytes of this Library.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this Library.

        The logical data size quota in bytes. Valid only if field userDataStoredQuotaEnabled is true.  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this Library.  # noqa: E501
        :type: int
        """

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this Library.  # noqa: E501

        Flag true or false decides physical data size quota is enabled.  # noqa: E501

        :return: The size_on_disk_quota_enabled of this Library.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this Library.

        Flag true or false decides physical data size quota is enabled.  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this Library.  # noqa: E501
        :type: bool
        """

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this Library.  # noqa: E501

        The physical data size quota in bytes. Valid only if field sizeOnDiskQuotaEnabled is true.  # noqa: E501

        :return: The size_on_disk_quota_bytes of this Library.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this Library.

        The physical data size quota in bytes. Valid only if field sizeOnDiskQuotaEnabled is true.  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this Library.  # noqa: E501
        :type: int
        """

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def backup_application(self):
        """Gets the backup_application of this Library.  # noqa: E501

        Backup application used  # noqa: E501

        :return: The backup_application of this Library.  # noqa: E501
        :rtype: int
        """
        return self._backup_application

    @backup_application.setter
    def backup_application(self, backup_application):
        """Sets the backup_application of this Library.

        Backup application used  # noqa: E501

        :param backup_application: The backup_application of this Library.  # noqa: E501
        :type: int
        """

        self._backup_application = backup_application

    @property
    def backup_application_string(self):
        """Gets the backup_application_string of this Library.  # noqa: E501

        Localised string representing Backup application  # noqa: E501

        :return: The backup_application_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._backup_application_string

    @backup_application_string.setter
    def backup_application_string(self, backup_application_string):
        """Sets the backup_application_string of this Library.

        Localised string representing Backup application  # noqa: E501

        :param backup_application_string: The backup_application_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._backup_application_string = backup_application_string

    @property
    def backup_application_other(self):
        """Gets the backup_application_other of this Library.  # noqa: E501

        The name of the backup application used. Valid only if backup application is set to OTHER.  # noqa: E501

        :return: The backup_application_other of this Library.  # noqa: E501
        :rtype: str
        """
        return self._backup_application_other

    @backup_application_other.setter
    def backup_application_other(self, backup_application_other):
        """Sets the backup_application_other of this Library.

        The name of the backup application used. Valid only if backup application is set to OTHER.  # noqa: E501

        :param backup_application_other: The backup_application_other of this Library.  # noqa: E501
        :type: str
        """

        self._backup_application_other = backup_application_other

    @property
    def backup_data(self):
        """Gets the backup_data of this Library.  # noqa: E501

        The data type used  # noqa: E501

        :return: The backup_data of this Library.  # noqa: E501
        :rtype: int
        """
        return self._backup_data

    @backup_data.setter
    def backup_data(self, backup_data):
        """Sets the backup_data of this Library.

        The data type used  # noqa: E501

        :param backup_data: The backup_data of this Library.  # noqa: E501
        :type: int
        """

        self._backup_data = backup_data

    @property
    def backup_data_string(self):
        """Gets the backup_data_string of this Library.  # noqa: E501

        Localised string representing Backup Data  # noqa: E501

        :return: The backup_data_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._backup_data_string

    @backup_data_string.setter
    def backup_data_string(self, backup_data_string):
        """Sets the backup_data_string of this Library.

        Localised string representing Backup Data  # noqa: E501

        :param backup_data_string: The backup_data_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._backup_data_string = backup_data_string

    @property
    def backup_data_other(self):
        """Gets the backup_data_other of this Library.  # noqa: E501

        The name of the backup data type used. Valid only if backup data is set to OTHER.  # noqa: E501

        :return: The backup_data_other of this Library.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_other

    @backup_data_other.setter
    def backup_data_other(self, backup_data_other):
        """Sets the backup_data_other of this Library.

        The name of the backup data type used. Valid only if backup data is set to OTHER.  # noqa: E501

        :param backup_data_other: The backup_data_other of this Library.  # noqa: E501
        :type: str
        """

        self._backup_data_other = backup_data_other

    @property
    def secure_erase_mode(self):
        """Gets the secure_erase_mode of this Library.  # noqa: E501

        Configured mode for Secure Erase  # noqa: E501

        :return: The secure_erase_mode of this Library.  # noqa: E501
        :rtype: int
        """
        return self._secure_erase_mode

    @secure_erase_mode.setter
    def secure_erase_mode(self, secure_erase_mode):
        """Sets the secure_erase_mode of this Library.

        Configured mode for Secure Erase  # noqa: E501

        :param secure_erase_mode: The secure_erase_mode of this Library.  # noqa: E501
        :type: int
        """

        self._secure_erase_mode = secure_erase_mode

    @property
    def secure_erase_mode_string(self):
        """Gets the secure_erase_mode_string of this Library.  # noqa: E501

        Localised string representing Secure Erase Mode  # noqa: E501

        :return: The secure_erase_mode_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._secure_erase_mode_string

    @secure_erase_mode_string.setter
    def secure_erase_mode_string(self, secure_erase_mode_string):
        """Sets the secure_erase_mode_string of this Library.

        Localised string representing Secure Erase Mode  # noqa: E501

        :param secure_erase_mode_string: The secure_erase_mode_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._secure_erase_mode_string = secure_erase_mode_string

    @property
    def barcode_template(self):
        """Gets the barcode_template of this Library.  # noqa: E501

        Information about the barcode template assigned to this library  # noqa: E501

        :return: The barcode_template of this Library.  # noqa: E501
        :rtype: BarcodeTemplate
        """
        return self._barcode_template

    @barcode_template.setter
    def barcode_template(self, barcode_template):
        """Sets the barcode_template of this Library.

        Information about the barcode template assigned to this library  # noqa: E501

        :param barcode_template: The barcode_template of this Library.  # noqa: E501
        :type: BarcodeTemplate
        """

        self._barcode_template = barcode_template

    @property
    def protocol(self):
        """Gets the protocol of this Library.  # noqa: E501

        Information relating to the protocol used by this library  # noqa: E501

        :return: The protocol of this Library.  # noqa: E501
        :rtype: Protocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Library.

        Information relating to the protocol used by this library  # noqa: E501

        :param protocol: The protocol of this Library.  # noqa: E501
        :type: Protocol
        """

        self._protocol = protocol

    @property
    def dedupe_store_id(self):
        """Gets the dedupe_store_id of this Library.  # noqa: E501

        Unique identifier for dedupe store.  # noqa: E501

        :return: The dedupe_store_id of this Library.  # noqa: E501
        :rtype: int
        """
        return self._dedupe_store_id

    @dedupe_store_id.setter
    def dedupe_store_id(self, dedupe_store_id):
        """Sets the dedupe_store_id of this Library.

        Unique identifier for dedupe store.  # noqa: E501

        :param dedupe_store_id: The dedupe_store_id of this Library.  # noqa: E501
        :type: int
        """

        self._dedupe_store_id = dedupe_store_id

    @property
    def media_changer_device(self):
        """Gets the media_changer_device of this Library.  # noqa: E501

        Localized string representing device name (Media Changer)  # noqa: E501

        :return: The media_changer_device of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._media_changer_device

    @media_changer_device.setter
    def media_changer_device(self, media_changer_device):
        """Sets the media_changer_device of this Library.

        Localized string representing device name (Media Changer)  # noqa: E501

        :param media_changer_device: The media_changer_device of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._media_changer_device = media_changer_device

    @property
    def media_changer_status(self):
        """Gets the media_changer_status of this Library.  # noqa: E501

        Enumeration of the status of the media changer  # noqa: E501

        :return: The media_changer_status of this Library.  # noqa: E501
        :rtype: int
        """
        return self._media_changer_status

    @media_changer_status.setter
    def media_changer_status(self, media_changer_status):
        """Sets the media_changer_status of this Library.

        Enumeration of the status of the media changer  # noqa: E501

        :param media_changer_status: The media_changer_status of this Library.  # noqa: E501
        :type: int
        """

        self._media_changer_status = media_changer_status

    @property
    def media_changer_status_string(self):
        """Gets the media_changer_status_string of this Library.  # noqa: E501

        Localised string representing media changer status  # noqa: E501

        :return: The media_changer_status_string of this Library.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._media_changer_status_string

    @media_changer_status_string.setter
    def media_changer_status_string(self, media_changer_status_string):
        """Sets the media_changer_status_string of this Library.

        Localised string representing media changer status  # noqa: E501

        :param media_changer_status_string: The media_changer_status_string of this Library.  # noqa: E501
        :type: L10nStringStruct
        """

        self._media_changer_status_string = media_changer_status_string

    @property
    def created_date(self):
        """Gets the created_date of this Library.  # noqa: E501

        Date of library creation  # noqa: E501

        :return: The created_date of this Library.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Library.

        Date of library creation  # noqa: E501

        :param created_date: The created_date of this Library.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Library, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Library):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
