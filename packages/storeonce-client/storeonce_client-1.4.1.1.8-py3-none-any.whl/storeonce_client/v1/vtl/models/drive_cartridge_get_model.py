# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class DriveCartridgeGetModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'barcode': 'str',
        'cartridge_size_bytes': 'int',
        'used_bytes': 'int',
        'write_protection_enabled': 'bool',
        'replication_mapped': 'bool',
        'cartridge_written': 'bool',
        'last_written_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'barcode': 'barcode',
        'cartridge_size_bytes': 'cartridgeSizeBytes',
        'used_bytes': 'usedBytes',
        'write_protection_enabled': 'writeProtectionEnabled',
        'replication_mapped': 'replicationMapped',
        'cartridge_written': 'cartridgeWritten',
        'last_written_date': 'lastWrittenDate'
    }

    def __init__(self, id=None, barcode=None, cartridge_size_bytes=None, used_bytes=None, write_protection_enabled=False, replication_mapped=False, cartridge_written=False, last_written_date=None):  # noqa: E501
        """DriveCartridgeGetModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._barcode = None
        self._cartridge_size_bytes = None
        self._used_bytes = None
        self._write_protection_enabled = None
        self._replication_mapped = None
        self._cartridge_written = None
        self._last_written_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if barcode is not None:
            self.barcode = barcode
        if cartridge_size_bytes is not None:
            self.cartridge_size_bytes = cartridge_size_bytes
        if used_bytes is not None:
            self.used_bytes = used_bytes
        if write_protection_enabled is not None:
            self.write_protection_enabled = write_protection_enabled
        if replication_mapped is not None:
            self.replication_mapped = replication_mapped
        if cartridge_written is not None:
            self.cartridge_written = cartridge_written
        if last_written_date is not None:
            self.last_written_date = last_written_date

    @property
    def id(self):
        """Gets the id of this DriveCartridgeGetModel.  # noqa: E501

        The Cartridge ID which this object corresponds to  # noqa: E501

        :return: The id of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DriveCartridgeGetModel.

        The Cartridge ID which this object corresponds to  # noqa: E501

        :param id: The id of this DriveCartridgeGetModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def barcode(self):
        """Gets the barcode of this DriveCartridgeGetModel.  # noqa: E501

        8 character Hexadecimal Barcode used for the cartridge  # noqa: E501

        :return: The barcode of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this DriveCartridgeGetModel.

        8 character Hexadecimal Barcode used for the cartridge  # noqa: E501

        :param barcode: The barcode of this DriveCartridgeGetModel.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def cartridge_size_bytes(self):
        """Gets the cartridge_size_bytes of this DriveCartridgeGetModel.  # noqa: E501

        Maximum amount of data that can be stored in the cartridge, in bytes  # noqa: E501

        :return: The cartridge_size_bytes of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: int
        """
        return self._cartridge_size_bytes

    @cartridge_size_bytes.setter
    def cartridge_size_bytes(self, cartridge_size_bytes):
        """Sets the cartridge_size_bytes of this DriveCartridgeGetModel.

        Maximum amount of data that can be stored in the cartridge, in bytes  # noqa: E501

        :param cartridge_size_bytes: The cartridge_size_bytes of this DriveCartridgeGetModel.  # noqa: E501
        :type: int
        """

        self._cartridge_size_bytes = cartridge_size_bytes

    @property
    def used_bytes(self):
        """Gets the used_bytes of this DriveCartridgeGetModel.  # noqa: E501

        Size of the current data on the cartridge in bytes  # noqa: E501

        :return: The used_bytes of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: int
        """
        return self._used_bytes

    @used_bytes.setter
    def used_bytes(self, used_bytes):
        """Sets the used_bytes of this DriveCartridgeGetModel.

        Size of the current data on the cartridge in bytes  # noqa: E501

        :param used_bytes: The used_bytes of this DriveCartridgeGetModel.  # noqa: E501
        :type: int
        """

        self._used_bytes = used_bytes

    @property
    def write_protection_enabled(self):
        """Gets the write_protection_enabled of this DriveCartridgeGetModel.  # noqa: E501

        Flag true or false, decides cartridge is write protected  # noqa: E501

        :return: The write_protection_enabled of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: bool
        """
        return self._write_protection_enabled

    @write_protection_enabled.setter
    def write_protection_enabled(self, write_protection_enabled):
        """Sets the write_protection_enabled of this DriveCartridgeGetModel.

        Flag true or false, decides cartridge is write protected  # noqa: E501

        :param write_protection_enabled: The write_protection_enabled of this DriveCartridgeGetModel.  # noqa: E501
        :type: bool
        """

        self._write_protection_enabled = write_protection_enabled

    @property
    def replication_mapped(self):
        """Gets the replication_mapped of this DriveCartridgeGetModel.  # noqa: E501

        Flag true or false, decides cartridge is in a replication mapping  # noqa: E501

        :return: The replication_mapped of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: bool
        """
        return self._replication_mapped

    @replication_mapped.setter
    def replication_mapped(self, replication_mapped):
        """Sets the replication_mapped of this DriveCartridgeGetModel.

        Flag true or false, decides cartridge is in a replication mapping  # noqa: E501

        :param replication_mapped: The replication_mapped of this DriveCartridgeGetModel.  # noqa: E501
        :type: bool
        """

        self._replication_mapped = replication_mapped

    @property
    def cartridge_written(self):
        """Gets the cartridge_written of this DriveCartridgeGetModel.  # noqa: E501

        Flag true or false decides cartridge was previously written  # noqa: E501

        :return: The cartridge_written of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: bool
        """
        return self._cartridge_written

    @cartridge_written.setter
    def cartridge_written(self, cartridge_written):
        """Sets the cartridge_written of this DriveCartridgeGetModel.

        Flag true or false decides cartridge was previously written  # noqa: E501

        :param cartridge_written: The cartridge_written of this DriveCartridgeGetModel.  # noqa: E501
        :type: bool
        """

        self._cartridge_written = cartridge_written

    @property
    def last_written_date(self):
        """Gets the last_written_date of this DriveCartridgeGetModel.  # noqa: E501

        Time this cartridge was last written to. Defined only if the cartridge has been previously written to  # noqa: E501

        :return: The last_written_date of this DriveCartridgeGetModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_written_date

    @last_written_date.setter
    def last_written_date(self, last_written_date):
        """Sets the last_written_date of this DriveCartridgeGetModel.

        Time this cartridge was last written to. Defined only if the cartridge has been previously written to  # noqa: E501

        :param last_written_date: The last_written_date of this DriveCartridgeGetModel.  # noqa: E501
        :type: datetime
        """

        self._last_written_date = last_written_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriveCartridgeGetModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriveCartridgeGetModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
