# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ModifyVtlLibrary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'num_slots': 'int',
        'library_emulation': 'int',
        'drive_emulation': 'int',
        'barcode_length': 'int',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'backup_application': 'int',
        'backup_application_other': 'str',
        'backup_data': 'int',
        'backup_data_other': 'str',
        'secure_erase_mode': 'int',
        'protocol': 'ModifyVtlProtocol'
    }

    attribute_map = {
        'name': 'name',
        'num_slots': 'numSlots',
        'library_emulation': 'libraryEmulation',
        'drive_emulation': 'driveEmulation',
        'barcode_length': 'barcodeLength',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'backup_application': 'backupApplication',
        'backup_application_other': 'backupApplicationOther',
        'backup_data': 'backupData',
        'backup_data_other': 'backupDataOther',
        'secure_erase_mode': 'secureEraseMode',
        'protocol': 'protocol'
    }

    def __init__(self, name=None, num_slots=None, library_emulation=None, drive_emulation=None, barcode_length=None, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, backup_application=None, backup_application_other=None, backup_data=None, backup_data_other=None, secure_erase_mode=None, protocol=None):  # noqa: E501
        """ModifyVtlLibrary - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._num_slots = None
        self._library_emulation = None
        self._drive_emulation = None
        self._barcode_length = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._backup_application = None
        self._backup_application_other = None
        self._backup_data = None
        self._backup_data_other = None
        self._secure_erase_mode = None
        self._protocol = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if num_slots is not None:
            self.num_slots = num_slots
        if library_emulation is not None:
            self.library_emulation = library_emulation
        if drive_emulation is not None:
            self.drive_emulation = drive_emulation
        if barcode_length is not None:
            self.barcode_length = barcode_length
        if user_data_stored_quota_enabled is not None:
            self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        if user_data_stored_quota_bytes is not None:
            self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        if size_on_disk_quota_enabled is not None:
            self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        if size_on_disk_quota_bytes is not None:
            self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        if backup_application is not None:
            self.backup_application = backup_application
        if backup_application_other is not None:
            self.backup_application_other = backup_application_other
        if backup_data is not None:
            self.backup_data = backup_data
        if backup_data_other is not None:
            self.backup_data_other = backup_data_other
        if secure_erase_mode is not None:
            self.secure_erase_mode = secure_erase_mode
        if protocol is not None:
            self.protocol = protocol

    @property
    def name(self):
        """Gets the name of this ModifyVtlLibrary.  # noqa: E501

        Name of the Library  # noqa: E501

        :return: The name of this ModifyVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModifyVtlLibrary.

        Name of the Library  # noqa: E501

        :param name: The name of this ModifyVtlLibrary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_slots(self):
        """Gets the num_slots of this ModifyVtlLibrary.  # noqa: E501

        Number of slots currently in the library  # noqa: E501

        :return: The num_slots of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this ModifyVtlLibrary.

        Number of slots currently in the library  # noqa: E501

        :param num_slots: The num_slots of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def library_emulation(self):
        """Gets the library_emulation of this ModifyVtlLibrary.  # noqa: E501

        The type of library emulation used for this library  # noqa: E501

        :return: The library_emulation of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._library_emulation

    @library_emulation.setter
    def library_emulation(self, library_emulation):
        """Sets the library_emulation of this ModifyVtlLibrary.

        The type of library emulation used for this library  # noqa: E501

        :param library_emulation: The library_emulation of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._library_emulation = library_emulation

    @property
    def drive_emulation(self):
        """Gets the drive_emulation of this ModifyVtlLibrary.  # noqa: E501

        The type of drive emulation used for this library  # noqa: E501

        :return: The drive_emulation of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._drive_emulation

    @drive_emulation.setter
    def drive_emulation(self, drive_emulation):
        """Sets the drive_emulation of this ModifyVtlLibrary.

        The type of drive emulation used for this library  # noqa: E501

        :param drive_emulation: The drive_emulation of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._drive_emulation = drive_emulation

    @property
    def barcode_length(self):
        """Gets the barcode_length of this ModifyVtlLibrary.  # noqa: E501

        Barcode length used in this library  # noqa: E501

        :return: The barcode_length of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._barcode_length

    @barcode_length.setter
    def barcode_length(self, barcode_length):
        """Sets the barcode_length of this ModifyVtlLibrary.

        Barcode length used in this library  # noqa: E501

        :param barcode_length: The barcode_length of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._barcode_length = barcode_length

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this ModifyVtlLibrary.  # noqa: E501

        Flag true or false decides logical data size quota is enabled  # noqa: E501

        :return: The user_data_stored_quota_enabled of this ModifyVtlLibrary.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this ModifyVtlLibrary.

        Flag true or false decides logical data size quota is enabled  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this ModifyVtlLibrary.  # noqa: E501
        :type: bool
        """

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this ModifyVtlLibrary.  # noqa: E501

        The logical data size quota in bytes. Required if user data stored quota enabled is modified to true. Ignored if user data stored quota enabled is false  # noqa: E501

        :return: The user_data_stored_quota_bytes of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this ModifyVtlLibrary.

        The logical data size quota in bytes. Required if user data stored quota enabled is modified to true. Ignored if user data stored quota enabled is false  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this ModifyVtlLibrary.  # noqa: E501

        Flag true or false decides physical data size quota is enabled.  # noqa: E501

        :return: The size_on_disk_quota_enabled of this ModifyVtlLibrary.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this ModifyVtlLibrary.

        Flag true or false decides physical data size quota is enabled.  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this ModifyVtlLibrary.  # noqa: E501
        :type: bool
        """

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this ModifyVtlLibrary.  # noqa: E501

        The physical data size quota in bytes. Required if size on disk quota enabled is modified to true. Ignored if size on disk quota enabled is false  # noqa: E501

        :return: The size_on_disk_quota_bytes of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this ModifyVtlLibrary.

        The physical data size quota in bytes. Required if size on disk quota enabled is modified to true. Ignored if size on disk quota enabled is false  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def backup_application(self):
        """Gets the backup_application of this ModifyVtlLibrary.  # noqa: E501

        Backup application used  # noqa: E501

        :return: The backup_application of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._backup_application

    @backup_application.setter
    def backup_application(self, backup_application):
        """Sets the backup_application of this ModifyVtlLibrary.

        Backup application used  # noqa: E501

        :param backup_application: The backup_application of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._backup_application = backup_application

    @property
    def backup_application_other(self):
        """Gets the backup_application_other of this ModifyVtlLibrary.  # noqa: E501

        The name of the backup application used, Ignored if backup application is not set to OTHER.  # noqa: E501

        :return: The backup_application_other of this ModifyVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._backup_application_other

    @backup_application_other.setter
    def backup_application_other(self, backup_application_other):
        """Sets the backup_application_other of this ModifyVtlLibrary.

        The name of the backup application used, Ignored if backup application is not set to OTHER.  # noqa: E501

        :param backup_application_other: The backup_application_other of this ModifyVtlLibrary.  # noqa: E501
        :type: str
        """

        self._backup_application_other = backup_application_other

    @property
    def backup_data(self):
        """Gets the backup_data of this ModifyVtlLibrary.  # noqa: E501

        The Backup data type used  # noqa: E501

        :return: The backup_data of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._backup_data

    @backup_data.setter
    def backup_data(self, backup_data):
        """Sets the backup_data of this ModifyVtlLibrary.

        The Backup data type used  # noqa: E501

        :param backup_data: The backup_data of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._backup_data = backup_data

    @property
    def backup_data_other(self):
        """Gets the backup_data_other of this ModifyVtlLibrary.  # noqa: E501

        The name of the backup data type used. Ignored if backup data is not set to OTHER.  # noqa: E501

        :return: The backup_data_other of this ModifyVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_other

    @backup_data_other.setter
    def backup_data_other(self, backup_data_other):
        """Sets the backup_data_other of this ModifyVtlLibrary.

        The name of the backup data type used. Ignored if backup data is not set to OTHER.  # noqa: E501

        :param backup_data_other: The backup_data_other of this ModifyVtlLibrary.  # noqa: E501
        :type: str
        """

        self._backup_data_other = backup_data_other

    @property
    def secure_erase_mode(self):
        """Gets the secure_erase_mode of this ModifyVtlLibrary.  # noqa: E501

        Configured mode for Secure Erase  # noqa: E501

        :return: The secure_erase_mode of this ModifyVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._secure_erase_mode

    @secure_erase_mode.setter
    def secure_erase_mode(self, secure_erase_mode):
        """Sets the secure_erase_mode of this ModifyVtlLibrary.

        Configured mode for Secure Erase  # noqa: E501

        :param secure_erase_mode: The secure_erase_mode of this ModifyVtlLibrary.  # noqa: E501
        :type: int
        """

        self._secure_erase_mode = secure_erase_mode

    @property
    def protocol(self):
        """Gets the protocol of this ModifyVtlLibrary.  # noqa: E501

        Information relating to the protocol used by this library  # noqa: E501

        :return: The protocol of this ModifyVtlLibrary.  # noqa: E501
        :rtype: ModifyVtlProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ModifyVtlLibrary.

        Information relating to the protocol used by this library  # noqa: E501

        :param protocol: The protocol of this ModifyVtlLibrary.  # noqa: E501
        :type: ModifyVtlProtocol
        """

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModifyVtlLibrary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyVtlLibrary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
