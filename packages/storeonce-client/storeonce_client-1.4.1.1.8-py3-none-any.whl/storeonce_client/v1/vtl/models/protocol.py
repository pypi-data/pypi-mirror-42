# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Protocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol_type_string': 'L10nStringStruct',
        'node_name': 'str',
        'initiator_name': 'str',
        'initiator_logon_required': 'bool',
        'initiator_chap_username': 'str',
        'initiator_chap_secret_set': 'bool',
        'target_logon_required': 'bool',
        'target_chap_username': 'str',
        'target_chap_secret_set': 'bool',
        'target_name': 'str',
        'target_alias': 'str',
        'ports': 'list[Port]',
        'protocol_type': 'int'
    }

    attribute_map = {
        'protocol_type_string': 'protocolTypeString',
        'node_name': 'nodeName',
        'initiator_name': 'initiatorName',
        'initiator_logon_required': 'initiatorLogonRequired',
        'initiator_chap_username': 'initiatorChapUsername',
        'initiator_chap_secret_set': 'initiatorChapSecretSet',
        'target_logon_required': 'targetLogonRequired',
        'target_chap_username': 'targetChapUsername',
        'target_chap_secret_set': 'targetChapSecretSet',
        'target_name': 'targetName',
        'target_alias': 'targetAlias',
        'ports': 'ports',
        'protocol_type': 'protocolType'
    }

    def __init__(self, protocol_type_string=None, node_name=None, initiator_name=None, initiator_logon_required=False, initiator_chap_username=None, initiator_chap_secret_set=False, target_logon_required=False, target_chap_username=None, target_chap_secret_set=False, target_name=None, target_alias=None, ports=None, protocol_type=None):  # noqa: E501
        """Protocol - a model defined in Swagger"""  # noqa: E501

        self._protocol_type_string = None
        self._node_name = None
        self._initiator_name = None
        self._initiator_logon_required = None
        self._initiator_chap_username = None
        self._initiator_chap_secret_set = None
        self._target_logon_required = None
        self._target_chap_username = None
        self._target_chap_secret_set = None
        self._target_name = None
        self._target_alias = None
        self._ports = None
        self._protocol_type = None
        self.discriminator = None

        if protocol_type_string is not None:
            self.protocol_type_string = protocol_type_string
        if node_name is not None:
            self.node_name = node_name
        if initiator_name is not None:
            self.initiator_name = initiator_name
        if initiator_logon_required is not None:
            self.initiator_logon_required = initiator_logon_required
        if initiator_chap_username is not None:
            self.initiator_chap_username = initiator_chap_username
        if initiator_chap_secret_set is not None:
            self.initiator_chap_secret_set = initiator_chap_secret_set
        if target_logon_required is not None:
            self.target_logon_required = target_logon_required
        if target_chap_username is not None:
            self.target_chap_username = target_chap_username
        if target_chap_secret_set is not None:
            self.target_chap_secret_set = target_chap_secret_set
        if target_name is not None:
            self.target_name = target_name
        if target_alias is not None:
            self.target_alias = target_alias
        if ports is not None:
            self.ports = ports
        if protocol_type is not None:
            self.protocol_type = protocol_type

    @property
    def protocol_type_string(self):
        """Gets the protocol_type_string of this Protocol.  # noqa: E501

        Localised string representing Protocol type  # noqa: E501

        :return: The protocol_type_string of this Protocol.  # noqa: E501
        :rtype: L10nStringStruct
        """
        return self._protocol_type_string

    @protocol_type_string.setter
    def protocol_type_string(self, protocol_type_string):
        """Sets the protocol_type_string of this Protocol.

        Localised string representing Protocol type  # noqa: E501

        :param protocol_type_string: The protocol_type_string of this Protocol.  # noqa: E501
        :type: L10nStringStruct
        """

        self._protocol_type_string = protocol_type_string

    @property
    def node_name(self):
        """Gets the node_name of this Protocol.  # noqa: E501

        The World Wide Node Name for the Media Changer in the library  # noqa: E501

        :return: The node_name of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this Protocol.

        The World Wide Node Name for the Media Changer in the library  # noqa: E501

        :param node_name: The node_name of this Protocol.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    @property
    def initiator_name(self):
        """Gets the initiator_name of this Protocol.  # noqa: E501

        ISCSI Initiator that will be used to connect to this library  # noqa: E501

        :return: The initiator_name of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name):
        """Sets the initiator_name of this Protocol.

        ISCSI Initiator that will be used to connect to this library  # noqa: E501

        :param initiator_name: The initiator_name of this Protocol.  # noqa: E501
        :type: str
        """

        self._initiator_name = initiator_name

    @property
    def initiator_logon_required(self):
        """Gets the initiator_logon_required of this Protocol.  # noqa: E501

        Flag true or false decides iSCSI initiator must logon to target using CHAP  # noqa: E501

        :return: The initiator_logon_required of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._initiator_logon_required

    @initiator_logon_required.setter
    def initiator_logon_required(self, initiator_logon_required):
        """Sets the initiator_logon_required of this Protocol.

        Flag true or false decides iSCSI initiator must logon to target using CHAP  # noqa: E501

        :param initiator_logon_required: The initiator_logon_required of this Protocol.  # noqa: E501
        :type: bool
        """

        self._initiator_logon_required = initiator_logon_required

    @property
    def initiator_chap_username(self):
        """Gets the initiator_chap_username of this Protocol.  # noqa: E501

        CHAP username that the initiator must use to logon to target. Only valid if initiator logon required is true  # noqa: E501

        :return: The initiator_chap_username of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._initiator_chap_username

    @initiator_chap_username.setter
    def initiator_chap_username(self, initiator_chap_username):
        """Sets the initiator_chap_username of this Protocol.

        CHAP username that the initiator must use to logon to target. Only valid if initiator logon required is true  # noqa: E501

        :param initiator_chap_username: The initiator_chap_username of this Protocol.  # noqa: E501
        :type: str
        """

        self._initiator_chap_username = initiator_chap_username

    @property
    def initiator_chap_secret_set(self):
        """Gets the initiator_chap_secret_set of this Protocol.  # noqa: E501

        Flag true or false decides an initiator CHAP secret has been set for this library. Only valid if initiator logon required is true.  # noqa: E501

        :return: The initiator_chap_secret_set of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._initiator_chap_secret_set

    @initiator_chap_secret_set.setter
    def initiator_chap_secret_set(self, initiator_chap_secret_set):
        """Sets the initiator_chap_secret_set of this Protocol.

        Flag true or false decides an initiator CHAP secret has been set for this library. Only valid if initiator logon required is true.  # noqa: E501

        :param initiator_chap_secret_set: The initiator_chap_secret_set of this Protocol.  # noqa: E501
        :type: bool
        """

        self._initiator_chap_secret_set = initiator_chap_secret_set

    @property
    def target_logon_required(self):
        """Gets the target_logon_required of this Protocol.  # noqa: E501

        Flag true or false decides target must logon to initiator using CHAP  # noqa: E501

        :return: The target_logon_required of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._target_logon_required

    @target_logon_required.setter
    def target_logon_required(self, target_logon_required):
        """Sets the target_logon_required of this Protocol.

        Flag true or false decides target must logon to initiator using CHAP  # noqa: E501

        :param target_logon_required: The target_logon_required of this Protocol.  # noqa: E501
        :type: bool
        """

        self._target_logon_required = target_logon_required

    @property
    def target_chap_username(self):
        """Gets the target_chap_username of this Protocol.  # noqa: E501

        CHAP username that the target must use to logon to the initiator. Required if target logon required is true. Ignored if target logon required is false  # noqa: E501

        :return: The target_chap_username of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._target_chap_username

    @target_chap_username.setter
    def target_chap_username(self, target_chap_username):
        """Sets the target_chap_username of this Protocol.

        CHAP username that the target must use to logon to the initiator. Required if target logon required is true. Ignored if target logon required is false  # noqa: E501

        :param target_chap_username: The target_chap_username of this Protocol.  # noqa: E501
        :type: str
        """

        self._target_chap_username = target_chap_username

    @property
    def target_chap_secret_set(self):
        """Gets the target_chap_secret_set of this Protocol.  # noqa: E501

        Flag true or false decides a target CHAP secret has been set for this library. Only valid if target logon required is true.  # noqa: E501

        :return: The target_chap_secret_set of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._target_chap_secret_set

    @target_chap_secret_set.setter
    def target_chap_secret_set(self, target_chap_secret_set):
        """Sets the target_chap_secret_set of this Protocol.

        Flag true or false decides a target CHAP secret has been set for this library. Only valid if target logon required is true.  # noqa: E501

        :param target_chap_secret_set: The target_chap_secret_set of this Protocol.  # noqa: E501
        :type: bool
        """

        self._target_chap_secret_set = target_chap_secret_set

    @property
    def target_name(self):
        """Gets the target_name of this Protocol.  # noqa: E501

        ISCSI qualified name for the Media Changer in the library  # noqa: E501

        :return: The target_name of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this Protocol.

        ISCSI qualified name for the Media Changer in the library  # noqa: E501

        :param target_name: The target_name of this Protocol.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def target_alias(self):
        """Gets the target_alias of this Protocol.  # noqa: E501

        ISCSI alias for the Media Changer in the library  # noqa: E501

        :return: The target_alias of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._target_alias

    @target_alias.setter
    def target_alias(self, target_alias):
        """Sets the target_alias of this Protocol.

        ISCSI alias for the Media Changer in the library  # noqa: E501

        :param target_alias: The target_alias of this Protocol.  # noqa: E501
        :type: str
        """

        self._target_alias = target_alias

    @property
    def ports(self):
        """Gets the ports of this Protocol.  # noqa: E501

        List of port(s), the devices will be presented on  # noqa: E501

        :return: The ports of this Protocol.  # noqa: E501
        :rtype: list[Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Protocol.

        List of port(s), the devices will be presented on  # noqa: E501

        :param ports: The ports of this Protocol.  # noqa: E501
        :type: list[Port]
        """

        self._ports = ports

    @property
    def protocol_type(self):
        """Gets the protocol_type of this Protocol.  # noqa: E501

        The Type of protocol used for this library.  # noqa: E501

        :return: The protocol_type of this Protocol.  # noqa: E501
        :rtype: int
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this Protocol.

        The Type of protocol used for this library.  # noqa: E501

        :param protocol_type: The protocol_type of this Protocol.  # noqa: E501
        :type: int
        """

        self._protocol_type = protocol_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Protocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Protocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
