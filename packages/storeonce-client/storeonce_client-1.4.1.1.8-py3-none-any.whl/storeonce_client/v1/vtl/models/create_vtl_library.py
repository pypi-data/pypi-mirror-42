# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    VTL

    unused  # noqa: E501

    Component version: 3.1.8-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class CreateVtlLibrary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'num_slots': 'int',
        'default_cartridge_size_bytes': 'int',
        'num_drives': 'int',
        'library_emulation': 'int',
        'drive_emulation': 'int',
        'barcode_length': 'int',
        'encryption_enabled': 'bool',
        'user_data_stored_quota_enabled': 'bool',
        'user_data_stored_quota_bytes': 'int',
        'size_on_disk_quota_enabled': 'bool',
        'size_on_disk_quota_bytes': 'int',
        'backup_application': 'int',
        'backup_application_other': 'str',
        'backup_data': 'int',
        'backup_data_other': 'str',
        'barcode_template': 'CreateVtlBarcodeTemplate',
        'protocol': 'CreateVtlProtocol'
    }

    attribute_map = {
        'name': 'name',
        'num_slots': 'numSlots',
        'default_cartridge_size_bytes': 'defaultCartridgeSizeBytes',
        'num_drives': 'numDrives',
        'library_emulation': 'libraryEmulation',
        'drive_emulation': 'driveEmulation',
        'barcode_length': 'barcodeLength',
        'encryption_enabled': 'encryptionEnabled',
        'user_data_stored_quota_enabled': 'userDataStoredQuotaEnabled',
        'user_data_stored_quota_bytes': 'userDataStoredQuotaBytes',
        'size_on_disk_quota_enabled': 'sizeOnDiskQuotaEnabled',
        'size_on_disk_quota_bytes': 'sizeOnDiskQuotaBytes',
        'backup_application': 'backupApplication',
        'backup_application_other': 'backupApplicationOther',
        'backup_data': 'backupData',
        'backup_data_other': 'backupDataOther',
        'barcode_template': 'barcodeTemplate',
        'protocol': 'protocol'
    }

    def __init__(self, name=None, num_slots=None, default_cartridge_size_bytes=None, num_drives=None, library_emulation=None, drive_emulation=None, barcode_length=None, encryption_enabled=False, user_data_stored_quota_enabled=False, user_data_stored_quota_bytes=None, size_on_disk_quota_enabled=False, size_on_disk_quota_bytes=None, backup_application=None, backup_application_other=None, backup_data=None, backup_data_other=None, barcode_template=None, protocol=None):  # noqa: E501
        """CreateVtlLibrary - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._num_slots = None
        self._default_cartridge_size_bytes = None
        self._num_drives = None
        self._library_emulation = None
        self._drive_emulation = None
        self._barcode_length = None
        self._encryption_enabled = None
        self._user_data_stored_quota_enabled = None
        self._user_data_stored_quota_bytes = None
        self._size_on_disk_quota_enabled = None
        self._size_on_disk_quota_bytes = None
        self._backup_application = None
        self._backup_application_other = None
        self._backup_data = None
        self._backup_data_other = None
        self._barcode_template = None
        self._protocol = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if num_slots is not None:
            self.num_slots = num_slots
        if default_cartridge_size_bytes is not None:
            self.default_cartridge_size_bytes = default_cartridge_size_bytes
        if num_drives is not None:
            self.num_drives = num_drives
        if library_emulation is not None:
            self.library_emulation = library_emulation
        if drive_emulation is not None:
            self.drive_emulation = drive_emulation
        if barcode_length is not None:
            self.barcode_length = barcode_length
        if encryption_enabled is not None:
            self.encryption_enabled = encryption_enabled
        if user_data_stored_quota_enabled is not None:
            self.user_data_stored_quota_enabled = user_data_stored_quota_enabled
        if user_data_stored_quota_bytes is not None:
            self.user_data_stored_quota_bytes = user_data_stored_quota_bytes
        if size_on_disk_quota_enabled is not None:
            self.size_on_disk_quota_enabled = size_on_disk_quota_enabled
        if size_on_disk_quota_bytes is not None:
            self.size_on_disk_quota_bytes = size_on_disk_quota_bytes
        if backup_application is not None:
            self.backup_application = backup_application
        if backup_application_other is not None:
            self.backup_application_other = backup_application_other
        if backup_data is not None:
            self.backup_data = backup_data
        if backup_data_other is not None:
            self.backup_data_other = backup_data_other
        if barcode_template is not None:
            self.barcode_template = barcode_template
        if protocol is not None:
            self.protocol = protocol

    @property
    def name(self):
        """Gets the name of this CreateVtlLibrary.  # noqa: E501

        Name of the Library.  # noqa: E501

        :return: The name of this CreateVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVtlLibrary.

        Name of the Library.  # noqa: E501

        :param name: The name of this CreateVtlLibrary.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_slots(self):
        """Gets the num_slots of this CreateVtlLibrary.  # noqa: E501

        Number of slots currently in the library. If present, must be more than min slots and less than max slots for the given library type. Optional: If not present, library will be created with the default number of drives for the library emulation selected  # noqa: E501

        :return: The num_slots of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this CreateVtlLibrary.

        Number of slots currently in the library. If present, must be more than min slots and less than max slots for the given library type. Optional: If not present, library will be created with the default number of drives for the library emulation selected  # noqa: E501

        :param num_slots: The num_slots of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._num_slots = num_slots

    @property
    def default_cartridge_size_bytes(self):
        """Gets the default_cartridge_size_bytes of this CreateVtlLibrary.  # noqa: E501

        Default size for all new cartridges created in this library. If specified, must be in whole GB. Optional: If not present, cartridge size will be the default cartridge size for the drive emulation selected  # noqa: E501

        :return: The default_cartridge_size_bytes of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._default_cartridge_size_bytes

    @default_cartridge_size_bytes.setter
    def default_cartridge_size_bytes(self, default_cartridge_size_bytes):
        """Sets the default_cartridge_size_bytes of this CreateVtlLibrary.

        Default size for all new cartridges created in this library. If specified, must be in whole GB. Optional: If not present, cartridge size will be the default cartridge size for the drive emulation selected  # noqa: E501

        :param default_cartridge_size_bytes: The default_cartridge_size_bytes of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._default_cartridge_size_bytes = default_cartridge_size_bytes

    @property
    def num_drives(self):
        """Gets the num_drives of this CreateVtlLibrary.  # noqa: E501

        Total number of drives in this library. If present, must be more than Minimum Drives and less than Maximum Drives for the given library type. If present, must be less than number of remaining drives specified by the VTL Service properties. Optional: If not present, library will be created with the default number of drives for the library emulation selected.  # noqa: E501

        :return: The num_drives of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._num_drives

    @num_drives.setter
    def num_drives(self, num_drives):
        """Sets the num_drives of this CreateVtlLibrary.

        Total number of drives in this library. If present, must be more than Minimum Drives and less than Maximum Drives for the given library type. If present, must be less than number of remaining drives specified by the VTL Service properties. Optional: If not present, library will be created with the default number of drives for the library emulation selected.  # noqa: E501

        :param num_drives: The num_drives of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._num_drives = num_drives

    @property
    def library_emulation(self):
        """Gets the library_emulation of this CreateVtlLibrary.  # noqa: E501

        The type of library emulation used for this library. Optional: If not present, library will be created with a default library type, dependent on the protocol selected  # noqa: E501

        :return: The library_emulation of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._library_emulation

    @library_emulation.setter
    def library_emulation(self, library_emulation):
        """Sets the library_emulation of this CreateVtlLibrary.

        The type of library emulation used for this library. Optional: If not present, library will be created with a default library type, dependent on the protocol selected  # noqa: E501

        :param library_emulation: The library_emulation of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._library_emulation = library_emulation

    @property
    def drive_emulation(self):
        """Gets the drive_emulation of this CreateVtlLibrary.  # noqa: E501

        The type of drive emulation used for this library. Optional: If not present, library will be created with a default drive type, dependent on the libraryEmulation selected  # noqa: E501

        :return: The drive_emulation of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._drive_emulation

    @drive_emulation.setter
    def drive_emulation(self, drive_emulation):
        """Sets the drive_emulation of this CreateVtlLibrary.

        The type of drive emulation used for this library. Optional: If not present, library will be created with a default drive type, dependent on the libraryEmulation selected  # noqa: E501

        :param drive_emulation: The drive_emulation of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._drive_emulation = drive_emulation

    @property
    def barcode_length(self):
        """Gets the barcode_length of this CreateVtlLibrary.  # noqa: E501

        Barcode length used in this library. Optional: If not present, defaults to 8  # noqa: E501

        :return: The barcode_length of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._barcode_length

    @barcode_length.setter
    def barcode_length(self, barcode_length):
        """Sets the barcode_length of this CreateVtlLibrary.

        Barcode length used in this library. Optional: If not present, defaults to 8  # noqa: E501

        :param barcode_length: The barcode_length of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._barcode_length = barcode_length

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this CreateVtlLibrary.  # noqa: E501

        Flag true or false decides encryption is enabled on this library. Optional: If not present, defaults to false  # noqa: E501

        :return: The encryption_enabled of this CreateVtlLibrary.  # noqa: E501
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this CreateVtlLibrary.

        Flag true or false decides encryption is enabled on this library. Optional: If not present, defaults to false  # noqa: E501

        :param encryption_enabled: The encryption_enabled of this CreateVtlLibrary.  # noqa: E501
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def user_data_stored_quota_enabled(self):
        """Gets the user_data_stored_quota_enabled of this CreateVtlLibrary.  # noqa: E501

        Flag true or false decides logical data size quota is enabled. Optional: If not present, defaults to false  # noqa: E501

        :return: The user_data_stored_quota_enabled of this CreateVtlLibrary.  # noqa: E501
        :rtype: bool
        """
        return self._user_data_stored_quota_enabled

    @user_data_stored_quota_enabled.setter
    def user_data_stored_quota_enabled(self, user_data_stored_quota_enabled):
        """Sets the user_data_stored_quota_enabled of this CreateVtlLibrary.

        Flag true or false decides logical data size quota is enabled. Optional: If not present, defaults to false  # noqa: E501

        :param user_data_stored_quota_enabled: The user_data_stored_quota_enabled of this CreateVtlLibrary.  # noqa: E501
        :type: bool
        """

        self._user_data_stored_quota_enabled = user_data_stored_quota_enabled

    @property
    def user_data_stored_quota_bytes(self):
        """Gets the user_data_stored_quota_bytes of this CreateVtlLibrary.  # noqa: E501

        The logical data size quota in bytes. Required if user data stored quota enabled is true. Ignored if user data stored quota enabled is false  # noqa: E501

        :return: The user_data_stored_quota_bytes of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._user_data_stored_quota_bytes

    @user_data_stored_quota_bytes.setter
    def user_data_stored_quota_bytes(self, user_data_stored_quota_bytes):
        """Sets the user_data_stored_quota_bytes of this CreateVtlLibrary.

        The logical data size quota in bytes. Required if user data stored quota enabled is true. Ignored if user data stored quota enabled is false  # noqa: E501

        :param user_data_stored_quota_bytes: The user_data_stored_quota_bytes of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._user_data_stored_quota_bytes = user_data_stored_quota_bytes

    @property
    def size_on_disk_quota_enabled(self):
        """Gets the size_on_disk_quota_enabled of this CreateVtlLibrary.  # noqa: E501

        Flag true or false decides physical data size quota is enabled. Optional: if not present, defaults to false  # noqa: E501

        :return: The size_on_disk_quota_enabled of this CreateVtlLibrary.  # noqa: E501
        :rtype: bool
        """
        return self._size_on_disk_quota_enabled

    @size_on_disk_quota_enabled.setter
    def size_on_disk_quota_enabled(self, size_on_disk_quota_enabled):
        """Sets the size_on_disk_quota_enabled of this CreateVtlLibrary.

        Flag true or false decides physical data size quota is enabled. Optional: if not present, defaults to false  # noqa: E501

        :param size_on_disk_quota_enabled: The size_on_disk_quota_enabled of this CreateVtlLibrary.  # noqa: E501
        :type: bool
        """

        self._size_on_disk_quota_enabled = size_on_disk_quota_enabled

    @property
    def size_on_disk_quota_bytes(self):
        """Gets the size_on_disk_quota_bytes of this CreateVtlLibrary.  # noqa: E501

        The physical data size quota in bytes. Required if size on disk quota enabled is true. Ignored if size on disk quota enabled is false  # noqa: E501

        :return: The size_on_disk_quota_bytes of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk_quota_bytes

    @size_on_disk_quota_bytes.setter
    def size_on_disk_quota_bytes(self, size_on_disk_quota_bytes):
        """Sets the size_on_disk_quota_bytes of this CreateVtlLibrary.

        The physical data size quota in bytes. Required if size on disk quota enabled is true. Ignored if size on disk quota enabled is false  # noqa: E501

        :param size_on_disk_quota_bytes: The size_on_disk_quota_bytes of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._size_on_disk_quota_bytes = size_on_disk_quota_bytes

    @property
    def backup_application(self):
        """Gets the backup_application of this CreateVtlLibrary.  # noqa: E501

        Backup application used. Optional: if not present, defaults to OTHER  # noqa: E501

        :return: The backup_application of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._backup_application

    @backup_application.setter
    def backup_application(self, backup_application):
        """Sets the backup_application of this CreateVtlLibrary.

        Backup application used. Optional: if not present, defaults to OTHER  # noqa: E501

        :param backup_application: The backup_application of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._backup_application = backup_application

    @property
    def backup_application_other(self):
        """Gets the backup_application_other of this CreateVtlLibrary.  # noqa: E501

        The name of the backup application used, Ignored if field backupApplication is not OTHER. Optional: if not present, field is not set  # noqa: E501

        :return: The backup_application_other of this CreateVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._backup_application_other

    @backup_application_other.setter
    def backup_application_other(self, backup_application_other):
        """Sets the backup_application_other of this CreateVtlLibrary.

        The name of the backup application used, Ignored if field backupApplication is not OTHER. Optional: if not present, field is not set  # noqa: E501

        :param backup_application_other: The backup_application_other of this CreateVtlLibrary.  # noqa: E501
        :type: str
        """

        self._backup_application_other = backup_application_other

    @property
    def backup_data(self):
        """Gets the backup_data of this CreateVtlLibrary.  # noqa: E501

        The backup data type used. Optional: if not present, defaults to OTHER  # noqa: E501

        :return: The backup_data of this CreateVtlLibrary.  # noqa: E501
        :rtype: int
        """
        return self._backup_data

    @backup_data.setter
    def backup_data(self, backup_data):
        """Sets the backup_data of this CreateVtlLibrary.

        The backup data type used. Optional: if not present, defaults to OTHER  # noqa: E501

        :param backup_data: The backup_data of this CreateVtlLibrary.  # noqa: E501
        :type: int
        """

        self._backup_data = backup_data

    @property
    def backup_data_other(self):
        """Gets the backup_data_other of this CreateVtlLibrary.  # noqa: E501

        The name of the backup data type used. Ignored if field backupData is not OTHER. Optional: if not present, field is not set  # noqa: E501

        :return: The backup_data_other of this CreateVtlLibrary.  # noqa: E501
        :rtype: str
        """
        return self._backup_data_other

    @backup_data_other.setter
    def backup_data_other(self, backup_data_other):
        """Sets the backup_data_other of this CreateVtlLibrary.

        The name of the backup data type used. Ignored if field backupData is not OTHER. Optional: if not present, field is not set  # noqa: E501

        :param backup_data_other: The backup_data_other of this CreateVtlLibrary.  # noqa: E501
        :type: str
        """

        self._backup_data_other = backup_data_other

    @property
    def barcode_template(self):
        """Gets the barcode_template of this CreateVtlLibrary.  # noqa: E501

        Information about the barcode template assigned to this library. Optional: If not present, defaults will be used for all parameters in this object  # noqa: E501

        :return: The barcode_template of this CreateVtlLibrary.  # noqa: E501
        :rtype: CreateVtlBarcodeTemplate
        """
        return self._barcode_template

    @barcode_template.setter
    def barcode_template(self, barcode_template):
        """Sets the barcode_template of this CreateVtlLibrary.

        Information about the barcode template assigned to this library. Optional: If not present, defaults will be used for all parameters in this object  # noqa: E501

        :param barcode_template: The barcode_template of this CreateVtlLibrary.  # noqa: E501
        :type: CreateVtlBarcodeTemplate
        """

        self._barcode_template = barcode_template

    @property
    def protocol(self):
        """Gets the protocol of this CreateVtlLibrary.  # noqa: E501

        Information related to the protocol used by this library  # noqa: E501

        :return: The protocol of this CreateVtlLibrary.  # noqa: E501
        :rtype: CreateVtlProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreateVtlLibrary.

        Information related to the protocol used by this library  # noqa: E501

        :param protocol: The protocol of this CreateVtlLibrary.  # noqa: E501
        :type: CreateVtlProtocol
        """

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateVtlLibrary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateVtlLibrary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
