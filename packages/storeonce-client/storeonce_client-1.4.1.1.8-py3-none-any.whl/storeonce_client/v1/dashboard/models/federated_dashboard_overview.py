# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Dashboard

    unused  # noqa: E501

    Component version: 6.1.3-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FederatedDashboardOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_reported_systems': 'int',
        'num_unreachable_systems': 'int',
        'num_synchronising_systems': 'int',
        'software_update_recommended': 'bool',
        'overall_local_disk_bytes': 'int',
        'overall_local_user_bytes': 'int',
        'overall_local_free_bytes': 'int',
        'overall_local_capacity_bytes': 'int',
        'overall_cloud_disk_bytes': 'int',
        'overall_cloud_user_bytes': 'int',
        'overall_cloud_free_bytes': 'int',
        'overall_cloud_capacity_bytes': 'int',
        'system_health_summary': 'UnknownStatusSummary',
        'cat_stores_summary': 'ServiceSummary',
        'cloud_bank_stores_summary': 'ServiceSummary',
        'nas_shares_summary': 'ServiceSummary',
        'vtl_libraries_summary': 'ServiceSummary',
        'nas_rep_mapping_summary': 'ServiceSummary',
        'vtl_rep_mapping_summary': 'ServiceSummary',
        'software_versions': 'dict(str, int)',
        'platform_types': 'dict(str, int)',
        'lowest_software_version': 'str',
        'highest_software_version': 'str',
        'overall_user_bytes': 'int',
        'overall_disk_bytes': 'int',
        'overall_dedupe_ratio': 'float',
        'overall_capacity_saved_bytes': 'int',
        'overall_capacity_saved_percent': 'float'
    }

    attribute_map = {
        'num_reported_systems': 'numReportedSystems',
        'num_unreachable_systems': 'numUnreachableSystems',
        'num_synchronising_systems': 'numSynchronisingSystems',
        'software_update_recommended': 'softwareUpdateRecommended',
        'overall_local_disk_bytes': 'overallLocalDiskBytes',
        'overall_local_user_bytes': 'overallLocalUserBytes',
        'overall_local_free_bytes': 'overallLocalFreeBytes',
        'overall_local_capacity_bytes': 'overallLocalCapacityBytes',
        'overall_cloud_disk_bytes': 'overallCloudDiskBytes',
        'overall_cloud_user_bytes': 'overallCloudUserBytes',
        'overall_cloud_free_bytes': 'overallCloudFreeBytes',
        'overall_cloud_capacity_bytes': 'overallCloudCapacityBytes',
        'system_health_summary': 'systemHealthSummary',
        'cat_stores_summary': 'catStoresSummary',
        'cloud_bank_stores_summary': 'cloudBankStoresSummary',
        'nas_shares_summary': 'nasSharesSummary',
        'vtl_libraries_summary': 'vtlLibrariesSummary',
        'nas_rep_mapping_summary': 'nasRepMappingSummary',
        'vtl_rep_mapping_summary': 'vtlRepMappingSummary',
        'software_versions': 'softwareVersions',
        'platform_types': 'platformTypes',
        'lowest_software_version': 'lowestSoftwareVersion',
        'highest_software_version': 'highestSoftwareVersion',
        'overall_user_bytes': 'overallUserBytes',
        'overall_disk_bytes': 'overallDiskBytes',
        'overall_dedupe_ratio': 'overallDedupeRatio',
        'overall_capacity_saved_bytes': 'overallCapacitySavedBytes',
        'overall_capacity_saved_percent': 'overallCapacitySavedPercent'
    }

    def __init__(self, num_reported_systems=None, num_unreachable_systems=None, num_synchronising_systems=None, software_update_recommended=False, overall_local_disk_bytes=None, overall_local_user_bytes=None, overall_local_free_bytes=None, overall_local_capacity_bytes=None, overall_cloud_disk_bytes=None, overall_cloud_user_bytes=None, overall_cloud_free_bytes=None, overall_cloud_capacity_bytes=None, system_health_summary=None, cat_stores_summary=None, cloud_bank_stores_summary=None, nas_shares_summary=None, vtl_libraries_summary=None, nas_rep_mapping_summary=None, vtl_rep_mapping_summary=None, software_versions=None, platform_types=None, lowest_software_version=None, highest_software_version=None, overall_user_bytes=None, overall_disk_bytes=None, overall_dedupe_ratio=None, overall_capacity_saved_bytes=None, overall_capacity_saved_percent=None):  # noqa: E501
        """FederatedDashboardOverview - a model defined in Swagger"""  # noqa: E501

        self._num_reported_systems = None
        self._num_unreachable_systems = None
        self._num_synchronising_systems = None
        self._software_update_recommended = None
        self._overall_local_disk_bytes = None
        self._overall_local_user_bytes = None
        self._overall_local_free_bytes = None
        self._overall_local_capacity_bytes = None
        self._overall_cloud_disk_bytes = None
        self._overall_cloud_user_bytes = None
        self._overall_cloud_free_bytes = None
        self._overall_cloud_capacity_bytes = None
        self._system_health_summary = None
        self._cat_stores_summary = None
        self._cloud_bank_stores_summary = None
        self._nas_shares_summary = None
        self._vtl_libraries_summary = None
        self._nas_rep_mapping_summary = None
        self._vtl_rep_mapping_summary = None
        self._software_versions = None
        self._platform_types = None
        self._lowest_software_version = None
        self._highest_software_version = None
        self._overall_user_bytes = None
        self._overall_disk_bytes = None
        self._overall_dedupe_ratio = None
        self._overall_capacity_saved_bytes = None
        self._overall_capacity_saved_percent = None
        self.discriminator = None

        if num_reported_systems is not None:
            self.num_reported_systems = num_reported_systems
        if num_unreachable_systems is not None:
            self.num_unreachable_systems = num_unreachable_systems
        if num_synchronising_systems is not None:
            self.num_synchronising_systems = num_synchronising_systems
        if software_update_recommended is not None:
            self.software_update_recommended = software_update_recommended
        if overall_local_disk_bytes is not None:
            self.overall_local_disk_bytes = overall_local_disk_bytes
        if overall_local_user_bytes is not None:
            self.overall_local_user_bytes = overall_local_user_bytes
        if overall_local_free_bytes is not None:
            self.overall_local_free_bytes = overall_local_free_bytes
        if overall_local_capacity_bytes is not None:
            self.overall_local_capacity_bytes = overall_local_capacity_bytes
        if overall_cloud_disk_bytes is not None:
            self.overall_cloud_disk_bytes = overall_cloud_disk_bytes
        if overall_cloud_user_bytes is not None:
            self.overall_cloud_user_bytes = overall_cloud_user_bytes
        if overall_cloud_free_bytes is not None:
            self.overall_cloud_free_bytes = overall_cloud_free_bytes
        if overall_cloud_capacity_bytes is not None:
            self.overall_cloud_capacity_bytes = overall_cloud_capacity_bytes
        if system_health_summary is not None:
            self.system_health_summary = system_health_summary
        if cat_stores_summary is not None:
            self.cat_stores_summary = cat_stores_summary
        if cloud_bank_stores_summary is not None:
            self.cloud_bank_stores_summary = cloud_bank_stores_summary
        if nas_shares_summary is not None:
            self.nas_shares_summary = nas_shares_summary
        if vtl_libraries_summary is not None:
            self.vtl_libraries_summary = vtl_libraries_summary
        if nas_rep_mapping_summary is not None:
            self.nas_rep_mapping_summary = nas_rep_mapping_summary
        if vtl_rep_mapping_summary is not None:
            self.vtl_rep_mapping_summary = vtl_rep_mapping_summary
        if software_versions is not None:
            self.software_versions = software_versions
        if platform_types is not None:
            self.platform_types = platform_types
        if lowest_software_version is not None:
            self.lowest_software_version = lowest_software_version
        if highest_software_version is not None:
            self.highest_software_version = highest_software_version
        if overall_user_bytes is not None:
            self.overall_user_bytes = overall_user_bytes
        if overall_disk_bytes is not None:
            self.overall_disk_bytes = overall_disk_bytes
        if overall_dedupe_ratio is not None:
            self.overall_dedupe_ratio = overall_dedupe_ratio
        if overall_capacity_saved_bytes is not None:
            self.overall_capacity_saved_bytes = overall_capacity_saved_bytes
        if overall_capacity_saved_percent is not None:
            self.overall_capacity_saved_percent = overall_capacity_saved_percent

    @property
    def num_reported_systems(self):
        """Gets the num_reported_systems of this FederatedDashboardOverview.  # noqa: E501

        number of reported systems  # noqa: E501

        :return: The num_reported_systems of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_reported_systems

    @num_reported_systems.setter
    def num_reported_systems(self, num_reported_systems):
        """Sets the num_reported_systems of this FederatedDashboardOverview.

        number of reported systems  # noqa: E501

        :param num_reported_systems: The num_reported_systems of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._num_reported_systems = num_reported_systems

    @property
    def num_unreachable_systems(self):
        """Gets the num_unreachable_systems of this FederatedDashboardOverview.  # noqa: E501

        number of unreachable systems  # noqa: E501

        :return: The num_unreachable_systems of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_unreachable_systems

    @num_unreachable_systems.setter
    def num_unreachable_systems(self, num_unreachable_systems):
        """Sets the num_unreachable_systems of this FederatedDashboardOverview.

        number of unreachable systems  # noqa: E501

        :param num_unreachable_systems: The num_unreachable_systems of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._num_unreachable_systems = num_unreachable_systems

    @property
    def num_synchronising_systems(self):
        """Gets the num_synchronising_systems of this FederatedDashboardOverview.  # noqa: E501

        number of systems in the member list which have no data in the cache  # noqa: E501

        :return: The num_synchronising_systems of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._num_synchronising_systems

    @num_synchronising_systems.setter
    def num_synchronising_systems(self, num_synchronising_systems):
        """Sets the num_synchronising_systems of this FederatedDashboardOverview.

        number of systems in the member list which have no data in the cache  # noqa: E501

        :param num_synchronising_systems: The num_synchronising_systems of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._num_synchronising_systems = num_synchronising_systems

    @property
    def software_update_recommended(self):
        """Gets the software_update_recommended of this FederatedDashboardOverview.  # noqa: E501

        a software update is recommended on at least one system in the federation  # noqa: E501

        :return: The software_update_recommended of this FederatedDashboardOverview.  # noqa: E501
        :rtype: bool
        """
        return self._software_update_recommended

    @software_update_recommended.setter
    def software_update_recommended(self, software_update_recommended):
        """Sets the software_update_recommended of this FederatedDashboardOverview.

        a software update is recommended on at least one system in the federation  # noqa: E501

        :param software_update_recommended: The software_update_recommended of this FederatedDashboardOverview.  # noqa: E501
        :type: bool
        """

        self._software_update_recommended = software_update_recommended

    @property
    def overall_local_disk_bytes(self):
        """Gets the overall_local_disk_bytes of this FederatedDashboardOverview.  # noqa: E501

        total stored on local disk for all reported appliances in bytes  # noqa: E501

        :return: The overall_local_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_local_disk_bytes

    @overall_local_disk_bytes.setter
    def overall_local_disk_bytes(self, overall_local_disk_bytes):
        """Sets the overall_local_disk_bytes of this FederatedDashboardOverview.

        total stored on local disk for all reported appliances in bytes  # noqa: E501

        :param overall_local_disk_bytes: The overall_local_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_local_disk_bytes = overall_local_disk_bytes

    @property
    def overall_local_user_bytes(self):
        """Gets the overall_local_user_bytes of this FederatedDashboardOverview.  # noqa: E501

        total user data stored on all reported appliances in bytes  # noqa: E501

        :return: The overall_local_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_local_user_bytes

    @overall_local_user_bytes.setter
    def overall_local_user_bytes(self, overall_local_user_bytes):
        """Sets the overall_local_user_bytes of this FederatedDashboardOverview.

        total user data stored on all reported appliances in bytes  # noqa: E501

        :param overall_local_user_bytes: The overall_local_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_local_user_bytes = overall_local_user_bytes

    @property
    def overall_local_free_bytes(self):
        """Gets the overall_local_free_bytes of this FederatedDashboardOverview.  # noqa: E501

        total available storage on all reported appliances in bytes  # noqa: E501

        :return: The overall_local_free_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_local_free_bytes

    @overall_local_free_bytes.setter
    def overall_local_free_bytes(self, overall_local_free_bytes):
        """Sets the overall_local_free_bytes of this FederatedDashboardOverview.

        total available storage on all reported appliances in bytes  # noqa: E501

        :param overall_local_free_bytes: The overall_local_free_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_local_free_bytes = overall_local_free_bytes

    @property
    def overall_local_capacity_bytes(self):
        """Gets the overall_local_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501

        total storage capacity of all reported appliances in bytes  # noqa: E501

        :return: The overall_local_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_local_capacity_bytes

    @overall_local_capacity_bytes.setter
    def overall_local_capacity_bytes(self, overall_local_capacity_bytes):
        """Sets the overall_local_capacity_bytes of this FederatedDashboardOverview.

        total storage capacity of all reported appliances in bytes  # noqa: E501

        :param overall_local_capacity_bytes: The overall_local_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_local_capacity_bytes = overall_local_capacity_bytes

    @property
    def overall_cloud_disk_bytes(self):
        """Gets the overall_cloud_disk_bytes of this FederatedDashboardOverview.  # noqa: E501

        total stored in the cloud for all reported appliances in bytes  # noqa: E501

        :return: The overall_cloud_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_cloud_disk_bytes

    @overall_cloud_disk_bytes.setter
    def overall_cloud_disk_bytes(self, overall_cloud_disk_bytes):
        """Sets the overall_cloud_disk_bytes of this FederatedDashboardOverview.

        total stored in the cloud for all reported appliances in bytes  # noqa: E501

        :param overall_cloud_disk_bytes: The overall_cloud_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_cloud_disk_bytes = overall_cloud_disk_bytes

    @property
    def overall_cloud_user_bytes(self):
        """Gets the overall_cloud_user_bytes of this FederatedDashboardOverview.  # noqa: E501

        total user data stored in the cloud for all reported appliances in bytes  # noqa: E501

        :return: The overall_cloud_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_cloud_user_bytes

    @overall_cloud_user_bytes.setter
    def overall_cloud_user_bytes(self, overall_cloud_user_bytes):
        """Sets the overall_cloud_user_bytes of this FederatedDashboardOverview.

        total user data stored in the cloud for all reported appliances in bytes  # noqa: E501

        :param overall_cloud_user_bytes: The overall_cloud_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_cloud_user_bytes = overall_cloud_user_bytes

    @property
    def overall_cloud_free_bytes(self):
        """Gets the overall_cloud_free_bytes of this FederatedDashboardOverview.  # noqa: E501

        total available cloud storage for all reported appliances in bytes  # noqa: E501

        :return: The overall_cloud_free_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_cloud_free_bytes

    @overall_cloud_free_bytes.setter
    def overall_cloud_free_bytes(self, overall_cloud_free_bytes):
        """Sets the overall_cloud_free_bytes of this FederatedDashboardOverview.

        total available cloud storage for all reported appliances in bytes  # noqa: E501

        :param overall_cloud_free_bytes: The overall_cloud_free_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_cloud_free_bytes = overall_cloud_free_bytes

    @property
    def overall_cloud_capacity_bytes(self):
        """Gets the overall_cloud_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501

        total capacity in the cloud for all reported appliances in bytes  # noqa: E501

        :return: The overall_cloud_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_cloud_capacity_bytes

    @overall_cloud_capacity_bytes.setter
    def overall_cloud_capacity_bytes(self, overall_cloud_capacity_bytes):
        """Sets the overall_cloud_capacity_bytes of this FederatedDashboardOverview.

        total capacity in the cloud for all reported appliances in bytes  # noqa: E501

        :param overall_cloud_capacity_bytes: The overall_cloud_capacity_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_cloud_capacity_bytes = overall_cloud_capacity_bytes

    @property
    def system_health_summary(self):
        """Gets the system_health_summary of this FederatedDashboardOverview.  # noqa: E501

        summary of health statuses for all appliances  # noqa: E501

        :return: The system_health_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: UnknownStatusSummary
        """
        return self._system_health_summary

    @system_health_summary.setter
    def system_health_summary(self, system_health_summary):
        """Sets the system_health_summary of this FederatedDashboardOverview.

        summary of health statuses for all appliances  # noqa: E501

        :param system_health_summary: The system_health_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: UnknownStatusSummary
        """

        self._system_health_summary = system_health_summary

    @property
    def cat_stores_summary(self):
        """Gets the cat_stores_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of catalyst (non cloud bank) stores for all reported appliances  # noqa: E501

        :return: The cat_stores_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._cat_stores_summary

    @cat_stores_summary.setter
    def cat_stores_summary(self, cat_stores_summary):
        """Sets the cat_stores_summary of this FederatedDashboardOverview.

        overall summary of catalyst (non cloud bank) stores for all reported appliances  # noqa: E501

        :param cat_stores_summary: The cat_stores_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._cat_stores_summary = cat_stores_summary

    @property
    def cloud_bank_stores_summary(self):
        """Gets the cloud_bank_stores_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of cloud bank stores for all reported appliances  # noqa: E501

        :return: The cloud_bank_stores_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._cloud_bank_stores_summary

    @cloud_bank_stores_summary.setter
    def cloud_bank_stores_summary(self, cloud_bank_stores_summary):
        """Sets the cloud_bank_stores_summary of this FederatedDashboardOverview.

        overall summary of cloud bank stores for all reported appliances  # noqa: E501

        :param cloud_bank_stores_summary: The cloud_bank_stores_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._cloud_bank_stores_summary = cloud_bank_stores_summary

    @property
    def nas_shares_summary(self):
        """Gets the nas_shares_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of nas shares for all reported appliances  # noqa: E501

        :return: The nas_shares_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._nas_shares_summary

    @nas_shares_summary.setter
    def nas_shares_summary(self, nas_shares_summary):
        """Sets the nas_shares_summary of this FederatedDashboardOverview.

        overall summary of nas shares for all reported appliances  # noqa: E501

        :param nas_shares_summary: The nas_shares_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._nas_shares_summary = nas_shares_summary

    @property
    def vtl_libraries_summary(self):
        """Gets the vtl_libraries_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of vtl libraries for all reported appliances  # noqa: E501

        :return: The vtl_libraries_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._vtl_libraries_summary

    @vtl_libraries_summary.setter
    def vtl_libraries_summary(self, vtl_libraries_summary):
        """Sets the vtl_libraries_summary of this FederatedDashboardOverview.

        overall summary of vtl libraries for all reported appliances  # noqa: E501

        :param vtl_libraries_summary: The vtl_libraries_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._vtl_libraries_summary = vtl_libraries_summary

    @property
    def nas_rep_mapping_summary(self):
        """Gets the nas_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of nas replication mappings for all reported appliances  # noqa: E501

        :return: The nas_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._nas_rep_mapping_summary

    @nas_rep_mapping_summary.setter
    def nas_rep_mapping_summary(self, nas_rep_mapping_summary):
        """Sets the nas_rep_mapping_summary of this FederatedDashboardOverview.

        overall summary of nas replication mappings for all reported appliances  # noqa: E501

        :param nas_rep_mapping_summary: The nas_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._nas_rep_mapping_summary = nas_rep_mapping_summary

    @property
    def vtl_rep_mapping_summary(self):
        """Gets the vtl_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501

        overall summary of vtl replication mappings for all reported appliances  # noqa: E501

        :return: The vtl_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501
        :rtype: ServiceSummary
        """
        return self._vtl_rep_mapping_summary

    @vtl_rep_mapping_summary.setter
    def vtl_rep_mapping_summary(self, vtl_rep_mapping_summary):
        """Sets the vtl_rep_mapping_summary of this FederatedDashboardOverview.

        overall summary of vtl replication mappings for all reported appliances  # noqa: E501

        :param vtl_rep_mapping_summary: The vtl_rep_mapping_summary of this FederatedDashboardOverview.  # noqa: E501
        :type: ServiceSummary
        """

        self._vtl_rep_mapping_summary = vtl_rep_mapping_summary

    @property
    def software_versions(self):
        """Gets the software_versions of this FederatedDashboardOverview.  # noqa: E501

        summary of software versions for all reported appliances  # noqa: E501

        :return: The software_versions of this FederatedDashboardOverview.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._software_versions

    @software_versions.setter
    def software_versions(self, software_versions):
        """Sets the software_versions of this FederatedDashboardOverview.

        summary of software versions for all reported appliances  # noqa: E501

        :param software_versions: The software_versions of this FederatedDashboardOverview.  # noqa: E501
        :type: dict(str, int)
        """

        self._software_versions = software_versions

    @property
    def platform_types(self):
        """Gets the platform_types of this FederatedDashboardOverview.  # noqa: E501

        summary of product platform names for all appliances  # noqa: E501

        :return: The platform_types of this FederatedDashboardOverview.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._platform_types

    @platform_types.setter
    def platform_types(self, platform_types):
        """Sets the platform_types of this FederatedDashboardOverview.

        summary of product platform names for all appliances  # noqa: E501

        :param platform_types: The platform_types of this FederatedDashboardOverview.  # noqa: E501
        :type: dict(str, int)
        """

        self._platform_types = platform_types

    @property
    def lowest_software_version(self):
        """Gets the lowest_software_version of this FederatedDashboardOverview.  # noqa: E501

        the lowest software version in the federation  # noqa: E501

        :return: The lowest_software_version of this FederatedDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._lowest_software_version

    @lowest_software_version.setter
    def lowest_software_version(self, lowest_software_version):
        """Sets the lowest_software_version of this FederatedDashboardOverview.

        the lowest software version in the federation  # noqa: E501

        :param lowest_software_version: The lowest_software_version of this FederatedDashboardOverview.  # noqa: E501
        :type: str
        """

        self._lowest_software_version = lowest_software_version

    @property
    def highest_software_version(self):
        """Gets the highest_software_version of this FederatedDashboardOverview.  # noqa: E501

        the highest software version in the federation  # noqa: E501

        :return: The highest_software_version of this FederatedDashboardOverview.  # noqa: E501
        :rtype: str
        """
        return self._highest_software_version

    @highest_software_version.setter
    def highest_software_version(self, highest_software_version):
        """Sets the highest_software_version of this FederatedDashboardOverview.

        the highest software version in the federation  # noqa: E501

        :param highest_software_version: The highest_software_version of this FederatedDashboardOverview.  # noqa: E501
        :type: str
        """

        self._highest_software_version = highest_software_version

    @property
    def overall_user_bytes(self):
        """Gets the overall_user_bytes of this FederatedDashboardOverview.  # noqa: E501

        total user data stored (both locally and in cloud) for all reported appliances  # noqa: E501

        :return: The overall_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_user_bytes

    @overall_user_bytes.setter
    def overall_user_bytes(self, overall_user_bytes):
        """Sets the overall_user_bytes of this FederatedDashboardOverview.

        total user data stored (both locally and in cloud) for all reported appliances  # noqa: E501

        :param overall_user_bytes: The overall_user_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_user_bytes = overall_user_bytes

    @property
    def overall_disk_bytes(self):
        """Gets the overall_disk_bytes of this FederatedDashboardOverview.  # noqa: E501

        total data stored (both locally and in cloud) for all reported appliances  # noqa: E501

        :return: The overall_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_disk_bytes

    @overall_disk_bytes.setter
    def overall_disk_bytes(self, overall_disk_bytes):
        """Sets the overall_disk_bytes of this FederatedDashboardOverview.

        total data stored (both locally and in cloud) for all reported appliances  # noqa: E501

        :param overall_disk_bytes: The overall_disk_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_disk_bytes = overall_disk_bytes

    @property
    def overall_dedupe_ratio(self):
        """Gets the overall_dedupe_ratio of this FederatedDashboardOverview.  # noqa: E501

        overall dedupe ratio for all reported appliances  # noqa: E501

        :return: The overall_dedupe_ratio of this FederatedDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._overall_dedupe_ratio

    @overall_dedupe_ratio.setter
    def overall_dedupe_ratio(self, overall_dedupe_ratio):
        """Sets the overall_dedupe_ratio of this FederatedDashboardOverview.

        overall dedupe ratio for all reported appliances  # noqa: E501

        :param overall_dedupe_ratio: The overall_dedupe_ratio of this FederatedDashboardOverview.  # noqa: E501
        :type: float
        """

        self._overall_dedupe_ratio = overall_dedupe_ratio

    @property
    def overall_capacity_saved_bytes(self):
        """Gets the overall_capacity_saved_bytes of this FederatedDashboardOverview.  # noqa: E501

        overall saving in bytes through deduplication of user data for all reported appliances  # noqa: E501

        :return: The overall_capacity_saved_bytes of this FederatedDashboardOverview.  # noqa: E501
        :rtype: int
        """
        return self._overall_capacity_saved_bytes

    @overall_capacity_saved_bytes.setter
    def overall_capacity_saved_bytes(self, overall_capacity_saved_bytes):
        """Sets the overall_capacity_saved_bytes of this FederatedDashboardOverview.

        overall saving in bytes through deduplication of user data for all reported appliances  # noqa: E501

        :param overall_capacity_saved_bytes: The overall_capacity_saved_bytes of this FederatedDashboardOverview.  # noqa: E501
        :type: int
        """

        self._overall_capacity_saved_bytes = overall_capacity_saved_bytes

    @property
    def overall_capacity_saved_percent(self):
        """Gets the overall_capacity_saved_percent of this FederatedDashboardOverview.  # noqa: E501

        overall percentage saving due to deduplication of user data for all reported appliances  # noqa: E501

        :return: The overall_capacity_saved_percent of this FederatedDashboardOverview.  # noqa: E501
        :rtype: float
        """
        return self._overall_capacity_saved_percent

    @overall_capacity_saved_percent.setter
    def overall_capacity_saved_percent(self, overall_capacity_saved_percent):
        """Sets the overall_capacity_saved_percent of this FederatedDashboardOverview.

        overall percentage saving due to deduplication of user data for all reported appliances  # noqa: E501

        :param overall_capacity_saved_percent: The overall_capacity_saved_percent of this FederatedDashboardOverview.  # noqa: E501
        :type: float
        """

        self._overall_capacity_saved_percent = overall_capacity_saved_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FederatedDashboardOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FederatedDashboardOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
