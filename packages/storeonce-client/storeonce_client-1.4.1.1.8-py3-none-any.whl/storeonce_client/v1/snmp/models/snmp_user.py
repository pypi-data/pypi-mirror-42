# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SNMP

    unused  # noqa: E501

    Component version: 2.1.5-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SnmpUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'username': 'str',
        'security_level': 'str',
        'security_level_string': 'str',
        'auth_algorithm': 'str',
        'auth_algorithm_string': 'str',
        'auth_password': 'str',
        'priv_algorithm': 'str',
        'priv_algorithm_string': 'str',
        'priv_password': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'username': 'username',
        'security_level': 'securityLevel',
        'security_level_string': 'securityLevelString',
        'auth_algorithm': 'authAlgorithm',
        'auth_algorithm_string': 'authAlgorithmString',
        'auth_password': 'authPassword',
        'priv_algorithm': 'privAlgorithm',
        'priv_algorithm_string': 'privAlgorithmString',
        'priv_password': 'privPassword'
    }

    def __init__(self, uuid=None, username=None, security_level=None, security_level_string=None, auth_algorithm=None, auth_algorithm_string=None, auth_password=None, priv_algorithm=None, priv_algorithm_string=None, priv_password=None):  # noqa: E501
        """SnmpUser - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._username = None
        self._security_level = None
        self._security_level_string = None
        self._auth_algorithm = None
        self._auth_algorithm_string = None
        self._auth_password = None
        self._priv_algorithm = None
        self._priv_algorithm_string = None
        self._priv_password = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.username = username
        self.security_level = security_level
        if security_level_string is not None:
            self.security_level_string = security_level_string
        if auth_algorithm is not None:
            self.auth_algorithm = auth_algorithm
        if auth_algorithm_string is not None:
            self.auth_algorithm_string = auth_algorithm_string
        if auth_password is not None:
            self.auth_password = auth_password
        if priv_algorithm is not None:
            self.priv_algorithm = priv_algorithm
        if priv_algorithm_string is not None:
            self.priv_algorithm_string = priv_algorithm_string
        if priv_password is not None:
            self.priv_password = priv_password

    @property
    def uuid(self):
        """Gets the uuid of this SnmpUser.  # noqa: E501

        UUID for the SNMP user  # noqa: E501

        :return: The uuid of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SnmpUser.

        UUID for the SNMP user  # noqa: E501

        :param uuid: The uuid of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def username(self):
        """Gets the username of this SnmpUser.  # noqa: E501

        The username  # noqa: E501

        :return: The username of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SnmpUser.

        The username  # noqa: E501

        :param username: The username of this SnmpUser.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def security_level(self):
        """Gets the security_level of this SnmpUser.  # noqa: E501

        The user's security level  # noqa: E501

        :return: The security_level of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level):
        """Sets the security_level of this SnmpUser.

        The user's security level  # noqa: E501

        :param security_level: The security_level of this SnmpUser.  # noqa: E501
        :type: str
        """
        if security_level is None:
            raise ValueError("Invalid value for `security_level`, must not be `None`")  # noqa: E501
        allowed_values = ["noAuthNoPriv", "authNoPriv", "authPriv"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"  # noqa: E501
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def security_level_string(self):
        """Gets the security_level_string of this SnmpUser.  # noqa: E501

        A localized string representation for the securityLevel  # noqa: E501

        :return: The security_level_string of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._security_level_string

    @security_level_string.setter
    def security_level_string(self, security_level_string):
        """Sets the security_level_string of this SnmpUser.

        A localized string representation for the securityLevel  # noqa: E501

        :param security_level_string: The security_level_string of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._security_level_string = security_level_string

    @property
    def auth_algorithm(self):
        """Gets the auth_algorithm of this SnmpUser.  # noqa: E501

        The authentication algorithm  # noqa: E501

        :return: The auth_algorithm of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_algorithm

    @auth_algorithm.setter
    def auth_algorithm(self, auth_algorithm):
        """Sets the auth_algorithm of this SnmpUser.

        The authentication algorithm  # noqa: E501

        :param auth_algorithm: The auth_algorithm of this SnmpUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["MD5", "SHA"]  # noqa: E501
        if auth_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_algorithm, allowed_values)
            )

        self._auth_algorithm = auth_algorithm

    @property
    def auth_algorithm_string(self):
        """Gets the auth_algorithm_string of this SnmpUser.  # noqa: E501

        A localized string representation for the authentication algorithm  # noqa: E501

        :return: The auth_algorithm_string of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_algorithm_string

    @auth_algorithm_string.setter
    def auth_algorithm_string(self, auth_algorithm_string):
        """Sets the auth_algorithm_string of this SnmpUser.

        A localized string representation for the authentication algorithm  # noqa: E501

        :param auth_algorithm_string: The auth_algorithm_string of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._auth_algorithm_string = auth_algorithm_string

    @property
    def auth_password(self):
        """Gets the auth_password of this SnmpUser.  # noqa: E501

        The authentication password  # noqa: E501

        :return: The auth_password of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_password

    @auth_password.setter
    def auth_password(self, auth_password):
        """Sets the auth_password of this SnmpUser.

        The authentication password  # noqa: E501

        :param auth_password: The auth_password of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._auth_password = auth_password

    @property
    def priv_algorithm(self):
        """Gets the priv_algorithm of this SnmpUser.  # noqa: E501

        The privacy algorithm  # noqa: E501

        :return: The priv_algorithm of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._priv_algorithm

    @priv_algorithm.setter
    def priv_algorithm(self, priv_algorithm):
        """Sets the priv_algorithm of this SnmpUser.

        The privacy algorithm  # noqa: E501

        :param priv_algorithm: The priv_algorithm of this SnmpUser.  # noqa: E501
        :type: str
        """
        allowed_values = ["AES", "DES"]  # noqa: E501
        if priv_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `priv_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(priv_algorithm, allowed_values)
            )

        self._priv_algorithm = priv_algorithm

    @property
    def priv_algorithm_string(self):
        """Gets the priv_algorithm_string of this SnmpUser.  # noqa: E501

        A localized string representation for privacy algorithm  # noqa: E501

        :return: The priv_algorithm_string of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._priv_algorithm_string

    @priv_algorithm_string.setter
    def priv_algorithm_string(self, priv_algorithm_string):
        """Sets the priv_algorithm_string of this SnmpUser.

        A localized string representation for privacy algorithm  # noqa: E501

        :param priv_algorithm_string: The priv_algorithm_string of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._priv_algorithm_string = priv_algorithm_string

    @property
    def priv_password(self):
        """Gets the priv_password of this SnmpUser.  # noqa: E501

        The privacy password  # noqa: E501

        :return: The priv_password of this SnmpUser.  # noqa: E501
        :rtype: str
        """
        return self._priv_password

    @priv_password.setter
    def priv_password(self, priv_password):
        """Sets the priv_password of this SnmpUser.

        The privacy password  # noqa: E501

        :param priv_password: The priv_password of this SnmpUser.  # noqa: E501
        :type: str
        """

        self._priv_password = priv_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnmpUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnmpUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
