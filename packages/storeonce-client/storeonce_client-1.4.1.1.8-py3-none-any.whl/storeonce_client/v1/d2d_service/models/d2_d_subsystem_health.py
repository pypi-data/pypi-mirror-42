# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    D2D Service

    unused  # noqa: E501

    Component version: 5.1.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class D2DSubsystemHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subsystem_description': 'str',
        'subsystem_state': 'str',
        'health': 'int',
        'health_string': 'str',
        'health_level': 'int',
        'sub_system_name': 'str',
        'health_level_string': 'str'
    }

    attribute_map = {
        'subsystem_description': 'subsystemDescription',
        'subsystem_state': 'subsystemState',
        'health': 'health',
        'health_string': 'healthString',
        'health_level': 'healthLevel',
        'sub_system_name': 'subSystemName',
        'health_level_string': 'healthLevelString'
    }

    def __init__(self, subsystem_description=None, subsystem_state=None, health=None, health_string=None, health_level=None, sub_system_name=None, health_level_string=None):  # noqa: E501
        """D2DSubsystemHealth - a model defined in Swagger"""  # noqa: E501

        self._subsystem_description = None
        self._subsystem_state = None
        self._health = None
        self._health_string = None
        self._health_level = None
        self._sub_system_name = None
        self._health_level_string = None
        self.discriminator = None

        if subsystem_description is not None:
            self.subsystem_description = subsystem_description
        if subsystem_state is not None:
            self.subsystem_state = subsystem_state
        if health is not None:
            self.health = health
        if health_string is not None:
            self.health_string = health_string
        if health_level is not None:
            self.health_level = health_level
        if sub_system_name is not None:
            self.sub_system_name = sub_system_name
        if health_level_string is not None:
            self.health_level_string = health_level_string

    @property
    def subsystem_description(self):
        """Gets the subsystem_description of this D2DSubsystemHealth.  # noqa: E501

        Subsystem Description  # noqa: E501

        :return: The subsystem_description of this D2DSubsystemHealth.  # noqa: E501
        :rtype: str
        """
        return self._subsystem_description

    @subsystem_description.setter
    def subsystem_description(self, subsystem_description):
        """Sets the subsystem_description of this D2DSubsystemHealth.

        Subsystem Description  # noqa: E501

        :param subsystem_description: The subsystem_description of this D2DSubsystemHealth.  # noqa: E501
        :type: str
        """

        self._subsystem_description = subsystem_description

    @property
    def subsystem_state(self):
        """Gets the subsystem_state of this D2DSubsystemHealth.  # noqa: E501

        Subsystem systemd state.  # noqa: E501

        :return: The subsystem_state of this D2DSubsystemHealth.  # noqa: E501
        :rtype: str
        """
        return self._subsystem_state

    @subsystem_state.setter
    def subsystem_state(self, subsystem_state):
        """Sets the subsystem_state of this D2DSubsystemHealth.

        Subsystem systemd state.  # noqa: E501

        :param subsystem_state: The subsystem_state of this D2DSubsystemHealth.  # noqa: E501
        :type: str
        """

        self._subsystem_state = subsystem_state

    @property
    def health(self):
        """Gets the health of this D2DSubsystemHealth.  # noqa: E501

        Current health status of the subsystem service.  # noqa: E501

        :return: The health of this D2DSubsystemHealth.  # noqa: E501
        :rtype: int
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this D2DSubsystemHealth.

        Current health status of the subsystem service.  # noqa: E501

        :param health: The health of this D2DSubsystemHealth.  # noqa: E501
        :type: int
        """

        self._health = health

    @property
    def health_string(self):
        """Gets the health_string of this D2DSubsystemHealth.  # noqa: E501

        Current status string of the subsystem service.  # noqa: E501

        :return: The health_string of this D2DSubsystemHealth.  # noqa: E501
        :rtype: str
        """
        return self._health_string

    @health_string.setter
    def health_string(self, health_string):
        """Sets the health_string of this D2DSubsystemHealth.

        Current status string of the subsystem service.  # noqa: E501

        :param health_string: The health_string of this D2DSubsystemHealth.  # noqa: E501
        :type: str
        """

        self._health_string = health_string

    @property
    def health_level(self):
        """Gets the health_level of this D2DSubsystemHealth.  # noqa: E501

        Current health status level of the subsystem service.  # noqa: E501

        :return: The health_level of this D2DSubsystemHealth.  # noqa: E501
        :rtype: int
        """
        return self._health_level

    @health_level.setter
    def health_level(self, health_level):
        """Sets the health_level of this D2DSubsystemHealth.

        Current health status level of the subsystem service.  # noqa: E501

        :param health_level: The health_level of this D2DSubsystemHealth.  # noqa: E501
        :type: int
        """

        self._health_level = health_level

    @property
    def sub_system_name(self):
        """Gets the sub_system_name of this D2DSubsystemHealth.  # noqa: E501

        Subsystem Name.  # noqa: E501

        :return: The sub_system_name of this D2DSubsystemHealth.  # noqa: E501
        :rtype: str
        """
        return self._sub_system_name

    @sub_system_name.setter
    def sub_system_name(self, sub_system_name):
        """Sets the sub_system_name of this D2DSubsystemHealth.

        Subsystem Name.  # noqa: E501

        :param sub_system_name: The sub_system_name of this D2DSubsystemHealth.  # noqa: E501
        :type: str
        """

        self._sub_system_name = sub_system_name

    @property
    def health_level_string(self):
        """Gets the health_level_string of this D2DSubsystemHealth.  # noqa: E501

        Current status string of the subsystem service.  # noqa: E501

        :return: The health_level_string of this D2DSubsystemHealth.  # noqa: E501
        :rtype: str
        """
        return self._health_level_string

    @health_level_string.setter
    def health_level_string(self, health_level_string):
        """Sets the health_level_string of this D2DSubsystemHealth.

        Current status string of the subsystem service.  # noqa: E501

        :param health_level_string: The health_level_string of this D2DSubsystemHealth.  # noqa: E501
        :type: str
        """

        self._health_level_string = health_level_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(D2DSubsystemHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, D2DSubsystemHealth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
