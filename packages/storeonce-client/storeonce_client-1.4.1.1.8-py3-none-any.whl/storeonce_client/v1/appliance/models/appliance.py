# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Appliance

    unused  # noqa: E501

    Component version: 11.1.7-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Appliance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'address': 'str',
        'hostname': 'str',
        'product_name': 'str',
        'serial_number': 'str',
        'localhost': 'bool',
        'appliance_state': 'int',
        'appliance_state_string': 'str',
        'state_updated_date': 'datetime',
        'federation_api_version': 'int',
        'since_state_updated_seconds': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'address': 'address',
        'hostname': 'hostname',
        'product_name': 'productName',
        'serial_number': 'serialNumber',
        'localhost': 'localhost',
        'appliance_state': 'applianceState',
        'appliance_state_string': 'applianceStateString',
        'state_updated_date': 'stateUpdatedDate',
        'federation_api_version': 'federationApiVersion',
        'since_state_updated_seconds': 'sinceStateUpdatedSeconds'
    }

    def __init__(self, uuid=None, address=None, hostname=None, product_name=None, serial_number=None, localhost=False, appliance_state=None, appliance_state_string=None, state_updated_date=None, federation_api_version=None, since_state_updated_seconds=None):  # noqa: E501
        """Appliance - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._address = None
        self._hostname = None
        self._product_name = None
        self._serial_number = None
        self._localhost = None
        self._appliance_state = None
        self._appliance_state_string = None
        self._state_updated_date = None
        self._federation_api_version = None
        self._since_state_updated_seconds = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if address is not None:
            self.address = address
        if hostname is not None:
            self.hostname = hostname
        if product_name is not None:
            self.product_name = product_name
        if serial_number is not None:
            self.serial_number = serial_number
        if localhost is not None:
            self.localhost = localhost
        if appliance_state is not None:
            self.appliance_state = appliance_state
        if appliance_state_string is not None:
            self.appliance_state_string = appliance_state_string
        if state_updated_date is not None:
            self.state_updated_date = state_updated_date
        if federation_api_version is not None:
            self.federation_api_version = federation_api_version
        if since_state_updated_seconds is not None:
            self.since_state_updated_seconds = since_state_updated_seconds

    @property
    def uuid(self):
        """Gets the uuid of this Appliance.  # noqa: E501

        UUID of the appliance  # noqa: E501

        :return: The uuid of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Appliance.

        UUID of the appliance  # noqa: E501

        :param uuid: The uuid of this Appliance.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def address(self):
        """Gets the address of this Appliance.  # noqa: E501

        Network address of the appliance  # noqa: E501

        :return: The address of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Appliance.

        Network address of the appliance  # noqa: E501

        :param address: The address of this Appliance.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def hostname(self):
        """Gets the hostname of this Appliance.  # noqa: E501

        Hostname of the appliance  # noqa: E501

        :return: The hostname of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Appliance.

        Hostname of the appliance  # noqa: E501

        :param hostname: The hostname of this Appliance.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def product_name(self):
        """Gets the product_name of this Appliance.  # noqa: E501

        Product name of the appliance  # noqa: E501

        :return: The product_name of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Appliance.

        Product name of the appliance  # noqa: E501

        :param product_name: The product_name of this Appliance.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def serial_number(self):
        """Gets the serial_number of this Appliance.  # noqa: E501

        Serial number of the appliance  # noqa: E501

        :return: The serial_number of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Appliance.

        Serial number of the appliance  # noqa: E501

        :param serial_number: The serial_number of this Appliance.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def localhost(self):
        """Gets the localhost of this Appliance.  # noqa: E501

        Value of the localhost flag of the appliance  # noqa: E501

        :return: The localhost of this Appliance.  # noqa: E501
        :rtype: bool
        """
        return self._localhost

    @localhost.setter
    def localhost(self, localhost):
        """Sets the localhost of this Appliance.

        Value of the localhost flag of the appliance  # noqa: E501

        :param localhost: The localhost of this Appliance.  # noqa: E501
        :type: bool
        """

        self._localhost = localhost

    @property
    def appliance_state(self):
        """Gets the appliance_state of this Appliance.  # noqa: E501

        Connection state of the appliance  # noqa: E501

        :return: The appliance_state of this Appliance.  # noqa: E501
        :rtype: int
        """
        return self._appliance_state

    @appliance_state.setter
    def appliance_state(self, appliance_state):
        """Sets the appliance_state of this Appliance.

        Connection state of the appliance  # noqa: E501

        :param appliance_state: The appliance_state of this Appliance.  # noqa: E501
        :type: int
        """

        self._appliance_state = appliance_state

    @property
    def appliance_state_string(self):
        """Gets the appliance_state_string of this Appliance.  # noqa: E501

        connection state of the appliance as a string  # noqa: E501

        :return: The appliance_state_string of this Appliance.  # noqa: E501
        :rtype: str
        """
        return self._appliance_state_string

    @appliance_state_string.setter
    def appliance_state_string(self, appliance_state_string):
        """Sets the appliance_state_string of this Appliance.

        connection state of the appliance as a string  # noqa: E501

        :param appliance_state_string: The appliance_state_string of this Appliance.  # noqa: E501
        :type: str
        """

        self._appliance_state_string = appliance_state_string

    @property
    def state_updated_date(self):
        """Gets the state_updated_date of this Appliance.  # noqa: E501

        Last time the connection state of the appliance was updated  # noqa: E501

        :return: The state_updated_date of this Appliance.  # noqa: E501
        :rtype: datetime
        """
        return self._state_updated_date

    @state_updated_date.setter
    def state_updated_date(self, state_updated_date):
        """Sets the state_updated_date of this Appliance.

        Last time the connection state of the appliance was updated  # noqa: E501

        :param state_updated_date: The state_updated_date of this Appliance.  # noqa: E501
        :type: datetime
        """

        self._state_updated_date = state_updated_date

    @property
    def federation_api_version(self):
        """Gets the federation_api_version of this Appliance.  # noqa: E501

        Federation API version of the appliance  # noqa: E501

        :return: The federation_api_version of this Appliance.  # noqa: E501
        :rtype: int
        """
        return self._federation_api_version

    @federation_api_version.setter
    def federation_api_version(self, federation_api_version):
        """Sets the federation_api_version of this Appliance.

        Federation API version of the appliance  # noqa: E501

        :param federation_api_version: The federation_api_version of this Appliance.  # noqa: E501
        :type: int
        """

        self._federation_api_version = federation_api_version

    @property
    def since_state_updated_seconds(self):
        """Gets the since_state_updated_seconds of this Appliance.  # noqa: E501

        Number of seconds since the last time the connection state of the appliance was updated  # noqa: E501

        :return: The since_state_updated_seconds of this Appliance.  # noqa: E501
        :rtype: int
        """
        return self._since_state_updated_seconds

    @since_state_updated_seconds.setter
    def since_state_updated_seconds(self, since_state_updated_seconds):
        """Sets the since_state_updated_seconds of this Appliance.

        Number of seconds since the last time the connection state of the appliance was updated  # noqa: E501

        :param since_state_updated_seconds: The since_state_updated_seconds of this Appliance.  # noqa: E501
        :type: int
        """

        self._since_state_updated_seconds = since_state_updated_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Appliance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Appliance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
