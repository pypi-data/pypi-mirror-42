# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Alerts

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class MessageInfoArgWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_info_arg': 'MessageInfoWrapper',
        'string_arg': 'str',
        'int_arg': 'int',
        'long_arg': 'int',
        'boolean_arg': 'bool',
        'date_arg': 'datetime'
    }

    attribute_map = {
        'message_info_arg': 'messageInfoArg',
        'string_arg': 'stringArg',
        'int_arg': 'intArg',
        'long_arg': 'longArg',
        'boolean_arg': 'booleanArg',
        'date_arg': 'dateArg'
    }

    def __init__(self, message_info_arg=None, string_arg=None, int_arg=None, long_arg=None, boolean_arg=False, date_arg=None):  # noqa: E501
        """MessageInfoArgWrapper - a model defined in Swagger"""  # noqa: E501

        self._message_info_arg = None
        self._string_arg = None
        self._int_arg = None
        self._long_arg = None
        self._boolean_arg = None
        self._date_arg = None
        self.discriminator = None

        if message_info_arg is not None:
            self.message_info_arg = message_info_arg
        if string_arg is not None:
            self.string_arg = string_arg
        if int_arg is not None:
            self.int_arg = int_arg
        if long_arg is not None:
            self.long_arg = long_arg
        if boolean_arg is not None:
            self.boolean_arg = boolean_arg
        if date_arg is not None:
            self.date_arg = date_arg

    @property
    def message_info_arg(self):
        """Gets the message_info_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The message_info_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: MessageInfoWrapper
        """
        return self._message_info_arg

    @message_info_arg.setter
    def message_info_arg(self, message_info_arg):
        """Sets the message_info_arg of this MessageInfoArgWrapper.


        :param message_info_arg: The message_info_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: MessageInfoWrapper
        """

        self._message_info_arg = message_info_arg

    @property
    def string_arg(self):
        """Gets the string_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The string_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: str
        """
        return self._string_arg

    @string_arg.setter
    def string_arg(self, string_arg):
        """Sets the string_arg of this MessageInfoArgWrapper.


        :param string_arg: The string_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: str
        """

        self._string_arg = string_arg

    @property
    def int_arg(self):
        """Gets the int_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The int_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: int
        """
        return self._int_arg

    @int_arg.setter
    def int_arg(self, int_arg):
        """Sets the int_arg of this MessageInfoArgWrapper.


        :param int_arg: The int_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: int
        """

        self._int_arg = int_arg

    @property
    def long_arg(self):
        """Gets the long_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The long_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: int
        """
        return self._long_arg

    @long_arg.setter
    def long_arg(self, long_arg):
        """Sets the long_arg of this MessageInfoArgWrapper.


        :param long_arg: The long_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: int
        """

        self._long_arg = long_arg

    @property
    def boolean_arg(self):
        """Gets the boolean_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The boolean_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_arg

    @boolean_arg.setter
    def boolean_arg(self, boolean_arg):
        """Sets the boolean_arg of this MessageInfoArgWrapper.


        :param boolean_arg: The boolean_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: bool
        """

        self._boolean_arg = boolean_arg

    @property
    def date_arg(self):
        """Gets the date_arg of this MessageInfoArgWrapper.  # noqa: E501


        :return: The date_arg of this MessageInfoArgWrapper.  # noqa: E501
        :rtype: datetime
        """
        return self._date_arg

    @date_arg.setter
    def date_arg(self, date_arg):
        """Sets the date_arg of this MessageInfoArgWrapper.


        :param date_arg: The date_arg of this MessageInfoArgWrapper.  # noqa: E501
        :type: datetime
        """

        self._date_arg = date_arg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageInfoArgWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageInfoArgWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
