# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Alerts

    unused  # noqa: E501

    Component version: 2.2-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class AlertsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_alert(self, id, **kwargs):  # noqa: E501
        """Delete a specific Alert using its uuid  # noqa: E501

        Delete a specific Alert using its uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_alert(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique identifier (uuid) of an existing AlertsEntry resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_alert_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alert_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_alert_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a specific Alert using its uuid  # noqa: E501

        Delete a specific Alert using its uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_alert_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique identifier (uuid) of an existing AlertsEntry resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_by_filter(self, **kwargs):  # noqa: E501
        """Used to delete Alerts using filtering  # noqa: E501

        Deletes all alerts based on the filtering parameters passed in. If no filtering parameters are defined, then all alerts will be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_by_filter(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str filter: A general filter to narrow the list to delete.<br><br><b>Format</b><br><br><code>filter=\"[not] {attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ =, &lt&gt, &gt, &gt=, &lt, &lt=, matches, regex, ==, smatches, sregex, sne ]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_by_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_by_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_by_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Used to delete Alerts using filtering  # noqa: E501

        Deletes all alerts based on the filtering parameters passed in. If no filtering parameters are defined, then all alerts will be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_by_filter_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str filter: A general filter to narrow the list to delete.<br><br><b>Format</b><br><br><code>filter=\"[not] {attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ =, &lt&gt, &gt, &gt=, &lt, &lt=, matches, regex, ==, smatches, sregex, sne ]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_by_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves a particular alert entry using its uuid  # noqa: E501

        Retrieves a particular alert entry using its uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_by_id(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique identifier (uuid) of an existing AlertsEntry resource. (required)
        :return: AlertsEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_alert_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_alert_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a particular alert entry using its uuid  # noqa: E501

        Retrieves a particular alert entry using its uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_alert_by_id_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Unique identifier (uuid) of an existing AlertsEntry resource. (required)
        :return: AlertsEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_alert_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertsEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alerts(self, **kwargs):  # noqa: E501
        """Get list of Alerts  # noqa: E501

        Retrieves alerts based on the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alerts(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param int start: Start position. If not specified, entries from position at index 0 will be returned.
        :param int count: Number of entries to return. A maximum of 100 entries will be returned in a single request. Subsequent entries can be retrieved using the nextPageUri.
        :param str filter: A general filter to narrow the list of AlertsEntry resources that are returned.<br><br><b>Format</b><br><br><code>filter=\"[not] {attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ =, <>, !=, >, <, >=, <= ]
        :param str query: A general filter to narrow the list of AlertsEntry resources that are returned.<br><br><b>Format</b><br><br><code>query=\"{attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ OR, AND, NOT, EQ, NE, GT, LT, GE, LE, LIKE, IN, CONTAINS, IS NULL ]
        :param str sort: Sorting in the form: 'sort=prop:[desc|asc]' - where prop is the name of the AlertsEntry property to use for sorting. Example: created:desc.
        :return: AlertsEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_alerts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_alerts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_alerts_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of Alerts  # noqa: E501

        Retrieves alerts based on the specified filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_alerts_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param int start: Start position. If not specified, entries from position at index 0 will be returned.
        :param int count: Number of entries to return. A maximum of 100 entries will be returned in a single request. Subsequent entries can be retrieved using the nextPageUri.
        :param str filter: A general filter to narrow the list of AlertsEntry resources that are returned.<br><br><b>Format</b><br><br><code>filter=\"[not] {attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ =, <>, !=, >, <, >=, <= ]
        :param str query: A general filter to narrow the list of AlertsEntry resources that are returned.<br><br><b>Format</b><br><br><code>query=\"{attribute} {operator} '{value}'</code>\"<br><br>{operator}: one of [ OR, AND, NOT, EQ, NE, GT, LT, GE, LE, LIKE, IN, CONTAINS, IS NULL ]
        :param str sort: Sorting in the form: 'sort=prop:[desc|asc]' - where prop is the name of the AlertsEntry property to use for sorting. Example: created:desc.
        :return: AlertsEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'filter', 'query', 'sort']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertsEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_prune_months(self, **kwargs):  # noqa: E501
        """Get the current value of the autoPruneMonths configuration parameter  for Alert s  # noqa: E501

        Once a day the system will automatically prune alerts from the database that were created more than autoPruneMonths ago  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_auto_prune_months(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: AutoPruneMonthsPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_auto_prune_months_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_prune_months_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_auto_prune_months_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current value of the autoPruneMonths configuration parameter  for Alert s  # noqa: E501

        Once a day the system will automatically prune alerts from the database that were created more than autoPruneMonths ago  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_auto_prune_months_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: AutoPruneMonthsPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_prune_months" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts/autoPruneMonths', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutoPruneMonthsPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_count(self, **kwargs):  # noqa: E501
        """Get the current number of alerts in the database  # noqa: E501

        Get the current number of alerts in the database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_count(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CountPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get the current number of alerts in the database  # noqa: E501

        Get the current number of alerts in the database  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_count_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CountPayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountPayload',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_auto_prune_months(self, body, **kwargs):  # noqa: E501
        """Set the autoPruneMonths configuration parameter for alerts  # noqa: E501

        Once a day the system will automatically prune alerts from the database that were created more than autoPruneMonths ago  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_auto_prune_months(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param AutoPruneMonthsPayload body: serialized <code>AutoPruneMonthsPayload</code> object with the new autoPruneMonths configuration parameter value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.set_auto_prune_months_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_auto_prune_months_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_auto_prune_months_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set the autoPruneMonths configuration parameter for alerts  # noqa: E501

        Once a day the system will automatically prune alerts from the database that were created more than autoPruneMonths ago  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.set_auto_prune_months_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param AutoPruneMonthsPayload body: serialized <code>AutoPruneMonthsPayload</code> object with the new autoPruneMonths configuration parameter value. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_auto_prune_months" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_auto_prune_months`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/alerts/autoPruneMonths', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
