# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class HardwareReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitoring_cluster_uuid': 'str',
        'reporting_server_uuid': 'str',
        'overall_status': 'OverallStatus',
        'component': 'list[JAXBElementComponent]',
        'hpspmon_version': 'str',
        'category': 'str',
        'platform': 'str',
        'product_id': 'str',
        'product_name': 'str'
    }

    attribute_map = {
        'monitoring_cluster_uuid': 'monitoringClusterUUID',
        'reporting_server_uuid': 'reportingServerUUID',
        'overall_status': 'overallStatus',
        'component': 'component',
        'hpspmon_version': 'hpspmonVersion',
        'category': 'category',
        'platform': 'platform',
        'product_id': 'productID',
        'product_name': 'productName'
    }

    def __init__(self, monitoring_cluster_uuid=None, reporting_server_uuid=None, overall_status=None, component=None, hpspmon_version=None, category=None, platform=None, product_id=None, product_name=None):  # noqa: E501
        """HardwareReport - a model defined in Swagger"""  # noqa: E501

        self._monitoring_cluster_uuid = None
        self._reporting_server_uuid = None
        self._overall_status = None
        self._component = None
        self._hpspmon_version = None
        self._category = None
        self._platform = None
        self._product_id = None
        self._product_name = None
        self.discriminator = None

        self.monitoring_cluster_uuid = monitoring_cluster_uuid
        self.reporting_server_uuid = reporting_server_uuid
        self.overall_status = overall_status
        if component is not None:
            self.component = component
        if hpspmon_version is not None:
            self.hpspmon_version = hpspmon_version
        if category is not None:
            self.category = category
        if platform is not None:
            self.platform = platform
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name

    @property
    def monitoring_cluster_uuid(self):
        """Gets the monitoring_cluster_uuid of this HardwareReport.  # noqa: E501


        :return: The monitoring_cluster_uuid of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._monitoring_cluster_uuid

    @monitoring_cluster_uuid.setter
    def monitoring_cluster_uuid(self, monitoring_cluster_uuid):
        """Sets the monitoring_cluster_uuid of this HardwareReport.


        :param monitoring_cluster_uuid: The monitoring_cluster_uuid of this HardwareReport.  # noqa: E501
        :type: str
        """
        if monitoring_cluster_uuid is None:
            raise ValueError("Invalid value for `monitoring_cluster_uuid`, must not be `None`")  # noqa: E501

        self._monitoring_cluster_uuid = monitoring_cluster_uuid

    @property
    def reporting_server_uuid(self):
        """Gets the reporting_server_uuid of this HardwareReport.  # noqa: E501


        :return: The reporting_server_uuid of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._reporting_server_uuid

    @reporting_server_uuid.setter
    def reporting_server_uuid(self, reporting_server_uuid):
        """Sets the reporting_server_uuid of this HardwareReport.


        :param reporting_server_uuid: The reporting_server_uuid of this HardwareReport.  # noqa: E501
        :type: str
        """
        if reporting_server_uuid is None:
            raise ValueError("Invalid value for `reporting_server_uuid`, must not be `None`")  # noqa: E501

        self._reporting_server_uuid = reporting_server_uuid

    @property
    def overall_status(self):
        """Gets the overall_status of this HardwareReport.  # noqa: E501


        :return: The overall_status of this HardwareReport.  # noqa: E501
        :rtype: OverallStatus
        """
        return self._overall_status

    @overall_status.setter
    def overall_status(self, overall_status):
        """Sets the overall_status of this HardwareReport.


        :param overall_status: The overall_status of this HardwareReport.  # noqa: E501
        :type: OverallStatus
        """
        if overall_status is None:
            raise ValueError("Invalid value for `overall_status`, must not be `None`")  # noqa: E501

        self._overall_status = overall_status

    @property
    def component(self):
        """Gets the component of this HardwareReport.  # noqa: E501


        :return: The component of this HardwareReport.  # noqa: E501
        :rtype: list[JAXBElementComponent]
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this HardwareReport.


        :param component: The component of this HardwareReport.  # noqa: E501
        :type: list[JAXBElementComponent]
        """

        self._component = component

    @property
    def hpspmon_version(self):
        """Gets the hpspmon_version of this HardwareReport.  # noqa: E501


        :return: The hpspmon_version of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._hpspmon_version

    @hpspmon_version.setter
    def hpspmon_version(self, hpspmon_version):
        """Sets the hpspmon_version of this HardwareReport.


        :param hpspmon_version: The hpspmon_version of this HardwareReport.  # noqa: E501
        :type: str
        """

        self._hpspmon_version = hpspmon_version

    @property
    def category(self):
        """Gets the category of this HardwareReport.  # noqa: E501


        :return: The category of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HardwareReport.


        :param category: The category of this HardwareReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHASSIS", "NETWORK", "SERVER", "STORAGE", "STORAGE_CLUSTER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def platform(self):
        """Gets the platform of this HardwareReport.  # noqa: E501


        :return: The platform of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this HardwareReport.


        :param platform: The platform of this HardwareReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "HW", "X_9730", "X_9720", "X_9320", "X_8800", "X_8200", "X_9300", "OVAL", "SOUTHWARK", "WATERLOO", "TEMPLE", "WESTMINSTER", "BLACKFRIARS", "KINGSCROSS", "OAKWOOD", "STANMORE", "GREENFORD", "BARBICAN", "WIMBLEDON", "BALVENIE", "DUFFTOWN", "VM", "UNITY", "HYDROGEN", "LITHIUM", "SODIUM", "POTASSIUM", "CALCIUM", "RUBIDIUM", "STRONTIUM", "SCALITY_APOLLO_4200_G_9", "SCALITY_APOLLO_4510_G_9", "SCALITY_APOLLO_4510_G_10", "SCALITY_DL_360_G_9", "SCALITY_VSA", "APOLLO_4200_G_9", "APOLLO_4510_G_9", "APOLLO_4510_G_10"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def product_id(self):
        """Gets the product_id of this HardwareReport.  # noqa: E501


        :return: The product_id of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this HardwareReport.


        :param product_id: The product_id of this HardwareReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "GENERIC_HARDWARE", "X_9730", "X_9720", "X_9320", "X_8800", "X_8200", "X_9300", "OVAL", "SOUTHWARK", "WATERLOO", "TEMPLE", "WESTMINSTER", "BLACKFRIARS", "KINGSCROSS", "OAKWOOD", "STANMORE", "GREENFORD", "BARBICAN", "WIMBLEDON", "BALVENIE", "DUFFTOWN", "VM", "UNITY", "VSA", "LITHIUM", "SODIUM", "POTASSIUM", "CALCIUM", "RUBIDIUM", "STRONTIUM", "APOLLO_4200", "APOLLO_4510", "DL_360"]  # noqa: E501
        if product_id not in allowed_values:
            raise ValueError(
                "Invalid value for `product_id` ({0}), must be one of {1}"  # noqa: E501
                .format(product_id, allowed_values)
            )

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this HardwareReport.  # noqa: E501


        :return: The product_name of this HardwareReport.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this HardwareReport.


        :param product_name: The product_name of this HardwareReport.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HardwareReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HardwareReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
