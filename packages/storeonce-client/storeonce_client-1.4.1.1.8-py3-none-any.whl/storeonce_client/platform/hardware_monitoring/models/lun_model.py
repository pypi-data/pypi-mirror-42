# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LunModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'capacity_in_bytes': 'int',
        'hosts': 'list[str]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'capacity_in_bytes': 'capacityInBytes',
        'hosts': 'hosts'
    }

    def __init__(self, uuid=None, capacity_in_bytes=None, hosts=None):  # noqa: E501
        """LunModel - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._capacity_in_bytes = None
        self._hosts = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if capacity_in_bytes is not None:
            self.capacity_in_bytes = capacity_in_bytes
        if hosts is not None:
            self.hosts = hosts

    @property
    def uuid(self):
        """Gets the uuid of this LunModel.  # noqa: E501


        :return: The uuid of this LunModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this LunModel.


        :param uuid: The uuid of this LunModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def capacity_in_bytes(self):
        """Gets the capacity_in_bytes of this LunModel.  # noqa: E501


        :return: The capacity_in_bytes of this LunModel.  # noqa: E501
        :rtype: int
        """
        return self._capacity_in_bytes

    @capacity_in_bytes.setter
    def capacity_in_bytes(self, capacity_in_bytes):
        """Sets the capacity_in_bytes of this LunModel.


        :param capacity_in_bytes: The capacity_in_bytes of this LunModel.  # noqa: E501
        :type: int
        """

        self._capacity_in_bytes = capacity_in_bytes

    @property
    def hosts(self):
        """Gets the hosts of this LunModel.  # noqa: E501


        :return: The hosts of this LunModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this LunModel.


        :param hosts: The hosts of this LunModel.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LunModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LunModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
