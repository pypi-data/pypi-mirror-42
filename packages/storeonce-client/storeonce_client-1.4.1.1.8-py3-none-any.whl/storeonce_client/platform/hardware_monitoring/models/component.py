# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class Component(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'euid': 'str',
        'name': 'str',
        'manufacturer': 'str',
        'model': 'str',
        'part_number': 'str',
        'serial_number': 'str',
        'firmware_version': 'str',
        'location': 'str',
        'full_location': 'object',
        'description': 'str',
        'event': 'list[Event]',
        'optional_hw': 'str',
        'component': 'list[JAXBElementComponent]',
        'status': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'euid': 'euid',
        'name': 'name',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'part_number': 'partNumber',
        'serial_number': 'serialNumber',
        'firmware_version': 'firmwareVersion',
        'location': 'location',
        'full_location': 'fullLocation',
        'description': 'description',
        'event': 'event',
        'optional_hw': 'optionalHw',
        'component': 'component',
        'status': 'status',
        'uuid': 'uuid'
    }

    def __init__(self, euid=None, name=None, manufacturer=None, model=None, part_number=None, serial_number=None, firmware_version=None, location=None, full_location=None, description=None, event=None, optional_hw=None, component=None, status=None, uuid=None):  # noqa: E501
        """Component - a model defined in Swagger"""  # noqa: E501

        self._euid = None
        self._name = None
        self._manufacturer = None
        self._model = None
        self._part_number = None
        self._serial_number = None
        self._firmware_version = None
        self._location = None
        self._full_location = None
        self._description = None
        self._event = None
        self._optional_hw = None
        self._component = None
        self._status = None
        self._uuid = None
        self.discriminator = None

        self.euid = euid
        if name is not None:
            self.name = name
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if model is not None:
            self.model = model
        if part_number is not None:
            self.part_number = part_number
        if serial_number is not None:
            self.serial_number = serial_number
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if location is not None:
            self.location = location
        if full_location is not None:
            self.full_location = full_location
        if description is not None:
            self.description = description
        if event is not None:
            self.event = event
        if optional_hw is not None:
            self.optional_hw = optional_hw
        if component is not None:
            self.component = component
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid

    @property
    def euid(self):
        """Gets the euid of this Component.  # noqa: E501


        :return: The euid of this Component.  # noqa: E501
        :rtype: str
        """
        return self._euid

    @euid.setter
    def euid(self, euid):
        """Sets the euid of this Component.


        :param euid: The euid of this Component.  # noqa: E501
        :type: str
        """
        if euid is None:
            raise ValueError("Invalid value for `euid`, must not be `None`")  # noqa: E501

        self._euid = euid

    @property
    def name(self):
        """Gets the name of this Component.  # noqa: E501


        :return: The name of this Component.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Component.


        :param name: The name of this Component.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Component.  # noqa: E501


        :return: The manufacturer of this Component.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Component.


        :param manufacturer: The manufacturer of this Component.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this Component.  # noqa: E501


        :return: The model of this Component.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Component.


        :param model: The model of this Component.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def part_number(self):
        """Gets the part_number of this Component.  # noqa: E501


        :return: The part_number of this Component.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this Component.


        :param part_number: The part_number of this Component.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def serial_number(self):
        """Gets the serial_number of this Component.  # noqa: E501


        :return: The serial_number of this Component.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Component.


        :param serial_number: The serial_number of this Component.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def firmware_version(self):
        """Gets the firmware_version of this Component.  # noqa: E501


        :return: The firmware_version of this Component.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this Component.


        :param firmware_version: The firmware_version of this Component.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def location(self):
        """Gets the location of this Component.  # noqa: E501


        :return: The location of this Component.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Component.


        :param location: The location of this Component.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def full_location(self):
        """Gets the full_location of this Component.  # noqa: E501


        :return: The full_location of this Component.  # noqa: E501
        :rtype: object
        """
        return self._full_location

    @full_location.setter
    def full_location(self, full_location):
        """Sets the full_location of this Component.


        :param full_location: The full_location of this Component.  # noqa: E501
        :type: object
        """

        self._full_location = full_location

    @property
    def description(self):
        """Gets the description of this Component.  # noqa: E501


        :return: The description of this Component.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Component.


        :param description: The description of this Component.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event(self):
        """Gets the event of this Component.  # noqa: E501


        :return: The event of this Component.  # noqa: E501
        :rtype: list[Event]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Component.


        :param event: The event of this Component.  # noqa: E501
        :type: list[Event]
        """

        self._event = event

    @property
    def optional_hw(self):
        """Gets the optional_hw of this Component.  # noqa: E501


        :return: The optional_hw of this Component.  # noqa: E501
        :rtype: str
        """
        return self._optional_hw

    @optional_hw.setter
    def optional_hw(self, optional_hw):
        """Sets the optional_hw of this Component.


        :param optional_hw: The optional_hw of this Component.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTHORIZED", "UNAUTHORIZED"]  # noqa: E501
        if optional_hw not in allowed_values:
            raise ValueError(
                "Invalid value for `optional_hw` ({0}), must be one of {1}"  # noqa: E501
                .format(optional_hw, allowed_values)
            )

        self._optional_hw = optional_hw

    @property
    def component(self):
        """Gets the component of this Component.  # noqa: E501


        :return: The component of this Component.  # noqa: E501
        :rtype: list[JAXBElementComponent]
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this Component.


        :param component: The component of this Component.  # noqa: E501
        :type: list[JAXBElementComponent]
        """

        self._component = component

    @property
    def status(self):
        """Gets the status of this Component.  # noqa: E501


        :return: The status of this Component.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Component.


        :param status: The status of this Component.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNUSED", "OK", "OFFLINE", "UNAUTHORIZED", "DEGRADED", "FAILED", "UNKNOWN", "MISSING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this Component.  # noqa: E501


        :return: The uuid of this Component.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Component.


        :param uuid: The uuid of this Component.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Component, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Component):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
