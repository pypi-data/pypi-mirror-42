# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class FileSystemComponentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'health_status_map': 'str',
        'uuid': 'str',
        'name': 'str',
        'model': 'str',
        'serial_number': 'str',
        'mount_point': 'str',
        'file_system_type': 'str',
        'local_device': 'str',
        'capacity': 'str',
        'percent_capacity_used': 'str',
        'percent_inodes_used': 'str'
    }

    attribute_map = {
        'status': 'status',
        'health_status_map': 'healthStatusMap',
        'uuid': 'uuid',
        'name': 'name',
        'model': 'model',
        'serial_number': 'serialNumber',
        'mount_point': 'mountPoint',
        'file_system_type': 'fileSystemType',
        'local_device': 'localDevice',
        'capacity': 'capacity',
        'percent_capacity_used': 'percentCapacityUsed',
        'percent_inodes_used': 'percentInodesUsed'
    }

    def __init__(self, status=None, health_status_map=None, uuid=None, name=None, model=None, serial_number=None, mount_point=None, file_system_type=None, local_device=None, capacity=None, percent_capacity_used=None, percent_inodes_used=None):  # noqa: E501
        """FileSystemComponentModel - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._health_status_map = None
        self._uuid = None
        self._name = None
        self._model = None
        self._serial_number = None
        self._mount_point = None
        self._file_system_type = None
        self._local_device = None
        self._capacity = None
        self._percent_capacity_used = None
        self._percent_inodes_used = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if health_status_map is not None:
            self.health_status_map = health_status_map
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if model is not None:
            self.model = model
        if serial_number is not None:
            self.serial_number = serial_number
        if mount_point is not None:
            self.mount_point = mount_point
        if file_system_type is not None:
            self.file_system_type = file_system_type
        if local_device is not None:
            self.local_device = local_device
        if capacity is not None:
            self.capacity = capacity
        if percent_capacity_used is not None:
            self.percent_capacity_used = percent_capacity_used
        if percent_inodes_used is not None:
            self.percent_inodes_used = percent_inodes_used

    @property
    def status(self):
        """Gets the status of this FileSystemComponentModel.  # noqa: E501


        :return: The status of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileSystemComponentModel.


        :param status: The status of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNUSED", "OK", "OFFLINE", "UNAUTHORIZED", "DEGRADED", "FAILED", "UNKNOWN", "MISSING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def health_status_map(self):
        """Gets the health_status_map of this FileSystemComponentModel.  # noqa: E501


        :return: The health_status_map of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._health_status_map

    @health_status_map.setter
    def health_status_map(self, health_status_map):
        """Sets the health_status_map of this FileSystemComponentModel.


        :param health_status_map: The health_status_map of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Critical", "Warning", "OK", "Unknown", "Disabled"]  # noqa: E501
        if health_status_map not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status_map` ({0}), must be one of {1}"  # noqa: E501
                .format(health_status_map, allowed_values)
            )

        self._health_status_map = health_status_map

    @property
    def uuid(self):
        """Gets the uuid of this FileSystemComponentModel.  # noqa: E501


        :return: The uuid of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this FileSystemComponentModel.


        :param uuid: The uuid of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this FileSystemComponentModel.  # noqa: E501


        :return: The name of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileSystemComponentModel.


        :param name: The name of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model(self):
        """Gets the model of this FileSystemComponentModel.  # noqa: E501


        :return: The model of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FileSystemComponentModel.


        :param model: The model of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def serial_number(self):
        """Gets the serial_number of this FileSystemComponentModel.  # noqa: E501


        :return: The serial_number of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this FileSystemComponentModel.


        :param serial_number: The serial_number of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def mount_point(self):
        """Gets the mount_point of this FileSystemComponentModel.  # noqa: E501


        :return: The mount_point of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """Sets the mount_point of this FileSystemComponentModel.


        :param mount_point: The mount_point of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._mount_point = mount_point

    @property
    def file_system_type(self):
        """Gets the file_system_type of this FileSystemComponentModel.  # noqa: E501


        :return: The file_system_type of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this FileSystemComponentModel.


        :param file_system_type: The file_system_type of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._file_system_type = file_system_type

    @property
    def local_device(self):
        """Gets the local_device of this FileSystemComponentModel.  # noqa: E501


        :return: The local_device of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._local_device

    @local_device.setter
    def local_device(self, local_device):
        """Sets the local_device of this FileSystemComponentModel.


        :param local_device: The local_device of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._local_device = local_device

    @property
    def capacity(self):
        """Gets the capacity of this FileSystemComponentModel.  # noqa: E501


        :return: The capacity of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this FileSystemComponentModel.


        :param capacity: The capacity of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def percent_capacity_used(self):
        """Gets the percent_capacity_used of this FileSystemComponentModel.  # noqa: E501


        :return: The percent_capacity_used of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._percent_capacity_used

    @percent_capacity_used.setter
    def percent_capacity_used(self, percent_capacity_used):
        """Sets the percent_capacity_used of this FileSystemComponentModel.


        :param percent_capacity_used: The percent_capacity_used of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._percent_capacity_used = percent_capacity_used

    @property
    def percent_inodes_used(self):
        """Gets the percent_inodes_used of this FileSystemComponentModel.  # noqa: E501


        :return: The percent_inodes_used of this FileSystemComponentModel.  # noqa: E501
        :rtype: str
        """
        return self._percent_inodes_used

    @percent_inodes_used.setter
    def percent_inodes_used(self, percent_inodes_used):
        """Sets the percent_inodes_used of this FileSystemComponentModel.


        :param percent_inodes_used: The percent_inodes_used of this FileSystemComponentModel.  # noqa: E501
        :type: str
        """

        self._percent_inodes_used = percent_inodes_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileSystemComponentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemComponentModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
