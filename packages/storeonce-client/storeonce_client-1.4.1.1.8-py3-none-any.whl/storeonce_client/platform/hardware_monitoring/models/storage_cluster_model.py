# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class StorageClusterModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'platform': 'str',
        'hosts': 'list[str]',
        'monitoring_host': 'str',
        'reserved_volumes': 'list[str]',
        'monitoring_type': 'str',
        'hardware_report_response': 'HardwareReportResponse',
        'node_monitoring_type': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'platform': 'platform',
        'hosts': 'hosts',
        'monitoring_host': 'monitoringHost',
        'reserved_volumes': 'reservedVolumes',
        'monitoring_type': 'monitoringType',
        'hardware_report_response': 'hardwareReportResponse',
        'node_monitoring_type': 'nodeMonitoringType'
    }

    def __init__(self, uuid=None, name=None, platform=None, hosts=None, monitoring_host=None, reserved_volumes=None, monitoring_type=None, hardware_report_response=None, node_monitoring_type=None):  # noqa: E501
        """StorageClusterModel - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._name = None
        self._platform = None
        self._hosts = None
        self._monitoring_host = None
        self._reserved_volumes = None
        self._monitoring_type = None
        self._hardware_report_response = None
        self._node_monitoring_type = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if platform is not None:
            self.platform = platform
        if hosts is not None:
            self.hosts = hosts
        if monitoring_host is not None:
            self.monitoring_host = monitoring_host
        if reserved_volumes is not None:
            self.reserved_volumes = reserved_volumes
        if monitoring_type is not None:
            self.monitoring_type = monitoring_type
        if hardware_report_response is not None:
            self.hardware_report_response = hardware_report_response
        if node_monitoring_type is not None:
            self.node_monitoring_type = node_monitoring_type

    @property
    def uuid(self):
        """Gets the uuid of this StorageClusterModel.  # noqa: E501


        :return: The uuid of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this StorageClusterModel.


        :param uuid: The uuid of this StorageClusterModel.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this StorageClusterModel.  # noqa: E501


        :return: The name of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StorageClusterModel.


        :param name: The name of this StorageClusterModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this StorageClusterModel.  # noqa: E501


        :return: The platform of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this StorageClusterModel.


        :param platform: The platform of this StorageClusterModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "HW", "X_9730", "X_9720", "X_9320", "X_8800", "X_8200", "X_9300", "OVAL", "SOUTHWARK", "WATERLOO", "TEMPLE", "WESTMINSTER", "BLACKFRIARS", "KINGSCROSS", "OAKWOOD", "STANMORE", "GREENFORD", "BARBICAN", "WIMBLEDON", "BALVENIE", "DUFFTOWN", "VM", "UNITY", "HYDROGEN", "LITHIUM", "SODIUM", "POTASSIUM", "CALCIUM", "RUBIDIUM", "STRONTIUM", "SCALITY_APOLLO_4200_G_9", "SCALITY_APOLLO_4510_G_9", "SCALITY_APOLLO_4510_G_10", "SCALITY_DL_360_G_9", "SCALITY_VSA", "APOLLO_4200_G_9", "APOLLO_4510_G_9", "APOLLO_4510_G_10"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"  # noqa: E501
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def hosts(self):
        """Gets the hosts of this StorageClusterModel.  # noqa: E501


        :return: The hosts of this StorageClusterModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this StorageClusterModel.


        :param hosts: The hosts of this StorageClusterModel.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def monitoring_host(self):
        """Gets the monitoring_host of this StorageClusterModel.  # noqa: E501


        :return: The monitoring_host of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._monitoring_host

    @monitoring_host.setter
    def monitoring_host(self, monitoring_host):
        """Sets the monitoring_host of this StorageClusterModel.


        :param monitoring_host: The monitoring_host of this StorageClusterModel.  # noqa: E501
        :type: str
        """

        self._monitoring_host = monitoring_host

    @property
    def reserved_volumes(self):
        """Gets the reserved_volumes of this StorageClusterModel.  # noqa: E501


        :return: The reserved_volumes of this StorageClusterModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._reserved_volumes

    @reserved_volumes.setter
    def reserved_volumes(self, reserved_volumes):
        """Sets the reserved_volumes of this StorageClusterModel.


        :param reserved_volumes: The reserved_volumes of this StorageClusterModel.  # noqa: E501
        :type: list[str]
        """

        self._reserved_volumes = reserved_volumes

    @property
    def monitoring_type(self):
        """Gets the monitoring_type of this StorageClusterModel.  # noqa: E501


        :return: The monitoring_type of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._monitoring_type

    @monitoring_type.setter
    def monitoring_type(self, monitoring_type):
        """Sets the monitoring_type of this StorageClusterModel.


        :param monitoring_type: The monitoring_type of this StorageClusterModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "esxi"]  # noqa: E501
        if monitoring_type not in allowed_values:
            raise ValueError(
                "Invalid value for `monitoring_type` ({0}), must be one of {1}"  # noqa: E501
                .format(monitoring_type, allowed_values)
            )

        self._monitoring_type = monitoring_type

    @property
    def hardware_report_response(self):
        """Gets the hardware_report_response of this StorageClusterModel.  # noqa: E501


        :return: The hardware_report_response of this StorageClusterModel.  # noqa: E501
        :rtype: HardwareReportResponse
        """
        return self._hardware_report_response

    @hardware_report_response.setter
    def hardware_report_response(self, hardware_report_response):
        """Sets the hardware_report_response of this StorageClusterModel.


        :param hardware_report_response: The hardware_report_response of this StorageClusterModel.  # noqa: E501
        :type: HardwareReportResponse
        """

        self._hardware_report_response = hardware_report_response

    @property
    def node_monitoring_type(self):
        """Gets the node_monitoring_type of this StorageClusterModel.  # noqa: E501


        :return: The node_monitoring_type of this StorageClusterModel.  # noqa: E501
        :rtype: str
        """
        return self._node_monitoring_type

    @node_monitoring_type.setter
    def node_monitoring_type(self, node_monitoring_type):
        """Sets the node_monitoring_type of this StorageClusterModel.


        :param node_monitoring_type: The node_monitoring_type of this StorageClusterModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["local", "esxi"]  # noqa: E501
        if node_monitoring_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_monitoring_type` ({0}), must be one of {1}"  # noqa: E501
                .format(node_monitoring_type, allowed_values)
            )

        self._node_monitoring_type = node_monitoring_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageClusterModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageClusterModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
