# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Hardware Monitoring

    unused  # noqa: E501

    Component version: 3.17-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class HardwareMonitoringApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_servers(self, **kwargs):  # noqa: E501
        """Get all the servers being monitored  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_servers(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param bool list_detailed: When set to true, a detailed hardware report will be included for each server
        :return: ServerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_all_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_servers_with_http_info(self, **kwargs):  # noqa: E501
        """Get all the servers being monitored  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_all_servers_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param bool list_detailed: When set to true, a detailed hardware report will be included for each server
        :return: ServerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_detailed']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'list_detailed' in params:
            query_params.append(('listDetailed', params['list_detailed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_storage(self, **kwargs):  # noqa: E501
        """Get all monitored storage clusters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_storage(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param bool list_detailed: When set to true, a detailed health report will be included for each storage cluster
        :return: StorageClusterList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_all_storage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_storage_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_storage_with_http_info(self, **kwargs):  # noqa: E501
        """Get all monitored storage clusters  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_all_storage_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param bool list_detailed: When set to true, a detailed health report will be included for each storage cluster
        :return: StorageClusterList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_detailed']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_storage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'list_detailed' in params:
            query_params.append(('listDetailed', params['list_detailed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/storage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageClusterList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backing_volume(self, volume_uuid, **kwargs):  # noqa: E501
        """Get a hardware based data volume and an indication of whether it backs thin provisioning.  # noqa: E501

        If the volume is a backing volume, it will also indicate the percentage of its capacity used by thin provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_backing_volume(volume_uuid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str volume_uuid: The UUID of the volume (required)
        :return: DataVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_backing_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_backing_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
            return data

    def get_backing_volume_with_http_info(self, volume_uuid, **kwargs):  # noqa: E501
        """Get a hardware based data volume and an indication of whether it backs thin provisioning.  # noqa: E501

        If the volume is a backing volume, it will also indicate the percentage of its capacity used by thin provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_backing_volume_with_http_info(volume_uuid, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str volume_uuid: The UUID of the volume (required)
        :return: DataVolume
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backing_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `get_backing_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volumeUuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/datavolumes/{volumeUuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataVolume',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_backing_volumes(self, **kwargs):  # noqa: E501
        """Get hardware based data volumes and an indication of whether they back thin provisioning.  # noqa: E501

        If the volume is a backing volume, it will also indicate the percentage of its capacity used by thin provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_backing_volumes(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: DataVolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_backing_volumes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_backing_volumes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_backing_volumes_with_http_info(self, **kwargs):  # noqa: E501
        """Get hardware based data volumes and an indication of whether they back thin provisioning.  # noqa: E501

        If the volume is a backing volume, it will also indicate the percentage of its capacity used by thin provisioning.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_backing_volumes_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: DataVolumeList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_backing_volumes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/datavolumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataVolumeList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_by_name(self, server_name, **kwargs):  # noqa: E501
        """Get info on a particular server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_by_name(server_name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Name of the server (required)
        :return: ServerModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_by_name_with_http_info(server_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_by_name_with_http_info(server_name, **kwargs)  # noqa: E501
            return data

    def get_server_by_name_with_http_info(self, server_name, **kwargs):  # noqa: E501
        """Get info on a particular server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_by_name_with_http_info(server_name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Name of the server (required)
        :return: ServerModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_name' is set
        if ('server_name' not in params or
                params['server_name'] is None):
            raise ValueError("Missing the required parameter `server_name` when calling `get_server_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_name' in params:
            path_params['serverName'] = params['server_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/servers/{serverName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServerModel',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_components(self, server_name, type, **kwargs):  # noqa: E501
        """Get all components of a particular type from a server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_components(server_name, type, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Server on which to query components (required)
        :param list[str] type: Type of component. Supported types are server and fileSystem. You may request multiple component types at once, e.g. type=fileSystem&type=server (required)
        :return: ComponentReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_components_with_http_info(server_name, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_components_with_http_info(server_name, type, **kwargs)  # noqa: E501
            return data

    def get_server_components_with_http_info(self, server_name, type, **kwargs):  # noqa: E501
        """Get all components of a particular type from a server  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_components_with_http_info(server_name, type, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Server on which to query components (required)
        :param list[str] type: Type of component. Supported types are server and fileSystem. You may request multiple component types at once, e.g. type=fileSystem&type=server (required)
        :return: ComponentReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_name', 'type']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_name' is set
        if ('server_name' not in params or
                params['server_name'] is None):
            raise ValueError("Missing the required parameter `server_name` when calling `get_server_components`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_server_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_name' in params:
            path_params['serverName'] = params['server_name']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/servers/{serverName}/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_storage_by_name(self, storage_cluster_name, **kwargs):  # noqa: E501
        """Get a specific monitored storage cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_storage_by_name(storage_cluster_name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storage_cluster_name: Name of the storage cluster (required)
        :return: StorageClusterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_storage_by_name_with_http_info(storage_cluster_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_storage_by_name_with_http_info(storage_cluster_name, **kwargs)  # noqa: E501
            return data

    def get_storage_by_name_with_http_info(self, storage_cluster_name, **kwargs):  # noqa: E501
        """Get a specific monitored storage cluster  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_storage_by_name_with_http_info(storage_cluster_name, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storage_cluster_name: Name of the storage cluster (required)
        :return: StorageClusterModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_cluster_name']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_storage_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_cluster_name' is set
        if ('storage_cluster_name' not in params or
                params['storage_cluster_name'] is None):
            raise ValueError("Missing the required parameter `storage_cluster_name` when calling `get_storage_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_cluster_name' in params:
            path_params['storageClusterName'] = params['storage_cluster_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/{storageClusterName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StorageClusterModel',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_server_component_op(self, server_name, component_type, _property, uuid_list, operation, **kwargs):  # noqa: E501
        """Perform an operation such as turning on a UID beacon on a server component  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_server_component_op(server_name, component_type, _property, uuid_list, operation, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Name of the server (required)
        :param str component_type: Component type of the component(s) on which to operate. Supported types are server, drive, pool, and volume. (required)
        :param str _property: Component property to modify. Currently the only supported property is locateBeacon. (required)
        :param str uuid_list: A uuid or comma separated list of uuids on which to operate. Not required for component type server. (required)
        :param str operation: The operation to perform; on or off (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_server_component_op_with_http_info(server_name, component_type, _property, uuid_list, operation, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_server_component_op_with_http_info(server_name, component_type, _property, uuid_list, operation, **kwargs)  # noqa: E501
            return data

    def perform_server_component_op_with_http_info(self, server_name, component_type, _property, uuid_list, operation, **kwargs):  # noqa: E501
        """Perform an operation such as turning on a UID beacon on a server component  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_server_component_op_with_http_info(server_name, component_type, _property, uuid_list, operation, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str server_name: Name of the server (required)
        :param str component_type: Component type of the component(s) on which to operate. Supported types are server, drive, pool, and volume. (required)
        :param str _property: Component property to modify. Currently the only supported property is locateBeacon. (required)
        :param str uuid_list: A uuid or comma separated list of uuids on which to operate. Not required for component type server. (required)
        :param str operation: The operation to perform; on or off (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_name', 'component_type', '_property', 'uuid_list', 'operation']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_server_component_op" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_name' is set
        if ('server_name' not in params or
                params['server_name'] is None):
            raise ValueError("Missing the required parameter `server_name` when calling `perform_server_component_op`")  # noqa: E501
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `perform_server_component_op`")  # noqa: E501
        # verify the required parameter '_property' is set
        if ('_property' not in params or
                params['_property'] is None):
            raise ValueError("Missing the required parameter `_property` when calling `perform_server_component_op`")  # noqa: E501
        # verify the required parameter 'uuid_list' is set
        if ('uuid_list' not in params or
                params['uuid_list'] is None):
            raise ValueError("Missing the required parameter `uuid_list` when calling `perform_server_component_op`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if ('operation' not in params or
                params['operation'] is None):
            raise ValueError("Missing the required parameter `operation` when calling `perform_server_component_op`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_name' in params:
            path_params['serverName'] = params['server_name']  # noqa: E501
        if 'component_type' in params:
            path_params['componentType'] = params['component_type']  # noqa: E501
        if '_property' in params:
            path_params['property'] = params['_property']  # noqa: E501

        query_params = []
        if 'uuid_list' in params:
            query_params.append(('uuidList', params['uuid_list']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/servers/{serverName}/components/{componentType}/{property}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def perform_storage_component_op(self, storage_cluster_name, component_type, _property, uuid_list, operation, **kwargs):  # noqa: E501
        """Perform an operation such as turning on a UID beacon on a storage component  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.perform_storage_component_op(storage_cluster_name, component_type, _property, uuid_list, operation, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storage_cluster_name: Name of the storage cluster (required)
        :param str component_type: Component type of the component(s) on which to operate. Supported types are drive, driveEnclosure, IOmodule, pool and volume (required)
        :param str _property: Component property to modify. Currently the only supported property is locateBeacon (required)
        :param str uuid_list: A uuid or comma separated list of uuids on which to operate (required)
        :param str operation: The operation to perform; on or off (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.perform_storage_component_op_with_http_info(storage_cluster_name, component_type, _property, uuid_list, operation, **kwargs)  # noqa: E501
        else:
            (data) = self.perform_storage_component_op_with_http_info(storage_cluster_name, component_type, _property, uuid_list, operation, **kwargs)  # noqa: E501
            return data

    def perform_storage_component_op_with_http_info(self, storage_cluster_name, component_type, _property, uuid_list, operation, **kwargs):  # noqa: E501
        """Perform an operation such as turning on a UID beacon on a storage component  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.perform_storage_component_op_with_http_info(storage_cluster_name, component_type, _property, uuid_list, operation, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str storage_cluster_name: Name of the storage cluster (required)
        :param str component_type: Component type of the component(s) on which to operate. Supported types are drive, driveEnclosure, IOmodule, pool and volume (required)
        :param str _property: Component property to modify. Currently the only supported property is locateBeacon (required)
        :param str uuid_list: A uuid or comma separated list of uuids on which to operate (required)
        :param str operation: The operation to perform; on or off (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['storage_cluster_name', 'component_type', '_property', 'uuid_list', 'operation']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method perform_storage_component_op" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'storage_cluster_name' is set
        if ('storage_cluster_name' not in params or
                params['storage_cluster_name'] is None):
            raise ValueError("Missing the required parameter `storage_cluster_name` when calling `perform_storage_component_op`")  # noqa: E501
        # verify the required parameter 'component_type' is set
        if ('component_type' not in params or
                params['component_type'] is None):
            raise ValueError("Missing the required parameter `component_type` when calling `perform_storage_component_op`")  # noqa: E501
        # verify the required parameter '_property' is set
        if ('_property' not in params or
                params['_property'] is None):
            raise ValueError("Missing the required parameter `_property` when calling `perform_storage_component_op`")  # noqa: E501
        # verify the required parameter 'uuid_list' is set
        if ('uuid_list' not in params or
                params['uuid_list'] is None):
            raise ValueError("Missing the required parameter `uuid_list` when calling `perform_storage_component_op`")  # noqa: E501
        # verify the required parameter 'operation' is set
        if ('operation' not in params or
                params['operation'] is None):
            raise ValueError("Missing the required parameter `operation` when calling `perform_storage_component_op`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'storage_cluster_name' in params:
            path_params['storageClusterName'] = params['storage_cluster_name']  # noqa: E501
        if 'component_type' in params:
            path_params['componentType'] = params['component_type']  # noqa: E501
        if '_property' in params:
            path_params['property'] = params['_property']  # noqa: E501

        query_params = []
        if 'uuid_list' in params:
            query_params.append(('uuidList', params['uuid_list']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/{storageClusterName}/components/{componentType}/{property}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
