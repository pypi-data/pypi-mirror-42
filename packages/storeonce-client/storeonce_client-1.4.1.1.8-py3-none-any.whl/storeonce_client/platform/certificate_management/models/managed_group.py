# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SSL Certificate Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ManagedGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'realm_name': 'str',
        'group_name': 'str',
        'id': 'str',
        'managed_users': 'ManagedUsers'
    }

    attribute_map = {
        'realm_name': 'realmName',
        'group_name': 'groupName',
        'id': 'id',
        'managed_users': 'managedUsers'
    }

    def __init__(self, realm_name=None, group_name=None, id=None, managed_users=None):  # noqa: E501
        """ManagedGroup - a model defined in Swagger"""  # noqa: E501

        self._realm_name = None
        self._group_name = None
        self._id = None
        self._managed_users = None
        self.discriminator = None

        if realm_name is not None:
            self.realm_name = realm_name
        if group_name is not None:
            self.group_name = group_name
        if id is not None:
            self.id = id
        if managed_users is not None:
            self.managed_users = managed_users

    @property
    def realm_name(self):
        """Gets the realm_name of this ManagedGroup.  # noqa: E501


        :return: The realm_name of this ManagedGroup.  # noqa: E501
        :rtype: str
        """
        return self._realm_name

    @realm_name.setter
    def realm_name(self, realm_name):
        """Sets the realm_name of this ManagedGroup.


        :param realm_name: The realm_name of this ManagedGroup.  # noqa: E501
        :type: str
        """

        self._realm_name = realm_name

    @property
    def group_name(self):
        """Gets the group_name of this ManagedGroup.  # noqa: E501


        :return: The group_name of this ManagedGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ManagedGroup.


        :param group_name: The group_name of this ManagedGroup.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this ManagedGroup.  # noqa: E501


        :return: The id of this ManagedGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagedGroup.


        :param id: The id of this ManagedGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def managed_users(self):
        """Gets the managed_users of this ManagedGroup.  # noqa: E501


        :return: The managed_users of this ManagedGroup.  # noqa: E501
        :rtype: ManagedUsers
        """
        return self._managed_users

    @managed_users.setter
    def managed_users(self, managed_users):
        """Sets the managed_users of this ManagedGroup.


        :param managed_users: The managed_users of this ManagedGroup.  # noqa: E501
        :type: ManagedUsers
        """

        self._managed_users = managed_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagedGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagedGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
