# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SSL Certificate Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class SSLCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'alternative_name': 'str',
        'base64_data': 'str',
        'category': 'str',
        'challenge_password': 'str',
        'common_name': 'str',
        'contact_person': 'str',
        'country': 'str',
        'created': 'datetime',
        'description': 'str',
        'distinguished_name': 'str',
        'dn_qualifier': 'str',
        'email': 'str',
        'e_tag': 'str',
        'expires_in_days': 'str',
        'given_name': 'str',
        'initials': 'str',
        'issuer': 'str',
        'locality': 'str',
        'modified': 'str',
        'name': 'str',
        'organization': 'str',
        'organizational_unit': 'str',
        'serial_number': 'str',
        'md5_fingerprint': 'str',
        'sha1_fingerprint': 'str',
        'sha256_fingerprint': 'str',
        'state': 'str',
        'status': 'str',
        'subject_alternative_name_type': 'str',
        'surname': 'str',
        'type': 'str',
        'unstructured_name': 'str',
        'uri': 'str',
        'valid_from': 'datetime',
        'valid_until': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'alternative_name': 'alternativeName',
        'base64_data': 'base64Data',
        'category': 'category',
        'challenge_password': 'challengePassword',
        'common_name': 'commonName',
        'contact_person': 'contactPerson',
        'country': 'country',
        'created': 'created',
        'description': 'description',
        'distinguished_name': 'distinguishedName',
        'dn_qualifier': 'dnQualifier',
        'email': 'email',
        'e_tag': 'eTag',
        'expires_in_days': 'expiresInDays',
        'given_name': 'givenName',
        'initials': 'initials',
        'issuer': 'issuer',
        'locality': 'locality',
        'modified': 'modified',
        'name': 'name',
        'organization': 'organization',
        'organizational_unit': 'organizationalUnit',
        'serial_number': 'serialNumber',
        'md5_fingerprint': 'md5Fingerprint',
        'sha1_fingerprint': 'sha1Fingerprint',
        'sha256_fingerprint': 'sha256Fingerprint',
        'state': 'state',
        'status': 'status',
        'subject_alternative_name_type': 'subjectAlternativeNameType',
        'surname': 'surname',
        'type': 'type',
        'unstructured_name': 'unstructuredName',
        'uri': 'uri',
        'valid_from': 'validFrom',
        'valid_until': 'validUntil',
        'version': 'version'
    }

    def __init__(self, alias=None, alternative_name=None, base64_data=None, category=None, challenge_password=None, common_name=None, contact_person=None, country=None, created=None, description=None, distinguished_name=None, dn_qualifier=None, email=None, e_tag=None, expires_in_days=None, given_name=None, initials=None, issuer=None, locality=None, modified=None, name=None, organization=None, organizational_unit=None, serial_number=None, md5_fingerprint=None, sha1_fingerprint=None, sha256_fingerprint=None, state=None, status=None, subject_alternative_name_type=None, surname=None, type=None, unstructured_name=None, uri=None, valid_from=None, valid_until=None, version=None):  # noqa: E501
        """SSLCertificate - a model defined in Swagger"""  # noqa: E501

        self._alias = None
        self._alternative_name = None
        self._base64_data = None
        self._category = None
        self._challenge_password = None
        self._common_name = None
        self._contact_person = None
        self._country = None
        self._created = None
        self._description = None
        self._distinguished_name = None
        self._dn_qualifier = None
        self._email = None
        self._e_tag = None
        self._expires_in_days = None
        self._given_name = None
        self._initials = None
        self._issuer = None
        self._locality = None
        self._modified = None
        self._name = None
        self._organization = None
        self._organizational_unit = None
        self._serial_number = None
        self._md5_fingerprint = None
        self._sha1_fingerprint = None
        self._sha256_fingerprint = None
        self._state = None
        self._status = None
        self._subject_alternative_name_type = None
        self._surname = None
        self._type = None
        self._unstructured_name = None
        self._uri = None
        self._valid_from = None
        self._valid_until = None
        self._version = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if alternative_name is not None:
            self.alternative_name = alternative_name
        if base64_data is not None:
            self.base64_data = base64_data
        if category is not None:
            self.category = category
        if challenge_password is not None:
            self.challenge_password = challenge_password
        if common_name is not None:
            self.common_name = common_name
        if contact_person is not None:
            self.contact_person = contact_person
        if country is not None:
            self.country = country
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if distinguished_name is not None:
            self.distinguished_name = distinguished_name
        if dn_qualifier is not None:
            self.dn_qualifier = dn_qualifier
        if email is not None:
            self.email = email
        if e_tag is not None:
            self.e_tag = e_tag
        if expires_in_days is not None:
            self.expires_in_days = expires_in_days
        if given_name is not None:
            self.given_name = given_name
        if initials is not None:
            self.initials = initials
        if issuer is not None:
            self.issuer = issuer
        if locality is not None:
            self.locality = locality
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if organization is not None:
            self.organization = organization
        if organizational_unit is not None:
            self.organizational_unit = organizational_unit
        if serial_number is not None:
            self.serial_number = serial_number
        if md5_fingerprint is not None:
            self.md5_fingerprint = md5_fingerprint
        if sha1_fingerprint is not None:
            self.sha1_fingerprint = sha1_fingerprint
        if sha256_fingerprint is not None:
            self.sha256_fingerprint = sha256_fingerprint
        if state is not None:
            self.state = state
        if status is not None:
            self.status = status
        if subject_alternative_name_type is not None:
            self.subject_alternative_name_type = subject_alternative_name_type
        if surname is not None:
            self.surname = surname
        if type is not None:
            self.type = type
        if unstructured_name is not None:
            self.unstructured_name = unstructured_name
        if uri is not None:
            self.uri = uri
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if version is not None:
            self.version = version

    @property
    def alias(self):
        """Gets the alias of this SSLCertificate.  # noqa: E501


        :return: The alias of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this SSLCertificate.


        :param alias: The alias of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def alternative_name(self):
        """Gets the alternative_name of this SSLCertificate.  # noqa: E501


        :return: The alternative_name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._alternative_name

    @alternative_name.setter
    def alternative_name(self, alternative_name):
        """Sets the alternative_name of this SSLCertificate.


        :param alternative_name: The alternative_name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._alternative_name = alternative_name

    @property
    def base64_data(self):
        """Gets the base64_data of this SSLCertificate.  # noqa: E501


        :return: The base64_data of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._base64_data

    @base64_data.setter
    def base64_data(self, base64_data):
        """Sets the base64_data of this SSLCertificate.


        :param base64_data: The base64_data of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._base64_data = base64_data

    @property
    def category(self):
        """Gets the category of this SSLCertificate.  # noqa: E501


        :return: The category of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SSLCertificate.


        :param category: The category of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def challenge_password(self):
        """Gets the challenge_password of this SSLCertificate.  # noqa: E501


        :return: The challenge_password of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._challenge_password

    @challenge_password.setter
    def challenge_password(self, challenge_password):
        """Sets the challenge_password of this SSLCertificate.


        :param challenge_password: The challenge_password of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._challenge_password = challenge_password

    @property
    def common_name(self):
        """Gets the common_name of this SSLCertificate.  # noqa: E501


        :return: The common_name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this SSLCertificate.


        :param common_name: The common_name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def contact_person(self):
        """Gets the contact_person of this SSLCertificate.  # noqa: E501


        :return: The contact_person of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this SSLCertificate.


        :param contact_person: The contact_person of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def country(self):
        """Gets the country of this SSLCertificate.  # noqa: E501


        :return: The country of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SSLCertificate.


        :param country: The country of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def created(self):
        """Gets the created of this SSLCertificate.  # noqa: E501


        :return: The created of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SSLCertificate.


        :param created: The created of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this SSLCertificate.  # noqa: E501


        :return: The description of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SSLCertificate.


        :param description: The description of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def distinguished_name(self):
        """Gets the distinguished_name of this SSLCertificate.  # noqa: E501


        :return: The distinguished_name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        """Sets the distinguished_name of this SSLCertificate.


        :param distinguished_name: The distinguished_name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._distinguished_name = distinguished_name

    @property
    def dn_qualifier(self):
        """Gets the dn_qualifier of this SSLCertificate.  # noqa: E501


        :return: The dn_qualifier of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._dn_qualifier

    @dn_qualifier.setter
    def dn_qualifier(self, dn_qualifier):
        """Sets the dn_qualifier of this SSLCertificate.


        :param dn_qualifier: The dn_qualifier of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._dn_qualifier = dn_qualifier

    @property
    def email(self):
        """Gets the email of this SSLCertificate.  # noqa: E501


        :return: The email of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SSLCertificate.


        :param email: The email of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def e_tag(self):
        """Gets the e_tag of this SSLCertificate.  # noqa: E501


        :return: The e_tag of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this SSLCertificate.


        :param e_tag: The e_tag of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._e_tag = e_tag

    @property
    def expires_in_days(self):
        """Gets the expires_in_days of this SSLCertificate.  # noqa: E501


        :return: The expires_in_days of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._expires_in_days

    @expires_in_days.setter
    def expires_in_days(self, expires_in_days):
        """Sets the expires_in_days of this SSLCertificate.


        :param expires_in_days: The expires_in_days of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._expires_in_days = expires_in_days

    @property
    def given_name(self):
        """Gets the given_name of this SSLCertificate.  # noqa: E501


        :return: The given_name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SSLCertificate.


        :param given_name: The given_name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def initials(self):
        """Gets the initials of this SSLCertificate.  # noqa: E501


        :return: The initials of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this SSLCertificate.


        :param initials: The initials of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def issuer(self):
        """Gets the issuer of this SSLCertificate.  # noqa: E501


        :return: The issuer of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SSLCertificate.


        :param issuer: The issuer of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def locality(self):
        """Gets the locality of this SSLCertificate.  # noqa: E501


        :return: The locality of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this SSLCertificate.


        :param locality: The locality of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def modified(self):
        """Gets the modified of this SSLCertificate.  # noqa: E501


        :return: The modified of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SSLCertificate.


        :param modified: The modified of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this SSLCertificate.  # noqa: E501


        :return: The name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SSLCertificate.


        :param name: The name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this SSLCertificate.  # noqa: E501


        :return: The organization of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this SSLCertificate.


        :param organization: The organization of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this SSLCertificate.  # noqa: E501


        :return: The organizational_unit of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this SSLCertificate.


        :param organizational_unit: The organizational_unit of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._organizational_unit = organizational_unit

    @property
    def serial_number(self):
        """Gets the serial_number of this SSLCertificate.  # noqa: E501


        :return: The serial_number of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SSLCertificate.


        :param serial_number: The serial_number of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def md5_fingerprint(self):
        """Gets the md5_fingerprint of this SSLCertificate.  # noqa: E501


        :return: The md5_fingerprint of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._md5_fingerprint

    @md5_fingerprint.setter
    def md5_fingerprint(self, md5_fingerprint):
        """Sets the md5_fingerprint of this SSLCertificate.


        :param md5_fingerprint: The md5_fingerprint of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._md5_fingerprint = md5_fingerprint

    @property
    def sha1_fingerprint(self):
        """Gets the sha1_fingerprint of this SSLCertificate.  # noqa: E501


        :return: The sha1_fingerprint of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._sha1_fingerprint

    @sha1_fingerprint.setter
    def sha1_fingerprint(self, sha1_fingerprint):
        """Sets the sha1_fingerprint of this SSLCertificate.


        :param sha1_fingerprint: The sha1_fingerprint of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._sha1_fingerprint = sha1_fingerprint

    @property
    def sha256_fingerprint(self):
        """Gets the sha256_fingerprint of this SSLCertificate.  # noqa: E501


        :return: The sha256_fingerprint of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._sha256_fingerprint

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, sha256_fingerprint):
        """Sets the sha256_fingerprint of this SSLCertificate.


        :param sha256_fingerprint: The sha256_fingerprint of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._sha256_fingerprint = sha256_fingerprint

    @property
    def state(self):
        """Gets the state of this SSLCertificate.  # noqa: E501


        :return: The state of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SSLCertificate.


        :param state: The state of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this SSLCertificate.  # noqa: E501


        :return: The status of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SSLCertificate.


        :param status: The status of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subject_alternative_name_type(self):
        """Gets the subject_alternative_name_type of this SSLCertificate.  # noqa: E501


        :return: The subject_alternative_name_type of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._subject_alternative_name_type

    @subject_alternative_name_type.setter
    def subject_alternative_name_type(self, subject_alternative_name_type):
        """Sets the subject_alternative_name_type of this SSLCertificate.


        :param subject_alternative_name_type: The subject_alternative_name_type of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._subject_alternative_name_type = subject_alternative_name_type

    @property
    def surname(self):
        """Gets the surname of this SSLCertificate.  # noqa: E501


        :return: The surname of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this SSLCertificate.


        :param surname: The surname of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def type(self):
        """Gets the type of this SSLCertificate.  # noqa: E501


        :return: The type of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SSLCertificate.


        :param type: The type of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unstructured_name(self):
        """Gets the unstructured_name of this SSLCertificate.  # noqa: E501


        :return: The unstructured_name of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._unstructured_name

    @unstructured_name.setter
    def unstructured_name(self, unstructured_name):
        """Sets the unstructured_name of this SSLCertificate.


        :param unstructured_name: The unstructured_name of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._unstructured_name = unstructured_name

    @property
    def uri(self):
        """Gets the uri of this SSLCertificate.  # noqa: E501


        :return: The uri of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this SSLCertificate.


        :param uri: The uri of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def valid_from(self):
        """Gets the valid_from of this SSLCertificate.  # noqa: E501


        :return: The valid_from of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SSLCertificate.


        :param valid_from: The valid_from of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this SSLCertificate.  # noqa: E501


        :return: The valid_until of this SSLCertificate.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this SSLCertificate.


        :param valid_until: The valid_until of this SSLCertificate.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def version(self):
        """Gets the version of this SSLCertificate.  # noqa: E501


        :return: The version of this SSLCertificate.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SSLCertificate.


        :param version: The version of this SSLCertificate.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSLCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSLCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
