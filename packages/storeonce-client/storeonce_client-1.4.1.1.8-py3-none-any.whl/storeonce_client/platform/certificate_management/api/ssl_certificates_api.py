# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    SSL Certificate Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class SSLCertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def backup_key_store(self, **kwargs):  # noqa: E501
        """backs up the server keystore for later restoration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.backup_key_store(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.backup_key_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.backup_key_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def backup_key_store_with_http_info(self, **kwargs):  # noqa: E501
        """backs up the server keystore for later restoration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.backup_key_store_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_key_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/backup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_certificate(self, alias, **kwargs):  # noqa: E501
        """deletes the certificate with the specified alias from the server keystore  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_certificate(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias of the certificate to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.delete_certificate_with_http_info(alias, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_certificate_with_http_info(alias, **kwargs)  # noqa: E501
            return data

    def delete_certificate_with_http_info(self, alias, **kwargs):  # noqa: E501
        """deletes the certificate with the specified alias from the server keystore  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.delete_certificate_with_http_info(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias of the certificate to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `delete_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/server/{alias}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distribute_key_store(self, **kwargs):  # noqa: E501
        """forces the server keystore to be distributed to all cluster nodes; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.distribute_key_store(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.distribute_key_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distribute_key_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def distribute_key_store_with_http_info(self, **kwargs):  # noqa: E501
        """forces the server keystore to be distributed to all cluster nodes; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.distribute_key_store_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distribute_key_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/distributekeystore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_db_certificate(self, san, cn, ou, o, **kwargs):  # noqa: E501
        """generate a certificate for this node to be used by the database  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_db_certificate(san, cn, ou, o, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str san: The Subject Alternative Name for the certificate (required)
        :param str cn: The Common Name for the certificate (required)
        :param str ou: The Organizational Unit for the certificate (required)
        :param str o: The Organization for the certificate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.generate_db_certificate_with_http_info(san, cn, ou, o, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_db_certificate_with_http_info(san, cn, ou, o, **kwargs)  # noqa: E501
            return data

    def generate_db_certificate_with_http_info(self, san, cn, ou, o, **kwargs):  # noqa: E501
        """generate a certificate for this node to be used by the database  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.generate_db_certificate_with_http_info(san, cn, ou, o, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str san: The Subject Alternative Name for the certificate (required)
        :param str cn: The Common Name for the certificate (required)
        :param str ou: The Organizational Unit for the certificate (required)
        :param str o: The Organization for the certificate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['san', 'cn', 'ou', 'o']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_db_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'san' is set
        if ('san' not in params or
                params['san'] is None):
            raise ValueError("Missing the required parameter `san` when calling `generate_db_certificate`")  # noqa: E501
        # verify the required parameter 'cn' is set
        if ('cn' not in params or
                params['cn'] is None):
            raise ValueError("Missing the required parameter `cn` when calling `generate_db_certificate`")  # noqa: E501
        # verify the required parameter 'ou' is set
        if ('ou' not in params or
                params['ou'] is None):
            raise ValueError("Missing the required parameter `ou` when calling `generate_db_certificate`")  # noqa: E501
        # verify the required parameter 'o' is set
        if ('o' not in params or
                params['o'] is None):
            raise ValueError("Missing the required parameter `o` when calling `generate_db_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'san' in params:
            query_params.append(('san', params['san']))  # noqa: E501
        if 'cn' in params:
            query_params.append(('cn', params['cn']))  # noqa: E501
        if 'ou' in params:
            query_params.append(('ou', params['ou']))  # noqa: E501
        if 'o' in params:
            query_params.append(('o', params['o']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/db', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cached_csr(self, **kwargs):  # noqa: E501
        """returns a cached csr, or blank if there is no cached csr  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_cached_csr(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_cached_csr_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cached_csr_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cached_csr_with_http_info(self, **kwargs):  # noqa: E501
        """returns a cached csr, or blank if there is no cached csr  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_cached_csr_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cached_csr" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/cachedcsr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDto',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificate_info(self, alias, **kwargs):  # noqa: E501
        """returns lots of different fields about the certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_certificate_info(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias to use (required)
        :return: SSLCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_certificate_info_with_http_info(alias, **kwargs)  # noqa: E501
        else:
            (data) = self.get_certificate_info_with_http_info(alias, **kwargs)  # noqa: E501
            return data

    def get_certificate_info_with_http_info(self, alias, **kwargs):  # noqa: E501
        """returns lots of different fields about the certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_certificate_info_with_http_info(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias to use (required)
        :return: SSLCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificate_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `get_certificate_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/certificateinfo/{alias}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SSLCertificate',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chain(self, **kwargs):  # noqa: E501
        """returns array of certificates that form the chain of the signed certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_chain(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_chain_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_chain_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_chain_with_http_info(self, **kwargs):  # noqa: E501
        """returns array of certificates that form the chain of the signed certificate  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_chain_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chain" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/chain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_distinguished_name(self, **kwargs):  # noqa: E501
        """returns the current distinguished name of the certificate with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_distinguished_name(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: DistinguishedName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_distinguished_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_distinguished_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_distinguished_name_with_http_info(self, **kwargs):  # noqa: E501
        """returns the current distinguished name of the certificate with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_distinguished_name_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: DistinguishedName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_distinguished_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/distinguishedname', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistinguishedName',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_certificate(self, **kwargs):  # noqa: E501
        """return certificate information from server keystore with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_certificate(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_server_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_server_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """return certificate information from server keystore with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_certificate_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/server', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDto',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_certificate_with_alias(self, alias, **kwargs):  # noqa: E501
        """return certificate information from server keystore with specified alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_certificate_with_alias(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias of the certificate to return (required)
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_certificate_with_alias_with_http_info(alias, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_certificate_with_alias_with_http_info(alias, **kwargs)  # noqa: E501
            return data

    def get_server_certificate_with_alias_with_http_info(self, alias, **kwargs):  # noqa: E501
        """return certificate information from server keystore with specified alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_certificate_with_alias_with_http_info(alias, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str alias: the alias of the certificate to return (required)
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alias']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_certificate_with_alias" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `get_server_certificate_with_alias`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alias' in params:
            path_params['alias'] = params['alias']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/server/{alias}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDto',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_certificates(self, **kwargs):  # noqa: E501
        """returns array of all certificates in the server keystore  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_certificates(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_certificates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_server_certificates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_server_certificates_with_http_info(self, **kwargs):  # noqa: E501
        """returns array of all certificates in the server keystore  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_certificates_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: CertificateList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_certificates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/servercertificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateList',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_csr(self, **kwargs):  # noqa: E501
        """return certificate signing request from server keystore with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_csr(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str ext: a value of 'true' will add extensions to the CSR
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_csr_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_server_csr_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_server_csr_with_http_info(self, **kwargs):  # noqa: E501
        """return certificate signing request from server keystore with pml alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_csr_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str ext: a value of 'true' will add extensions to the CSR
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_csr" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ext' in params:
            query_params.append(('ext', params['ext']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/csr', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDto',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_payload(self, **kwargs):  # noqa: E501
        """returns information specified by certFile in a serialized form for convenient use in other operations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_server_payload(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str cert_file: the full path to the file to put into serialized form
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_server_payload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_server_payload_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_server_payload_with_http_info(self, **kwargs):  # noqa: E501
        """returns information specified by certFile in a serialized form for convenient use in other operations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_server_payload_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str cert_file: the full path to the file to put into serialized form
        :return: CertificateDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cert_file']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_payload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cert_file' in params:
            query_params.append(('certFile', params['cert_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/payload', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateDto',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_certificate(self, **kwargs):  # noqa: E501
        """imports a CA certificate into the server keystore under a generated alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_certificate(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.import_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.import_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def import_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """imports a CA certificate into the server keystore under a generated alias  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.import_certificate_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/importca', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_certificate_trust(self, **kwargs):  # noqa: E501
        """imports a CA certificate into the server truststore under a generated alias; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_certificate_trust(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.import_certificate_trust_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.import_certificate_trust_with_http_info(**kwargs)  # noqa: E501
            return data

    def import_certificate_trust_with_http_info(self, **kwargs):  # noqa: E501
        """imports a CA certificate into the server truststore under a generated alias; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.import_certificate_trust_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_certificate_trust" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/importcatrust', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_key_pair(self, body, **kwargs):  # noqa: E501
        """used to import a public/private key pair into the server keystore; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_key_pair(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param KeyPair body: The public and private key pair to be imported (with optional privateKeyPass) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.import_key_pair_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.import_key_pair_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def import_key_pair_with_http_info(self, body, **kwargs):  # noqa: E501
        """used to import a public/private key pair into the server keystore; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.import_key_pair_with_http_info(body, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param KeyPair body: The public and private key pair to be imported (with optional privateKeyPass) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_key_pair" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `import_key_pair`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/importkeypair', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_signed_certificate(self, **kwargs):  # noqa: E501
        """imports a signed certificate into the server keystore under the &#39;pml&#39; alias; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.import_signed_certificate(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.import_signed_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.import_signed_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def import_signed_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """imports a signed certificate into the server keystore under the &#39;pml&#39; alias; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.import_signed_certificate_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param CertificateDto body: the certificate to import
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_signed_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/importsigned', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_key_store(self, **kwargs):  # noqa: E501
        """restores the server keystore from a previous backup; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.restore_key_store(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.restore_key_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.restore_key_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def restore_key_store_with_http_info(self, **kwargs):  # noqa: E501
        """restores the server keystore from a previous backup; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.restore_key_store_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_key_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_self_signed(self, **kwargs):  # noqa: E501
        """generates a new public/private key pair for the PML self-signed certificate; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_self_signed(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param DNameFields body: the distinguished name
        :param str san: the SubjectAlternativeName
        :param str santype: the SubjectAlternativeName type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.update_self_signed_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_self_signed_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_self_signed_with_http_info(self, **kwargs):  # noqa: E501
        """generates a new public/private key pair for the PML self-signed certificate; this command restarts the server, meaning it will be temporarily unavailable during the restart  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.update_self_signed_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param DNameFields body: the distinguished name
        :param str san: the SubjectAlternativeName
        :param str santype: the SubjectAlternativeName type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'san', 'santype']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_self_signed" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'san' in params:
            query_params.append(('san', params['san']))  # noqa: E501
        if 'santype' in params:
            query_params.append(('santype', params['santype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/certificates/updateselfsigned', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
