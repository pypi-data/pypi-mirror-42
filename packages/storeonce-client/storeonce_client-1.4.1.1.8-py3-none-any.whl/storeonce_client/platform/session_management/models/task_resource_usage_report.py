# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class TaskResourceUsageReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'estimated_sizes_by_purpose': 'dict(str, list[int])',
        'estimated_sizes_by_catalog': 'dict(str, list[int])',
        'number_of_tasks_per_catalog': 'dict(str, int)',
        'number_of_tasks_per_value': 'dict(str, int)',
        'estimated_usage_per_catalog': 'dict(str, int)',
        'estimated_usage_per_value': 'dict(str, int)',
        'total_tasks': 'int',
        'total_usage': 'int'
    }

    attribute_map = {
        'estimated_sizes_by_purpose': 'estimatedSizesByPurpose',
        'estimated_sizes_by_catalog': 'estimatedSizesByCatalog',
        'number_of_tasks_per_catalog': 'numberOfTasksPerCatalog',
        'number_of_tasks_per_value': 'numberOfTasksPerValue',
        'estimated_usage_per_catalog': 'estimatedUsagePerCatalog',
        'estimated_usage_per_value': 'estimatedUsagePerValue',
        'total_tasks': 'totalTasks',
        'total_usage': 'totalUsage'
    }

    def __init__(self, estimated_sizes_by_purpose=None, estimated_sizes_by_catalog=None, number_of_tasks_per_catalog=None, number_of_tasks_per_value=None, estimated_usage_per_catalog=None, estimated_usage_per_value=None, total_tasks=None, total_usage=None):  # noqa: E501
        """TaskResourceUsageReport - a model defined in Swagger"""  # noqa: E501

        self._estimated_sizes_by_purpose = None
        self._estimated_sizes_by_catalog = None
        self._number_of_tasks_per_catalog = None
        self._number_of_tasks_per_value = None
        self._estimated_usage_per_catalog = None
        self._estimated_usage_per_value = None
        self._total_tasks = None
        self._total_usage = None
        self.discriminator = None

        if estimated_sizes_by_purpose is not None:
            self.estimated_sizes_by_purpose = estimated_sizes_by_purpose
        if estimated_sizes_by_catalog is not None:
            self.estimated_sizes_by_catalog = estimated_sizes_by_catalog
        if number_of_tasks_per_catalog is not None:
            self.number_of_tasks_per_catalog = number_of_tasks_per_catalog
        if number_of_tasks_per_value is not None:
            self.number_of_tasks_per_value = number_of_tasks_per_value
        if estimated_usage_per_catalog is not None:
            self.estimated_usage_per_catalog = estimated_usage_per_catalog
        if estimated_usage_per_value is not None:
            self.estimated_usage_per_value = estimated_usage_per_value
        if total_tasks is not None:
            self.total_tasks = total_tasks
        if total_usage is not None:
            self.total_usage = total_usage

    @property
    def estimated_sizes_by_purpose(self):
        """Gets the estimated_sizes_by_purpose of this TaskResourceUsageReport.  # noqa: E501


        :return: The estimated_sizes_by_purpose of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._estimated_sizes_by_purpose

    @estimated_sizes_by_purpose.setter
    def estimated_sizes_by_purpose(self, estimated_sizes_by_purpose):
        """Sets the estimated_sizes_by_purpose of this TaskResourceUsageReport.


        :param estimated_sizes_by_purpose: The estimated_sizes_by_purpose of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, list[int])
        """

        self._estimated_sizes_by_purpose = estimated_sizes_by_purpose

    @property
    def estimated_sizes_by_catalog(self):
        """Gets the estimated_sizes_by_catalog of this TaskResourceUsageReport.  # noqa: E501


        :return: The estimated_sizes_by_catalog of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._estimated_sizes_by_catalog

    @estimated_sizes_by_catalog.setter
    def estimated_sizes_by_catalog(self, estimated_sizes_by_catalog):
        """Sets the estimated_sizes_by_catalog of this TaskResourceUsageReport.


        :param estimated_sizes_by_catalog: The estimated_sizes_by_catalog of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, list[int])
        """

        self._estimated_sizes_by_catalog = estimated_sizes_by_catalog

    @property
    def number_of_tasks_per_catalog(self):
        """Gets the number_of_tasks_per_catalog of this TaskResourceUsageReport.  # noqa: E501


        :return: The number_of_tasks_per_catalog of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._number_of_tasks_per_catalog

    @number_of_tasks_per_catalog.setter
    def number_of_tasks_per_catalog(self, number_of_tasks_per_catalog):
        """Sets the number_of_tasks_per_catalog of this TaskResourceUsageReport.


        :param number_of_tasks_per_catalog: The number_of_tasks_per_catalog of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, int)
        """

        self._number_of_tasks_per_catalog = number_of_tasks_per_catalog

    @property
    def number_of_tasks_per_value(self):
        """Gets the number_of_tasks_per_value of this TaskResourceUsageReport.  # noqa: E501


        :return: The number_of_tasks_per_value of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._number_of_tasks_per_value

    @number_of_tasks_per_value.setter
    def number_of_tasks_per_value(self, number_of_tasks_per_value):
        """Sets the number_of_tasks_per_value of this TaskResourceUsageReport.


        :param number_of_tasks_per_value: The number_of_tasks_per_value of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, int)
        """

        self._number_of_tasks_per_value = number_of_tasks_per_value

    @property
    def estimated_usage_per_catalog(self):
        """Gets the estimated_usage_per_catalog of this TaskResourceUsageReport.  # noqa: E501


        :return: The estimated_usage_per_catalog of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._estimated_usage_per_catalog

    @estimated_usage_per_catalog.setter
    def estimated_usage_per_catalog(self, estimated_usage_per_catalog):
        """Sets the estimated_usage_per_catalog of this TaskResourceUsageReport.


        :param estimated_usage_per_catalog: The estimated_usage_per_catalog of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, int)
        """

        self._estimated_usage_per_catalog = estimated_usage_per_catalog

    @property
    def estimated_usage_per_value(self):
        """Gets the estimated_usage_per_value of this TaskResourceUsageReport.  # noqa: E501


        :return: The estimated_usage_per_value of this TaskResourceUsageReport.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._estimated_usage_per_value

    @estimated_usage_per_value.setter
    def estimated_usage_per_value(self, estimated_usage_per_value):
        """Sets the estimated_usage_per_value of this TaskResourceUsageReport.


        :param estimated_usage_per_value: The estimated_usage_per_value of this TaskResourceUsageReport.  # noqa: E501
        :type: dict(str, int)
        """

        self._estimated_usage_per_value = estimated_usage_per_value

    @property
    def total_tasks(self):
        """Gets the total_tasks of this TaskResourceUsageReport.  # noqa: E501


        :return: The total_tasks of this TaskResourceUsageReport.  # noqa: E501
        :rtype: int
        """
        return self._total_tasks

    @total_tasks.setter
    def total_tasks(self, total_tasks):
        """Sets the total_tasks of this TaskResourceUsageReport.


        :param total_tasks: The total_tasks of this TaskResourceUsageReport.  # noqa: E501
        :type: int
        """

        self._total_tasks = total_tasks

    @property
    def total_usage(self):
        """Gets the total_usage of this TaskResourceUsageReport.  # noqa: E501


        :return: The total_usage of this TaskResourceUsageReport.  # noqa: E501
        :rtype: int
        """
        return self._total_usage

    @total_usage.setter
    def total_usage(self, total_usage):
        """Sets the total_usage of this TaskResourceUsageReport.


        :param total_usage: The total_usage of this TaskResourceUsageReport.  # noqa: E501
        :type: int
        """

        self._total_usage = total_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskResourceUsageReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskResourceUsageReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
