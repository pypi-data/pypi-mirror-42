# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class UpgradeState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'mode': 'str',
        'modifier': 'str',
        'rest_ready': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'mode': 'mode',
        'modifier': 'modifier',
        'rest_ready': 'restReady'
    }

    def __init__(self, name=None, mode=None, modifier=None, rest_ready=False):  # noqa: E501
        """UpgradeState - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._mode = None
        self._modifier = None
        self._rest_ready = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if mode is not None:
            self.mode = mode
        if modifier is not None:
            self.modifier = modifier
        if rest_ready is not None:
            self.rest_ready = rest_ready

    @property
    def name(self):
        """Gets the name of this UpgradeState.  # noqa: E501

        the name of the current node only supplied if PML has been configured  # noqa: E501

        :return: The name of this UpgradeState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpgradeState.

        the name of the current node only supplied if PML has been configured  # noqa: E501

        :param name: The name of this UpgradeState.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mode(self):
        """Gets the mode of this UpgradeState.  # noqa: E501

        ACTIVE, PASSIVE, or NOPMFAILOVER  # noqa: E501

        :return: The mode of this UpgradeState.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this UpgradeState.

        ACTIVE, PASSIVE, or NOPMFAILOVER  # noqa: E501

        :param mode: The mode of this UpgradeState.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def modifier(self):
        """Gets the modifier of this UpgradeState.  # noqa: E501

        UPGRADING or CONFIG_SUPPRESSED or nothing  # noqa: E501

        :return: The modifier of this UpgradeState.  # noqa: E501
        :rtype: str
        """
        return self._modifier

    @modifier.setter
    def modifier(self, modifier):
        """Sets the modifier of this UpgradeState.

        UPGRADING or CONFIG_SUPPRESSED or nothing  # noqa: E501

        :param modifier: The modifier of this UpgradeState.  # noqa: E501
        :type: str
        """

        self._modifier = modifier

    @property
    def rest_ready(self):
        """Gets the rest_ready of this UpgradeState.  # noqa: E501

        true if mode is ACTIVE and name is not empty, implication is that PML is setup and ACTIVE  # noqa: E501

        :return: The rest_ready of this UpgradeState.  # noqa: E501
        :rtype: bool
        """
        return self._rest_ready

    @rest_ready.setter
    def rest_ready(self, rest_ready):
        """Sets the rest_ready of this UpgradeState.

        true if mode is ACTIVE and name is not empty, implication is that PML is setup and ACTIVE  # noqa: E501

        :param rest_ready: The rest_ready of this UpgradeState.  # noqa: E501
        :type: bool
        """

        self._rest_ready = rest_ready

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpgradeState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpgradeState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
