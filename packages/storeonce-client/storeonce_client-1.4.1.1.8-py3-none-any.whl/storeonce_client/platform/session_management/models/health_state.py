# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    User Session & Password Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class HealthState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'associated_message_info': 'MessageInfo',
        'corrective_action_info': 'MessageInfo',
        'health_extension': 'HealthExtension'
    }

    attribute_map = {
        'state': 'state',
        'associated_message_info': 'associatedMessageInfo',
        'corrective_action_info': 'correctiveActionInfo',
        'health_extension': 'healthExtension'
    }

    def __init__(self, state=None, associated_message_info=None, corrective_action_info=None, health_extension=None):  # noqa: E501
        """HealthState - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._associated_message_info = None
        self._corrective_action_info = None
        self._health_extension = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if associated_message_info is not None:
            self.associated_message_info = associated_message_info
        if corrective_action_info is not None:
            self.corrective_action_info = corrective_action_info
        if health_extension is not None:
            self.health_extension = health_extension

    @property
    def state(self):
        """Gets the state of this HealthState.  # noqa: E501


        :return: The state of this HealthState.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HealthState.


        :param state: The state of this HealthState.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "DEGRADED", "FAILED", "UNKNOWN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def associated_message_info(self):
        """Gets the associated_message_info of this HealthState.  # noqa: E501


        :return: The associated_message_info of this HealthState.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._associated_message_info

    @associated_message_info.setter
    def associated_message_info(self, associated_message_info):
        """Sets the associated_message_info of this HealthState.


        :param associated_message_info: The associated_message_info of this HealthState.  # noqa: E501
        :type: MessageInfo
        """

        self._associated_message_info = associated_message_info

    @property
    def corrective_action_info(self):
        """Gets the corrective_action_info of this HealthState.  # noqa: E501


        :return: The corrective_action_info of this HealthState.  # noqa: E501
        :rtype: MessageInfo
        """
        return self._corrective_action_info

    @corrective_action_info.setter
    def corrective_action_info(self, corrective_action_info):
        """Sets the corrective_action_info of this HealthState.


        :param corrective_action_info: The corrective_action_info of this HealthState.  # noqa: E501
        :type: MessageInfo
        """

        self._corrective_action_info = corrective_action_info

    @property
    def health_extension(self):
        """Gets the health_extension of this HealthState.  # noqa: E501


        :return: The health_extension of this HealthState.  # noqa: E501
        :rtype: HealthExtension
        """
        return self._health_extension

    @health_extension.setter
    def health_extension(self, health_extension):
        """Sets the health_extension of this HealthState.


        :param health_extension: The health_extension of this HealthState.  # noqa: E501
        :type: HealthExtension
        """

        self._health_extension = health_extension

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
