# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Asynchronous Task Management

    unused  # noqa: E501

    Component version: 4.19-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class ManagedGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'managed_group_set': 'list[ManagedGroup]',
        'managed_groups': 'list[ManagedGroup]'
    }

    attribute_map = {
        'managed_group_set': 'managedGroupSet',
        'managed_groups': 'managedGroups'
    }

    def __init__(self, managed_group_set=None, managed_groups=None):  # noqa: E501
        """ManagedGroups - a model defined in Swagger"""  # noqa: E501

        self._managed_group_set = None
        self._managed_groups = None
        self.discriminator = None

        if managed_group_set is not None:
            self.managed_group_set = managed_group_set
        if managed_groups is not None:
            self.managed_groups = managed_groups

    @property
    def managed_group_set(self):
        """Gets the managed_group_set of this ManagedGroups.  # noqa: E501


        :return: The managed_group_set of this ManagedGroups.  # noqa: E501
        :rtype: list[ManagedGroup]
        """
        return self._managed_group_set

    @managed_group_set.setter
    def managed_group_set(self, managed_group_set):
        """Sets the managed_group_set of this ManagedGroups.


        :param managed_group_set: The managed_group_set of this ManagedGroups.  # noqa: E501
        :type: list[ManagedGroup]
        """

        self._managed_group_set = managed_group_set

    @property
    def managed_groups(self):
        """Gets the managed_groups of this ManagedGroups.  # noqa: E501


        :return: The managed_groups of this ManagedGroups.  # noqa: E501
        :rtype: list[ManagedGroup]
        """
        return self._managed_groups

    @managed_groups.setter
    def managed_groups(self, managed_groups):
        """Sets the managed_groups of this ManagedGroups.


        :param managed_groups: The managed_groups of this ManagedGroups.  # noqa: E501
        :type: list[ManagedGroup]
        """

        self._managed_groups = managed_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagedGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagedGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
