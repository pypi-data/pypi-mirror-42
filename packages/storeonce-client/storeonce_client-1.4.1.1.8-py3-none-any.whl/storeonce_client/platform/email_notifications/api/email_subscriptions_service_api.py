# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class EmailSubscriptionsServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_smtp_settings(self, **kwargs):  # noqa: E501
        """Clear SMTP configuration and all email subscriptions  # noqa: E501

        Reset to factory default with no SMTP configuration or subscriptions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.clear_smtp_settings(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.clear_smtp_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clear_smtp_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def clear_smtp_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Clear SMTP configuration and all email subscriptions  # noqa: E501

        Reset to factory default with no SMTP configuration or subscriptions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.clear_smtp_settings_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_smtp_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription(self, id, subscription, **kwargs):  # noqa: E501
        """Create or update an email subscription by specified subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscription(id, subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :param SubscriptionExample4 subscription: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.create_subscription_with_http_info(id, subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_with_http_info(id, subscription, **kwargs)  # noqa: E501
            return data

    def create_subscription_with_http_info(self, id, subscription, **kwargs):  # noqa: E501
        """Create or update an email subscription by specified subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.create_subscription_with_http_info(id, subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :param SubscriptionExample4 subscription: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'subscription']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_subscription`")  # noqa: E501
        # verify the required parameter 'subscription' is set
        if ('subscription' not in params or
                params['subscription'] is None):
            raise ValueError("Missing the required parameter `subscription` when calling `create_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subscription' in params:
            body_params = params['subscription']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscriptions_in_batch(self, subscriptions, **kwargs):  # noqa: E501
        """Create subscription resource(s)  # noqa: E501

        This is a batch operation which allows the creation of multiple subscriptions at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_subscriptions_in_batch(subscriptions, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param SubscriptionsExample2 subscriptions: Subscriptions object containing list of Subscription objects (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.create_subscriptions_in_batch_with_http_info(subscriptions, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscriptions_in_batch_with_http_info(subscriptions, **kwargs)  # noqa: E501
            return data

    def create_subscriptions_in_batch_with_http_info(self, subscriptions, **kwargs):  # noqa: E501
        """Create subscription resource(s)  # noqa: E501

        This is a batch operation which allows the creation of multiple subscriptions at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.create_subscriptions_in_batch_with_http_info(subscriptions, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param SubscriptionsExample2 subscriptions: Subscriptions object containing list of Subscription objects (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscriptions']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscriptions_in_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscriptions' is set
        if ('subscriptions' not in params or
                params['subscriptions'] is None):
            raise ValueError("Missing the required parameter `subscriptions` when calling `create_subscriptions_in_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subscriptions' in params:
            body_params = params['subscriptions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_email_configuration(self, **kwargs):  # noqa: E501
        """Get PML cluster SMTP configurations  # noqa: E501

        returns SMTP configuration as a Subscription object with most fields omitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_email_configuration(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str profile: Does NOT need to be set. Possible value: PROD\\QA\\DEV.PROD is the default and the only one used.
        :return: SubscriptionExample1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_email_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_email_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_email_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Get PML cluster SMTP configurations  # noqa: E501

        returns SMTP configuration as a Subscription object with most fields omitted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_email_configuration_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str profile: Does NOT need to be set. Possible value: PROD\\QA\\DEV.PROD is the default and the only one used.
        :return: SubscriptionExample1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['profile']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_email_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'profile' in params:
            query_params.append(('profile', params['profile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionExample1',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscription(self, id, **kwargs):  # noqa: E501
        """Get a subscription resource specified by subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscription(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :return: SubscriptionExample3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a subscription resource specified by subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_subscription_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :return: SubscriptionExample3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionExample3',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscriptions(self, **kwargs):  # noqa: E501
        """Get a complete list of email subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_subscriptions(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param int start: Start position. If not specified, entries from position at index 0 will be returned
        :param int count: Number of entries to return. If not specified, maximum of 1000 entries will be returned
        :param str query: A general query string to narrow the list of resources returned. The query should use the URI Filter Language syntax. Example: severity:'Critical' AND alertState:'active'
        :param str sort: Sorting in the form: 'sort=prop:[desc|asc]' - where prop is the name of AlertsEntry property to use for sorting. Example: created:desc
        :return: SubscriptionsExample1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.get_subscriptions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_subscriptions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_subscriptions_with_http_info(self, **kwargs):  # noqa: E501
        """Get a complete list of email subscriptions  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.get_subscriptions_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param int start: Start position. If not specified, entries from position at index 0 will be returned
        :param int count: Number of entries to return. If not specified, maximum of 1000 entries will be returned
        :param str query: A general query string to narrow the list of resources returned. The query should use the URI Filter Language syntax. Example: severity:'Critical' AND alertState:'active'
        :param str sort: Sorting in the form: 'sort=prop:[desc|asc]' - where prop is the name of AlertsEntry property to use for sorting. Example: created:desc
        :return: SubscriptionsExample1
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'query', 'sort']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubscriptionsExample1',  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_subscription(self, id, subscription, **kwargs):  # noqa: E501
        """Update an existing subscription by specified subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_subscription(id, subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :param SubscriptionExample4 subscription: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.modify_subscription_with_http_info(id, subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_subscription_with_http_info(id, subscription, **kwargs)  # noqa: E501
            return data

    def modify_subscription_with_http_info(self, id, subscription, **kwargs):  # noqa: E501
        """Update an existing subscription by specified subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.modify_subscription_with_http_info(id, subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :param SubscriptionExample4 subscription: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'subscription']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `modify_subscription`")  # noqa: E501
        # verify the required parameter 'subscription' is set
        if ('subscription' not in params or
                params['subscription'] is None):
            raise ValueError("Missing the required parameter `subscription` when calling `modify_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subscription' in params:
            body_params = params['subscription']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_smtp_configuration(self, **kwargs):  # noqa: E501
        """Clear SMTP configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_smtp_configuration(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.remove_smtp_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.remove_smtp_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def remove_smtp_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Clear SMTP configuration  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.remove_smtp_configuration_with_http_info(async_=True)
        >>> result = thread.get()

        :param async_ bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_smtp_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/smtp', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_subscription(self, id, **kwargs):  # noqa: E501
        """Delete a subscription resource by subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_subscription(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.remove_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a subscription resource by subscription id  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.remove_subscription_with_http_info(id, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/notifications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_test_smtp_email(self, id, receiver_email, **kwargs):  # noqa: E501
        """Send test email using PML cluster SMTP configuration specified by SMTP configuration id, and receiver email(s)  # noqa: E501

        Receiver email(s) required. E.g. {\"destination\":\"test1@hpe.com\"}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.send_test_smtp_email(id, receiver_email, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Default value: 1 (required)
        :param ReceiverEmailExample receiver_email: Receiver email(s) (comma-separated) (required)
        :param str profile: Does NOT need to be set. Possible value: PROD\\QA\\DEV.PROD is the default and the only one used.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.send_test_smtp_email_with_http_info(id, receiver_email, **kwargs)  # noqa: E501
        else:
            (data) = self.send_test_smtp_email_with_http_info(id, receiver_email, **kwargs)  # noqa: E501
            return data

    def send_test_smtp_email_with_http_info(self, id, receiver_email, **kwargs):  # noqa: E501
        """Send test email using PML cluster SMTP configuration specified by SMTP configuration id, and receiver email(s)  # noqa: E501

        Receiver email(s) required. E.g. {\"destination\":\"test1@hpe.com\"}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.send_test_smtp_email_with_http_info(id, receiver_email, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param str id: Default value: 1 (required)
        :param ReceiverEmailExample receiver_email: Receiver email(s) (comma-separated) (required)
        :param str profile: Does NOT need to be set. Possible value: PROD\\QA\\DEV.PROD is the default and the only one used.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'receiver_email', 'profile']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_test_smtp_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `send_test_smtp_email`")  # noqa: E501
        # verify the required parameter 'receiver_email' is set
        if ('receiver_email' not in params or
                params['receiver_email'] is None):
            raise ValueError("Missing the required parameter `receiver_email` when calling `send_test_smtp_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'profile' in params:
            query_params.append(('profile', params['profile']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'receiver_email' in params:
            body_params = params['receiver_email']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_email_configuration(self, subscription, **kwargs):  # noqa: E501
        """Create or update PML cluster SMTP configuration  # noqa: E501

        Need to set emailConfiguration in Subscription object body parameter. Minimum fields: \"senderEmailAddress\", \"smtpServer\", \"smtpPort\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_email_configuration(subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param SubscriptionExample2 subscription: Subscription object containing one email configuration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_'):
            return self.update_email_configuration_with_http_info(subscription, **kwargs)  # noqa: E501
        else:
            (data) = self.update_email_configuration_with_http_info(subscription, **kwargs)  # noqa: E501
            return data

    def update_email_configuration_with_http_info(self, subscription, **kwargs):  # noqa: E501
        """Create or update PML cluster SMTP configuration  # noqa: E501

        Need to set emailConfiguration in Subscription object body parameter. Minimum fields: \"senderEmailAddress\", \"smtpServer\", \"smtpPort\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_=True
        >>> thread = api.update_email_configuration_with_http_info(subscription, async_=True)
        >>> result = thread.get()

        :param async_ bool
        :param SubscriptionExample2 subscription: Subscription object containing one email configuration (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription']  # noqa: E501
        all_params.append('async_')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_email_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription' is set
        if ('subscription' not in params or
                params['subscription'] is None):
            raise ValueError("Missing the required parameter `subscription` when calling `update_email_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'subscription' in params:
            body_params = params['subscription']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth', 'oauth']  # noqa: E501

        return self.api_client.call_api(
            '/email', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_=params.get('async_'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
