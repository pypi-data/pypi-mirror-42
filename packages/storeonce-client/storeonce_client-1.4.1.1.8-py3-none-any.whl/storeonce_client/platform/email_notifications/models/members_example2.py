# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Email Subscriptions

    unused  # noqa: E501

    Component version: 2.1-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class MembersExample2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'AlertsEntryExample',
        'enabled': 'bool',
        'email_destinations': 'list[EmailDestinationsExample]'
    }

    attribute_map = {
        'filter': 'filter',
        'enabled': 'enabled',
        'email_destinations': 'emailDestinations'
    }

    def __init__(self, filter=None, enabled=False, email_destinations=None):  # noqa: E501
        """MembersExample2 - a model defined in Swagger"""  # noqa: E501

        self._filter = None
        self._enabled = None
        self._email_destinations = None
        self.discriminator = None

        if filter is not None:
            self.filter = filter
        if enabled is not None:
            self.enabled = enabled
        if email_destinations is not None:
            self.email_destinations = email_destinations

    @property
    def filter(self):
        """Gets the filter of this MembersExample2.  # noqa: E501


        :return: The filter of this MembersExample2.  # noqa: E501
        :rtype: AlertsEntryExample
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MembersExample2.


        :param filter: The filter of this MembersExample2.  # noqa: E501
        :type: AlertsEntryExample
        """

        self._filter = filter

    @property
    def enabled(self):
        """Gets the enabled of this MembersExample2.  # noqa: E501


        :return: The enabled of this MembersExample2.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MembersExample2.


        :param enabled: The enabled of this MembersExample2.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def email_destinations(self):
        """Gets the email_destinations of this MembersExample2.  # noqa: E501


        :return: The email_destinations of this MembersExample2.  # noqa: E501
        :rtype: list[EmailDestinationsExample]
        """
        return self._email_destinations

    @email_destinations.setter
    def email_destinations(self, email_destinations):
        """Sets the email_destinations of this MembersExample2.


        :param email_destinations: The email_destinations of this MembersExample2.  # noqa: E501
        :type: list[EmailDestinationsExample]
        """

        self._email_destinations = email_destinations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MembersExample2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MembersExample2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
