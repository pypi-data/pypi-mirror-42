# coding: utf-8

"""
    (C) Copyright 2018-2019 Hewlett Packard Enterprise Development LP

    Log Collection

    View and manage log collections for support tickets  # noqa: E501

    Component version: 1.18-SNAPSHOT
"""


import pprint
import re  # noqa: F401

import six


class LogCollectionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'start_time': 'datetime',
        'collection_path': 'str',
        'download_uri': 'str',
        'size_bytes_long': 'int',
        'description': 'str',
        'cluster_name': 'str',
        'completed_nodes': 'list[str]',
        'identifier': 'str',
        'collection_mode': 'str',
        'status': 'str',
        'duration_seconds': 'int',
        'size_bytes': 'int',
        'collection_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'start_time': 'startTime',
        'collection_path': 'collectionPath',
        'download_uri': 'downloadUri',
        'size_bytes_long': 'sizeBytesLong',
        'description': 'description',
        'cluster_name': 'clusterName',
        'completed_nodes': 'completedNodes',
        'identifier': 'identifier',
        'collection_mode': 'collectionMode',
        'status': 'status',
        'duration_seconds': 'durationSeconds',
        'size_bytes': 'sizeBytes',
        'collection_type': 'collectionType'
    }

    def __init__(self, name=None, start_time=None, collection_path=None, download_uri=None, size_bytes_long=None, description=None, cluster_name=None, completed_nodes=None, identifier=None, collection_mode=None, status=None, duration_seconds=None, size_bytes=None, collection_type=None):  # noqa: E501
        """LogCollectionModel - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._start_time = None
        self._collection_path = None
        self._download_uri = None
        self._size_bytes_long = None
        self._description = None
        self._cluster_name = None
        self._completed_nodes = None
        self._identifier = None
        self._collection_mode = None
        self._status = None
        self._duration_seconds = None
        self._size_bytes = None
        self._collection_type = None
        self.discriminator = None

        self.name = name
        if start_time is not None:
            self.start_time = start_time
        if collection_path is not None:
            self.collection_path = collection_path
        if download_uri is not None:
            self.download_uri = download_uri
        if size_bytes_long is not None:
            self.size_bytes_long = size_bytes_long
        if description is not None:
            self.description = description
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if completed_nodes is not None:
            self.completed_nodes = completed_nodes
        if identifier is not None:
            self.identifier = identifier
        if collection_mode is not None:
            self.collection_mode = collection_mode
        if status is not None:
            self.status = status
        if duration_seconds is not None:
            self.duration_seconds = duration_seconds
        if size_bytes is not None:
            self.size_bytes = size_bytes
        self.collection_type = collection_type

    @property
    def name(self):
        """Gets the name of this LogCollectionModel.  # noqa: E501

        Log collection name  # noqa: E501

        :return: The name of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogCollectionModel.

        Log collection name  # noqa: E501

        :param name: The name of this LogCollectionModel.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this LogCollectionModel.  # noqa: E501

        Log collection start time  # noqa: E501

        :return: The start_time of this LogCollectionModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LogCollectionModel.

        Log collection start time  # noqa: E501

        :param start_time: The start_time of this LogCollectionModel.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def collection_path(self):
        """Gets the collection_path of this LogCollectionModel.  # noqa: E501

        Log collection path  # noqa: E501

        :return: The collection_path of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._collection_path

    @collection_path.setter
    def collection_path(self, collection_path):
        """Sets the collection_path of this LogCollectionModel.

        Log collection path  # noqa: E501

        :param collection_path: The collection_path of this LogCollectionModel.  # noqa: E501
        :type: str
        """

        self._collection_path = collection_path

    @property
    def download_uri(self):
        """Gets the download_uri of this LogCollectionModel.  # noqa: E501

        Log collection download URI  # noqa: E501

        :return: The download_uri of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this LogCollectionModel.

        Log collection download URI  # noqa: E501

        :param download_uri: The download_uri of this LogCollectionModel.  # noqa: E501
        :type: str
        """

        self._download_uri = download_uri

    @property
    def size_bytes_long(self):
        """Gets the size_bytes_long of this LogCollectionModel.  # noqa: E501

        Log collection size in bytes  # noqa: E501

        :return: The size_bytes_long of this LogCollectionModel.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes_long

    @size_bytes_long.setter
    def size_bytes_long(self, size_bytes_long):
        """Sets the size_bytes_long of this LogCollectionModel.

        Log collection size in bytes  # noqa: E501

        :param size_bytes_long: The size_bytes_long of this LogCollectionModel.  # noqa: E501
        :type: int
        """

        self._size_bytes_long = size_bytes_long

    @property
    def description(self):
        """Gets the description of this LogCollectionModel.  # noqa: E501

        Log collection user-set description  # noqa: E501

        :return: The description of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogCollectionModel.

        Log collection user-set description  # noqa: E501

        :param description: The description of this LogCollectionModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cluster_name(self):
        """Gets the cluster_name of this LogCollectionModel.  # noqa: E501

        Cluster name  # noqa: E501

        :return: The cluster_name of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this LogCollectionModel.

        Cluster name  # noqa: E501

        :param cluster_name: The cluster_name of this LogCollectionModel.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def completed_nodes(self):
        """Gets the completed_nodes of this LogCollectionModel.  # noqa: E501

        List of cluster nodes that have have sucessfully completed their collections  # noqa: E501

        :return: The completed_nodes of this LogCollectionModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._completed_nodes

    @completed_nodes.setter
    def completed_nodes(self, completed_nodes):
        """Sets the completed_nodes of this LogCollectionModel.

        List of cluster nodes that have have sucessfully completed their collections  # noqa: E501

        :param completed_nodes: The completed_nodes of this LogCollectionModel.  # noqa: E501
        :type: list[str]
        """

        self._completed_nodes = completed_nodes

    @property
    def identifier(self):
        """Gets the identifier of this LogCollectionModel.  # noqa: E501

        Identifier for automatically-generated collection  # noqa: E501

        :return: The identifier of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this LogCollectionModel.

        Identifier for automatically-generated collection  # noqa: E501

        :param identifier: The identifier of this LogCollectionModel.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def collection_mode(self):
        """Gets the collection_mode of this LogCollectionModel.  # noqa: E501


        :return: The collection_mode of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._collection_mode

    @collection_mode.setter
    def collection_mode(self, collection_mode):
        """Sets the collection_mode of this LogCollectionModel.


        :param collection_mode: The collection_mode of this LogCollectionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Automatic", "Manual"]  # noqa: E501
        if collection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `collection_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(collection_mode, allowed_values)
            )

        self._collection_mode = collection_mode

    @property
    def status(self):
        """Gets the status of this LogCollectionModel.  # noqa: E501


        :return: The status of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogCollectionModel.


        :param status: The status of this LogCollectionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETE", "FAILED", "INPROGRESS", "PARTIALLY_COMPLETE", "REQUESTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def duration_seconds(self):
        """Gets the duration_seconds of this LogCollectionModel.  # noqa: E501

        Duration in seconds  # noqa: E501

        :return: The duration_seconds of this LogCollectionModel.  # noqa: E501
        :rtype: int
        """
        return self._duration_seconds

    @duration_seconds.setter
    def duration_seconds(self, duration_seconds):
        """Sets the duration_seconds of this LogCollectionModel.

        Duration in seconds  # noqa: E501

        :param duration_seconds: The duration_seconds of this LogCollectionModel.  # noqa: E501
        :type: int
        """

        self._duration_seconds = duration_seconds

    @property
    def size_bytes(self):
        """Gets the size_bytes of this LogCollectionModel.  # noqa: E501

        Deprecated, use sizeBytesLong  # noqa: E501

        :return: The size_bytes of this LogCollectionModel.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this LogCollectionModel.

        Deprecated, use sizeBytesLong  # noqa: E501

        :param size_bytes: The size_bytes of this LogCollectionModel.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def collection_type(self):
        """Gets the collection_type of this LogCollectionModel.  # noqa: E501


        :return: The collection_type of this LogCollectionModel.  # noqa: E501
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """Sets the collection_type of this LogCollectionModel.


        :param collection_type: The collection_type of this LogCollectionModel.  # noqa: E501
        :type: str
        """
        if collection_type is None:
            raise ValueError("Invalid value for `collection_type`, must not be `None`")  # noqa: E501
        allowed_values = ["COMPREHENSIVE", "SLIM", "USAGE", "PERFORMANCE"]  # noqa: E501
        if collection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `collection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(collection_type, allowed_values)
            )

        self._collection_type = collection_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogCollectionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogCollectionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
