---
CANDigitalInput:
  methods:
    CANDigitalInput:  # constructor
      code: |
        self._device = device
        self._limitSwitch = limitSwitch
        polarity_param = (
            "limitSwitchFwdPolarity"
            if limitSwitch is LimitSwitch.kForward
            else "limitSwitchRevPolarity"
        )
        polarity = polarity is LimitSwitchPolarity.kNormallyClosed
        device._hal_data[polarity_param] = polarity
    Get:
      code: |
        retval = self._device.getFault(
            FaultID.kHardLimitFwd
            if self._limitSwitch is LimitSwitch.kForward
            else FaultID.kHardLimitRev
        )
    EnableLimitSwitch:
      code: |
        param = (
            "hardLimitFwdEn"
            if self._limitSwitch is LimitSwitch.kForward
            else "hardLimitRevEn"
        )
        self._device._hal_data[param] = enable
    IsLimitSwitchEnabled:
      code: |
        param = (
            "hardLimitFwdEn"
            if self._limitSwitch is LimitSwitch.kForward
            else "hardLimitRevEn"
        )
        retval = self._device._hal_data[param]

CANEncoder:
  methods:
    CANEncoder:  # constructor
      code: |
        self._device = device
        self._hal_data = device._hal_data
    GetPosition:
      get: position
      invert: true
    GetVelocity:
      get: velocity
      invert: true
    SetPosition:
      code: |
        retval = self._device.setEncPosition(position)
    SetPositionConversionFactor:
      set: positionConversionFactor
    SetVelocityConversionFactor:
      set: velocityConversionFactor
    GetPositionConversionFactor:
      get: positionConversionFactor
    GetVelocityConversionFactor:
      get: velocityConversionFactor

  sim_class_extra: |
    @property
    def _inverted(self) -> bool:
        return self._device._inverted

CANPIDController:
  methods:
    CANPIDController:  # constructor
      code: |
        self._device = device
        self._hal_data = device._hal_data
    SetReference:
      code: |
        self._device._setpointCommand(value, ctrl, pidSlot, arbFeedforward)
    SetP:
      hook: pid_set
    SetI:
      hook: pid_set
    SetD:
      hook: pid_set
    SetDFilter:
      hook: pid_set
    SetFF:
      hook: pid_set
    SetIZone:
      hook: pid_set
    SetOutputRange:
      code: |
        if self._inverted:
            min, max = -max, -min
        self._hal_data["outputMin_%d" % slotID] = float(min)
        self._hal_data["outputMax_%d" % slotID] = float(max)
    GetP:
      hook: pid_get
    GetI:
      hook: pid_get
    GetD:
      hook: pid_get
    GetDFilter:
      hook: pid_get
    GetFF:
      hook: pid_get
    GetIZone:
      hook: pid_get
    GetOutputMin:
      code: |
        if self._inverted:
            retval = -self._hal_data["outputMax_%d" % slotID]
        else:
            retval = self._hal_data["outputMin_%d" % slotID]
    GetOutputMax:
      code: |
        if self._inverted:
            retval = -self._hal_data["outputMin_%d" % slotID]
        else:
            retval = self._hal_data["outputMax_%d" % slotID]
    SetSmartMotionMaxVelocity:
      hook: pid_set
    SetSmartMotionMaxAccel:
      hook: pid_set
    SetSmartMotionMinOutputVelocity:
      hook: pid_set
    SetSmartMotionAllowedClosedLoopError:
      hook: pid_set
    SetSmartMotionAccelStrategy:
      code: |
        assert 0 <= slotID <= 3
        self._hal_data["smartMotionAccelStrategy_%d" % slotID] = accelStrategy
    GetSmartMotionMaxVelocity:
      hook: pid_get
    GetSmartMotionMaxAccel:
      hook: pid_get
    GetSmartMotionMinOutputVelocity:
      hook: pid_get
    GetSmartMotionAllowedClosedLoopError:
      hook: pid_get
    GetSmartMotionAccelStrategy:
      hook: pid_get
    SetIMaxAccum:
      hook: pid_set
    GetIMaxAccum:
      hook: pid_get
    SetIAccum:
      code: |
        retval = self._device.setIAccum(iAccum)
    GetIAccum:
      get: i_accum
      invert: true

  sim_class_extra: |
    @property
    def _inverted(self) -> bool:
        return self._device._inverted

CANSparkMaxLowLevel:
  methods:
    CANSparkMaxLowLevel:  # constructor
      skip_pybind: true
      code: |
        raise TypeError("Cannot instantiate CANSparkMaxLowLevel")
    GetFirmwareVersion:
      overloads:
        # TODO ()
        "bool&":
          ignore: true
    # TODO GetFirmwareString
    GetSerialNumber:
      code: |
        retval = []
    GetDeviceId:
      code: |
        retval = self._deviceID
    SetMotorType:
      set: motorType
    GetMotorType:
      get: motorType
    SetPeriodicFramePeriod:
      code: |
        self._hal_data["frame_period"][frame] = periodMs
    # TODO GetParameterType
    SetParameter:
      overload: true
    GetParameter:
      overloads:
        "rev::CANSparkMaxLowLevel::ConfigParameter, double&":
          rename: getParameterDouble
        "rev::CANSparkMaxLowLevel::ConfigParameter, uint32_t&":
          rename: getParameterInt
        "rev::CANSparkMaxLowLevel::ConfigParameter, int32_t&":
          ignore: true
        "rev::CANSparkMaxLowLevel::ConfigParameter, bool&":
          rename: getParameterBoolean
      ignore: true  # out param
    SetEncPosition:
      set: position
      invert: true
    SetIAccum:
      set: i_accum
      invert: true  # NOTE: C++/Java inconsistency
    RestoreFactoryDefaults:
      code: |
        # config parameters in camel case (see CANSparkMaxLowLevel::ConfigParameter)
        self._hal_data.update({
            "motorType": MotorType.kBrushless,
            "sensorType": SensorType.kHallSensor,
            "ctrlType": ControlType.kDutyCycle,
            "idleMode": IdleMode.kCoast,
            "polePairs": 7,
            "currentChop": 115.0,
            "currentChopCycles": 0,

            "limitSwitchFwdPolarity": False,
            "limitSwitchRevPolarity": False,
            "hardLimitFwdEn": True,
            "hardLimitRevEn": True,

            "openLoopRampRate": 0.0,
            # TODO follower config
            "smartCurrentStallLimit": 80,
            "smartCurrentFreeLimit": 20,
            "smartCurrentConfig": 10000,

            "encoderCountsPerRev": 4096,
            "encoderAverageDepth": 64,
            "encoderSampleDelta": 200,
            "voltageCompMode": 0,
            "compensatedNominalVoltage": 0.0,

            "positionConversionFactor": 1.0,
            "velocityConversionFactor": 1.0,
            "closedLoopRampRate": 0.0,
        })
        for i in range(4):
            self._hal_data.update({
                "p_%d" % i: 0.0,
                "i_%d" % i: 0.0,
                "d_%d" % i: 0.0,
                "f_%d" % i: 0.0,
                "iZone_%d" % i: 0.0,
                "dFilter_%d" % i: 0.0,
                "outputMin_%d" % i: -1.0,
                "outputMax_%d" % i: 1.0,

                # TODO get defaults for Smart Motion
                "smartMotionMaxVelocity_%d" % i: 0.0,
                "smartMotionMaxAccel_%d" % i: 0.0,
                "smartMotionMinVelOutput_%d" % i: 0.0,
                "smartMotionAllowedClosedLoopError_%d" % i: 0.0,
                "smartMotionAccelStrategy_%d" % i: AccelStrategy.kTrapezoidal,

                "iMaxAccum_%d" % i: 0.0,
            })

  sim_class_extra: |
    def setParameter(
        self,
        parameterID: ConfigParameter,
        value: typing.Union[float, int]
    ) -> ParameterStatus:
        """
        .. note:: This function works on a real robot, but has not yet
                  been implemented in simulation mode. See :ref:`api_support`
                  for more details.
        """
        assert isinstance(parameterID, ConfigParameter)
        assert isinstance(value, (float, int))
        raise NotImplementedError("setParameter not implemented in simulation (file a bug on github if you need it)")

    def _setpointCommand(
        self,
        value: float,
        ctrl: ControlType = ControlType.kDutyCycle,
        pidSlot: int = 0,
        arbFeedforward: float = 0.0,
    ) -> None:
        if arbFeedforward > 32.0:
            arbFeedforward = 32.0
        elif arbFeedforward < -32.0:
            arbFeedforward = -32.0
        if self._inverted:
            value = -value
            arbFeedforward = -arbFeedforward
        self._hal_data["value"] = float(value)  # TODO
        self._hal_data["ctrlType"] = ctrl
        self._hal_data["pid_slot"] = pidSlot
        self._hal_data["arb_ff"] = float(arbFeedforward)


CANSparkMax:
  __bases__: CANSparkMaxLowLevel
  cpp_inherits: rev::CANSparkMaxLowLevel

  methods:
    CANSparkMax:  # constructor
      param_override:
        type:
          x_type: rev::CANSparkMaxLowLevel::MotorType
      code: |
        # everything that would be in the low-level constructor
        # do not call super().__init__()
        self._deviceID = deviceID
        self._inverted = False
        self._faults = NotifyDict({})  # type: typing.Dict[FaultID, bool]
        self._hal_data = NotifyDict({
            "type": "sparkmax",  # make the robotpy-ctre sim ui happy
            "can_timeout": 20,
            "frame_period": NotifyDict({
                PeriodicFrame.kStatus0: 10,
                PeriodicFrame.kStatus1: 20,
                PeriodicFrame.kStatus2: 50,
            }),
            "value": 0.0,
            "position": 0.0,
            "velocity": 0.0,
            "pid_slot": 0,
            "arb_ff": 0.0,
            "faults": self._faults,
            "bus_voltage": 12.0,
            "output_current": 0.1,
            "motor_temp": 25.0,  # ~room temperature
            # config parameters in restoreFactoryDefaults
        })
        self.restoreFactoryDefaults()
        self.setMotorType(type)
        hal_data["CAN"]["sparkmax-%d" % deviceID] = self._hal_data
        hal.report(hal.UsageReporting.kResourceType_RevSparkMaxCAN, deviceID)

        # Initialize conversion factors to 1
        self.getEncoder().setPositionConversionFactor(1)
        self.getEncoder().setVelocityConversionFactor(1)
        self.clearFaults()

    Set:
      code: |
        self._setpointCommand(speed)
    Get:
      get: value  # close enough
    SetInverted:
      code: |
        self._inverted = isInverted
    GetInverted:
      code: |
        retval = self._inverted
    Disable:
      code: |
        self.set(0)
    StopMotor:
      code: |
        self.set(0)
    PIDWrite:
      rename: pidWrite
      code: |
        self.set(output)
    GetEncoder:
      code: |
        retval = CANEncoder(self)
    GetPIDController:
      code: |
        retval = CANPIDController(self)
    GetForwardLimitSwitch:
      code: |
        retval = CANDigitalInput(self, LimitSwitch.kForward, polarity)
    GetReverseLimitSwitch:
      code: |
        retval = CANDigitalInput(self, LimitSwitch.kReverse, polarity)
    SetSmartCurrentLimit:
      overloads:
        "unsigned int":
          ignore: true
        "unsigned int, unsigned int, unsigned int":
          param_override:
            freeLimit:
              default: 0
      code: |
        self._hal_data["smartCurrentStallLimit"] = stallLimit
        self._hal_data["smartCurrentFreeLimit"] = freeLimit
        self._hal_data["smartCurrentConfig"] = limitRPM
    SetSecondaryCurrentLimit:
      code: |
        self._hal_data["currentChop"] = float(limit)
        self._hal_data["currentChopCycles"] = limitCycles
      doc: |
        Sets the secondary current limit in Amps.

        The motor controller will disable the output of the controller briefly
        if the current limit is exceeded to reduce the current. This limit is
        a simplified 'on/off' controller. This limit is enabled by default
        but is set higher than the default Smart Current Limit.

        The time the controller is off after the current limit is reached
        is determined by the parameter limitCycles, which is the number of
        PWM cycles (20kHz). The recommended value is the default of 0 which
        is the minimum time and is part of a PWM cycle from when the over
        current is detected. This allows the controller to regulate the current
        close to the limit value.

        The total time is set by the equation::

          t = (50us - t0) + 50us * limitCycles
          t = total off time after over current
          t0 = time from the start of the PWM cycle until over current is detected

        :param limit: The current limit in Amps.
        :param limitCycles: The number of additional PWM cycles to turn
                            the driver off after overcurrent is detected.
    SetIdleMode:
      set: idleMode
    GetIdleMode:
      get: idleMode
    EnableVoltageCompensation:
      code: |
        self._hal_data["compensatedNominalVoltage"] = nominalVoltage
        self._hal_data["voltageCompMode"] = 2
    DisableVoltageCompensation:
      code: |
        self._hal_data["voltageCompMode"] = 0
        self._hal_data["compensatedNominalVoltage"] = 0.0
    GetVoltageCompensationNominalVoltage:
      get: compensatedNominalVoltage
    SetOpenLoopRampRate:
      code: |
        if rate != 0.0:
            rate = 1 / rate
        else:
            rate = 0.0
        self._hal_data["openLoopRampRate"] = rate
    GetOpenLoopRampRate:
      code: |
        retval = self._hal_data["openLoopRampRate"]
        if retval != 0.0:
            retval = 1 / retval
    SetClosedLoopRampRate:
      code: |
        if rate != 0.0:
            rate = 1 / rate
        else:
            rate = 0.0
        self._hal_data["closedLoopRampRate"] = rate
    GetClosedLoopRampRate:
      code: |
        retval = self._hal_data["closedLoopRampRate"]
        if retval != 0.0:
            retval = 1 / retval
    Follow:
      overloads:
        "rev::CANSparkMax&, bool":
          param_override:
            leader:
              x_pyann_type: '"CANSparkMax"'
        "ExternalFollower, int, bool":
          ignore: true  # TODO struct
    # TODO IsFollower
    GetFaults:
      code: |
        retval = 0
        for faultID, value in self._faults.items():
            retval |= value << faultID.value
    GetStickyFaults:
      code: |
        retval = 0
    GetFault:
      code: |
        retval = self._faults.get(faultID, False)
    GetStickyFault:
      code: |
        retval = False
    GetBusVoltage:
      get: bus_voltage
    GetAppliedOutput:
      get: value
    GetOutputCurrent:
      get: output_current
    GetMotorTemperature:
      get: motor_temp
    ClearFaults:
      code: |
        faults = self._faults
        faults.clear()
        faults.update({
            FaultID.kHardLimitFwd: False,
            FaultID.kHardLimitRev: False,
        })
    BurnFlash:
      code: ""
    SetCANTimeout:
      set: can_timeout
