Metadata-Version: 1.2
Name: xml2rfc
Version: 2.19.1
Summary: Xml2rfc generates RFCs and IETF drafts from document source in XML according to the IETF xml2rfc v2 and v3 vocabularies.
Home-page: https://tools.ietf.org/tools/xml2rfc/trac/
Author: Henrik Levkowetz, Josh Bothun
Author-email: tools-discuss@ietf.org
Maintainer: Henrik Levkowetz
Maintainer-email: henrik@levkowetz.com
License: Simplified BSD Licence
Download-URL: https://pypi.python.org/pypi/xml2rfc
Description: Introduction
        ============
        
        The IETF_ uses a specific format for the standards and other documents it
        publishes as RFCs_, and for the draft documents which are produced when
        developing documents for publications.  There exists a number of different
        tools to facilitate the formatting of drafts and RFCs according to the
        existing rules, and this tool, **xml2rfc**, is one of them.  It takes as input
        an xml file which contains the text and meta-information about author names
        etc., and transforms it into suitably formatted output.  The input xml file
        should follow the grammars in RFC7749_ (for v2 documents) or RFC7991_ (for 
        v3 documents). Note that the grammar for v3 is still being refined, and 
        changes will eventually be captured in the `bis draft for 7991`_. 
        Changes not yet captured can be seen in the xml2rfc source `v3.rng`_.
        
        **xml2rfc** provides a variety of output formats. See the command line
        help for a full list of formats. It also provides conversion from v2 to
        v3, and can run the preptool_ on its input.
        
        .. _IETF: https://www.ietf.org/
        .. _RFCs: https://www.rfc-editor.org/
        .. _RFC7749: https://tools.ietf.org/html/rfc7749
        .. _RFC7991: https://tools.ietf.org/html/rfc7991
        .. _bis draft for 7991: https://tools.ietf.org/html/draft-iab-rfc7991bis
        .. _v3.rng: https://trac.tools.ietf.org/tools/xml2rfc/trac/browser/trunk/cli/xml2rfc/data/v3.rng
        .. _preptool: https://tools.ietf.org/html/rfc7998
        
        Installation
        ============
        
        Installation of the python package is done as usual with 'pip install xml2rfc',
        using appropriate switches and/or sudo.
        
        Installation of support libraries for the PDF-formatter
        -------------------------------------------------------
        
        In order to generate PDFs, xml2rfc uses the WeasyPrint module, which
        depends on external libaries that must be installed as native packages
        on your platform, separately from the xml2rfc install.
        
        First, install the Cairo, Pango, and GDK-PixBuf library files on your
        system.  See installation instructions on the WeasyPrint Docs:
        
            https://weasyprint.readthedocs.io/en/stable/install.html
        
        (Python 3 is not needed if your system Python is 2.7, though).
        
        (On some OS X systems with System Integrity Protection active, you may
        need to create a symlink from your home directory to the library installation
        directory (often /opt/local/lib):
        
            ln -s /opt/local/lib ~/lib
        
        in order for weasyprint to find the installed cairo and pango libraries.
        Whether this is needed or not depends on whether you used macports or homebrew
        to install cairo and pango, and the homebrew / macport version.)
        
        Next, install the pycairo and weasyprint python modules using pip.
        Depending on your system, you may need to use 'sudo' or install in
        user-specific directories, using the --user switch.  On OS X in
        particular, you may also need to install a newer version of setuptools
        using --user before weasyprint can be installed.  If you install with 
        the --user switch, you may need to also set PYTHONPATH, e.g.,
        
            PYTHONPATH=/Users/henrik/Library/Python/2.7/lib/python/site-packages
        
        for Python 2.7.
        
        The basic pip commands (modify as needed according to the text above)
        are:
        
            pip install 'pycairo>=1.18' 'weasyprint<=0.42.3'
        
        With these installed and available to xml2rfc, the --pdf switch will be
        enabled.
        
        For PDF output, you also need to install the Noto font set.  Download the full
        set from https://noto-website-2.storage.googleapis.com/pkgs/Noto-unhinted.zip,
        and install as appropriate for your platform.
        
        Usage
        =====
        
        xml2rfc accepts a single XML document as input and outputs to one or more conversion formats.
        
        **Basic Usage**: ``xml2rfc SOURCE [options] FORMATS...``
        
        Run ``xml2rfc --help`` for a full listing of command-line options.
        
        
        Changelog
        =========
        
        
        Version 2.19.1 (16 Feb 2019)
        ------------------------------------------------
        
        
          This is a small bugfix release.  From the commit log:
        
          * Removed some linux-specific code.
        
          * Fixed a problem with the handling of comments and PIs inside text 
            blocks.
        
        
        
        
        
        
        
        Version 2.19.0 (14 Feb 2019)
        ------------------------------------------------
        
        
           **Changed handling of alternative artwork**
        
           The way <artwork> has been specified to handle the presence of both
           SVG artwork and text fallback (in Section 2.5 of [RFC7991]) has the
           result that any SVG content has to be placed as a data: URL in the
           "src" attribute when an ascii-art fallback is present.  This makes
           the SVG effectively uneditable once the preptool has been run, even
           if the SVG artwork was originally provided as a regular SVG XML file
           external to the document XML file.
        
           In order to be able to more easily deal with alternative instances of
           artwork, and in the future possibly deal smoothly with a wider number
           of alternative artwork formats than is currently provided for, a new
           element <artset> could be introduced, presenting a set of alternative
           artwork executions.  This would let the renderer pick the most
           appropriate <artwork> instance for its format from the alternatives
           present within an <artset> element, based on the "type" attribute of
           each enclosed <artwork> element.
        
           If more than one <artwork> element is found within an <artset>
           element, with the same "type" attribute, the renderer could select
           the first one, or possibly choose between the alternative instances
           based on the output format and some quality of the alternative
           instances that made one more suitable than the other for that
           particular format, such as size, aspect ratio, or whatnot.
        
           Implementation:  Xml2rfc as of version 2.18.0 implements this, with a
              preference list when rendering to HTML and PDF of ( "svg",
              "binary-art", "ascii-art" ), while the text renderer uses the list
              ( "ascii-art", ) -- i.e., one entry only.  The Relax-NG compact
              schema used for <artset> is this::
        
                artset =
                  element artset {
                    attribute xml:base { text }?,
                    attribute xml:lang { text }?,
                    attribute anchor { xsd:ID }?,
                    attribute pn { xsd:ID }?,
                    artwork*
                  }
        
              The <artset> element can occur anywhere an <artwork> element can
              occur.  The first anchor on an <artwork> element within an
              <artset> element will be promoted to the <artset> element if it
              has none; apart from that, anchors on <artwork> elements within an
              <artset> element will be removed by the preptool.
        
           Additionally, this release contains some other fixes and changes.  From
           the commit log:
        
          * Normalized the expansion of <xref> to be more consistent conceptually 
            and across renderings.  Added back rendering support for format='none'.
        
          * Added another exception class to the import exception catch for pango,
            to avoid a crash in some environments.
        
          * Applied a patch from rjs@nostrum.com to improve the xml2rfc description.
        
          * Disallow lxml 4.3.1, as it can cause segfaults with some Python 
            versions.  Fixes issue #393.
        
          * Put back LICENCE which has been lost from the source distribution tarball
            at some point.
        
          * Adjusted the <xref format="counter"/> output for appendices.
        
          * Added code to remove any usage of Unicode U+2028 LINE SEPARATOR from the
            text output also in legacy mode.
        
          * Fixed a problem with the text format rendering of <xref> for an appendix.
        
          * Added a get_element_tags() method in BaseV3Writer, and commented out 
            some debug code.
        
          * Removed a warning about missing country that would appear even if no 
            <address> or <postal> was supplied.
        
        
        
        
        
        
        
        Version 2.18.0 (06 Feb 2019)
        ------------------------------------------------
        
        
          This release provides additional support for <referencegroup> rendering, and
          and adds validation of fetched reference files before they are used or put
          in the reference cache.  A warning for un-cited references was added to the
          preptool; this has been present for v2 renderers for a long time, but was
          absent from the v3 specification.  A number of bugs have also been fixed.
          From the commit log:
        
          * Fixed an issue with the v3 html renderer when given an author without 
            an address entry.  Fixes issue #390.
        
          * Fixed a bug in the HTML renderer's SVG reading exception code.  Added
            support for a <referencegroup> target attribute, and suppression of target
            URLs for indivudual entries within a <referencegroup>.
        
          * Adjusted the text rendering of reference annotations to match the html 
            rendering better.  Added support for <referencegroup> target rendering.  
            Suppressed rendering of target URLs for individual entries in a 
            referencegroup.
        
          * Added a preptool check for reference citations, as earlier provided by v2
            renderers.  Made the reference section numbering code more general, to
            support additional levels in the future.
        
          * Added an attribute 'target' to <referencegroup>, in order to be able to
            link out to for instance IETF STD and BCP documents.
        
          * Added ValueError to the exceptions caught on 'import weasyprint' as a 
            workaround for a problem in Python's locale.py file under 3.7.
        
          * Added the Python version to the version list emitted with --version 
            --verbose.
        
          * Added validation of included reference files before usage, to prevent
            html files fetched from dns-spoofing captive portals from being used.
        
        
        
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Topic :: Text Processing
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: License :: OSI Approved :: BSD License
