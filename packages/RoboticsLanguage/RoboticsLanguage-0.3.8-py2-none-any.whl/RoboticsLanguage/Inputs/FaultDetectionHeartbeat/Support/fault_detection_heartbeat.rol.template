node(
  name:'{{nodename}}',

  definitions: block(

      # the ROS Message mini-language
      ROSMessage<{
        name:Fault
        std_msgs/String code
        std_msgs/String cause
        std_msgs/String description
        }>,



      {% for node in nodes %}

      define checkFault_{{node.name}}(last_expected in Cpp<{const ros::TimerEvent&}>):
        block(
            fault.code = '{{node.fault}}',
            fault.cause = 'heartbeat {{node.name}} timeout',
            fault.description = 'Node {{node.name}} heartbeat has stopped for longer than {{node.heartbeat}} seconds.'
          ),

      {{node.name}} in Signals(rosType:'std_msgs/Int8',
                               rosTopic:'/heartbeat/{{node.name}}',
                               rosFlow:'incoming',
                               onNew:block(
                                  timer_{{node.name}}.setPeriod(Cpp<{ros::Duration({{node.heartbeat}})}>),
                                  timer_{{node.name}}.start()
                                 )
                                ),


      Cpp<{ros::Timer timer_{{node.name}} }>,


      {% endfor %}

      fault in Signals(RosType('Fault'), rosTopic:'{{fault_topic}}')

      ),

      initialise: block(

        {% for node in nodes %}

        Cpp<{timer_{{node.name}} = nh_.createTimer(ros::Duration({{node.startup_time}}), &{{nodename|title}}Class::checkFault_{{node.name}}, this, true)}>,

        {% endfor %}
          print("Heartbeat monitor running.")
        )
  )
