# A finite state machine
node(
  name:'example all',

  definitions: block(

    state ∈ Signals(Booleans, rosTopic:'/test/events/state'),

    when(□[1,0](state),
      print('always true for 1 second')
    ),

    when(state,
      print('true')
    ),

    when(¬state,
      print('false')
    ),

        # a signal
        x ∈ Signals(Booleans, rosTopic:'/temporal_logic/x'),

        when(□[1,0](x),
          print('always 1 0')),

        when(◇[2,0](x),
          print('eventually 2 0')),

        when(□[3,1](x),
          print('always 3 1')),

        when(◇[4,1](x),
          print('eventually 4 1')),

        when(□[5,0](◇[1,0](x) ∧ ◇[1,0](¬x)),
          print('oscilating faster then 1Hz for at least 5 seconds')),

    # a mini-language: code is defined within `<{ }>`
    FiniteStateMachine<{

        name:machine
        initial:idle


        (running) -error-> (fault) -reset-> (idle) -start-> (running) -stop-> (idle) -calibration-> (calibrate) -reset-> (idle)


      }>,


      define entering():
        print('Transition: ', machine.lastTransition(), ', Entering: ', machine.state()),

      define exiting():
        print('Leaving: ', machine.state() ),

      define enteredIdle():
        print('Back to Idle!'),


      define test(): block(
        x = false)
        ,

    # a fire signal
    fire ∈ Signals(Strings, rosTopic:'/fire', onNew: machine.fire(fire))

  ),

  initialise: block(

    machine.addInitFunction(entering),
    machine.addExitFunction(exiting),

    machine.addInitFunction(enteredIdle, "idle")

    )

)
