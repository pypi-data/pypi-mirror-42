# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class BatchCreateAlarmsRequest(JDCloudRequest):
    """
    批量创建报警规则，可以为多个实例创建多个报警规则。
    """

    def __init__(self, parameters, header=None, version="v1"):
        super(BatchCreateAlarmsRequest, self).__init__(
            '/regions/{regionId}/alarms/batch', 'POST', header, version)
        self.parameters = parameters


class BatchCreateAlarmsParameters(object):

    def __init__(self, regionId, clientToken, resourceIds, rules, serviceCode, ):
        """
        :param regionId: 地域 Id
        :param clientToken: 幂等性校验参数，最长36位
        :param resourceIds: 报警规则对应实例列表，每次最多100个，例如"['resourceId1','resourceId2']"
        :param rules: 要批量创建的规则列表
        :param serviceCode: 产品线标识，规则对应的serviceCode
        """

        self.regionId = regionId
        self.clientToken = clientToken
        self.contacts = None
        self.datacenter = None
        self.enabled = None
        self.resourceIds = resourceIds
        self.ruleType = None
        self.rules = rules
        self.saveTemplate = None
        self.serviceCode = serviceCode
        self.templateName = None
        self.templateServiceCode = None
        self.webHookContent = None
        self.webHookProtocol = None
        self.webHookSecret = None
        self.webHookUrl = None

    def setContacts(self, contacts):
        """
        :param contacts: (Optional) 通知的联系人
        """
        self.contacts = contacts

    def setDatacenter(self, datacenter):
        """
        :param datacenter: (Optional) 地域
        """
        self.datacenter = datacenter

    def setEnabled(self, enabled):
        """
        :param enabled: (Optional) 是否启用, 1表示启用规则，0表示禁用规则，默认为1
        """
        self.enabled = enabled

    def setRuleType(self, ruleType):
        """
        :param ruleType: (Optional) 规则类型, 1表示资源监控，6表示站点监控，默认为1
        """
        self.ruleType = ruleType

    def setSaveTemplate(self, saveTemplate):
        """
        :param saveTemplate: (Optional) 是否保存为模板
        """
        self.saveTemplate = saveTemplate

    def setTemplateName(self, templateName):
        """
        :param templateName: (Optional) 模板名称，保存模板时，不能为空
        """
        self.templateName = templateName

    def setTemplateServiceCode(self, templateServiceCode):
        """
        :param templateServiceCode: (Optional) 产品线标识，保存为模板时，模板对应的serviceCode
        """
        self.templateServiceCode = templateServiceCode

    def setWebHookContent(self, webHookContent):
        """
        :param webHookContent: (Optional) 回调content 注：仅webHookUrl和webHookContent均不为空时，才会创建webHook
        """
        self.webHookContent = webHookContent

    def setWebHookProtocol(self, webHookProtocol):
        """
        :param webHookProtocol: (Optional) webHook协议
        """
        self.webHookProtocol = webHookProtocol

    def setWebHookSecret(self, webHookSecret):
        """
        :param webHookSecret: (Optional) 回调secret，用户请求签名，防伪造
        """
        self.webHookSecret = webHookSecret

    def setWebHookUrl(self, webHookUrl):
        """
        :param webHookUrl: (Optional) 回调url
        """
        self.webHookUrl = webHookUrl

