#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import os

try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET

try:
    raw_input
except NameError:
    raw_input = input

try:
    from string import atoi
except ImportError:
    atoi = int


DEFAULT_XML_PATH = '/usr/share/mobile-broadband-provider-info/serviceproviders.xml'
DEFAULT_CONFIG_PATH = '/etc/wvdial.conf'
DEFAULT_MODEM_DEVICE = '/dev/ttyUSB0'
DEFAULT_PROFILE_NAME = 'DefaultProfile'


class Mkwvconf:

    #########
    # class members
    #########

    introMessage = """
mkwvconf automatically generates a dialer section for use in wvdial.conf based on mobile-broadband-provider-info.

If a provider is missing from the list, add a bug at http://bugzilla.gnome.org/enter_bug.cgi?product=NetworkManager (include your provider name, your country, your plans marketing name if you know it, and of course the APN you're using for data). For more information about the mobile broadband provider database, see http://blogs.gnome.org/dcbw/2009/06/22/mobile-broadband-assistant-makes-it-easy/ .

The configuration generated by mkwvconf overwrites CID 1 with your provider info ('Init2=AT+CGDCONT=1,...') which is then called by dialing *99***1# (the digit before the trailing '#' specifies which CID to use).

Further reading on APNs can be found here: http://mail.gnome.org/archives/networkmanager-list/2008-August/msg00191.html. Thanks goes to Antti KaijanmÃ¤ki for explanations and links!"""

    #########
    # class methods
    #########

    def __init__(self, opts=None):
        opts = opts or {}

        if 'configPath' in opts:
            self.configPath = opts['configPath']
            self._configPathIsCustom = True
        else:
            self.configPath = DEFAULT_CONFIG_PATH
            self._configPathIsCustom = False

        self.modemDevice = opts.get('modemDevice')

        xmlPath = opts.get('xmlPath', DEFAULT_XML_PATH)
        self.doc = ET.parse(xmlPath)

    def displayIntro(self):
        os.system('clear')
        print(self.introMessage)

    def getCountryCodes(self):
        """returns a list of all country codes"""
        return [str(n.get('code')) for n in self.getNodesFromXml("country[@code]")]

    def selectCountryCode(self):
        """lets user choose a country code and returns the chosen value"""

        countryCodes = self.getCountryCodes()

        print("\nAvailable country codes:\n")
        print(countryCodes)

        country = ""

        while country not in countryCodes:
            country = raw_input("\nGet providers for which country code? : ")

        return country

    def getNodesFromXml(self, xquery):
        """returns results of xquery as a list"""
        return self.doc.findall(xquery)

    def getProviders(self, countryCode):
        """returns list of providers for countryCode"""
        nodes = self.getNodesFromXml("country[@code='%s']/provider/name" % countryCode)
        return [n.text for n in nodes]

    def selectProvider(self, countryCode):
        """lets user choose a provider and returns the chosen provider name"""
        providers = self.getProviders(countryCode)

        index = self.getUserChoice(providers, "Providers for '%s':" % countryCode, "Choose a provider")
        return providers[index]

    def selectApn(self, node):
        """takes a provider node, lets user select one apn (if several exist) and returns the chosen node"""
        apns = node.findall("*/apn")
        apnnames = [n.get("value") for n in apns]

        apncount = len(apns)
        if apncount == 1:
            return apns[0]

        index = self.getUserChoice(apnnames, "Available APNs:", "Choose an APN")
        return apns[index]

    def makeConfig(self, countryCode, provider):
        """get final information from user and assembles configuration section. the configuration is either written to wvdial.conf or printed for manual insertion"""
        providerNode = self.getNodesFromXml("country[@code='%s']/provider[name='%s']" % (countryCode, provider))[0]
        apnNode = self.selectApn(providerNode)

        parameters = self.parseProviderNode(apnNode)
        parameters["modem"] = self.getModemDevice()
        parameters["profileName"] = self.getProfileName()

        if self._configPathIsCustom:
            editConf = True
        else:
            editConf = raw_input("\nDo you want me to try to modify %s (you will need superuser rights)? Y/n: " % self.configPath) in ["", "Y", "y"]
            os.system('clear')

        if editConf:
            self.writeConfig(parameters)
        else:
            print("\n\nDone. Insert the following into %s and run '%s' to start the connection.\n\n" % (self.configPath, self.wvdialCommand(parameters)))
            print(self.formatConfig(parameters))

    def getProfileName(self):
        return self.getUserInput("Enter name for configuration (default is %s): " % DEFAULT_PROFILE_NAME, DEFAULT_PROFILE_NAME)

    def writeConfig(self, parameters):
        """append or replace the configuration section to wvdial.conf"""
        if not os.path.exists(self.configPath):
            print("\nWarning: %s doesn't exist, creating new file." % self.configPath)
            with open(self.configPath, 'w') as f:
                pass

        with open(self.configPath, 'r') as f:
            text = f.read()

        section = self.formatConfig(parameters)

        snippetStart = text.find("[Dialer %(profileName)s]" % parameters)
        if snippetStart != -1:
            snippetEnd = text.find("[Dialer ", snippetStart + 1)
            print("\nThe following part of wvdial.conf will be replaced: \n\n%s" % text[snippetStart:snippetEnd])
            print("by: \n\n%s" % section)
            text = text.replace(text[snippetStart:snippetEnd], section)
        else:
            print("\nThe following will be appended to wvdial.conf: \n\n%s" % section)
            text += "\n%s" % section

        if not self._configPathIsCustom:
            editConf = raw_input("Write to file? Y/n: ") in ["", "Y", "y"]
        else:
            editConf = True

        if editConf:
            with open(self.configPath, 'w') as f:
                f.write(text)

            print("wvdial.conf edited successfully, run '%s' to start the connection.\n\n" % self.wvdialCommand(parameters))

    def wvdialCommand(self, parameters):
        args = []
        if self.configPath != DEFAULT_CONFIG_PATH:
            args.append('--config="%s"' % self.configPath)

        return "wvdial %s %s" % (' '.join(args), parameters["profileName"])

    def formatConfig(self, parameters):
        """formats the information contained in parameters into a valid wvdial.conf format"""

        if 'usr' not in parameters:
            parameters['usr'] = ""

        if 'pw' not in parameters:
            parameters['pw'] = ""

        return """[Dialer %(profileName)s]
Modem Type = Analog Modem
Phone = *99***1#
ISDN = 0
Baud = 460800
Username = %(usr)s
Password = %(pw)s
Modem = %(modem)s
Init1 = ATZ
Init2 = at+cgdcont=1,"ip","%(apn)s"
Stupid Mode = 1
""" % parameters

    def getModemDevice(self):
        """return modem location provided by user"""
        if self.modemDevice:
            return self.modemDevice

        modemDevice = "initialValue"

        while not modemDevice.startswith("/dev/") or len(modemDevice) == 0:
            modemDevice = self.getUserInput("Enter modem location (default is %s): " % DEFAULT_MODEM_DEVICE, DEFAULT_MODEM_DEVICE)

        if len(modemDevice.strip()) == 0:
            modemDevice = DEFAULT_MODEM_DEVICE

        return modemDevice

    def getUserChoice(self, l, header, prompt):
        """takes a string list, a text prompt and a header, and returns user choice"""

        print('')
        print(header)
        print('')

        count = len(l)
        for k, v in zip(range(count), l):
            print('%s: %s' % (k, v))

        choice = -1
        while choice >= count or choice < 0:
            inputStr = self.getUserInput("%s [0-%d]: " % (prompt, count - 1))
            try:
                choice = atoi(inputStr)
                if choice < 0 or choice >= count:
                    print("Input needs to be between 0 and %d" % (count - 1))
            except ValueError:
                choice = -1
                print("Input needs to be an integer.")

        return choice

    def getUserInput(self, prompt, default=""):
        """utility method for getting user input. displays prompt, optional default fallback"""
        accept = "n"
        inp = ""
        while accept == "n" or accept == "N":
            inp = raw_input("\n" + prompt)
            if len(inp.strip()) == 0:
                inp = default
            accept = raw_input("Your choice: '%s'. Is this correct? Y/n: " % inp)
        return inp

    def parseProviderNode(self, apnNode):
        """return initially filled parameter dictionary from provider xml node"""
        parameters = {}

        apn = apnNode.get("value")
        parameters["apn"] = apn

        usr = apnNode.findtext("username")
        if usr:
            parameters["usr"] = usr

        pw = apnNode.findtext("password")
        if pw:
            parameters["pw"] = pw

        return parameters


def cli():
    from argparse import ArgumentParser
    from argparse import FileType

    parser = ArgumentParser(description=Mkwvconf.introMessage)
    parser.add_argument('--configPath', type=FileType('w'))
    parser.add_argument('--xmlPath', type=FileType('r'))
    parser.add_argument('--modemDevice', type=str)
    args = parser.parse_args()

    opts = {}
    if args.configPath:
        args.configPath.close()
        opts['configPath'] = args.configPath.name
    if args.xmlPath:
        args.xmlPath.close()
        opts['xmlPath'] = args.xmlPath.name
    if args.modemDevice:
        opts['modemDevice'] = args.modemDevice

    mkwvconf = Mkwvconf(opts)

    mkwvconf.displayIntro()
    countryCode = mkwvconf.selectCountryCode()
    provider = mkwvconf.selectProvider(countryCode)
    mkwvconf.makeConfig(countryCode, provider)


if __name__ == "__main__":
    cli()
