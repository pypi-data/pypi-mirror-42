from typing import Any, Dict, List, Optional, Type

from django.db import models
from django.http import HttpResponse, HttpRequest
from django.views.generic.base import ContextMixin, TemplateResponseMixin, View

class SingleObjectMixin(ContextMixin):
    model: Optional[Type[models.Model]] = ...
    queryset: Optional[models.query.QuerySet] = ...
    slug_field: str = ...
    context_object_name: Optional[str] = ...
    slug_url_kwarg: str = ...
    pk_url_kwarg: str = ...
    query_pk_and_slug: bool = ...
    object: models.Model = ...
    kwargs: Dict[str, Any] = ...
    def get_object(self, queryset: Optional[models.query.QuerySet] = None) -> models.Model: ...
    def get_queryset(self) -> models.query.QuerySet: ...
    def get_slug_field(self) -> str: ...
    def get_context_object_name(self, obj: Any) -> Optional[str]: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...

class BaseDetailView(SingleObjectMixin, View):
    def render_to_response(self, context: Dict[str, Any], **response_kwargs: Any) -> HttpResponse: ...
    def get(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...

class SingleObjectTemplateResponseMixin(TemplateResponseMixin):
    template_name_field: Optional[str] = ...
    template_name_suffix: str = ...
    model: Optional[Type[models.Model]] = ...
    object: models.Model = ...
    def get_template_names(self) -> List[str]: ...

class DetailView(SingleObjectTemplateResponseMixin, BaseDetailView): ...
