# -*- coding: utf-8 -*-
"""
pytest for scheduler

:author: Kjetil Wormnes
:date: 2017-08-11

"""


import sys, os
from os.path import dirname


#
# Make sure the files one path level up are importable
#
#sys.path.insert(0, '../../src')

from libgs_ops.scheduling import Communication, CommsPass, Schedule, Action
from libgs_ops.propagator import Propagator, TLEDb
import pandas as pd

import pytest


class Error(Exception):
    pass


######################################################
#
# Communication class
#
######################################################

@pytest.mark.parametrize("data,retries", [
    ('CD-EF-00-01', 0),
    (bytearray(b'\xcd\xef\x00\x01'),3),
])
def test_Communication(data, retries):
    c = Communication(data, retries=retries)
    assert (c['retries'] == retries and c['barray'] == b'\xcd\xef\x00\x01' and c['hexstr'] == 'CD-EF-00-01')

@pytest.mark.parametrize('args, kwargs, desc, retries', [
    ((1,2,3), None, "test1", None),
    (("Hello", 2, [1,2, {'a':1}]), None, "test2", None ),
    ((1,), dict(blah=1,blahblah=2),None ,None)
])
def test_Action(args, kwargs, desc, retries):

    kwargs1 = {}
    if kwargs is not None:
        kwargs1['kwargs'] = kwargs

    if desc is not None:
        kwargs1['desc'] = desc

    if retries is not None:
        kwargs1['retries'] = retries

    Action(args,**kwargs1)


def test_Action_invalid_input():
    with pytest.raises(Exception):
        Action((bytearray([1,2,3]),))

@pytest.mark.parametrize("data,retries", [
    ('CD--EF-00-01',  0),
    ('Hello', 1),
    ('CD-EF-00-01', -1)

])
def test_Communication_invalid_input(data, retries):
    with pytest.raises(Exception):
        Communication(data, retries=retries)


@pytest.fixture
def pass_data():
    pdat = pd.read_json('{"norad_id":{"42734.7790625":0,"42734.7791782407":0,"42734.7792939815":0,"42734.7794097222":0,"42734.779525463":0,"42734.7796412037":0,"42734.7797569444":0,"42734.7798726852":0,"42734.7799884259":0,"42734.7801041667":0,"42734.7802199074":0,"42734.7803356482":0,"42734.7804513889":0,"42734.7805671296":0,"42734.7806828704":0,"42734.7807986111":0,"42734.7809143518":0,"42734.7810300926":0,"42734.7811458333":0,"42734.7812615741":0,"42734.7813773148":0,"42734.7814930556":0,"42734.7816087963":0,"42734.781724537":0,"42734.7818402778":0,"42734.7819560185":0,"42734.7820717593":0,"42734.7821875":0,"42734.7823032407":0,"42734.7824189815":0,"42734.7825347222":0,"42734.782650463":0,"42734.7827662037":0,"42734.7828819444":0,"42734.7829976852":0,"42734.7831134259":0},"tstamp_str":{"42734.7790625":"2017\\/1\\/1 06:41:51","42734.7791782407":"2017\\/1\\/1 06:42:01","42734.7792939815":"2017\\/1\\/1 06:42:11","42734.7794097222":"2017\\/1\\/1 06:42:21","42734.779525463":"2017\\/1\\/1 06:42:31","42734.7796412037":"2017\\/1\\/1 06:42:41","42734.7797569444":"2017\\/1\\/1 06:42:51","42734.7798726852":"2017\\/1\\/1 06:43:01","42734.7799884259":"2017\\/1\\/1 06:43:11","42734.7801041667":"2017\\/1\\/1 06:43:21","42734.7802199074":"2017\\/1\\/1 06:43:31","42734.7803356482":"2017\\/1\\/1 06:43:41","42734.7804513889":"2017\\/1\\/1 06:43:51","42734.7805671296":"2017\\/1\\/1 06:44:01","42734.7806828704":"2017\\/1\\/1 06:44:11","42734.7807986111":"2017\\/1\\/1 06:44:21","42734.7809143518":"2017\\/1\\/1 06:44:31","42734.7810300926":"2017\\/1\\/1 06:44:41","42734.7811458333":"2017\\/1\\/1 06:44:51","42734.7812615741":"2017\\/1\\/1 06:45:01","42734.7813773148":"2017\\/1\\/1 06:45:11","42734.7814930556":"2017\\/1\\/1 06:45:21","42734.7816087963":"2017\\/1\\/1 06:45:31","42734.781724537":"2017\\/1\\/1 06:45:41","42734.7818402778":"2017\\/1\\/1 06:45:51","42734.7819560185":"2017\\/1\\/1 06:46:01","42734.7820717593":"2017\\/1\\/1 06:46:11","42734.7821875":"2017\\/1\\/1 06:46:21","42734.7823032407":"2017\\/1\\/1 06:46:31","42734.7824189815":"2017\\/1\\/1 06:46:41","42734.7825347222":"2017\\/1\\/1 06:46:51","42734.782650463":"2017\\/1\\/1 06:47:01","42734.7827662037":"2017\\/1\\/1 06:47:11","42734.7828819444":"2017\\/1\\/1 06:47:21","42734.7829976852":"2017\\/1\\/1 06:47:31","42734.7831134259":"2017\\/1\\/1 06:47:41"},"az":{"42734.7790625":346.9824890826,"42734.7791782407":348.4476739426,"42734.7792939815":350.0551179826,"42734.7794097222":351.8237271663,"42734.779525463":353.7752214952,"42734.7796412037":355.9342989333,"42734.7797569444":358.3288812941,"42734.7798726852":0.989958547,"42734.7799884259":3.951124416,"42734.7801041667":7.2475410491,"42734.7802199074":10.9137970578,"42734.7803356482":14.9804609537,"42734.7804513889":19.4689334272,"42734.7805671296":24.3845881295,"42734.7806828704":29.7089152479,"42734.7807986111":35.3924420147,"42734.7809143518":41.3512356504,"42734.7810300926":47.4700367127,"42734.7811458333":53.6132761919,"42734.7812615741":59.6421339081,"42734.7813773148":65.4325838713,"42734.7814930556":70.8889487917,"42734.7816087963":75.9497979478,"42734.781724537":80.5864445451,"42734.7818402778":84.7967985457,"42734.7819560185":88.5974914603,"42734.7820717593":92.0165680456,"42734.7821875":95.0876669832,"42734.7823032407":97.8460525399,"42734.7824189815":100.3260464162,"42734.7825347222":102.5596343881,"42734.782650463":104.5758242688,"42734.7827662037":106.4004273433,"42734.7828819444":108.0561949717,"42734.7829976852":109.5630030045,"42734.7831134259":110.938159141},"el":{"42734.7790625":10.7768790857,"42734.7791782407":11.7923011115,"42734.7792939815":12.8577448814,"42734.7794097222":13.9755958391,"42734.779525463":15.1481198998,"42734.7796412037":16.3746391671,"42734.7797569444":17.6540736175,"42734.7798726852":18.9825863923,"42734.7799884259":20.3520751793,"42734.7801041667":21.7490452325,"42734.7802199074":23.1529872013,"42734.7803356482":24.5348027723,"42734.7804513889":25.8557545276,"42734.7805671296":27.0676127939,"42734.7806828704":28.1148395956,"42734.7807986111":28.9395115133,"42734.7809143518":29.488853383,"42734.7810300926":29.7240782678,"42734.7811458333":29.6280253175,"42734.7812615741":29.2088019667,"42734.7813773148":28.4979893024,"42734.7814930556":27.5441585074,"42734.7816087963":26.4041299255,"42734.781724537":25.1347768343,"42734.7818402778":23.787142945,"42734.7819560185":22.4033432041,"42734.7820717593":21.0157868591,"42734.7821875":19.6478912136,"42734.7823032407":18.315515967,"42734.7824189815":17.0285905066,"42734.7825347222":15.7926199649,"42734.782650463":14.6090216063,"42734.7827662037":13.4793962563,"42734.7828819444":12.4021311364,"42734.7829976852":11.375014973,"42734.7831134259":10.3954702234},"range_rate":{"42734.7790625":-5961.3515625,"42734.7791782407":-5855.8232421875,"42734.7792939815":-5735.376953125,"42734.7794097222":-5597.6459960938,"42734.779525463":-5439.8842773438,"42734.7796412037":-5258.9360351562,"42734.7797569444":-5051.220703125,"42734.7798726852":-4812.759765625,"42734.7799884259":-4539.2587890625,"42734.7801041667":-4226.287109375,"42734.7802199074":-3869.5861816406,"42734.7803356482":-3465.5419921875,"42734.7804513889":-3011.8383789062,"42734.7805671296":-2508.2514648438,"42734.7806828704":-1957.46875,"42734.7807986111":-1365.7282714844,"42734.7809143518":-743.0068969727,"42734.7810300926":-102.5293273926,"42734.7811458333":540.4511108398,"42734.7812615741":1170.3852539062,"42734.7813773148":1773.2392578125,"42734.7814930556":2337.9135742188,"42734.7816087963":2856.9721679688,"42734.781724537":3326.6511230469,"42734.7818402778":3746.3330078125,"42734.7819560185":4117.759765625,"42734.7820717593":4444.2104492188,"42734.7821875":4729.798828125,"42734.7823032407":4978.94140625,"42734.7824189815":5196.0014648438,"42734.7825347222":5385.0708007812,"42734.782650463":5549.861328125,"42734.7827662037":5693.6645507812,"42734.7828819444":5819.3540039062,"42734.7829976852":5929.4130859375,"42734.7831134259":6025.9716796875}}', convert_axes=False)
    return pdat


######################################################
#
# CommsPass class
#
######################################################


def test_CommsPass_str(pass_data):
    c2 = CommsPass(pass_data, desc= 'Test pass 2', horizon=10)
    c2.add_communication('DC-02-01-AF')
    c2.add_communication(bytearray([0xdc, 0x02, 0x01, 0xaf]))
    expected=\
"""Communication Pass:
  Norad ID:       0
  Description:    Test pass 2
  Visib. horizon: 10
  Pass start:     2017/1/1 06:41:51
  Pass end:       2017/1/1 06:47:41
  Scheduled comms:
     0 ( 3 retries) : DC-02-01-AF
     1 ( 3 retries) : DC-02-01-AF
"""

    print(("Expecting\n%s"%(expected)))
    print(("Got:\n%s")%(c2.__str__()))
    assert(c2.__str__() == expected)


@pytest.fixture
def commspass(pass_data):
    c1 = CommsPass(pass_data, desc= 'Test pass 2', horizon=10)
    c1.add_communication('DC-02-01-AF', retries=2, wait = True)
    c1.add_communication('68-65-6C-6C-6F', retries=3, wait = False)
    return c1


def test_Commspass_dict_conversion(commspass):
    d = commspass.to_dict()
    c2 = CommsPass.from_dict(d)
    assert(commspass == c2)


def test_Commspass_json_conversion(commspass):
    j = commspass.to_json()
    c2 = CommsPass.from_json(j)
    assert(commspass == c2)


def create_overlapping(pass_data, overlap ):
    p1 = pass_data
    p2 = pass_data.copy()
    c1 = CommsPass(p1, desc= 'Test pass 2', horizon=10)
    c2 = CommsPass(p2, desc= 'Test pass 3', horizon=10)

    new_time = pd.Timestamp(c1.pass_data.tstamp_str.iloc[-1]) + pd.Timedelta(seconds=overlap)

    c2._change_time(new_time)

    return c1,c2


@pytest.mark.parametrize("overlap", [
    -10, 0, 119.0])
def test_Commspass_overlap(pass_data, overlap):
    c1, c2 = create_overlapping(pass_data, overlap)
    assert( c1.overlaps(c2, buffertime=120.0) == True)

@pytest.mark.parametrize("overlap", [
    -10, 0, 119.0])
def test_Commspass_overlap_inverse(pass_data, overlap):
    c1, c2 = create_overlapping(pass_data, overlap)
    assert( c2.overlaps(c1, buffertime=120.0) == True)


def test_Commspass_no_overlap(pass_data):
    c1, c2 = create_overlapping(pass_data, 130.0)
    assert( c1.overlaps(c2, buffertime=120.0) == False)

def test_Commspass_no_overlap_inverse(pass_data):
    c1, c2 = create_overlapping(pass_data, 130.0)
    assert( c2.overlaps(c1, buffertime=120.0) == False)

######################################################
#
# Schedule class
#
######################################################

@pytest.fixture
def schedule():
    c1 = CommsPass.from_json('{\n  "_metadata": {\n    "desc": "Test pass",\n    "horizon": 10,\n    "listen": false,\n    "nid": 25544,\n    "tle": "0 ISS (ZARYA)\\n1 25544U 98067A   19038.22894091  .00001103  00000-0  24638-4 0  9998\\n2 25544  51.6431 287.5133 0005212   2.1810 143.5556 15.53239393155062"\n  },\n  "comms": [\n    {\n      "hexstr": "DC-00-00-00-05-01-00-00-00-00-AF-ED",\n      "retries": 3,\n      "wait": true\n    },\n    {\n      "hexstr": "DC-00-00-00-13-01-00-00-00-00-CA-7A",\n      "retries": 3,\n      "wait": true\n    },\n    {\n      "hexstr": "DC-00-00-00-05-12-00-00-00-00-27-07",\n      "retries": 3,\n      "wait": true\n    },\n    {\n      "hexstr": "DC-00-07-00-01-05-00-00-00-00-FF-FF-FF-FF-05-00-00-1E-AD",\n      "retries": 3,\n      "wait": true\n    }\n  ],\n  "pass_data": {\n    "az": {\n      "43503.02730324074": 17.964090781334292,\n      "43503.02741898148": 20.46359509300587,\n      "43503.02753472222": 23.10239086751611,\n      "43503.027650462966": 25.88069667091844,\n      "43503.027766203704": 28.796159503043796,\n      "43503.02788194445": 31.843397174826215,\n      "43503.02799768519": 35.013585081858025,\n      "43503.02811342593": 38.294210317579775,\n      "43503.028229166666": 41.669017031766835,\n      "43503.02834490741": 45.118238656961175,\n      "43503.02846064815": 48.61910334246999,\n      "43503.02857638889": 52.146633086498525,\n      "43503.02869212963": 55.67466143433648,\n      "43503.02880787037": 59.176998025611425,\n      "43503.028923611106": 62.62857948116401,\n      "43503.02903935185": 66.00648368613966,\n      "43503.02915509259": 69.29076648816195,\n      "43503.029270833336": 72.4649807917095,\n      "43503.029386574075": 75.51641561473689,\n      "43503.029502314814": 78.4360551075397,\n      "43503.02961805555": 81.21833949613357,\n      "43503.0297337963": 83.86076210109307,\n      "43503.02984953704": 86.36341171487744,\n      "43503.02996527778": 88.72848765839942\n    },\n    "el": {\n      "43503.02730324074": 10.451949057604434,\n      "43503.02741898148": 11.067151880110298,\n      "43503.02753472222": 11.661485913380835,\n      "43503.027650462966": 12.227718840858648,\n      "43503.027766203704": 12.757878124235036,\n      "43503.02788194445": 13.243438833652183,\n      "43503.02799768519": 13.67561222319557,\n      "43503.02811342593": 14.045721391298343,\n      "43503.028229166666": 14.345656342094758,\n      "43503.02834490741": 14.568445159989528,\n      "43503.02846064815": 14.708585273832556,\n      "43503.02857638889": 14.76238325883016,\n      "43503.02869212963": 14.728543086587335,\n      "43503.02880787037": 14.608099530763328,\n      "43503.028923611106": 14.404442072733765,\n      "43503.02903935185": 14.122957170432846,\n      "43503.02915509259": 13.77040073472336,\n      "43503.029270833336": 13.354748719008587,\n      "43503.029386574075": 12.884589232396175,\n      "43503.029502314814": 12.368665770797385,\n      "43503.02961805555": 11.81549131123899,\n      "43503.0297337963": 11.233054613728969,\n      "43503.02984953704": 10.628631537280677,\n      "43503.02996527778": 10.00866892669696\n    },\n    "range_rate": {\n      "43503.02730324074": -3799.62451171875,\n      "43503.02741898148": -3545.210693359375,\n      "43503.02753472222": -3270.618408203125,\n      "43503.027650462966": -2975.530517578125,\n      "43503.027766203704": -2660.03369140625,\n      "43503.02788194445": -2324.70654296875,\n      "43503.02799768519": -1970.694091796875,\n      "43503.02811342593": -1599.75927734375,\n      "43503.028229166666": -1214.2958984375,\n      "43503.02834490741": -817.2962036132812,\n      "43503.02846064815": -412.26470947265625,\n      "43503.02857638889": -3.082655668258667,\n      "43503.02869212963": 406.16778564453125,\n      "43503.02880787037": 811.4017944335938,\n      "43503.028923611106": 1208.7301025390625,\n      "43503.02903935185": 1594.635986328125,\n      "43503.02915509259": 1966.1116943359375,\n      "43503.029270833336": 2320.746337890625,\n      "43503.029386574075": 2656.75927734375,\n      "43503.029502314814": 2972.98876953125,\n      "43503.02961805555": 3268.840576171875,\n      "43503.0297337963": 3544.21484375,\n      "43503.02984953704": 3799.41796875,\n      "43503.02996527778": 4035.072998046875\n    },\n    "tstamp_str": {\n      "43503.02730324074": "2019/2/8 12:39:19",\n      "43503.02741898148": "2019/2/8 12:39:29",\n      "43503.02753472222": "2019/2/8 12:39:39",\n      "43503.027650462966": "2019/2/8 12:39:49",\n      "43503.027766203704": "2019/2/8 12:39:59",\n      "43503.02788194445": "2019/2/8 12:40:09",\n      "43503.02799768519": "2019/2/8 12:40:19",\n      "43503.02811342593": "2019/2/8 12:40:29",\n      "43503.028229166666": "2019/2/8 12:40:39",\n      "43503.02834490741": "2019/2/8 12:40:49",\n      "43503.02846064815": "2019/2/8 12:40:59",\n      "43503.02857638889": "2019/2/8 12:41:09",\n      "43503.02869212963": "2019/2/8 12:41:19",\n      "43503.02880787037": "2019/2/8 12:41:29",\n      "43503.028923611106": "2019/2/8 12:41:39",\n      "43503.02903935185": "2019/2/8 12:41:49",\n      "43503.02915509259": "2019/2/8 12:41:59",\n      "43503.029270833336": "2019/2/8 12:42:09",\n      "43503.029386574075": "2019/2/8 12:42:19",\n      "43503.029502314814": "2019/2/8 12:42:29",\n      "43503.02961805555": "2019/2/8 12:42:39",\n      "43503.0297337963": "2019/2/8 12:42:49",\n      "43503.02984953704": "2019/2/8 12:42:59",\n      "43503.02996527778": "2019/2/8 12:43:09"\n    }\n  }\n}')
    c2 = CommsPass.from_json('{\n  "_metadata": {\n    "desc": "Test pass 2",\n    "horizon": 10,\n    "listen": false,\n    "nid": 29499,\n    "tle": "0 METOP-A\\n1 29499U 06044A   19037.93232758 -.00000003 +00000-0 +18393-4 0  9998\\n2 29499 098.5947 094.7361 0000597 155.4493 329.5392 14.21541547638160"\n  },\n  "comms": [\n    {\n      "hexstr": "DC-00-00-00-13-01-00-00-00-00-CA-7A",\n      "retries": 3,\n      "wait": true\n    }\n  ],\n  "pass_data": {\n    "az": {\n      "43502.94666666667": 141.4685583158399,\n      "43502.94678240741": 140.39548095571757,\n      "43502.94689814815": 139.2692647238525,\n      "43502.94701388889": 138.08628961998463,\n      "43502.94712962963": 136.84275805893543,\n      "43502.947245370364": 135.5346129083379,\n      "43502.94736111111": 134.15763311128498,\n      "43502.94747685185": 132.70736538443785,\n      "43502.94759259259": 131.17919251991754,\n      "43502.947708333326": 129.56837436644008,\n      "43502.94782407407": 127.87012979158644,\n      "43502.94793981481": 126.07963668180261,\n      "43502.94805555556": 124.19223684807466,\n      "43502.948171296295": 122.20350432782038,\n      "43502.948287037034": 120.10940930942948,\n      "43502.94840277777": 117.90655035869533,\n      "43502.94851851852": 115.59234566411159,\n      "43502.94863425926": 113.1653677161418,\n      "43502.94875": 110.62551406194835,\n      "43502.94886574074": 107.97439662617543,\n      "43502.94898148148": 105.21558076756973,\n      "43502.94909722222": 102.3548448261691,\n      "43502.949212962965": 99.4003508780317,\n      "43502.9493287037": 96.36272669750608,\n      "43502.94944444444": 93.2549837949611,\n      "43502.94956018518": 90.09236032243507,\n      "43502.94967592592": 86.89190443209635,\n      "43502.94979166666": 83.67201665356895,\n      "43502.949907407405": 80.45178053539387,\n      "43502.95002314814": 77.2503069468688,\n      "43502.95013888889": 74.08604422894199,\n      "43502.95025462963": 70.97614298661928,\n      "43502.95037037037": 67.9359574851549,\n      "43502.950486111105": 64.97865632926863,\n      "43502.95060185185": 62.11501072728158,\n      "43502.95071759259": 59.353326189224475,\n      "43502.950833333336": 56.699521074013134,\n      "43502.950949074075": 54.15729051398854,\n      "43502.95106481481": 51.72835230172694,\n      "43502.95118055555": 49.412726927795866,\n      "43502.9512962963": 47.209021033604614,\n      "43502.95141203703": 45.11473818501155,\n      "43502.951527777775": 43.126507683661266,\n      "43502.951643518514": 41.24034411417308,\n      "43502.95175925925": 39.4518454196269,\n      "43502.95187499999": 37.75633975063044,\n      "43502.95199074074": 36.149042559670114,\n      "43502.952106481476": 34.62514880866482,\n      "43502.95222222222": 33.17991493123596,\n      "43502.95233796296": 31.808720304410055,\n      "43502.9524537037": 30.50711847503741,\n      "43502.95256944444": 29.27084057488676,\n      "43502.952685185184": 28.095846547064053,\n      "43502.95280092592": 26.978304655444905,\n      "43502.95291666667": 25.914610267694847\n    },\n    "el": {\n      "43502.94666666667": 10.587488185267812,\n      "43502.94678240741": 11.307865675708118,\n      "43502.94689814815": 12.041488610496371,\n      "43502.94701388889": 12.788096588670467,\n      "43502.94712962963": 13.547278945106553,\n      "43502.947245370364": 14.318433769384027,\n      "43502.94736111111": 15.101283585067854,\n      "43502.94747685185": 15.893778481633385,\n      "43502.94759259259": 16.69453619954734,\n      "43502.947708333326": 17.50211215380026,\n      "43502.94782407407": 18.31425750460792,\n      "43502.94793981481": 19.128226515923973,\n      "43502.94805555556": 19.940713376190132,\n      "43502.948171296295": 20.747804387011982,\n      "43502.948287037034": 21.544918199003735,\n      "43502.94840277777": 22.32678019857885,\n      "43502.94851851852": 23.08741226266627,\n      "43502.94863425926": 23.820151541730652,\n      "43502.94875": 24.517705101285717,\n      "43502.94886574074": 25.172262620015548,\n      "43502.94898148148": 25.775651776578233,\n      "43502.94909722222": 26.319553400564683,\n      "43502.949212962965": 26.7957712649709,\n      "43502.9493287037": 27.196546274899738,\n      "43502.94944444444": 27.51488431664111,\n      "43502.94956018518": 27.74490118222504,\n      "43502.94967592592": 27.882131635481645,\n      "43502.94979166666": 27.92377188375663,\n      "43502.949907407405": 27.868853747735137,\n      "43502.95002314814": 27.718292472765963,\n      "43502.95013888889": 27.474845747726494,\n      "43502.95025462963": 27.142944657840772,\n      "43502.95037037037": 26.728454628058547,\n      "43502.950486111105": 26.23836635699533,\n      "43502.95060185185": 25.680462845210347,\n      "43502.95071759259": 25.062967640464297,\n      "43502.950833333336": 24.394249432037736,\n      "43502.950949074075": 23.682533475238653,\n      "43502.95106481481": 22.93568985553819,\n      "43502.95118055555": 22.161067856483292,\n      "43502.9512962963": 21.365393506859117,\n      "43502.95141203703": 20.554696156155504,\n      "43502.951527777775": 19.73429652173588,\n      "43502.951643518514": 18.90881181147919,\n      "43502.95175925925": 18.08218987472569,\n      "43502.95187499999": 17.257762136243056,\n      "43502.95199074074": 16.438287992455972,\n      "43502.952106481476": 15.626028235979716,\n      "43502.95222222222": 14.822123508405678,\n      "43502.95233796296": 14.028794474987759,\n      "43502.9524537037": 13.247328626384505,\n      "43502.95256944444": 12.478227981499913,\n      "43502.952685185184": 11.722088474339067,\n      "43502.95280092592": 10.979314793610289,\n      "43502.95291666667": 10.250160510086516\n    },\n    "range_rate": {\n      "43502.94666666667": -5348.41845703125,\n      "43502.94678240741": -5272.8056640625,\n      "43502.94689814815": -5191.28076171875,\n      "43502.94701388889": -5103.4013671875,\n      "43502.94712962963": -5008.69482421875,\n      "43502.947245370364": -4906.6630859375,\n      "43502.94736111111": -4796.78173828125,\n      "43502.94747685185": -4678.50537109375,\n      "43502.94759259259": -4551.27001953125,\n      "43502.947708333326": -4414.50048828125,\n      "43502.94782407407": -4267.62060546875,\n      "43502.94793981481": -4110.0615234375,\n      "43502.94805555556": -3941.277587890625,\n      "43502.948171296295": -3760.76416015625,\n      "43502.948287037034": -3568.075927734375,\n      "43502.94840277777": -3362.85205078125,\n      "43502.94851851852": -3144.841796875,\n      "43502.94863425926": -2913.9326171875,\n      "43502.94875": -2670.179931640625,\n      "43502.94886574074": -2413.833740234375,\n      "43502.94898148148": -2145.364990234375,\n      "43502.94909722222": -1865.484375,\n      "43502.949212962965": -1575.15478515625,\n      "43502.9493287037": -1275.5914306640625,\n      "43502.94944444444": -968.2512817382812,\n      "43502.94956018518": -654.807861328125,\n      "43502.94967592592": -337.11346435546875,\n      "43502.94979166666": -17.148815155029297,\n      "43502.949907407405": 303.0354919433594,\n      "43502.95002314814": 621.3831176757812,\n      "43502.95013888889": 935.896240234375,\n      "43502.95025462963": 1244.6956787109375,\n      "43502.95037037037": 1546.0723876953125,\n      "43502.950486111105": 1838.5283203125,\n      "43502.95060185185": 2120.802978515625,\n      "43502.95071759259": 2391.886962890625,\n      "43502.950833333336": 2651.02392578125,\n      "43502.950949074075": 2897.69921875,\n      "43502.95106481481": 3131.62255859375,\n      "43502.95118055555": 3352.70361328125,\n      "43502.9512962963": 3561.023681640625,\n      "43502.95141203703": 3756.8076171875,\n      "43502.951527777775": 3940.395751953125,\n      "43502.951643518514": 4112.2158203125,\n      "43502.95175925925": 4272.76025390625,\n      "43502.95187499999": 4422.5654296875,\n      "43502.95199074074": 4562.193359375,\n      "43502.952106481476": 4692.21728515625,\n      "43502.95222222222": 4813.208984375,\n      "43502.95233796296": 4925.73193359375,\n      "43502.9524537037": 5030.33349609375,\n      "43502.95256944444": 5127.5380859375,\n      "43502.952685185184": 5217.84765625,\n      "43502.95280092592": 5301.7353515625,\n      "43502.95291666667": 5379.64794921875\n    },\n    "tstamp_str": {\n      "43502.94666666667": "2019/2/8 10:43:12",\n      "43502.94678240741": "2019/2/8 10:43:22",\n      "43502.94689814815": "2019/2/8 10:43:32",\n      "43502.94701388889": "2019/2/8 10:43:42",\n      "43502.94712962963": "2019/2/8 10:43:52",\n      "43502.947245370364": "2019/2/8 10:44:02",\n      "43502.94736111111": "2019/2/8 10:44:12",\n      "43502.94747685185": "2019/2/8 10:44:22",\n      "43502.94759259259": "2019/2/8 10:44:32",\n      "43502.947708333326": "2019/2/8 10:44:42",\n      "43502.94782407407": "2019/2/8 10:44:52",\n      "43502.94793981481": "2019/2/8 10:45:02",\n      "43502.94805555556": "2019/2/8 10:45:12",\n      "43502.948171296295": "2019/2/8 10:45:22",\n      "43502.948287037034": "2019/2/8 10:45:32",\n      "43502.94840277777": "2019/2/8 10:45:42",\n      "43502.94851851852": "2019/2/8 10:45:52",\n      "43502.94863425926": "2019/2/8 10:46:02",\n      "43502.94875": "2019/2/8 10:46:12",\n      "43502.94886574074": "2019/2/8 10:46:22",\n      "43502.94898148148": "2019/2/8 10:46:32",\n      "43502.94909722222": "2019/2/8 10:46:42",\n      "43502.949212962965": "2019/2/8 10:46:52",\n      "43502.9493287037": "2019/2/8 10:47:02",\n      "43502.94944444444": "2019/2/8 10:47:12",\n      "43502.94956018518": "2019/2/8 10:47:22",\n      "43502.94967592592": "2019/2/8 10:47:32",\n      "43502.94979166666": "2019/2/8 10:47:42",\n      "43502.949907407405": "2019/2/8 10:47:52",\n      "43502.95002314814": "2019/2/8 10:48:02",\n      "43502.95013888889": "2019/2/8 10:48:12",\n      "43502.95025462963": "2019/2/8 10:48:22",\n      "43502.95037037037": "2019/2/8 10:48:32",\n      "43502.950486111105": "2019/2/8 10:48:42",\n      "43502.95060185185": "2019/2/8 10:48:52",\n      "43502.95071759259": "2019/2/8 10:49:02",\n      "43502.950833333336": "2019/2/8 10:49:12",\n      "43502.950949074075": "2019/2/8 10:49:22",\n      "43502.95106481481": "2019/2/8 10:49:32",\n      "43502.95118055555": "2019/2/8 10:49:42",\n      "43502.9512962963": "2019/2/8 10:49:52",\n      "43502.95141203703": "2019/2/8 10:50:02",\n      "43502.951527777775": "2019/2/8 10:50:12",\n      "43502.951643518514": "2019/2/8 10:50:22",\n      "43502.95175925925": "2019/2/8 10:50:32",\n      "43502.95187499999": "2019/2/8 10:50:42",\n      "43502.95199074074": "2019/2/8 10:50:52",\n      "43502.952106481476": "2019/2/8 10:51:02",\n      "43502.95222222222": "2019/2/8 10:51:12",\n      "43502.95233796296": "2019/2/8 10:51:22",\n      "43502.9524537037": "2019/2/8 10:51:32",\n      "43502.95256944444": "2019/2/8 10:51:42",\n      "43502.952685185184": "2019/2/8 10:51:52",\n      "43502.95280092592": "2019/2/8 10:52:02",\n      "43502.95291666667": "2019/2/8 10:52:12"\n    }\n  }\n}')
    c3 = CommsPass.from_json('{\n  "_metadata": {\n    "desc": "test pass 3",\n    "horizon": 10,\n    "listen": false,\n    "nid": 38771,\n    "tle": "0 METOP-B\\n1 38771U 12049A   19037.95420139 -.00000001 +00000-0 +19548-4 0  9998\\n2 38771 098.7229 099.0032 0001055 042.2616 308.7050 14.21480476331489"\n  },\n  "comms": [\n    {\n      "hexstr": "DC-00-00-00-05-01-00-00-00-00-AF-ED",\n      "retries": 3,\n      "wait": true\n    }\n  ],\n  "pass_data": {\n    "az": {\n      "43506.42293981481": 55.69442117160533,\n      "43506.423055555555": 56.737138340866984,\n      "43506.423171296294": 57.83457898575878,\n      "43506.42328703703": 58.99046555937837,\n      "43506.42340277777": 60.20873908087687,\n      "43506.42351851852": 61.49357279583714,\n      "43506.423634259256": 62.84935168570633,\n      "43506.42375": 64.28065197722836,\n      "43506.42386574074": 65.79222748206554,\n      "43506.42398148148": 67.3889208043394,\n      "43506.42409722222": 69.07563601987407,\n      "43506.424212962964": 70.85724988373687,\n      "43506.4243287037": 72.73845473588763,\n      "43506.42444444445": 74.72365604834101,\n      "43506.42456018519": 76.81678801005893,\n      "43506.424675925926": 79.02106764014047,\n      "43506.424791666665": 81.33876939157922,\n      "43506.42490740741": 83.77094511350741,\n      "43506.42502314814": 86.3171166926831,\n      "43506.42513888889": 88.97498235535602,\n      "43506.42525462963": 91.74012979932232,\n      "43506.425370370365": 94.60581079768203,\n      "43506.425486111104": 97.56277727429898,\n      "43506.42560185185": 100.59927447361154,\n      "43506.42571759259": 103.70113658328114,\n      "43506.425833333335": 106.85205311156975,\n      "43506.42594907407": 110.03403334020359,\n      "43506.42606481481": 113.22796639988496,\n      "43506.42618055555": 116.41429062883093,\n      "43506.4262962963": 119.57373123320372,\n      "43506.426412037035": 122.68795598527103,\n      "43506.42652777778": 125.74020360080966,\n      "43506.42664351852": 128.71574819196903,\n      "43506.42675925926": 131.6022134559731,\n      "43506.426875": 134.38973659966035,\n      "43506.42699074074": 137.07098199986223,\n      "43506.427106481475": 139.64097727886295,\n      "43506.42722222222": 142.0969083987244,\n      "43506.42733796296": 144.43790109523292,\n      "43506.4274537037": 146.66463838730544,\n      "43506.42756944444": 148.779128350558,\n      "43506.42768518518": 150.78440358898206,\n      "43506.42780092592": 152.68420704624276,\n      "43506.42791666667": 154.48285540189556,\n      "43506.428032407406": 156.18500684495447,\n      "43506.428148148145": 157.7954698285951,\n      "43506.42826388888": 159.3191757493982,\n      "43506.42837962963": 160.7609877020529,\n      "43506.42849537037": 162.12567315859977,\n      "43506.428611111114": 163.41786298729613,\n      "43506.42872685185": 164.64198315072417,\n      "43506.42884259259": 165.80226836616927,\n      "43506.42895833333": 166.90270746410667,\n      "43506.429074074076": 167.9470707089583\n    },\n    "el": {\n      "43506.42293981481": 10.263685138416786,\n      "43506.423055555555": 10.998034634578001,\n      "43506.423171296294": 11.746078660025091,\n      "43506.42328703703": 12.507526931718328,\n      "43506.42340277777": 13.281928657172497,\n      "43506.42351851852": 14.068632407095505,\n      "43506.423634259256": 14.867102011637504,\n      "43506.42375": 15.675828852765571,\n      "43506.42386574074": 16.49263239258718,\n      "43506.42398148148": 17.316187574403344,\n      "43506.42409722222": 18.144078218795176,\n      "43506.424212962964": 18.973363929324982,\n      "43506.4243287037": 19.800506668002697,\n      "43506.42444444445": 20.621317821319806,\n      "43506.42456018519": 21.43091721911434,\n      "43506.424675925926": 22.223697276077722,\n      "43506.424791666665": 22.99332299175476,\n      "43506.42490740741": 23.73276610148951,\n      "43506.42502314814": 24.434378500958857,\n      "43506.42513888889": 25.090015189577546,\n      "43506.42525462963": 25.691234053531456,\n      "43506.425370370365": 26.22952126202016,\n      "43506.425486111104": 26.696600333316898,\n      "43506.42560185185": 27.084759983848723,\n      "43506.42571759259": 27.387204175391474,\n      "43506.425833333335": 27.598407284906607,\n      "43506.42594907407": 27.714399264939054,\n      "43506.42606481481": 27.732997870049,\n      "43506.42618055555": 27.65394184550069,\n      "43506.4262962963": 27.478896049904307,\n      "43506.426412037035": 27.21135754011491,\n      "43506.42652777778": 26.856452373104585,\n      "43506.42664351852": 26.420641907828166,\n      "43506.42675925926": 25.911401786332235,\n      "43506.426875": 25.336859933729098,\n      "43506.42699074074": 24.705458463832905,\n      "43506.427106481475": 24.025651443288826,\n      "43506.42722222222": 23.30564534438464,\n      "43506.42733796296": 22.55319926201748,\n      "43506.4274537037": 21.775484894815854,\n      "43506.42756944444": 20.97900287532233,\n      "43506.42768518518": 20.16952812848014,\n      "43506.42780092592": 19.35212182446428,\n      "43506.42791666667": 18.531136501323335,\n      "43506.428032407406": 17.71027070649286,\n      "43506.428148148145": 16.892620223214173,\n      "43506.42826388888": 16.0807292969531,\n      "43506.42837962963": 15.276476229731388,\n      "43506.42849537037": 14.48099483295127,\n      "43506.428611111114": 13.696932658689763,\n      "43506.42872685185": 12.924592796591293,\n      "43506.42884259259": 12.164695831613294,\n      "43506.42895833333": 11.417753174169869,\n      "43506.429074074076": 10.684101211077643\n    },\n    "range_rate": {\n      "43506.42293981481": -5423.22216796875,\n      "43506.423055555555": -5343.7412109375,\n      "43506.423171296294": -5258.033203125,\n      "43506.42328703703": -5165.62841796875,\n      "43506.42340277777": -5066.0302734375,\n      "43506.42351851852": -4958.71142578125,\n      "43506.423634259256": -4843.12109375,\n      "43506.42375": -4718.68603515625,\n      "43506.42386574074": -4584.81640625,\n      "43506.42398148148": -4440.91455078125,\n      "43506.42409722222": -4286.3828125,\n      "43506.424212962964": -4120.63916015625,\n      "43506.4243287037": -3943.131103515625,\n      "43506.42444444445": -3753.355712890625,\n      "43506.42456018519": -3550.88232421875,\n      "43506.424675925926": -3335.37890625,\n      "43506.424791666665": -3106.640625,\n      "43506.42490740741": -2864.61962890625,\n      "43506.42502314814": -2609.45556640625,\n      "43506.42513888889": -2341.5048828125,\n      "43506.42525462963": -2061.3642578125,\n      "43506.425370370365": -1769.888427734375,\n      "43506.425486111104": -1468.1978759765625,\n      "43506.42560185185": -1157.6741943359375,\n      "43506.42571759259": -839.9415893554688,\n      "43506.425833333335": -516.8344116210938,\n      "43506.42594907407": -190.3504180908203,\n      "43506.42606481481": 137.4070587158203,\n      "43506.42618055555": 464.2943420410156,\n      "43506.4262962963": 788.1958618164062,\n      "43506.426412037035": 1107.09033203125,\n      "43506.42652777778": 1419.1104736328125,\n      "43506.42664351852": 1722.5914306640625,\n      "43506.42675925926": 2016.1060791015625,\n      "43506.426875": 2298.486083984375,\n      "43506.42699074074": 2568.829345703125,\n      "43506.427106481475": 2826.4931640625,\n      "43506.42722222222": 3071.079345703125,\n      "43506.42733796296": 3302.410888671875,\n      "43506.4274537037": 3520.503173828125,\n      "43506.42756944444": 3725.534912109375,\n      "43506.42768518518": 3917.81640625,\n      "43506.42780092592": 4097.76171875,\n      "43506.42791666667": 4265.8623046875,\n      "43506.428032407406": 4422.66162109375,\n      "43506.428148148145": 4568.73828125,\n      "43506.42826388888": 4704.68603515625,\n      "43506.42837962963": 4831.103515625,\n      "43506.42849537037": 4948.5810546875,\n      "43506.428611111114": 5057.69580078125,\n      "43506.42872685185": 5159.001953125,\n      "43506.42884259259": 5253.02978515625,\n      "43506.42895833333": 5340.28271484375,\n      "43506.429074074076": 5421.2333984375\n    },\n    "tstamp_str": {\n      "43506.42293981481": "2019/2/11 22:09:02",\n      "43506.423055555555": "2019/2/11 22:09:12",\n      "43506.423171296294": "2019/2/11 22:09:22",\n      "43506.42328703703": "2019/2/11 22:09:32",\n      "43506.42340277777": "2019/2/11 22:09:42",\n      "43506.42351851852": "2019/2/11 22:09:52",\n      "43506.423634259256": "2019/2/11 22:10:02",\n      "43506.42375": "2019/2/11 22:10:12",\n      "43506.42386574074": "2019/2/11 22:10:22",\n      "43506.42398148148": "2019/2/11 22:10:32",\n      "43506.42409722222": "2019/2/11 22:10:42",\n      "43506.424212962964": "2019/2/11 22:10:52",\n      "43506.4243287037": "2019/2/11 22:11:02",\n      "43506.42444444445": "2019/2/11 22:11:12",\n      "43506.42456018519": "2019/2/11 22:11:22",\n      "43506.424675925926": "2019/2/11 22:11:32",\n      "43506.424791666665": "2019/2/11 22:11:42",\n      "43506.42490740741": "2019/2/11 22:11:52",\n      "43506.42502314814": "2019/2/11 22:12:02",\n      "43506.42513888889": "2019/2/11 22:12:12",\n      "43506.42525462963": "2019/2/11 22:12:22",\n      "43506.425370370365": "2019/2/11 22:12:32",\n      "43506.425486111104": "2019/2/11 22:12:42",\n      "43506.42560185185": "2019/2/11 22:12:52",\n      "43506.42571759259": "2019/2/11 22:13:02",\n      "43506.425833333335": "2019/2/11 22:13:12",\n      "43506.42594907407": "2019/2/11 22:13:22",\n      "43506.42606481481": "2019/2/11 22:13:32",\n      "43506.42618055555": "2019/2/11 22:13:42",\n      "43506.4262962963": "2019/2/11 22:13:52",\n      "43506.426412037035": "2019/2/11 22:14:02",\n      "43506.42652777778": "2019/2/11 22:14:12",\n      "43506.42664351852": "2019/2/11 22:14:22",\n      "43506.42675925926": "2019/2/11 22:14:32",\n      "43506.426875": "2019/2/11 22:14:42",\n      "43506.42699074074": "2019/2/11 22:14:52",\n      "43506.427106481475": "2019/2/11 22:15:02",\n      "43506.42722222222": "2019/2/11 22:15:12",\n      "43506.42733796296": "2019/2/11 22:15:22",\n      "43506.4274537037": "2019/2/11 22:15:32",\n      "43506.42756944444": "2019/2/11 22:15:42",\n      "43506.42768518518": "2019/2/11 22:15:52",\n      "43506.42780092592": "2019/2/11 22:16:02",\n      "43506.42791666667": "2019/2/11 22:16:12",\n      "43506.428032407406": "2019/2/11 22:16:22",\n      "43506.428148148145": "2019/2/11 22:16:32",\n      "43506.42826388888": "2019/2/11 22:16:42",\n      "43506.42837962963": "2019/2/11 22:16:52",\n      "43506.42849537037": "2019/2/11 22:17:02",\n      "43506.428611111114": "2019/2/11 22:17:12",\n      "43506.42872685185": "2019/2/11 22:17:22",\n      "43506.42884259259": "2019/2/11 22:17:32",\n      "43506.42895833333": "2019/2/11 22:17:42",\n      "43506.429074074076": "2019/2/11 22:17:52"\n    }\n  }\n}')
    s = Schedule()
    s.add_pass(c1)
    s.add_pass(c2)
    s.add_pass(c3)
    return(s)


def test_Schedule(schedule):

        expected = \
"""Schedule of communication passes:
  ---- -------- -------------------- -------------------- --------------
  #    Norad id Pass start (utc)     Pass end (utc)       Communications
  ---- -------- -------------------- -------------------- --------------
  0000 29499    2019/2/8 10:43:12    2019/2/8 10:52:12    1
  0001 25544    2019/2/8 12:39:19    2019/2/8 12:43:09    4
  0002 38771    2019/2/11 22:09:02   2019/2/11 22:17:52   1
  ---- -------- -------------------- -------------------- --------------
"""
        print(("Expected:\n%s\nGot:\n%s"%(expected, str(schedule) )))

        assert(str(schedule) == expected)



def test_Schedule_pop(schedule):
    schedule.pop_pass(1)
    expected=\
"""Schedule of communication passes:
  ---- -------- -------------------- -------------------- --------------
  #    Norad id Pass start (utc)     Pass end (utc)       Communications
  ---- -------- -------------------- -------------------- --------------
  0000 29499    2019/2/8 10:43:12    2019/2/8 10:52:12    1
  0001 38771    2019/2/11 22:09:02   2019/2/11 22:17:52   1
  ---- -------- -------------------- -------------------- --------------
"""
    assert(str(schedule) == expected)


def test_Schedule_remove(schedule):
    schedule.remove_pass(schedule.passes[1])
    expected=\
"""Schedule of communication passes:
  ---- -------- -------------------- -------------------- --------------
  #    Norad id Pass start (utc)     Pass end (utc)       Communications
  ---- -------- -------------------- -------------------- --------------
  0000 29499    2019/2/8 10:43:12    2019/2/8 10:52:12    1
  0001 38771    2019/2/11 22:09:02   2019/2/11 22:17:52   1
  ---- -------- -------------------- -------------------- --------------
"""
    assert(str(schedule) == expected)


def test_Schedule_json_conversion(schedule):
    j = schedule.to_json()
    s = Schedule.from_json(j)
    assert(schedule == s)


#
#def test_Schedule_dict_conversion(schedule):
#    d = commspass.to_dict()
#    c2 = CommsPass.from_dict(d)
#    assert(commspass == c2)
#
#
#def test_Schedule_json_conversion(schedule):
#    d = commspass.to_dict()
#    c2 = CommsPass.from_dict(d)
#    assert(commspass == c2)
