# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_privacy_admis2019')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_privacy_admis2019')
    _privacy_admis2019 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_privacy_admis2019', [dirname(__file__)])
        except ImportError:
            import _privacy_admis2019
            return _privacy_admis2019
        try:
            _mod = imp.load_module('_privacy_admis2019', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _privacy_admis2019 = swig_import_helper()
    del swig_import_helper
else:
    import _privacy_admis2019
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _privacy_admis2019.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _privacy_admis2019.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _privacy_admis2019.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _privacy_admis2019.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _privacy_admis2019.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _privacy_admis2019.SwigPyIterator_equal(self, x)

    def copy(self):
        return _privacy_admis2019.SwigPyIterator_copy(self)

    def next(self):
        return _privacy_admis2019.SwigPyIterator_next(self)

    def __next__(self):
        return _privacy_admis2019.SwigPyIterator___next__(self)

    def previous(self):
        return _privacy_admis2019.SwigPyIterator_previous(self)

    def advance(self, n):
        return _privacy_admis2019.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _privacy_admis2019.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _privacy_admis2019.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _privacy_admis2019.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _privacy_admis2019.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _privacy_admis2019.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _privacy_admis2019.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _privacy_admis2019.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.IntVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.IntVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.IntVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.IntVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.IntVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.IntVector_empty(self)

    def size(self):
        return _privacy_admis2019.IntVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.IntVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.IntVector_begin(self)

    def end(self):
        return _privacy_admis2019.IntVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.IntVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.IntVector_rend(self)

    def clear(self):
        return _privacy_admis2019.IntVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.IntVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.IntVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.IntVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.IntVector_front(self)

    def back(self):
        return _privacy_admis2019.IntVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.IntVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.IntVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.IntVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.IntVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _privacy_admis2019.IntVector_swigregister
IntVector_swigregister(IntVector)

class BoolVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.BoolVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.BoolVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.BoolVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.BoolVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.BoolVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.BoolVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.BoolVector_empty(self)

    def size(self):
        return _privacy_admis2019.BoolVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.BoolVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.BoolVector_begin(self)

    def end(self):
        return _privacy_admis2019.BoolVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.BoolVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.BoolVector_rend(self)

    def clear(self):
        return _privacy_admis2019.BoolVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.BoolVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.BoolVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.BoolVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_BoolVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.BoolVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.BoolVector_front(self)

    def back(self):
        return _privacy_admis2019.BoolVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.BoolVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.BoolVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.BoolVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.BoolVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.BoolVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_BoolVector
    __del__ = lambda self: None
BoolVector_swigregister = _privacy_admis2019.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.StringVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.StringVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.StringVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.StringVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.StringVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.StringVector_empty(self)

    def size(self):
        return _privacy_admis2019.StringVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.StringVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.StringVector_begin(self)

    def end(self):
        return _privacy_admis2019.StringVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.StringVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.StringVector_rend(self)

    def clear(self):
        return _privacy_admis2019.StringVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.StringVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.StringVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.StringVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.StringVector_front(self)

    def back(self):
        return _privacy_admis2019.StringVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.StringVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.StringVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.StringVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.StringVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _privacy_admis2019.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.IntVectorVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.IntVectorVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.IntVectorVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.IntVectorVector_empty(self)

    def size(self):
        return _privacy_admis2019.IntVectorVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.IntVectorVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.IntVectorVector_begin(self)

    def end(self):
        return _privacy_admis2019.IntVectorVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.IntVectorVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.IntVectorVector_rend(self)

    def clear(self):
        return _privacy_admis2019.IntVectorVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_IntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.IntVectorVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.IntVectorVector_front(self)

    def back(self):
        return _privacy_admis2019.IntVectorVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.IntVectorVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_IntVectorVector
    __del__ = lambda self: None
IntVectorVector_swigregister = _privacy_admis2019.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class StringVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.StringVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.StringVectorVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.StringVectorVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.StringVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.StringVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.StringVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.StringVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.StringVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.StringVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.StringVectorVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.StringVectorVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.StringVectorVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.StringVectorVector_empty(self)

    def size(self):
        return _privacy_admis2019.StringVectorVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.StringVectorVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.StringVectorVector_begin(self)

    def end(self):
        return _privacy_admis2019.StringVectorVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.StringVectorVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.StringVectorVector_rend(self)

    def clear(self):
        return _privacy_admis2019.StringVectorVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.StringVectorVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.StringVectorVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.StringVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_StringVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.StringVectorVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.StringVectorVector_front(self)

    def back(self):
        return _privacy_admis2019.StringVectorVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.StringVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.StringVectorVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.StringVectorVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.StringVectorVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.StringVectorVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_StringVectorVector
    __del__ = lambda self: None
StringVectorVector_swigregister = _privacy_admis2019.StringVectorVector_swigregister
StringVectorVector_swigregister(StringVectorVector)

class Int2intMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2intMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2intMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Int2intMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Int2intMap___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Int2intMap___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Int2intMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _privacy_admis2019.Int2intMap___getitem__(self, key)

    def __delitem__(self, key):
        return _privacy_admis2019.Int2intMap___delitem__(self, key)

    def has_key(self, key):
        return _privacy_admis2019.Int2intMap_has_key(self, key)

    def keys(self):
        return _privacy_admis2019.Int2intMap_keys(self)

    def values(self):
        return _privacy_admis2019.Int2intMap_values(self)

    def items(self):
        return _privacy_admis2019.Int2intMap_items(self)

    def __contains__(self, key):
        return _privacy_admis2019.Int2intMap___contains__(self, key)

    def key_iterator(self):
        return _privacy_admis2019.Int2intMap_key_iterator(self)

    def value_iterator(self):
        return _privacy_admis2019.Int2intMap_value_iterator(self)

    def __setitem__(self, *args):
        return _privacy_admis2019.Int2intMap___setitem__(self, *args)

    def asdict(self):
        return _privacy_admis2019.Int2intMap_asdict(self)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Int2intMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _privacy_admis2019.Int2intMap_empty(self)

    def size(self):
        return _privacy_admis2019.Int2intMap_size(self)

    def swap(self, v):
        return _privacy_admis2019.Int2intMap_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Int2intMap_begin(self)

    def end(self):
        return _privacy_admis2019.Int2intMap_end(self)

    def rbegin(self):
        return _privacy_admis2019.Int2intMap_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Int2intMap_rend(self)

    def clear(self):
        return _privacy_admis2019.Int2intMap_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Int2intMap_get_allocator(self)

    def count(self, x):
        return _privacy_admis2019.Int2intMap_count(self, x)

    def erase(self, *args):
        return _privacy_admis2019.Int2intMap_erase(self, *args)

    def find(self, x):
        return _privacy_admis2019.Int2intMap_find(self, x)

    def lower_bound(self, x):
        return _privacy_admis2019.Int2intMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _privacy_admis2019.Int2intMap_upper_bound(self, x)
    __swig_destroy__ = _privacy_admis2019.delete_Int2intMap
    __del__ = lambda self: None
Int2intMap_swigregister = _privacy_admis2019.Int2intMap_swigregister
Int2intMap_swigregister(Int2intMap)

class Int2doubleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2doubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2doubleMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Int2doubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Int2doubleMap___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Int2doubleMap___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Int2doubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _privacy_admis2019.Int2doubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _privacy_admis2019.Int2doubleMap___delitem__(self, key)

    def has_key(self, key):
        return _privacy_admis2019.Int2doubleMap_has_key(self, key)

    def keys(self):
        return _privacy_admis2019.Int2doubleMap_keys(self)

    def values(self):
        return _privacy_admis2019.Int2doubleMap_values(self)

    def items(self):
        return _privacy_admis2019.Int2doubleMap_items(self)

    def __contains__(self, key):
        return _privacy_admis2019.Int2doubleMap___contains__(self, key)

    def key_iterator(self):
        return _privacy_admis2019.Int2doubleMap_key_iterator(self)

    def value_iterator(self):
        return _privacy_admis2019.Int2doubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _privacy_admis2019.Int2doubleMap___setitem__(self, *args)

    def asdict(self):
        return _privacy_admis2019.Int2doubleMap_asdict(self)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Int2doubleMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _privacy_admis2019.Int2doubleMap_empty(self)

    def size(self):
        return _privacy_admis2019.Int2doubleMap_size(self)

    def swap(self, v):
        return _privacy_admis2019.Int2doubleMap_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Int2doubleMap_begin(self)

    def end(self):
        return _privacy_admis2019.Int2doubleMap_end(self)

    def rbegin(self):
        return _privacy_admis2019.Int2doubleMap_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Int2doubleMap_rend(self)

    def clear(self):
        return _privacy_admis2019.Int2doubleMap_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Int2doubleMap_get_allocator(self)

    def count(self, x):
        return _privacy_admis2019.Int2doubleMap_count(self, x)

    def erase(self, *args):
        return _privacy_admis2019.Int2doubleMap_erase(self, *args)

    def find(self, x):
        return _privacy_admis2019.Int2doubleMap_find(self, x)

    def lower_bound(self, x):
        return _privacy_admis2019.Int2doubleMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _privacy_admis2019.Int2doubleMap_upper_bound(self, x)
    __swig_destroy__ = _privacy_admis2019.delete_Int2doubleMap
    __del__ = lambda self: None
Int2doubleMap_swigregister = _privacy_admis2019.Int2doubleMap_swigregister
Int2doubleMap_swigregister(Int2doubleMap)

class Int2strMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2strMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2strMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Int2strMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Int2strMap___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Int2strMap___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Int2strMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _privacy_admis2019.Int2strMap___getitem__(self, key)

    def __delitem__(self, key):
        return _privacy_admis2019.Int2strMap___delitem__(self, key)

    def has_key(self, key):
        return _privacy_admis2019.Int2strMap_has_key(self, key)

    def keys(self):
        return _privacy_admis2019.Int2strMap_keys(self)

    def values(self):
        return _privacy_admis2019.Int2strMap_values(self)

    def items(self):
        return _privacy_admis2019.Int2strMap_items(self)

    def __contains__(self, key):
        return _privacy_admis2019.Int2strMap___contains__(self, key)

    def key_iterator(self):
        return _privacy_admis2019.Int2strMap_key_iterator(self)

    def value_iterator(self):
        return _privacy_admis2019.Int2strMap_value_iterator(self)

    def __setitem__(self, *args):
        return _privacy_admis2019.Int2strMap___setitem__(self, *args)

    def asdict(self):
        return _privacy_admis2019.Int2strMap_asdict(self)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Int2strMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _privacy_admis2019.Int2strMap_empty(self)

    def size(self):
        return _privacy_admis2019.Int2strMap_size(self)

    def swap(self, v):
        return _privacy_admis2019.Int2strMap_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Int2strMap_begin(self)

    def end(self):
        return _privacy_admis2019.Int2strMap_end(self)

    def rbegin(self):
        return _privacy_admis2019.Int2strMap_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Int2strMap_rend(self)

    def clear(self):
        return _privacy_admis2019.Int2strMap_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Int2strMap_get_allocator(self)

    def count(self, x):
        return _privacy_admis2019.Int2strMap_count(self, x)

    def erase(self, *args):
        return _privacy_admis2019.Int2strMap_erase(self, *args)

    def find(self, x):
        return _privacy_admis2019.Int2strMap_find(self, x)

    def lower_bound(self, x):
        return _privacy_admis2019.Int2strMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _privacy_admis2019.Int2strMap_upper_bound(self, x)
    __swig_destroy__ = _privacy_admis2019.delete_Int2strMap
    __del__ = lambda self: None
Int2strMap_swigregister = _privacy_admis2019.Int2strMap_swigregister
Int2strMap_swigregister(Int2strMap)

class Str2intMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Str2intMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Str2intMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Str2intMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Str2intMap___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Str2intMap___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Str2intMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _privacy_admis2019.Str2intMap___getitem__(self, key)

    def __delitem__(self, key):
        return _privacy_admis2019.Str2intMap___delitem__(self, key)

    def has_key(self, key):
        return _privacy_admis2019.Str2intMap_has_key(self, key)

    def keys(self):
        return _privacy_admis2019.Str2intMap_keys(self)

    def values(self):
        return _privacy_admis2019.Str2intMap_values(self)

    def items(self):
        return _privacy_admis2019.Str2intMap_items(self)

    def __contains__(self, key):
        return _privacy_admis2019.Str2intMap___contains__(self, key)

    def key_iterator(self):
        return _privacy_admis2019.Str2intMap_key_iterator(self)

    def value_iterator(self):
        return _privacy_admis2019.Str2intMap_value_iterator(self)

    def __setitem__(self, *args):
        return _privacy_admis2019.Str2intMap___setitem__(self, *args)

    def asdict(self):
        return _privacy_admis2019.Str2intMap_asdict(self)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Str2intMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _privacy_admis2019.Str2intMap_empty(self)

    def size(self):
        return _privacy_admis2019.Str2intMap_size(self)

    def swap(self, v):
        return _privacy_admis2019.Str2intMap_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Str2intMap_begin(self)

    def end(self):
        return _privacy_admis2019.Str2intMap_end(self)

    def rbegin(self):
        return _privacy_admis2019.Str2intMap_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Str2intMap_rend(self)

    def clear(self):
        return _privacy_admis2019.Str2intMap_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Str2intMap_get_allocator(self)

    def count(self, x):
        return _privacy_admis2019.Str2intMap_count(self, x)

    def erase(self, *args):
        return _privacy_admis2019.Str2intMap_erase(self, *args)

    def find(self, x):
        return _privacy_admis2019.Str2intMap_find(self, x)

    def lower_bound(self, x):
        return _privacy_admis2019.Str2intMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _privacy_admis2019.Str2intMap_upper_bound(self, x)
    __swig_destroy__ = _privacy_admis2019.delete_Str2intMap
    __del__ = lambda self: None
Str2intMap_swigregister = _privacy_admis2019.Str2intMap_swigregister
Str2intMap_swigregister(Str2intMap)

class Int2intMapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2intMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2intMapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Int2intMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Int2intMapVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Int2intMapVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Int2intMapVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.Int2intMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.Int2intMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.Int2intMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.Int2intMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.Int2intMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.Int2intMapVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.Int2intMapVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.Int2intMapVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.Int2intMapVector_empty(self)

    def size(self):
        return _privacy_admis2019.Int2intMapVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.Int2intMapVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Int2intMapVector_begin(self)

    def end(self):
        return _privacy_admis2019.Int2intMapVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.Int2intMapVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Int2intMapVector_rend(self)

    def clear(self):
        return _privacy_admis2019.Int2intMapVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Int2intMapVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.Int2intMapVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.Int2intMapVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Int2intMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.Int2intMapVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.Int2intMapVector_front(self)

    def back(self):
        return _privacy_admis2019.Int2intMapVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.Int2intMapVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.Int2intMapVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.Int2intMapVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.Int2intMapVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.Int2intMapVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_Int2intMapVector
    __del__ = lambda self: None
Int2intMapVector_swigregister = _privacy_admis2019.Int2intMapVector_swigregister
Int2intMapVector_swigregister(Int2intMapVector)

class Int2strMapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int2strMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int2strMapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Int2strMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Int2strMapVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Int2strMapVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Int2strMapVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.Int2strMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.Int2strMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.Int2strMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.Int2strMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.Int2strMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.Int2strMapVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.Int2strMapVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.Int2strMapVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.Int2strMapVector_empty(self)

    def size(self):
        return _privacy_admis2019.Int2strMapVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.Int2strMapVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Int2strMapVector_begin(self)

    def end(self):
        return _privacy_admis2019.Int2strMapVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.Int2strMapVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Int2strMapVector_rend(self)

    def clear(self):
        return _privacy_admis2019.Int2strMapVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Int2strMapVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.Int2strMapVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.Int2strMapVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Int2strMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.Int2strMapVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.Int2strMapVector_front(self)

    def back(self):
        return _privacy_admis2019.Int2strMapVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.Int2strMapVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.Int2strMapVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.Int2strMapVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.Int2strMapVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.Int2strMapVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_Int2strMapVector
    __del__ = lambda self: None
Int2strMapVector_swigregister = _privacy_admis2019.Int2strMapVector_swigregister
Int2strMapVector_swigregister(Int2strMapVector)

class Str2intMapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Str2intMapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Str2intMapVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _privacy_admis2019.Str2intMapVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _privacy_admis2019.Str2intMapVector___nonzero__(self)

    def __bool__(self):
        return _privacy_admis2019.Str2intMapVector___bool__(self)

    def __len__(self):
        return _privacy_admis2019.Str2intMapVector___len__(self)

    def __getslice__(self, i, j):
        return _privacy_admis2019.Str2intMapVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _privacy_admis2019.Str2intMapVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _privacy_admis2019.Str2intMapVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _privacy_admis2019.Str2intMapVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _privacy_admis2019.Str2intMapVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _privacy_admis2019.Str2intMapVector___setitem__(self, *args)

    def pop(self):
        return _privacy_admis2019.Str2intMapVector_pop(self)

    def append(self, x):
        return _privacy_admis2019.Str2intMapVector_append(self, x)

    def empty(self):
        return _privacy_admis2019.Str2intMapVector_empty(self)

    def size(self):
        return _privacy_admis2019.Str2intMapVector_size(self)

    def swap(self, v):
        return _privacy_admis2019.Str2intMapVector_swap(self, v)

    def begin(self):
        return _privacy_admis2019.Str2intMapVector_begin(self)

    def end(self):
        return _privacy_admis2019.Str2intMapVector_end(self)

    def rbegin(self):
        return _privacy_admis2019.Str2intMapVector_rbegin(self)

    def rend(self):
        return _privacy_admis2019.Str2intMapVector_rend(self)

    def clear(self):
        return _privacy_admis2019.Str2intMapVector_clear(self)

    def get_allocator(self):
        return _privacy_admis2019.Str2intMapVector_get_allocator(self)

    def pop_back(self):
        return _privacy_admis2019.Str2intMapVector_pop_back(self)

    def erase(self, *args):
        return _privacy_admis2019.Str2intMapVector_erase(self, *args)

    def __init__(self, *args):
        this = _privacy_admis2019.new_Str2intMapVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _privacy_admis2019.Str2intMapVector_push_back(self, x)

    def front(self):
        return _privacy_admis2019.Str2intMapVector_front(self)

    def back(self):
        return _privacy_admis2019.Str2intMapVector_back(self)

    def assign(self, n, x):
        return _privacy_admis2019.Str2intMapVector_assign(self, n, x)

    def resize(self, *args):
        return _privacy_admis2019.Str2intMapVector_resize(self, *args)

    def insert(self, *args):
        return _privacy_admis2019.Str2intMapVector_insert(self, *args)

    def reserve(self, n):
        return _privacy_admis2019.Str2intMapVector_reserve(self, n)

    def capacity(self):
        return _privacy_admis2019.Str2intMapVector_capacity(self)
    __swig_destroy__ = _privacy_admis2019.delete_Str2intMapVector
    __del__ = lambda self: None
Str2intMapVector_swigregister = _privacy_admis2019.Str2intMapVector_swigregister
Str2intMapVector_swigregister(Str2intMapVector)

INF = _privacy_admis2019.INF

def is_num(str):
    return _privacy_admis2019.is_num(str)
is_num = _privacy_admis2019.is_num

def str2int(str):
    return _privacy_admis2019.str2int(str)
str2int = _privacy_admis2019.str2int

def str_split(line):
    return _privacy_admis2019.str_split(line)
str_split = _privacy_admis2019.str_split

def has_true_flag(flag):
    return _privacy_admis2019.has_true_flag(flag)
has_true_flag = _privacy_admis2019.has_true_flag

def attr_value(val):
    return _privacy_admis2019.attr_value(val)
attr_value = _privacy_admis2019.attr_value

def merge_result(value1, value2):
    return _privacy_admis2019.merge_result(value1, value2)
merge_result = _privacy_admis2019.merge_result

def split_result(attr):
    return _privacy_admis2019.split_result(attr)
split_result = _privacy_admis2019.split_result

def result_join(*args):
    return _privacy_admis2019.result_join(*args)
result_join = _privacy_admis2019.result_join
class Reader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _privacy_admis2019.Reader_data_set
    __swig_getmethods__["data"] = _privacy_admis2019.Reader_data_get
    if _newclass:
        data = _swig_property(_privacy_admis2019.Reader_data_get, _privacy_admis2019.Reader_data_set)
    __swig_setmethods__["is_str"] = _privacy_admis2019.Reader_is_str_set
    __swig_getmethods__["is_str"] = _privacy_admis2019.Reader_is_str_get
    if _newclass:
        is_str = _swig_property(_privacy_admis2019.Reader_is_str_get, _privacy_admis2019.Reader_is_str_set)
    __swig_setmethods__["inv_dict"] = _privacy_admis2019.Reader_inv_dict_set
    __swig_getmethods__["inv_dict"] = _privacy_admis2019.Reader_inv_dict_get
    if _newclass:
        inv_dict = _swig_property(_privacy_admis2019.Reader_inv_dict_get, _privacy_admis2019.Reader_inv_dict_set)

    def __init__(self):
        this = _privacy_admis2019.new_Reader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_raw_data(self, filename):
        return _privacy_admis2019.Reader_get_raw_data(self, filename)

    def check_input(self, *args):
        return _privacy_admis2019.Reader_check_input(self, *args)

    def read_k_anonymity(self, filename, QID_NUM, QID_INDEX):
        return _privacy_admis2019.Reader_read_k_anonymity(self, filename, QID_NUM, QID_INDEX)

    def read_l_diversity(self, filename, QID_NUM, QID_INDEX, SA_INDEX):
        return _privacy_admis2019.Reader_read_l_diversity(self, filename, QID_NUM, QID_INDEX, SA_INDEX)

    def read_t_closeness(self, filename, QID_NUM, QID_INDEX, SA_INDEX):
        return _privacy_admis2019.Reader_read_t_closeness(self, filename, QID_NUM, QID_INDEX, SA_INDEX)

    def convert_to_rawdata(self, data, is_str, inv_dict):
        return _privacy_admis2019.Reader_convert_to_rawdata(self, data, is_str, inv_dict)

    def write_to_file(self, result, filename):
        return _privacy_admis2019.Reader_write_to_file(self, result, filename)
    __swig_destroy__ = _privacy_admis2019.delete_Reader
    __del__ = lambda self: None
Reader_swigregister = _privacy_admis2019.Reader_swigregister
Reader_swigregister(Reader)

class Tetrad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tetrad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tetrad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["split_value"] = _privacy_admis2019.Tetrad_split_value_set
    __swig_getmethods__["split_value"] = _privacy_admis2019.Tetrad_split_value_get
    if _newclass:
        split_value = _swig_property(_privacy_admis2019.Tetrad_split_value_get, _privacy_admis2019.Tetrad_split_value_set)
    __swig_setmethods__["next_value"] = _privacy_admis2019.Tetrad_next_value_set
    __swig_getmethods__["next_value"] = _privacy_admis2019.Tetrad_next_value_get
    if _newclass:
        next_value = _swig_property(_privacy_admis2019.Tetrad_next_value_get, _privacy_admis2019.Tetrad_next_value_set)
    __swig_setmethods__["low"] = _privacy_admis2019.Tetrad_low_set
    __swig_getmethods__["low"] = _privacy_admis2019.Tetrad_low_get
    if _newclass:
        low = _swig_property(_privacy_admis2019.Tetrad_low_get, _privacy_admis2019.Tetrad_low_set)
    __swig_setmethods__["high"] = _privacy_admis2019.Tetrad_high_set
    __swig_getmethods__["high"] = _privacy_admis2019.Tetrad_high_get
    if _newclass:
        high = _swig_property(_privacy_admis2019.Tetrad_high_get, _privacy_admis2019.Tetrad_high_set)

    def __init__(self, _sp_v, ne_v, _low, _high):
        this = _privacy_admis2019.new_Tetrad(_sp_v, ne_v, _low, _high)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _privacy_admis2019.delete_Tetrad
    __del__ = lambda self: None
Tetrad_swigregister = _privacy_admis2019.Tetrad_swigregister
Tetrad_swigregister(Tetrad)

class KDTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KDTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KDTree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _privacy_admis2019.KDTree_data_set
    __swig_getmethods__["data"] = _privacy_admis2019.KDTree_data_get
    if _newclass:
        data = _swig_property(_privacy_admis2019.KDTree_data_get, _privacy_admis2019.KDTree_data_set)
    __swig_setmethods__["low"] = _privacy_admis2019.KDTree_low_set
    __swig_getmethods__["low"] = _privacy_admis2019.KDTree_low_get
    if _newclass:
        low = _swig_property(_privacy_admis2019.KDTree_low_get, _privacy_admis2019.KDTree_low_set)
    __swig_setmethods__["high"] = _privacy_admis2019.KDTree_high_set
    __swig_getmethods__["high"] = _privacy_admis2019.KDTree_high_get
    if _newclass:
        high = _swig_property(_privacy_admis2019.KDTree_high_get, _privacy_admis2019.KDTree_high_set)
    __swig_setmethods__["flag"] = _privacy_admis2019.KDTree_flag_set
    __swig_getmethods__["flag"] = _privacy_admis2019.KDTree_flag_get
    if _newclass:
        flag = _swig_property(_privacy_admis2019.KDTree_flag_get, _privacy_admis2019.KDTree_flag_set)

    def __init__(self, *args):
        this = _privacy_admis2019.new_KDTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_len(self):
        return _privacy_admis2019.KDTree_get_len(self)

    def add_record(self, record):
        return _privacy_admis2019.KDTree_add_record(self, record)

    def add_records(self, records):
        return _privacy_admis2019.KDTree_add_records(self, records)
    __swig_destroy__ = _privacy_admis2019.delete_KDTree
    __del__ = lambda self: None
KDTree_swigregister = _privacy_admis2019.KDTree_swigregister
KDTree_swigregister(KDTree)

class Qid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Qid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Qid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _privacy_admis2019.Qid_len_set
    __swig_getmethods__["len"] = _privacy_admis2019.Qid_len_get
    if _newclass:
        len = _swig_property(_privacy_admis2019.Qid_len_get, _privacy_admis2019.Qid_len_set)
    __swig_setmethods__["val_list"] = _privacy_admis2019.Qid_val_list_set
    __swig_getmethods__["val_list"] = _privacy_admis2019.Qid_val_list_get
    if _newclass:
        val_list = _swig_property(_privacy_admis2019.Qid_val_list_get, _privacy_admis2019.Qid_val_list_set)
    __swig_setmethods__["val_dict"] = _privacy_admis2019.Qid_val_dict_set
    __swig_getmethods__["val_dict"] = _privacy_admis2019.Qid_val_dict_get
    if _newclass:
        val_dict = _swig_property(_privacy_admis2019.Qid_val_dict_get, _privacy_admis2019.Qid_val_dict_set)

    def __init__(self):
        this = _privacy_admis2019.new_Qid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_len(self):
        return _privacy_admis2019.Qid_get_len(self)

    def data2qid(self, data):
        return _privacy_admis2019.Qid_data2qid(self, data)
    __swig_destroy__ = _privacy_admis2019.delete_Qid
    __del__ = lambda self: None
Qid_swigregister = _privacy_admis2019.Qid_swigregister
Qid_swigregister(Qid)

class FieldLD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldLD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldLD, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _privacy_admis2019.FieldLD_len_set
    __swig_getmethods__["len"] = _privacy_admis2019.FieldLD_len_get
    if _newclass:
        len = _swig_property(_privacy_admis2019.FieldLD_len_get, _privacy_admis2019.FieldLD_len_set)
    __swig_setmethods__["qid_list"] = _privacy_admis2019.FieldLD_qid_list_set
    __swig_getmethods__["qid_list"] = _privacy_admis2019.FieldLD_qid_list_get
    if _newclass:
        qid_list = _swig_property(_privacy_admis2019.FieldLD_qid_list_get, _privacy_admis2019.FieldLD_qid_list_set)
    __swig_setmethods__["qid_dict"] = _privacy_admis2019.FieldLD_qid_dict_set
    __swig_getmethods__["qid_dict"] = _privacy_admis2019.FieldLD_qid_dict_get
    if _newclass:
        qid_dict = _swig_property(_privacy_admis2019.FieldLD_qid_dict_get, _privacy_admis2019.FieldLD_qid_dict_set)

    def __init__(self):
        this = _privacy_admis2019.new_FieldLD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_len(self):
        return _privacy_admis2019.FieldLD_get_len(self)

    def data2qid(self, data):
        return _privacy_admis2019.FieldLD_data2qid(self, data)
    __swig_destroy__ = _privacy_admis2019.delete_FieldLD
    __del__ = lambda self: None
FieldLD_swigregister = _privacy_admis2019.FieldLD_swigregister
FieldLD_swigregister(FieldLD)

class FieldTC(FieldLD):
    __swig_setmethods__ = {}
    for _s in [FieldLD]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldTC, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldLD]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldTC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sa_distribution"] = _privacy_admis2019.FieldTC_sa_distribution_set
    __swig_getmethods__["sa_distribution"] = _privacy_admis2019.FieldTC_sa_distribution_get
    if _newclass:
        sa_distribution = _swig_property(_privacy_admis2019.FieldTC_sa_distribution_get, _privacy_admis2019.FieldTC_sa_distribution_set)

    def __init__(self):
        this = _privacy_admis2019.new_FieldTC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def data2qid(self, data):
        return _privacy_admis2019.FieldTC_data2qid(self, data)
    __swig_destroy__ = _privacy_admis2019.delete_FieldTC
    __del__ = lambda self: None
FieldTC_swigregister = _privacy_admis2019.FieldTC_swigregister
FieldTC_swigregister(FieldTC)

class K_Anonymity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, K_Anonymity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, K_Anonymity, name)
    __repr__ = _swig_repr

    def get_result(self, data, k):
        return _privacy_admis2019.K_Anonymity_get_result(self, data, k)

    def __init__(self):
        this = _privacy_admis2019.new_K_Anonymity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _privacy_admis2019.delete_K_Anonymity
    __del__ = lambda self: None
K_Anonymity_swigregister = _privacy_admis2019.K_Anonymity_swigregister
K_Anonymity_swigregister(K_Anonymity)


def k_anonymity(infile, QID_NUM, QID_INDEX, k, outfile):
    return _privacy_admis2019.k_anonymity(infile, QID_NUM, QID_INDEX, k, outfile)
k_anonymity = _privacy_admis2019.k_anonymity
class L_Diversity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, L_Diversity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, L_Diversity, name)
    __repr__ = _swig_repr

    def get_result(self, data, l):
        return _privacy_admis2019.L_Diversity_get_result(self, data, l)

    def __init__(self):
        this = _privacy_admis2019.new_L_Diversity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _privacy_admis2019.delete_L_Diversity
    __del__ = lambda self: None
L_Diversity_swigregister = _privacy_admis2019.L_Diversity_swigregister
L_Diversity_swigregister(L_Diversity)


def l_diversity(infile, QID_NUM, QID_INDEX, SA_INDEX, l, outfile):
    return _privacy_admis2019.l_diversity(infile, QID_NUM, QID_INDEX, SA_INDEX, l, outfile)
l_diversity = _privacy_admis2019.l_diversity
class T_Closeness(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, T_Closeness, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, T_Closeness, name)
    __repr__ = _swig_repr

    def get_result(self, data, t):
        return _privacy_admis2019.T_Closeness_get_result(self, data, t)

    def __init__(self):
        this = _privacy_admis2019.new_T_Closeness()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _privacy_admis2019.delete_T_Closeness
    __del__ = lambda self: None
T_Closeness_swigregister = _privacy_admis2019.T_Closeness_swigregister
T_Closeness_swigregister(T_Closeness)


def t_closeness(infile, QID_NUM, QID_INDEX, SA_INDEX, t, outfile):
    return _privacy_admis2019.t_closeness(infile, QID_NUM, QID_INDEX, SA_INDEX, t, outfile)
t_closeness = _privacy_admis2019.t_closeness
# This file is compatible with both classic and new-style classes.


