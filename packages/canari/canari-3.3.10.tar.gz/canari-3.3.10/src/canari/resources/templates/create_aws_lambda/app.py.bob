from __future__ import print_function
from six import b

import sys
import os
import traceback
from hashlib import md5

if sys.version_info[0] > 2:
    from configparser import NoSectionError
else:
    # noinspection PyUnresolvedReferences
    from ConfigParser import NoSectionError

import chalice.app
from chalice import Chalice, Response

import canari
import canari.resource
from canari.config import load_config
from canari.maltego.entities import Phrase, Unknown
from canari.maltego.message import (MaltegoMessage, MaltegoTransformResponseMessage, MaltegoTransformExceptionMessage,
                                    MaltegoException)
from canari.maltego.transform import Transform
from canari.mode import set_canari_mode, CanariMode


def _matches_content_type(content_type, valid_content_types):
    if ';' in content_type:
        content_type = [c.lower() for c in content_type.split(';', 1)[0].strip()]
    else:
        content_type = content_type.lower()
    return content_type in valid_content_types


chalice.app._matches_content_type = _matches_content_type

app = Chalice('Canari Lambda: {{{ project.name }}}')
app.debug = bool(os.environ.get('CANARI_DEBUG'))

global_config = load_config(os.path.join('chalicelib', 'canari.conf'))

# Initialize Canari modes and bin path
set_canari_mode(CanariMode.RemotePlumeLambdaDebug if app.debug else CanariMode.RemotePlumeLambdaDispatch)

def get_base_url():
    return os.environ.get('CANARI_IMAGE_CDN') or global_config.get('canari.remote', 'cdn')


# Monkey patch our resource lib to automatically rewrite icon urls
canari.resource.icon_resource = lambda name, pkg=None: os.path.join(get_base_url(), md5(b(name)).hexdigest())

external_resource = canari.resource.external_resource
canari.resource.external_resource = lambda name, pkg=None: external_resource(name, '{{{ project.name }}}.resources.external')


class Version(Transform):
    input_type = Phrase

    def do_transform(self, r, res, config):
        if r.entity.value == 'version':
            res += Phrase('Canari v%s' % canari.__version__)
        return res


def croak(cause):
    """Throw an exception in the Maltego GUI containing cause.

    :param cause: a string containing the issue description.
    """
    return MaltegoMessage(
        message=MaltegoTransformExceptionMessage(
            exceptions=[
                MaltegoException(cause)
            ]
        )
    ).render(encoding='utf-8')


def message(msg):
    """Write a MaltegoMessage to stdout and exit successfully"""
    v = MaltegoMessage(message=msg).render(encoding='utf-8')
    return Response(v, status_code=200, headers={'Content-Type': 'text/xml'})


def do_transform(transform):
    try:
        # Let's get an XML object tree
        req = MaltegoMessage.parse(app.current_request.raw_body).message

        # If our transform define an input entity type then we should check
        # whether the request contains the right type
        if transform.input_type and transform.input_type is not Unknown and \
                not isinstance(req.entity, transform.input_type):
            return Response('Bad request', status_code=400)

        # Execute it!
        msg = transform().do_transform(
            req,
            MaltegoTransformResponseMessage(),
            global_config
        )

        # Let's serialize the return response and clean up whatever mess was left behind
        if isinstance(msg, MaltegoTransformResponseMessage):
            return message(msg)
        else:
            raise MaltegoException(str(msg))

    # Unless we croaked somewhere, then we need to fix things up here...
    except MaltegoException as me:
        return croak(str(me))
    except Exception:
        if app.debug:
            return croak(traceback.format_exc())
        else:
            return croak('Transform execution failed.')


@app.route('/canari.Version', methods=['POST'])
def post_canari_Version():
    if not app.current_request.headers.get('Content-Length', 0):
        return Response('Yes?', status_code=200)
    return do_transform(Version)


{{% for transform in package.transforms %}}
@app.route('/{{{ transform.name }}}', methods=['GET'])
def get_{{{ transform.name.replace('.', '_') }}}():
    return Response('Yes?', status_code=200)


@app.route('/{{{ transform.name }}}', methods=['POST'],
           content_types=['text/xml', 'application/xml', 'application/json'])
def post_{{{ transform.name.replace('.', '_') }}}():
    if not app.current_request.raw_body:
        return Response('Yes?', status_code=200)
    from {{{ transform.__module__ }}} import {{{ transform.__class__.__name__ }}}
    return do_transform({{{ transform.__class__.__name__ }}})


{{% endfor %}}
