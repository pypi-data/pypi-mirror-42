# coding: utf-8

"""
    Kinow API

    Public api for Kinow back office

    OpenAPI spec version: 1.0.71
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImagesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_actor_cover_image(self, to_id, **kwargs):
        """
        Get cover image of an actor
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_actor_cover_image(to_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int to_id: ID of the actor to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_actor_cover_image_with_http_info(to_id, **kwargs)
        else:
            (data) = self.get_actor_cover_image_with_http_info(to_id, **kwargs)
            return data

    def get_actor_cover_image_with_http_info(self, to_id, **kwargs):
        """
        Get cover image of an actor
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_actor_cover_image_with_http_info(to_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int to_id: ID of the actor to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actor_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_id' is set
        if ('to_id' not in params) or (params['to_id'] is None):
            raise ValueError("Missing the required parameter `to_id` when calling `get_actor_cover_image`")


        collection_formats = {}

        resource_path = '/actors/{actor_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'to_id' in params:
            path_params['to_id'] = params['to_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_category_banner(self, category_id, **kwargs):
        """
        Get banner of a category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_category_banner(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: ID of the category to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_category_banner_with_http_info(category_id, **kwargs)
        else:
            (data) = self.get_category_banner_with_http_info(category_id, **kwargs)
            return data

    def get_category_banner_with_http_info(self, category_id, **kwargs):
        """
        Get banner of a category
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_category_banner_with_http_info(category_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int category_id: ID of the category to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_category_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `get_category_banner`")


        collection_formats = {}

        resource_path = '/categories/{category_id}/banner'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_director_cover_image(self, director_id, **kwargs):
        """
        Get cover image of a director
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_director_cover_image(director_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int director_id: ID of the director to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_director_cover_image_with_http_info(director_id, **kwargs)
        else:
            (data) = self.get_director_cover_image_with_http_info(director_id, **kwargs)
            return data

    def get_director_cover_image_with_http_info(self, director_id, **kwargs):
        """
        Get cover image of a director
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_director_cover_image_with_http_info(director_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int director_id: ID of the director to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['director_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_director_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'director_id' is set
        if ('director_id' not in params) or (params['director_id'] is None):
            raise ValueError("Missing the required parameter `director_id` when calling `get_director_cover_image`")


        collection_formats = {}

        resource_path = '/directors/{director_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'director_id' in params:
            path_params['director_id'] = params['director_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_intro_image(self, **kwargs):
        """
        Get introduction image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_intro_image(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_intro_image_with_http_info(**kwargs)
        else:
            (data) = self.get_intro_image_with_http_info(**kwargs)
            return data

    def get_intro_image_with_http_info(self, **kwargs):
        """
        Get introduction image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_intro_image_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_intro_image" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/widgets/intro/images'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Image]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_manufacturer_cover_image(self, manufacturer_id, **kwargs):
        """
        Please, use __/directors/{actor_id}/cover__
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manufacturer_cover_image(manufacturer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manufacturer_id: ID of the manufacturer to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_manufacturer_cover_image_with_http_info(manufacturer_id, **kwargs)
        else:
            (data) = self.get_manufacturer_cover_image_with_http_info(manufacturer_id, **kwargs)
            return data

    def get_manufacturer_cover_image_with_http_info(self, manufacturer_id, **kwargs):
        """
        Please, use __/directors/{actor_id}/cover__
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manufacturer_cover_image_with_http_info(manufacturer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int manufacturer_id: ID of the manufacturer to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manufacturer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manufacturer_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manufacturer_id' is set
        if ('manufacturer_id' not in params) or (params['manufacturer_id'] is None):
            raise ValueError("Missing the required parameter `manufacturer_id` when calling `get_manufacturer_cover_image`")


        collection_formats = {}

        resource_path = '/manufacturers/{manufacturer_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'manufacturer_id' in params:
            path_params['manufacturer_id'] = params['manufacturer_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_product_cover_image(self, product_id, **kwargs):
        """
        Get cover image of a product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_cover_image(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_cover_image_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_cover_image_with_http_info(product_id, **kwargs)
            return data

    def get_product_cover_image_with_http_info(self, product_id, **kwargs):
        """
        Get cover image of a product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_cover_image_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_cover_image`")


        collection_formats = {}

        resource_path = '/products/{product_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_product_images(self, product_id, **kwargs):
        """
        Get images attached to product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_images(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :param str type: type as screen_small or screen_large
        :param int page:
        :param int per_page:
        :return: ProductImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_images_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_images_with_http_info(product_id, **kwargs)
            return data

    def get_product_images_with_http_info(self, product_id, **kwargs):
        """
        Get images attached to product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_images_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :param str type: type as screen_small or screen_large
        :param int page:
        :param int per_page:
        :return: ProductImagesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'type', 'page', 'per_page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_images`")


        collection_formats = {}

        resource_path = '/products/{product_id}/images'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'per_page' in params:
            query_params['per_page'] = params['per_page']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductImagesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_product_screenshots(self, product_id, **kwargs):
        """
        Get product screenshots
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_screenshots(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :return: list[Screenshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_screenshots_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_screenshots_with_http_info(product_id, **kwargs)
            return data

    def get_product_screenshots_with_http_info(self, product_id, **kwargs):
        """
        Get product screenshots
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_screenshots_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int product_id: ID of the product to fetch (required)
        :return: list[Screenshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_screenshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_screenshots`")


        collection_formats = {}

        resource_path = '/products/{product_id}/screenshots'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Screenshot]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_slider_images(self, **kwargs):
        """
        Get introduction image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_slider_images(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_slider_images_with_http_info(**kwargs)
        else:
            (data) = self.get_slider_images_with_http_info(**kwargs)
            return data

    def get_slider_images_with_http_info(self, **kwargs):
        """
        Get introduction image
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_slider_images_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[Image]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_slider_images" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        resource_path = '/widgets/slider/images'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Image]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_subscription_cover_image(self, subscription_id, **kwargs):
        """
        Get cover image of a subscription
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_cover_image(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int subscription_id: ID of the subscription to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subscription_cover_image_with_http_info(subscription_id, **kwargs)
        else:
            (data) = self.get_subscription_cover_image_with_http_info(subscription_id, **kwargs)
            return data

    def get_subscription_cover_image_with_http_info(self, subscription_id, **kwargs):
        """
        Get cover image of a subscription
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subscription_cover_image_with_http_info(subscription_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int subscription_id: ID of the subscription to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscription_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_subscription_cover_image`")


        collection_formats = {}

        resource_path = '/subscriptions/{subscription_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_supplier_cover_image(self, supplier_id, **kwargs):
        """
        Please, use __/actors/{actor_id}/cover__
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_supplier_cover_image(supplier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int supplier_id: ID of the supplier to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_supplier_cover_image_with_http_info(supplier_id, **kwargs)
        else:
            (data) = self.get_supplier_cover_image_with_http_info(supplier_id, **kwargs)
            return data

    def get_supplier_cover_image_with_http_info(self, supplier_id, **kwargs):
        """
        Please, use __/actors/{actor_id}/cover__
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_supplier_cover_image_with_http_info(supplier_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int supplier_id: ID of the supplier to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_supplier_cover_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params) or (params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `get_supplier_cover_image`")


        collection_formats = {}

        resource_path = '/suppliers/{supplier_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'supplier_id' in params:
            path_params['supplier_id'] = params['supplier_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_video_cover(self, video, **kwargs):
        """
        Get video cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_video_cover(video, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int video: ID of the video to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_video_cover_with_http_info(video, **kwargs)
        else:
            (data) = self.get_video_cover_with_http_info(video, **kwargs)
            return data

    def get_video_cover_with_http_info(self, video, **kwargs):
        """
        Get video cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_video_cover_with_http_info(video, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int video: ID of the video to fetch (required)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['video']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'video' is set
        if ('video' not in params) or (params['video'] is None):
            raise ValueError("Missing the required parameter `video` when calling `get_video_cover`")


        collection_formats = {}

        resource_path = '/videos/{video_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'video' in params:
            path_params['video'] = params['video']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_actor_cover(self, actor_id, file, hash, **kwargs):
        """
        Upload actor cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_actor_cover(actor_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float actor_id: Id of the actor (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_actor_cover_with_http_info(actor_id, file, hash, **kwargs)
        else:
            (data) = self.upload_actor_cover_with_http_info(actor_id, file, hash, **kwargs)
            return data

    def upload_actor_cover_with_http_info(self, actor_id, file, hash, **kwargs):
        """
        Upload actor cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_actor_cover_with_http_info(actor_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float actor_id: Id of the actor (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['actor_id', 'file', 'hash', 'hash_algorithm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_actor_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'actor_id' is set
        if ('actor_id' not in params) or (params['actor_id'] is None):
            raise ValueError("Missing the required parameter `actor_id` when calling `upload_actor_cover`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_actor_cover`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_actor_cover`")


        collection_formats = {}

        resource_path = '/actors/{actor_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'actor_id' in params:
            path_params['actor_id'] = params['actor_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_category_banner(self, category_id, file, hash, **kwargs):
        """
        Upload category banner
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_category_banner(category_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float category_id: Id of the category (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_category_banner_with_http_info(category_id, file, hash, **kwargs)
        else:
            (data) = self.upload_category_banner_with_http_info(category_id, file, hash, **kwargs)
            return data

    def upload_category_banner_with_http_info(self, category_id, file, hash, **kwargs):
        """
        Upload category banner
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_category_banner_with_http_info(category_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float category_id: Id of the category (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'file', 'hash', 'hash_algorithm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_category_banner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params) or (params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `upload_category_banner`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_category_banner`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_category_banner`")


        collection_formats = {}

        resource_path = '/category/{category_id}/banner'.replace('{format}', 'json')
        path_params = {}
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_director_cover(self, director_id, file, hash, **kwargs):
        """
        Upload director cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_director_cover(director_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float director_id: Id of the director (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_director_cover_with_http_info(director_id, file, hash, **kwargs)
        else:
            (data) = self.upload_director_cover_with_http_info(director_id, file, hash, **kwargs)
            return data

    def upload_director_cover_with_http_info(self, director_id, file, hash, **kwargs):
        """
        Upload director cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_director_cover_with_http_info(director_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float director_id: Id of the director (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['director_id', 'file', 'hash', 'hash_algorithm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_director_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'director_id' is set
        if ('director_id' not in params) or (params['director_id'] is None):
            raise ValueError("Missing the required parameter `director_id` when calling `upload_director_cover`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_director_cover`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_director_cover`")


        collection_formats = {}

        resource_path = '/directors/{director_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'director_id' in params:
            path_params['director_id'] = params['director_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_product_cover(self, product_id, file, hash, **kwargs):
        """
        Upload product cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_cover(product_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_product_cover_with_http_info(product_id, file, hash, **kwargs)
        else:
            (data) = self.upload_product_cover_with_http_info(product_id, file, hash, **kwargs)
            return data

    def upload_product_cover_with_http_info(self, product_id, file, hash, **kwargs):
        """
        Upload product cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_cover_with_http_info(product_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'file', 'hash', 'hash_algorithm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_product_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upload_product_cover`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_product_cover`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_product_cover`")


        collection_formats = {}

        resource_path = '/products/{product_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_product_screenshot(self, product_id, image_id, **kwargs):
        """
        Upload product screenshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshot(product_id, image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param float image_id: Id of the product (required)
        :param float position:
        :return: Screenshot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_product_screenshot_with_http_info(product_id, image_id, **kwargs)
        else:
            (data) = self.upload_product_screenshot_with_http_info(product_id, image_id, **kwargs)
            return data

    def upload_product_screenshot_with_http_info(self, product_id, image_id, **kwargs):
        """
        Upload product screenshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshot_with_http_info(product_id, image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param float image_id: Id of the product (required)
        :param float position:
        :return: Screenshot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'image_id', 'position']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_product_screenshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upload_product_screenshot`")
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `upload_product_screenshot`")


        collection_formats = {}

        resource_path = '/products/{product_id}/screenshots/{image_id}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'position' in params:
            form_params.append(('position', params['position']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Screenshot',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_product_screenshot_0(self, product_id, image_id, **kwargs):
        """
        Upload product screenshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshot_0(product_id, image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param float image_id: Id of the image to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_product_screenshot_0_with_http_info(product_id, image_id, **kwargs)
        else:
            (data) = self.upload_product_screenshot_0_with_http_info(product_id, image_id, **kwargs)
            return data

    def upload_product_screenshot_0_with_http_info(self, product_id, image_id, **kwargs):
        """
        Upload product screenshot
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshot_0_with_http_info(product_id, image_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param float image_id: Id of the image to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'image_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_product_screenshot_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upload_product_screenshot_0`")
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `upload_product_screenshot_0`")


        collection_formats = {}

        resource_path = '/products/{product_id}/screenshots/{image_id}'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']
        if 'image_id' in params:
            path_params['image_id'] = params['image_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_product_screenshots(self, product_id, file, hash, **kwargs):
        """
        Upload product screenshots
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshots(product_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :param float position:
        :return: list[Screenshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_product_screenshots_with_http_info(product_id, file, hash, **kwargs)
        else:
            (data) = self.upload_product_screenshots_with_http_info(product_id, file, hash, **kwargs)
            return data

    def upload_product_screenshots_with_http_info(self, product_id, file, hash, **kwargs):
        """
        Upload product screenshots
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_product_screenshots_with_http_info(product_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float product_id: Id of the product (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :param float position:
        :return: list[Screenshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'file', 'hash', 'hash_algorithm', 'position']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_product_screenshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upload_product_screenshots`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_product_screenshots`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_product_screenshots`")


        collection_formats = {}

        resource_path = '/products/{product_id}/screenshots'.replace('{format}', 'json')
        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'position' in params:
            form_params.append(('position', params['position']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Screenshot]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_subscription_cover(self, subscription_id, file, hash, **kwargs):
        """
        Upload subscription cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_subscription_cover(subscription_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float subscription_id: Id of the subscription (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_subscription_cover_with_http_info(subscription_id, file, hash, **kwargs)
        else:
            (data) = self.upload_subscription_cover_with_http_info(subscription_id, file, hash, **kwargs)
            return data

    def upload_subscription_cover_with_http_info(self, subscription_id, file, hash, **kwargs):
        """
        Upload subscription cover
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_subscription_cover_with_http_info(subscription_id, file, hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float subscription_id: Id of the subscription (required)
        :param file file: (required)
        :param str hash: (required)
        :param str hash_algorithm: Hash algorithm to check the hash file (default value is: sha256)
        :return: Image
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_id', 'file', 'hash', 'hash_algorithm']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_subscription_cover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_id' is set
        if ('subscription_id' not in params) or (params['subscription_id'] is None):
            raise ValueError("Missing the required parameter `subscription_id` when calling `upload_subscription_cover`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_subscription_cover`")
        # verify the required parameter 'hash' is set
        if ('hash' not in params) or (params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `upload_subscription_cover`")


        collection_formats = {}

        resource_path = '/subscriptions/{subscription_id}/cover'.replace('{format}', 'json')
        path_params = {}
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash' in params:
            form_params.append(('hash', params['hash']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')
        if 'hash_algorithm' in params:
            form_params.append(('hash-algorithm', params['hash_algorithm']))

        self.api_client.set_default_header('Content-Type', 'application/x-www-form-urlencoded')

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Image',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
