# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,CMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=CMatrix(5)
c2=CMatrix([7,3],ranged=[-10,10])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nf.lowtri@f.uptri==f.roundForm(4)")
print(f.lowtri@f.uptri==f.roundForm(4))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.variance()")
print(validStr4.variance())
print("")
# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Features: []

1 


Dimension: 2x4
Features: []

-10  43 -45   3 
 44  23 -48  35 


Float Matrix
Dimension: 4x3
Features: []

0.4369 0.2416 0.0506 
0.8098 0.0899 0.2102 
0.3784 0.2443 0.6516 
0.3006 0.5282 0.7213 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

 281.8975 1120.0630  555.2146 1036.8902  915.1891 -553.7680 
 995.3754 -473.8561 -534.2659  700.3995   14.2858  -92.1732 
 268.9226  389.3538 -855.0380  -55.0578  975.5320 1188.8331 
-173.5500 -203.2311  140.3959 1050.4165  291.0184 1175.7005 
 698.3150 -105.1292 -719.6466 -438.8449 -806.8100  504.5165 
 599.8046 -395.2503 1093.0004   13.8976 -578.5618 -213.9866 


Dimension: 3x6
Features: []

 4 10  5  3  2  2 
 9  6  1  8  4  1 
10  4  5  1  7  4 


Square matrix
Dimension: 5x5
Features: []

 95  93  79  23  54 
 39   2  68   2  73 
 87  30  12  87  52 
 68  46 100  15   7 
 13  94   0  66  80 


Float Matrix
Square matrix
Dimension: 4x4
Features: []

0.2402 0.1507 0.1395 0.0303 
0.9046 0.0326 0.5915 0.9670 
0.4625 0.1067 0.5257 0.3513 
0.3919 0.4313 0.1686 0.5309 


Dimension: 1x9
Features: []

3 5 7 8 3 4 5 2 5 


Complex Matrix
Square matrix
Dimension: 5x5

 0.0317+0.1592j   0.8307+0.4877j   0.1073+0.9269j   0.4403+0.4005j   0.1789+0.2865j  
  0.6875+0.696j   0.4513+0.9257j    0.646+0.9664j   0.2451+0.8602j   0.4786+0.0863j  
 0.5899+0.6099j   0.6059+0.0057j   0.2318+0.0177j    0.5174+0.723j   0.4082+0.7016j  
 0.1572+0.9783j   0.2574+0.8196j    0.1297+0.398j   0.6613+0.7222j   0.2642+0.7015j  
 0.1101+0.5229j   0.6909+0.8934j   0.8286+0.1919j    0.219+0.7283j   0.9533+0.2549j  


Complex Matrix
Dimension: 7x3

  -4.3141-4.684j    5.1954-5.3857j    3.0164+0.6836j  
   5.702-6.2123j    8.5544+8.8362j   -3.3281+2.3475j  
 -6.9813+7.4515j   -5.6489-1.6946j    7.2359+6.7061j  
  6.4522-9.0178j   -0.9786+8.0023j   -3.4778-6.1762j  
   6.355+2.1939j   -9.8935+9.8229j     8.1642-3.647j  
  5.3799-2.9802j    4.1436+9.4878j   -8.7587+9.2651j  
  2.4712+8.8918j   -2.0807+3.6928j    9.3305+3.8656j  

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 


Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Features: []

0.4369 0.2416 0.0506 
0.8098 0.0899 0.2102 
0.3784 0.2443 0.6516 
0.3006 0.5282 0.7213 

d.matrix:

[[0.43689377809525687, 0.2416003504711548, 0.050626858794091345], [0.8097604604039131, 0.08992425928643677, 0.2102384997383835], [0.3783820004915779, 0.24429365845272644, 0.651590513791837], [0.3006230006180066, 0.5282451480536423, 0.7212594360509768]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Features: []

1120.0630  555.2146 
-473.8561 -534.2659 
 389.3538 -855.0380 
-203.2311  140.3959 
 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

 281.8975 1120.0630  555.2146 1036.8902  915.1891 -553.7680 
 995.3754 -473.8561 -534.2659  700.3995   14.2858  -92.1732 
 268.9226  389.3538 -855.0380  -55.0578  975.5320 1188.8331 
-173.5500 -203.2311  140.3959 1050.4165  291.0184 1175.7005 
 698.3150 -105.1292 -719.6466 -438.8449 -806.8100  504.5165 
 599.8046 -395.2503 1093.0004   13.8976 -578.5618 -213.9866 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 281.8975 1120.0630  555.2146 1036.8902  915.1891 -553.7680 
 995.3754 -473.8561 -534.2659  700.3995   14.2858  -92.1732 
 268.9226  389.3538 -855.0380  -55.0578  975.5320 1188.8331 
-173.5500 -203.2311  140.3959 1050.4165  291.0184 1175.7005 
 698.3150 -105.1292 -719.6466 -438.8449 -806.8100  504.5165 
 599.8046 -395.2503 1093.0004   13.8976 -578.5618 -213.9866 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

  281.8975  1120.0630   555.2146  1036.8902   915.1891  -553.7680 
    0.0000 -4428.7802 -2494.7195 -2960.8425 -3217.2318  1863.1725 
    0.0000     0.0000 -1002.1310  -590.1760   595.8308  1431.3942 
    0.0000     0.0000     0.0000  1240.9900   624.9872  1336.8446 
    0.0000     0.0000     0.0000     0.0000  -858.3499   855.1645 
    0.0000     0.0000     0.0000     0.0000     0.0000  4175.7678 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 3.5310  1.0000  0.0000  0.0000  0.0000  0.0000 
 0.9540  0.1534  1.0000  0.0000  0.0000  0.0000 
-0.6156 -0.1098 -0.2078  1.0000  0.0000  0.0000 
 2.4772  0.6502  0.4719 -0.6476  1.0000  0.0000 
 2.1277  0.6274 -1.4736 -0.9706 -1.1384  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-0.0000 0.0000 -0.0000 -0.0000 -0.0000 -0.0000 
-0.0000 0.0000 -0.0000 0.0000 0.0000 0.0000 
-0.0000 -0.0000 -0.0000 -0.0000 0.0000 -0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 -0.0000 0.0000 -0.0000 -0.0000 0.0000 
0.0000 -0.0000 -0.0000 -0.0000 0.0000 -0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [4, 10], 'Col 2': [4, 10], 'Col 3': [1, 5], 'Col 4': [1, 8], 'Col 5': [2, 7], 'Col 6': [1, 4]}
g: 
Dimension: 3x6
Features: []

 4 10  5  3  2  2 
 9  6  1  8  4  1 
10  4  5  1  7  4 

g.remove(3):

Dimension: 2x6
Features: []

 4 10  5  3  2  2 
 9  6  1  8  4  1 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Features: []

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 1': 57.142857142857146, 'Col 2': 50.285714285714285, 'Col 3': 49.714285714285715, 'Col 4': 44.285714285714285, 'Col 5': 22.285714285714285, 'Col 6': 67.71428571428571, 'Col 7': 69.28571428571429}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Features: []

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Features: []

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Features: []

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Features: []

 4 10  5  3 
 9  6  1  8 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[4, 10, 5, 3], [9, 6, 1, 8]],ranged=[0, 1],randomFill=1,features=[],header=None,directory='')

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Features: []

 95  93  79  23  54 
 39   2  68   2  73 
 87  30  12  87  52 
 68  46 100  15   7 
 13  94   0  66  80 

p.det:
 3794662946.0000005

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Features: []

 56034856.0000  -8321122.0000  25102306.0000 -41621450.0000 -42905126.0000 
 30086396.0000 -27759581.0000 -21464273.0000  -2316025.0000  19176730.0000 
-42652102.0000  16913101.0000 -11378297.0000  61506277.0000  15371058.0000 
-66984712.0000  -9357280.0000  29294274.0000  55765560.0000  29832434.0000 
 10805208.0000  41689446.0000  -3026380.0000 -36521772.0000   7260954.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Features: []

 0.0148 -0.0022  0.0066 -0.0110 -0.0113 
 0.0079 -0.0073 -0.0057 -0.0006  0.0051 
-0.0112  0.0045 -0.0030  0.0162  0.0041 
-0.0177 -0.0025  0.0077  0.0147  0.0079 
 0.0028  0.0110 -0.0008 -0.0096  0.0019 

################
p:

Square matrix
Dimension: 5x5
Features: []

 95  93  79  23  54 
 39   2  68   2  73 
 87  30  12  87  52 
 68  46 100  15   7 
 13  94   0  66  80 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Features: []

 93  79  23  54 
 30  12  87  52 
 46 100  15   7 
 94   0  66  80 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Features: []

 93  55  79  23  54 
 30  55  12  87  52 
 46  55 100  15   7 
 94  55   0  66  80 

p.sdev()
{'Col 1': 32.70448491160399, 'Col 2': 0.0, 'Col 3': 49.20958578705305, 'Col 4': 34.44198019858905, 'Col 5': 30.313638294778585}
################

r: 
Dimension: 5x4
Features: []

 93  30  46  94 
 55  55  55  55 
 79  12 100   0 
 23  87  15  66 
 54  52   7  80 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Features: []

 14.3254  -7.9577 -18.6238 
 30.2073  19.4612   1.0308 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Features: []

0.3488 0.7622 0.0083 
0.1390 0.3164 1.3010 

################

f:
 
Float Matrix
Square matrix
Dimension: 6x6
Features: []

 281.8975 1120.0630  555.2146 1036.8902  915.1891 -553.7680 
 995.3754 -473.8561 -534.2659  700.3995   14.2858  -92.1732 
 268.9226  389.3538 -855.0380  -55.0578  975.5320 1188.8331 
-173.5500 -203.2311  140.3959 1050.4165  291.0184 1175.7005 
 698.3150 -105.1292 -719.6466 -438.8449 -806.8100  504.5165 
 599.8046 -395.2503 1093.0004   13.8976 -578.5618 -213.9866 

f1=f.intForm

Square matrix
Dimension: 6x6
Features: []

 281 1120  555 1036  915 -553 
 995 -473 -534  700   14  -92 
 268  389 -855  -55  975 1188 
-173 -203  140 1050  291 1175 
 698 -105 -719 -438 -806  504 
 599 -395 1093   13 -578 -213 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 281.9000 1120.0600  555.2100 1036.8900  915.1900 -553.7700 
 995.3800 -473.8600 -534.2700  700.4000   14.2900  -92.1700 
 268.9200  389.3500 -855.0400  -55.0600  975.5300 1188.8300 
-173.5500 -203.2300  140.4000 1050.4200  291.0200 1175.7000 
 698.3200 -105.1300 -719.6500 -438.8400 -806.8100  504.5200 
 599.8000 -395.2500 1093.0000   13.9000 -578.5600 -213.9900 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 0.9000  0.0600  0.2100  0.8900  0.1900 -0.7700 
 0.3800 -0.8600 -0.2700  0.4000  0.2900 -0.1700 
 0.9200  0.3500 -0.0400 -0.0600  0.5300  0.8300 
-0.5500 -0.2300  0.4000  0.4200  0.0200  0.7000 
 0.3200 -0.1300 -0.6500 -0.8400 -0.8100  0.5200 
 0.8000 -0.2500  0.0000  0.9000 -0.5600 -0.9900 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Features: []

 93  30  46  94 
 79  12 100   0 
 23  87  15  66 
 54  52   7  80 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Features: []

 79  12 100   0 
 79  12 100   0 
 23  87  15  66 
 54  52   7  80 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Features: []

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Features: []

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Features: []

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Features: []

2 3 0 0 
8 5 0 3 


f.lowtri@f.uptri==f.roundForm(4)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 21.077059193407987, 'Weight': 22.286650829472002, 'Age': 12.98858973112413}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {'90': 3}, 'Age': {'10, 27': 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.variance()
{'Height': 444.24242424242414, 'Weight': 496.6948051948051, 'Age': 168.70346320346317}
"""
# =============================================================================

