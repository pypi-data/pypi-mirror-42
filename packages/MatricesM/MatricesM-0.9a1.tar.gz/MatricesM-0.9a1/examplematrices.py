# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from matrices import Matrix,FMatrix,Identity

# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,randomFill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=FMatrix([4,3])
e=Matrix(8,randomFill=0)
f=FMatrix(dim=6,ranged=[-1250,1250])
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=FMatrix(4)
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid)
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"])

# =============================================================================
# InvalidMatrices
# =============================================================================
#You have to give the matrix a valid dimension, or a list to get a dimension, or it won't be a valid matrix

#a=Matrix(0)
#v=Matrix()
#k=Matrix(dim=-1)
#l=Matrix(ranged=[0])
#m=Matrix(randomFill=1)

# =============================================================================
# Identity Matrices
# =============================================================================
id1=Identity()
id2=Identity(5)
id3=id2.subM(3,3)
id4=Identity(6)

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,y]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving strings or a directory")
for matrix in [validStr1,validStr2,validStr3,validStr4]:
    print(matrix)
print('################################') 
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f.subM(1,4,2,3):\n",f.subM(1,4,2,3),"\n")
print(f)
print("f.delDim(4)")
print(f)
print("f.uptri.p")
f.uptri.p
print("f.lowtri.p")
f.lowtri.p
print("f-(f.lowtri@f.uptri)")
print(f-(f.lowtri@f.uptri))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
      
h=proj.subM(12,18,5,11)
print("h=proj.subM(12,18,5,11):\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4):\n",h.minor(3,4),"\n")

print('################')
      
j=g.subM(1,2,1,4)
print("j=g.sub(1,2,1,4):\n",j,"\n")
print("j.summary:\n",j.summary)

print('\n################')
      
print("proj=proj.subM(5,15).copy:\n")
proj=proj.subM(5,15).copy
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(c=1) and p.remove(r=2)")
p.remove(c=1)
p.remove(r=2)
print(p)
print("p.add(col=2,lis=[55,55,55,55,55]):")
p.add(col=2,lis=[55,55,55,55])
print(p)
print("p.sdev()")
print(p.sdev())
print('################\n')
      
r=p.t
print("r:",r)
print("p==r.t:\n")
print(p==r.t)

print("################")
      
print("id2:\n",id2)
print("\nid2.addDim(2):",id2.addDim(2))
print("id2.matrix:\n",id2.matrix)

print('\n################')
      
print("id3:\n")
print(id3)

print('################')
      
print("id4:\n")
print(id4)
print("\nid4.delDim(6):\n")
print(id4.delDim(6))

print('################')
      
print("id4:",id4)
print("\nid4.addDim(10)):\n",id4.addDim(10))

# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("r.remove(r=2):")
r.remove(r=2)
print(r)
print("r.rank:",r.rank)
print("\nr[0]=r[1][:]")
r[0]=r[1][:]
print(r)
print("r.rank:",r.rank)    

print("################")
      
print("for i in range(len(e.matrix)): e[i][-i-1]=99")
for i in range(len(e.matrix)):e[i][i]=99
print(e)
print("\ne+=50:")
e+=50
print(e)
print("for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:\n")
for i in range(len(e.matrix)):e[i]=[b%2 for b in e[i]]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nf.lowtri@f.uptri==f.roundForm(4)")
print(f.lowtri@f.uptri==f.roundForm(4))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.variance()")
print(validStr4.variance())
print("")
# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
Matrices created by giving dimensions

Square matrix
Dimension: 20x20
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Square matrix
Dimension: 1x1
Features: []

-3 


Dimension: 2x4
Features: []

 35  49   2 -47 
 37 -21  42 -16 


Float Matrix
Dimension: 4x3
Features: []

-1.6574 -2.1288  4.5368 
 0.6709 -1.5039 -2.8956 
 4.5974  4.2867 -0.7913 
 3.5456 -3.7983  4.3668 


Square matrix
Dimension: 8x8
Features: []

0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1077.2052  -293.1781   732.6501  1183.9218   723.2525   142.8208 
 -192.9320   712.5217   -54.9501   330.6815   788.9160  -773.9385 
-1013.2219   -82.3428 -1119.5485   230.4561  -992.4944   933.4600 
   91.7243   711.6352  -698.1606  -409.7386   -73.9579  1249.2687 
 -845.4116  -884.5838    61.6160  -990.0191     4.4113  -774.1811 
 -846.7889   433.2280  -419.2507   156.2518  -476.5987   204.2982 


Dimension: 3x6
Features: []

 8  7  5  3  3 10 
 3  3  5  9  4 10 
 2  4  7  8  4  5 


Square matrix
Dimension: 5x5
Features: []

11 82 20 39 96 
15 41 48 14 93 
29 10 50 40 54 
75  9 19 23 99 
27 22 70 79 48 


Float Matrix
Square matrix
Dimension: 4x4
Features: []

-2.2990 -1.1920  1.5288  0.7454 
-3.1481 -4.7203  3.6034 -1.0219 
 3.8709 -4.5487  4.9821 -1.7122 
 2.0757  2.2174 -1.3517 -2.0906 


Dimension: 1x9
Features: []

3 5 7 8 3 4 5 2 5 

################################
################################
Matrices created by giving strings or a directory

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 


Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################################
################################
Identity matrices

Identity Matrix
Dimension: 1x1

 1 


Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 

################################
################################
Attribute call outputs

################

d:

Float Matrix
Dimension: 4x3
Features: []

-1.6574 -2.1288  4.5368 
 0.6709 -1.5039 -2.8956 
 4.5974  4.2867 -0.7913 
 3.5456 -3.7983  4.3668 

d.matrix:

[[-1.657388239833585, -2.128788811976623, 4.536751471445333], [0.670948037089552, -1.5039064122166081, -2.8956323245348115], [4.5974246073560625, 4.286740287264198, -0.7912796987947681], [3.545616601988961, -3.7983188711389584, 4.366773763236637]]

################

f.subM(1,4,2,3):
 
Float Matrix
Dimension: 4x2
Features: []

 -293.1781   732.6501 
  712.5217   -54.9501 
  -82.3428 -1119.5485 
  711.6352  -698.1606 
 


Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1077.2052  -293.1781   732.6501  1183.9218   723.2525   142.8208 
 -192.9320   712.5217   -54.9501   330.6815   788.9160  -773.9385 
-1013.2219   -82.3428 -1119.5485   230.4561  -992.4944   933.4600 
   91.7243   711.6352  -698.1606  -409.7386   -73.9579  1249.2687 
 -845.4116  -884.5838    61.6160  -990.0191     4.4113  -774.1811 
 -846.7889   433.2280  -419.2507   156.2518  -476.5987   204.2982 

f.delDim(4)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1077.2052  -293.1781   732.6501  1183.9218   723.2525   142.8208 
 -192.9320   712.5217   -54.9501   330.6815   788.9160  -773.9385 
-1013.2219   -82.3428 -1119.5485   230.4561  -992.4944   933.4600 
   91.7243   711.6352  -698.1606  -409.7386   -73.9579  1249.2687 
 -845.4116  -884.5838    61.6160  -990.0191     4.4113  -774.1811 
 -846.7889   433.2280  -419.2507   156.2518  -476.5987   204.2982 

f.uptri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 -1077.2052   -293.1781    732.6501   1183.9218    723.2525    142.8208 
     0.0000    765.0311   -186.1709    118.6360    659.3784   -799.5184 
     0.0000      0.0000  -1761.6118   -913.1381  -1839.4968   1001.2630 
     0.0000      0.0000      0.0000   -172.4732   -114.8183   1712.6717 
     0.0000      0.0000      0.0000      0.0000   1681.2351 -16540.0345 
     0.0000      0.0000      0.0000      0.0000      0.0000  -8538.8934 

f.lowtri.p

Float Matrix
Square matrix
Dimension: 6x6
Features: []

 1.0000  0.0000  0.0000  0.0000  0.0000  0.0000 
 0.1791  1.0000  0.0000  0.0000  0.0000  0.0000 
 0.9406  0.2528  1.0000  0.0000  0.0000  0.0000 
-0.0852  0.8976  0.2660  1.0000  0.0000  0.0000 
 0.7848 -0.8555  0.3818  8.5174  1.0000  0.0000 
 0.7861  0.8675  0.4732  2.5813 -0.2678  1.0000 

f-(f.lowtri@f.uptri)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

0.0000 0.0000 0.0000 -0.0000 -0.0000 0.0000 
-0.0000 -0.0000 -0.0000 -0.0000 -0.0000 -0.0000 
0.0000 0.0000 0.0000 0.0000 -0.0000 0.0000 
-0.0000 -0.0000 0.0000 -0.0000 0.0000 -0.0000 
-0.0000 0.0000 -0.0000 0.0000 0.0000 0.0000 
0.0000 -0.0000 0.0000 0.0000 0.0000 -0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [2, 8], 'Col 2': [3, 7], 'Col 3': [5, 7], 'Col 4': [3, 9], 'Col 5': [3, 4], 'Col 6': [5, 10]}
g: 
Dimension: 3x6
Features: []

 8  7  5  3  3 10 
 3  3  5  9  4 10 
 2  4  7  8  4  5 

g.remove(3):

Dimension: 2x6
Features: []

 8  7  5  3  3 10 
 3  3  5  9  4 10 

################
h=proj.subM(12,18,5,11):
 
Square matrix
Dimension: 7x7
Features: []

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 1': 57.142857142857146, 'Col 2': 50.285714285714285, 'Col 3': 49.714285714285715, 'Col 4': 44.285714285714285, 'Col 5': 22.285714285714285, 'Col 6': 67.71428571428571, 'Col 7': 69.28571428571429}

h.det: 1287494735579.9985

h.rank: 7

h.rrechelon: 
Float Matrix
Square matrix
Dimension: 7x7
Features: []

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Float Matrix
Square matrix
Dimension: 7x7
Features: []

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0014  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4):
 
Square matrix
Dimension: 6x6
Features: []

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

################
j=g.sub(1,2,1,4):
 
Dimension: 2x4
Features: []

8 7 5 3 
3 3 5 9 
 

j.summary:
 Matrix(dim=[2, 4],listed=[[8, 7, 5, 3], [3, 3, 5, 9]],ranged=[-5, 5],randomFill=1,features=[],header=None,directory='')

################
proj=proj.subM(5,15).copy:


Dimension: 5x15
Features: []

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5
Features: []

11 82 20 39 96 
15 41 48 14 93 
29 10 50 40 54 
75  9 19 23 99 
27 22 70 79 48 

p.det:
 18529836.000000276

p.adj:
 
Float Matrix
Square matrix
Dimension: 5x5
Features: []

 -3995244.0000   6779400.0000 -20219532.0000   3722400.0000   9924924.0000 
 -3691593.0000   6732654.0000 -19834398.0000   3376122.0000   9689115.0000 
 -2659332.0000   4576260.0000 -12383124.0000   2038764.0000   6178224.0000 
  2790798.0000  -4914492.0000  13459728.0000  -2322876.0000  -6411030.0000 
  3224309.0000  -5484490.0000  16370506.0000  -2791370.0000  -8095999.0000 

p.inv:


Float Matrix
Square matrix
Dimension: 5x5
Features: []

-0.2156  0.3659 -1.0912  0.2009  0.5356 
-0.1992  0.3633 -1.0704  0.1822  0.5229 
-0.1435  0.2470 -0.6683  0.1100  0.3334 
 0.1506 -0.2652  0.7264 -0.1254 -0.3460 
 0.1740 -0.2960  0.8835 -0.1506 -0.4369 

################
p:

Square matrix
Dimension: 5x5
Features: []

11 82 20 39 96 
15 41 48 14 93 
29 10 50 40 54 
75  9 19 23 99 
27 22 70 79 48 

p.remove(c=1) and p.remove(r=2)

Square matrix
Dimension: 4x4
Features: []

82 20 39 96 
10 50 40 54 
 9 19 23 99 
22 70 79 48 

p.add(col=2,lis=[55,55,55,55,55]):

Dimension: 4x5
Features: []

82 55 20 39 96 
10 55 50 40 54 
 9 55 19 23 99 
22 55 70 79 48 

p.sdev()
{'Col 1': 34.67347689517162, 'Col 2': 0.0, 'Col 3': 24.770614310778274, 'Col 4': 23.81001189975903, 'Col 5': 26.98610753702727}
################

r: 
Dimension: 5x4
Features: []

82 10  9 22 
55 55 55 55 
20 50 19 70 
39 40 23 79 
96 54 99 48 

p==r.t:

True
################
id2:
 
Identity Matrix
Dimension: 5x5

 1  0  0  0  0 
 0  1  0  0  0 
 0  0  1  0  0 
 0  0  0  1  0 
 0  0  0  0  1 


id2.addDim(2): 
Identity Matrix
Dimension: 7x7

 1  0  0  0  0  0  0 
 0  1  0  0  0  0  0 
 0  0  1  0  0  0  0 
 0  0  0  1  0  0  0 
 0  0  0  0  1  0  0 
 0  0  0  0  0  1  0 
 0  0  0  0  0  0  1 

id2.matrix:
 [[1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1]]

################
id3:


Identity Matrix
Dimension: 3x3

 1  0  0 
 0  1  0 
 0  0  1 

################
id4:


Identity Matrix
Dimension: 6x6

 1  0  0  0  0  0 
 0  1  0  0  0  0 
 0  0  1  0  0  0 
 0  0  0  1  0  0 
 0  0  0  0  1  0 
 0  0  0  0  0  1 


id4.delDim(6):

All rows have been deleted

Identity Matrix
Dimension: 0x0


################
id4: 
Identity Matrix
Dimension: 0x0



id4.addDim(10)):
 
Identity Matrix
Dimension: 10x10

 1  0  0  0  0  0  0  0  0  0 
 0  1  0  0  0  0  0  0  0  0 
 0  0  1  0  0  0  0  0  0  0 
 0  0  0  1  0  0  0  0  0  0 
 0  0  0  0  1  0  0  0  0  0 
 0  0  0  0  0  1  0  0  0  0 
 0  0  0  0  0  0  1  0  0  0 
 0  0  0  0  0  0  0  1  0  0 
 0  0  0  0  0  0  0  0  1  0 
 0  0  0  0  0  0  0  0  0  1 

################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Float Matrix
Dimension: 2x3
Features: []

-182.5813   38.8954 -189.9206 
  60.9487  193.6330  125.5660 


((((mMulti)+125)**3)%2):

Float Matrix
Dimension: 2x3
Features: []

1.0899 1.4171 0.1662 
1.1439 0.9869 1.4483 

################

f:
 
Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1077.2052  -293.1781   732.6501  1183.9218   723.2525   142.8208 
 -192.9320   712.5217   -54.9501   330.6815   788.9160  -773.9385 
-1013.2219   -82.3428 -1119.5485   230.4561  -992.4944   933.4600 
   91.7243   711.6352  -698.1606  -409.7386   -73.9579  1249.2687 
 -845.4116  -884.5838    61.6160  -990.0191     4.4113  -774.1811 
 -846.7889   433.2280  -419.2507   156.2518  -476.5987   204.2982 

f1=f.intForm

Square matrix
Dimension: 6x6
Features: []

-1077  -293   732  1183   723   142 
 -192   712   -54   330   788  -773 
-1013   -82 -1119   230  -992   933 
   91   711  -698  -409   -73  1249 
 -845  -884    61  -990     4  -774 
 -846   433  -419   156  -476   204 

f2=f.roundForm(3)

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-1077.2100  -293.1800   732.6500  1183.9200   723.2500   142.8200 
 -192.9300   712.5200   -54.9500   330.6800   788.9200  -773.9400 
-1013.2200   -82.3400 -1119.5500   230.4600  -992.4900   933.4600 
   91.7200   711.6400  -698.1600  -409.7400   -73.9600  1249.2700 
 -845.4100  -884.5800    61.6200  -990.0200     4.4100  -774.1800 
 -846.7900   433.2300  -419.2500   156.2500  -476.6000   204.3000 

f2-f1

Float Matrix
Square matrix
Dimension: 6x6
Features: []

-0.2100 -0.1800  0.6500  0.9200  0.2500  0.8200 
-0.9300  0.5200 -0.9500  0.6800  0.9200 -0.9400 
-0.2200 -0.3400 -0.5500  0.4600 -0.4900  0.4600 
 0.7200  0.6400 -0.1600 -0.7400 -0.9600  0.2700 
-0.4100 -0.5800  0.6200 -0.0200  0.4100 -0.1800 
-0.7900  0.2300 -0.2500  0.2500 -0.6000  0.3000 

################
r.remove(r=2):

Square matrix
Dimension: 4x4
Features: []

82 10  9 22 
20 50 19 70 
39 40 23 79 
96 54 99 48 

r.rank: 4

r[0]=r[1][:]

Square matrix
Dimension: 4x4
Features: []

20 50 19 70 
20 50 19 70 
39 40 23 79 
96 54 99 48 

Determinant is 0, can't get lower/upper triangular matrices
r.rank: 3
################
for i in range(len(e.matrix)): e[i][-i-1]=99

Square matrix
Dimension: 8x8
Features: []

99  0  0  0  0  0  0  0 
 0 99  0  0  0  0  0  0 
 0  0 99  0  0  0  0  0 
 0  0  0 99  0  0  0  0 
 0  0  0  0 99  0  0  0 
 0  0  0  0  0 99  0  0 
 0  0  0  0  0  0 99  0 
 0  0  0  0  0  0  0 99 


e+=50:

Square matrix
Dimension: 8x8
Features: []

149  50  50  50  50  50  50  50 
 50 149  50  50  50  50  50  50 
 50  50 149  50  50  50  50  50 
 50  50  50 149  50  50  50  50 
 50  50  50  50 149  50  50  50 
 50  50  50  50  50 149  50  50 
 50  50  50  50  50  50 149  50 
 50  50  50  50  50  50  50 149 

for i in range(len(e.matrixiid)):e[i]=[b%2 for b in e[i]]:


Square matrix
Dimension: 8x8
Features: []

1 0 0 0 0 0 0 0 
0 1 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 
0 0 0 1 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 0 1 0 0 
0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 1 

################

c%j

Dimension: 2x4
Features: []

3 0 2 1 
1 0 2 2 


f.lowtri@f.uptri==f.roundForm(4)
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3
Features: []

 34 -52  33 
  9  88  -3 

################
validStr2:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x10
Features: []

312  45  12  44 352  45  12  44   3  -5 

################
validStr3:
You should give proper dimensions to work with the data
Example dimension:[data_amount,feature_amount]

Dimension: 1x4
Features: []

 34   5  44 659 

################
validStr4:

Dimension: 22x3
Features: ['Height', 'Weight', 'Age']

130  30  10 
125  36  11 
135  34  10 
133  30   9 
129  38  12 
180  90  30 
190  80  25 
175  90  35 
177  60  22 
185 105  33 
165  55  27 
155  50  44 
160  58  39 
162  59  41 
167  62  55 
174  70  47 
193  90  23 
187  80  27 
183  88  28 
159  40  29 
164  66  32 
166  56  42 

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 21.077059193407987, 'Weight': 22.286650829472002, 'Age': 12.98858973112413}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {'90': 3}, 'Age': {'10, 27': 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.variance()
{'Height': 444.24242424242414, 'Weight': 496.6948051948051, 'Age': 168.70346320346317}
"""
# =============================================================================

