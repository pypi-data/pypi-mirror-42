# ############################################################################
# A list of variables which you can and probably should override with your own
# values in your group variables. These are the default values for these
# options and should work well enough for development or trial purposes, but
# some of them should be overridden for production purposes. See individual
# values for documentation on their function.
# ############################################################################

# A list of Jenkins update center URLs to configure. This is the default UC
# provided by the upstream, public infrastructure. If you maintain a local
# mirror for custom plugins or just for mirroring purposes, then override this
# variable with those values.
update_centers:
  - id: default
    url: "https://updates.jenkins-ci.org/{{ jenkins_uc_version }}/update-center.json"
# If necessary, you may upload an update center certificate file by defining
# a local filesystem path to the certificate on the the system running Ansible.
# This is not necessary for the upstream Jenkins update center, but may be
# useful for deployments where custom downstream update centers are in use.
#update_center_certificate: /tmp/update-center.crt
# If update_center_certificate is defined, you may wish to override the default
# behavior of uploading the certificate from the local system running Ansible
# and instead copy the file from a location on the remote Jenkins master to the
# proper destination in JENKINS_HOME by setting this variable to true:
update_center_certificate_remote_src: false
# If set to true, Jenkins will be run over HTTPS. If you set this value to true,
# you can override jenkins_ssl_cert and jenkins_ssl_key if you want to use custom
# SSL certificate, otherwise a self signed certificate will be used.
https_enabled: false
# The version of Jenkins to install from the repository. This value is used
# to construct the name of the RPM below as well as update center URLS, so this
# must include the complete "x.y.z" version, e.g. 1.651.3.
jenkins_version: "2.121.3"
# Temporarily remove the jenkins package from the package mananger pinning
# configuration to allow upgrades of the jenkins package.  Note that other
# packages blacklisted by the upgrade_blacklist variable will remain pinned via
# the package manager configuration.
jenkins_upgrade: false
# Update center version based on jenkins_version, update center does not use
# "z" bit of the version, for example 1.651.3 becomes 1.651. This split
# incantation strips the '.z' version off of jenkins_version.
jenkins_uc_version: "{{ jenkins_version.rsplit('.', 1)[0] }}"
# The list of Jenkins plugins that should be installed by default from the
# configured Update Centers. Each element in this list takes two different values
# in a dict. The first is "plugins", which is a list of plugin names. Each name can
# be either just the plugin's name, or the name pinned to a version in the form of
# a string such as "plugin-name==1.2.3". The second dict element is optional, and is
# named "url". If you are installing plugins from an update center other than the
# default one provided by jenkins-ci.org, then use the "url" key to specify the base
# URL for that update center
jenkins_plugins:
  - plugins: "{{ lookup('file', 'files/jenkins-plugin-lists/default.txt').split('\n') }}"
    url: "{{ omit }}"  # Omit in order to use default update center
# Plugin lists may also be fetched via a URL using Ansible's url lookup plugin.
# Given the same plugin list input file as described above, note that you must
# split on commas rather than newlines due to the behavior of the Ansible url
# lookup plugin:
#jenkins_plugins:
#  - plugins: "{{ lookup('url', 'http://example.com/default.txt').split(',') }}"
#    url: "{{ omit }}" # Omit in order to use default update center
# Extra plugins to install, specified by the user with the same format as jenkins_plugins
jenkins_extra_plugins: []
# Bundled plugins are ones that are included by default with Jenkins. The process
# of pinning a bundled plugin tells Jenkins to not overwrite the correct version
# of plugin with an included version during a Jenkins upgrade but rather use the
# one in JENKINS_HOME. Make this an array of the names of the plugins that
# should be pinned. NOTE: This only works for Jenkins 1.X
jenkins_pinned_plugins: []
# Java max heap size argument. Set this value based on the amount of RAM that
# your instance needs and your infrastructure is able to support. This argument
# is set on the JVM with -Xmx{{ java_heap_size }} in the command line options
java_heap_size: 3g
# A list of command line options passed to the Java command line, in addition to
# the ones listed in the vars folder. These options can allow you tweak either the
# JVM directly or base, hidden features in the Jenkins world. A simply array of
# string values should be supplied, that will spliced together with spaces on the
# command line
jenkins_java_extra_options: []
# A default session timeout of 8hrs (480 mins) is needed to work
# comfortably without having to re-login.
session_timeout: 480
# Command line arguments for Jenkins
jenkins_args:
# A list of additional packages you wish to install using the default package
# manager.
jmaster_extra_rpms: []
# A list of items to set as environment variables for all jbos configured to run
# on this master, regardless of their host system. Each entry in the array should
# be a hash with a "key" and "value" property, as such:
# jenkins_envvars:
#   - key: SOME_SERVICE_ENDPOINT
#     value: http://somehost.somedomain:12345/some/path
jenkins_envvars:
  - key: JENKINS_MASTER_URL
    value: "{{ _jenkins_url }}"
# A collection of settings to configure the Thin Backup plugin in Jenkins. See each
# line in the hash for information on the particular setting. You can override only
# some of the components of this hash, you do not need to provide all the defaults
# in order to override only a single value. The applicable field values, and their
# defaults, are listed below this object
jenkins_backup: {}
#  directory: /jenkins_backups/.backups
#  full_schedule: H 0 * * 0
#  diff_schedule: H 0 * * *
#  max_sets: 4
#  exclude: ''
#  wait_for_idle: false
#  quiet_mode_timeout: 120
#  build_results: false
#  user_contents: false
#  cleanup_diffs: false
#  next_build_number: false
#  move_to_zip: false
# The shell user on the master system whose SSH key is configured with admin access
# on the Jenkins CLI. Also, the home directory for that user
jenkins_cli_shell_user: "{{ jenkins_user }}"
jenkins_cli_shell_user_home: "{{ jenkins_user_home }}"


# ############################################################################
# Security settings - users, passwords, etc.
# These values should REALLY be changed if you're going to use this in a
# production environment as otherwise you would be securing with passwords or
# SSH keys that the whole world can see freely in this repository.
# ############################################################################
# If this is set to true, then LDAP will be configured, along with the admin
# user, security roles, etc. Leaving this false will mean anyone will have the
# ability to control the Jenkins master instance without authentication
jenkins_security_enabled: false
# An admin user who is configured to permit automated connections to the system
# for things like running the Groovy scripts, connecting Swarm clients, etc.
# This user is automatically assigned to the security role "admin" that gets
# created
jenkins_admin:
  nickname: jenkins-admin
  email: root@localhost
  password: changeme
# A list of users, groups, etc (SIDs, in Jenkins-speak) who should be added to
# the admin role
jenkins_admin_sids: []
# A list of users who should be given access to the Jenkins CLI. Users must exist
# in the Jenkins filesystem already (they must have logged into the system at
# least once, already). They will be configured with the SSH key from the system
# shell user named "jenkins" as their pubkey.
jenkins_cli_users: []
# An array of users to create in the local Jenkins database, regardless of the
# authentication methods actually in place. Elements in this array should match
# the form of the jenkins_admin variable immediately above this
jenkins_local_users: []
# An array of roles and their permissions to add to Jenkins. A role called
# "admin" will always be created that has access to every permission. You can
# override this by creating a role in this array named "admin" that has a
# different set of permisisons, if you would rather. The "sids" array is a list
# of the roles/users/groups that should be assigned to that role. For the structure
# of this array, see the jenkins_security_roles variable in the vars folder of
# this Ansible role
jenkins_security_extra_roles: []
# LDAP plugin configuration values
jenkins_ldap:
  server: ldaps://ldap.example.com
  root_dn: dc=example,dc=com
  user_search_base: ''
  user_search: uid={0}
  group_search_base: ou=groups
  group_search_filter: "(& (cn={0}) (objectclass=posixGroup))"
  group_membership: memberUid={1}
  display_name_attr: displayname
  email_addr_attr: mail
  manager_dn: ''
  manager_password: ''
# By default, when the Kerberos plugin is enabled, it preempts any requests
# that are unauthenticated (anonymous) to Jenkins. This will force any visitor
# to the web UI or the API to authenticate against Jenkins. By setting this
# following value to "true", then the Kerberos plugin will be configured to
# pass anonymous requests through to the Jenkins roles plugin.
#
# Without this value set to true, then setting anonymous permissions will still
# leave anonymous access to the system unavailable. Most users will not expect
# this, as most Jenkins systems are configured to allow at least a modicum of
# access and visibility to jobs, logs, and lists without authentication.
#
# If, however, job logs might contain private, embargoed, or sensitive data,
# then not only should anonymous access be disabled, but this value should be
# left as "false" in order to force authentication of every web request.
jenkins_kerberos_anonymous_access: false

# ############################################################################
# A list of variables that don't really need to be overridden, but which can be
# parameterized if you need to tweak the Jenkins system. These represent mostly
# advanced values.
# ############################################################################

# A list of packages which should not be upgraded by yum. These packages will be added
# to a list in /etc/yum.conf on the target machine as packages whose versions need to
# be maintained at the currently installed versions in order to avoid updating
# them by means of a "yum update" run
upgrade_blacklist:
  - jenkins
# The name of the Jenkins package to install. This can be either an RPM name
# such as one would pass to yum or dnf or a full path to the RPM file
# (including a full URL). See note above on the variable "jenkins_version"
jenkins_rpm: jenkins-{{ jenkins_version }}-1.1
# the path to the Java executable
jenkins_java_cmd: /usr/bin/java
# These values change the default ulimits for file and process counts in
# order to avoid failure of the system when these (typically very low) default
# values are hit
jenkins_soft_nofile_ulimit: 4096
jenkins_hard_nofile_ulimit: 4096
jenkins_soft_nproc_ulimit: 4096
jenkins_hard_nproc_ulimit: 30654
# Malicious or poorly written job can either generate ridiculously large
# artefact file to be archived on master or produce long console log.
# Even an infinite loop in a job (that has some output) can exhaust all disk
# space on JENKINS_HOME partition (Jenkins does not handle out of disk space
# well). Largest file you will ever need on master, from our experience, is
# heap/core dump of Jenkins process (or some other more memory greedy process).
# Restricting max file size to the size of virtual memory should work
# reasonably well for everyone.
jenkins_fsize_ulimit: "{{ ansible_memtotal_mb * 1024 }}"
# This variable points to the file where the RPM version for specific packages
# (most importantly, the Jenkins RPM) can be pinned. For yum-based distros,
# like CentOS or RHEL <= 7, this is the yum conf file, but for Fedora and the
# like, this is the dnf conf file
version_pin_file: /etc/yum.conf
# This is the port Jenkins will listen on for slaves.
jenkins_slave_agent_port: 50000
# Address that Jenkins will listen on. For now, the default is promiscuous, but
# if Jenkins is being stood up behind an SSL terminator or reverse proxy, this
# should be switched to a loopback address. The same goes for the SSL listen
# address, except that allows limiting the address the service will listen on
# when it is serving SSL directly
jenkins_http_listen_address: ''
jenkins_https_listen_address: ''
# The port where Jenkins should listen for AJP connections
jenkins_ajp_port: 8009
jenkins_ajp_listen_address: ''
# The debug level for Jenkins
jenkins_debug_level: 5
# Enable or disable writing out an access log for Jenkins. This will cause the
# process to write out log entries for every HTTP access and is disabled by
# default
jenkins_enable_access_log: "no"
# The maximum number of worker threads to handle HTTP requests on the Jenkins
# process
jenkins_handler_max: 100
# The maximum number of idle HTTP worker threads
jenkins_handler_idle: 20
# The cannonical name to use as server_name in nginx configuration file.
service_name: "{{ hostvars[inventory_hostname]['ansible_host'] | default(inventory_hostname) }}"
# This is a list of ports with protocol to allow in firewalld.
firewall_tcp_ports:
  - "{{ jenkins_slave_agent_port }}/tcp"
  - "8888/tcp"
  - "22/tcp"
  - "80/tcp"
  - "{{ https_enabled | ternary('443/tcp', omit) }}"
# If this is set to true, nginx rate limiting will be enabled. This is to
# prevent undesired impact of the Jenkins application from external
# requests which could cause service disruption or other unwanted impact
# of the Jenkins application.
# https://www.nginx.com/blog/rate-limiting-nginx/
jenkins_nginx_rate_limiting: false
# Default rate limiting values are below, customize as desired.
# Size of ip address state cache (10m = ~160,000 ip addresses):
nginx_zone_cache_size: "10m"
# Rate limit for requests per second:
nginx_request_limit: "200r/s"
# Limit maximum number of simultaneous connections per ip:
nginx_max_connections_per_ip: 25
# Enable bandwidth limiting for files this size or larger (200m = 200MB file):
nginx_bandwidth_limit_after_size: "200m"
# Set bandwidth limit for downloading large files (5m = 5Mb/s):
nginx_max_bandwidth_outbound: "5m"
# Set the burst queue size (number of addional requests allowed over limits):
nginx_burst_queue: "100"
# This setting affects how the update center downloads plugin metadata
# http://javadoc.jenkins-ci.org/jenkins/model/DownloadSettings.html
jenkins_usebrowser: false
# Enable or disable plugin installation and subsequent configuration of plugin
# settings.  Disabling this will be useful for cases where Ansible will be used
# to manage production Jenkins masters and changes to the Jenkins application
# are not desired to lessen customer impact.
jenkins_plugin_install_configure: true

# Number of times to retry getting the API key before we give up and admit defeat
jenkins_user_api_retries: 10
