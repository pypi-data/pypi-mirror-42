# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: gv_services/proto/interface.proto
# plugin: grpclib.plugin.main
import abc

import grpclib.const
import grpclib.client

import google.protobuf.timestamp_pb2
import gv_services.proto.archivist_pb2
import gv_services.proto.broadcaster_pb2
import gv_services.proto.common_pb2
import gv_services.proto.geographer_pb2
import gv_services.proto.interface_pb2


class InterfaceBase(abc.ABC):

    @abc.abstractmethod
    async def publish(self, stream):
        pass

    @abc.abstractmethod
    async def subscribe(self, stream):
        pass

    @abc.abstractmethod
    async def get_data(self, stream):
        pass

    @abc.abstractmethod
    async def get_data_points(self, stream):
        pass

    @abc.abstractmethod
    async def get_roads(self, stream):
        pass

    @abc.abstractmethod
    async def get_zones(self, stream):
        pass

    @abc.abstractmethod
    async def get_mapping_roads_data_points(self, stream):
        pass

    @abc.abstractmethod
    async def get_mapping_zones_roads(self, stream):
        pass

    @abc.abstractmethod
    async def update_roads_freeflow_speed(self, stream):
        pass

    @abc.abstractmethod
    async def update_zones_freeflow_speed(self, stream):
        pass

    def __mapping__(self):
        return {
            '/gv_services.proto.Interface/publish': grpclib.const.Handler(
                self.publish,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.interface_pb2.pub_request,
                gv_services.proto.common_pb2.ack,
            ),
            '/gv_services.proto.Interface/subscribe': grpclib.const.Handler(
                self.subscribe,
                grpclib.const.Cardinality.UNARY_STREAM,
                gv_services.proto.broadcaster_pb2.sub_request,
                gv_services.proto.common_pb2.traffic_data,
            ),
            '/gv_services.proto.Interface/get_data': grpclib.const.Handler(
                self.get_data,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.archivist_pb2.get_data_request,
                gv_services.proto.common_pb2.traffic_data,
            ),
            '/gv_services.proto.Interface/get_data_points': grpclib.const.Handler(
                self.get_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.get_locations_request,
                gv_services.proto.geographer_pb2.locations,
            ),
            '/gv_services.proto.Interface/get_roads': grpclib.const.Handler(
                self.get_roads,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.get_locations_request,
                gv_services.proto.geographer_pb2.locations,
            ),
            '/gv_services.proto.Interface/get_zones': grpclib.const.Handler(
                self.get_zones,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.get_locations_request,
                gv_services.proto.geographer_pb2.locations,
            ),
            '/gv_services.proto.Interface/get_mapping_roads_data_points': grpclib.const.Handler(
                self.get_mapping_roads_data_points,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.get_mapping_request,
                gv_services.proto.geographer_pb2.mapping,
            ),
            '/gv_services.proto.Interface/get_mapping_zones_roads': grpclib.const.Handler(
                self.get_mapping_zones_roads,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.get_mapping_request,
                gv_services.proto.geographer_pb2.mapping,
            ),
            '/gv_services.proto.Interface/update_roads_freeflow_speed': grpclib.const.Handler(
                self.update_roads_freeflow_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.freeflow_speeds,
                gv_services.proto.common_pb2.ack,
            ),
            '/gv_services.proto.Interface/update_zones_freeflow_speed': grpclib.const.Handler(
                self.update_zones_freeflow_speed,
                grpclib.const.Cardinality.UNARY_UNARY,
                gv_services.proto.geographer_pb2.freeflow_speeds,
                gv_services.proto.common_pb2.ack,
            ),
        }


class InterfaceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.publish = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/publish',
            gv_services.proto.interface_pb2.pub_request,
            gv_services.proto.common_pb2.ack,
        )
        self.subscribe = grpclib.client.UnaryStreamMethod(
            channel,
            '/gv_services.proto.Interface/subscribe',
            gv_services.proto.broadcaster_pb2.sub_request,
            gv_services.proto.common_pb2.traffic_data,
        )
        self.get_data = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_data',
            gv_services.proto.archivist_pb2.get_data_request,
            gv_services.proto.common_pb2.traffic_data,
        )
        self.get_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_data_points',
            gv_services.proto.geographer_pb2.get_locations_request,
            gv_services.proto.geographer_pb2.locations,
        )
        self.get_roads = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_roads',
            gv_services.proto.geographer_pb2.get_locations_request,
            gv_services.proto.geographer_pb2.locations,
        )
        self.get_zones = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_zones',
            gv_services.proto.geographer_pb2.get_locations_request,
            gv_services.proto.geographer_pb2.locations,
        )
        self.get_mapping_roads_data_points = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_mapping_roads_data_points',
            gv_services.proto.geographer_pb2.get_mapping_request,
            gv_services.proto.geographer_pb2.mapping,
        )
        self.get_mapping_zones_roads = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/get_mapping_zones_roads',
            gv_services.proto.geographer_pb2.get_mapping_request,
            gv_services.proto.geographer_pb2.mapping,
        )
        self.update_roads_freeflow_speed = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/update_roads_freeflow_speed',
            gv_services.proto.geographer_pb2.freeflow_speeds,
            gv_services.proto.common_pb2.ack,
        )
        self.update_zones_freeflow_speed = grpclib.client.UnaryUnaryMethod(
            channel,
            '/gv_services.proto.Interface/update_zones_freeflow_speed',
            gv_services.proto.geographer_pb2.freeflow_speeds,
            gv_services.proto.common_pb2.ack,
        )
