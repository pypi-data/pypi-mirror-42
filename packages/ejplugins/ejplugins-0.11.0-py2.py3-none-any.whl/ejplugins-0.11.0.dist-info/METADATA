Metadata-Version: 2.1
Name: ejplugins
Version: 0.11.0
Summary: parser plugins for jsonextended
Home-page: UNKNOWN
Author: Chris Sewell
Author-email: chrisj_sewell@hotmail.com
License: MIT
Keywords: python,parser,quantum-espresso,crystal,lammps,gulp
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.2
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
Requires-Dist: jsonextended (>=0.6.4)
Requires-Dist: pathlib2
Requires-Dist: jsonschema
Requires-Dist: pint
Requires-Dist: numpy
Provides-Extra: science
Requires-Dist: pymatgen ; extra == 'science'
Requires-Dist: ase ; extra == 'science'

# ejplugins

[![Build_Status](https://travis-ci.org/chrisjsewell/ejplugins.svg?branch=master)](https://travis-ci.org/chrisjsewell/ejplugins)
[![PyPI](https://img.shields.io/pypi/v/ejplugins.svg)](https://pypi.python.org/pypi/ejplugins/)

Parser plugins for the [jsonextended package](https://jsonextended.readthedocs.io) and validation schema, to convert
output files from materials simulation packages to a JSON format.

## Usage

    >> pip install ejplugins

or, to use Pymatgen and ASE parsers:

    >> pip install ejplugins[science]

Either use independently:

```python
from ejplugins.qespresso import QEmainPlugin
with open("path/to/my.qe.out") as f:
    output = QEmainPlugin.read_file(f)
```

Or with `jsonextended`:

```python
from ejplugins.qespresso import QEmainPlugin
from jsonextended import plugins, ejson
plugins.load_plugin_classes([QEmainPlugin])

ejson.to_dict("path/to/qespresso/outputs")
```

See ejplugins/test_files for example input/outputs.

