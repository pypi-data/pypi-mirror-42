# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _CaboCha.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_CaboCha')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_CaboCha')
    _CaboCha = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CaboCha', [dirname(__file__)])
        except ImportError:
            import _CaboCha
            return _CaboCha
        try:
            _mod = imp.load_module('_CaboCha', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _CaboCha = swig_import_helper()
    del swig_import_helper
else:
    import _CaboCha
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


CABOCHA_EUC_JP = _CaboCha.CABOCHA_EUC_JP
CABOCHA_CP932 = _CaboCha.CABOCHA_CP932
CABOCHA_UTF8 = _CaboCha.CABOCHA_UTF8
CABOCHA_ASCII = _CaboCha.CABOCHA_ASCII
CABOCHA_IPA = _CaboCha.CABOCHA_IPA
CABOCHA_JUMAN = _CaboCha.CABOCHA_JUMAN
CABOCHA_UNIDIC = _CaboCha.CABOCHA_UNIDIC
CABOCHA_FORMAT_TREE = _CaboCha.CABOCHA_FORMAT_TREE
CABOCHA_FORMAT_LATTICE = _CaboCha.CABOCHA_FORMAT_LATTICE
CABOCHA_FORMAT_TREE_LATTICE = _CaboCha.CABOCHA_FORMAT_TREE_LATTICE
CABOCHA_FORMAT_XML = _CaboCha.CABOCHA_FORMAT_XML
CABOCHA_FORMAT_CONLL = _CaboCha.CABOCHA_FORMAT_CONLL
CABOCHA_FORMAT_NONE = _CaboCha.CABOCHA_FORMAT_NONE
CABOCHA_INPUT_RAW_SENTENCE = _CaboCha.CABOCHA_INPUT_RAW_SENTENCE
CABOCHA_INPUT_POS = _CaboCha.CABOCHA_INPUT_POS
CABOCHA_INPUT_CHUNK = _CaboCha.CABOCHA_INPUT_CHUNK
CABOCHA_INPUT_SELECTION = _CaboCha.CABOCHA_INPUT_SELECTION
CABOCHA_INPUT_DEP = _CaboCha.CABOCHA_INPUT_DEP
CABOCHA_OUTPUT_RAW_SENTENCE = _CaboCha.CABOCHA_OUTPUT_RAW_SENTENCE
CABOCHA_OUTPUT_POS = _CaboCha.CABOCHA_OUTPUT_POS
CABOCHA_OUTPUT_CHUNK = _CaboCha.CABOCHA_OUTPUT_CHUNK
CABOCHA_OUTPUT_SELECTION = _CaboCha.CABOCHA_OUTPUT_SELECTION
CABOCHA_OUTPUT_DEP = _CaboCha.CABOCHA_OUTPUT_DEP
CABOCHA_TRAIN_NE = _CaboCha.CABOCHA_TRAIN_NE
CABOCHA_TRAIN_CHUNK = _CaboCha.CABOCHA_TRAIN_CHUNK
CABOCHA_TRAIN_DEP = _CaboCha.CABOCHA_TRAIN_DEP
class Chunk(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    link = _swig_property(_CaboCha.Chunk_link_get)
    head_pos = _swig_property(_CaboCha.Chunk_head_pos_get)
    func_pos = _swig_property(_CaboCha.Chunk_func_pos_get)
    token_size = _swig_property(_CaboCha.Chunk_token_size_get)
    token_pos = _swig_property(_CaboCha.Chunk_token_pos_get)
    score = _swig_property(_CaboCha.Chunk_score_get)
    additional_info = _swig_property(_CaboCha.Chunk_additional_info_get)
    feature_list_size = _swig_property(_CaboCha.Chunk_feature_list_size_get)
Chunk.feature_list = new_instancemethod(_CaboCha.Chunk_feature_list, None, Chunk)
Chunk_swigregister = _CaboCha.Chunk_swigregister
Chunk_swigregister(Chunk)

class Token(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    surface = _swig_property(_CaboCha.Token_surface_get)
    normalized_surface = _swig_property(_CaboCha.Token_normalized_surface_get)
    feature = _swig_property(_CaboCha.Token_feature_get)
    feature_list_size = _swig_property(_CaboCha.Token_feature_list_size_get)
    ne = _swig_property(_CaboCha.Token_ne_get)
    additional_info = _swig_property(_CaboCha.Token_additional_info_get)
    chunk = _swig_property(_CaboCha.Token_chunk_get)
Token.feature_list = new_instancemethod(_CaboCha.Token_feature_list, None, Token)
Token_swigregister = _CaboCha.Token_swigregister
Token_swigregister(Token)

EUC_JP = _CaboCha.EUC_JP
CP932 = _CaboCha.CP932
UTF8 = _CaboCha.UTF8
ASCII = _CaboCha.ASCII
IPA = _CaboCha.IPA
JUMAN = _CaboCha.JUMAN
UNIDIC = _CaboCha.UNIDIC
FORMAT_TREE = _CaboCha.FORMAT_TREE
FORMAT_LATTICE = _CaboCha.FORMAT_LATTICE
FORMAT_TREE_LATTICE = _CaboCha.FORMAT_TREE_LATTICE
FORMAT_XML = _CaboCha.FORMAT_XML
FORMAT_CONLL = _CaboCha.FORMAT_CONLL
FORMAT_NONE = _CaboCha.FORMAT_NONE
INPUT_RAW_SENTENCE = _CaboCha.INPUT_RAW_SENTENCE
INPUT_POS = _CaboCha.INPUT_POS
INPUT_CHUNK = _CaboCha.INPUT_CHUNK
INPUT_SELECTION = _CaboCha.INPUT_SELECTION
INPUT_DEP = _CaboCha.INPUT_DEP
OUTPUT_RAW_SENTENCE = _CaboCha.OUTPUT_RAW_SENTENCE
OUTPUT_POS = _CaboCha.OUTPUT_POS
OUTPUT_CHUNK = _CaboCha.OUTPUT_CHUNK
OUTPUT_SELECTION = _CaboCha.OUTPUT_SELECTION
OUTPUT_DEP = _CaboCha.OUTPUT_DEP
TRAIN_NE = _CaboCha.TRAIN_NE
TRAIN_CHUNK = _CaboCha.TRAIN_CHUNK
TRAIN_DEP = _CaboCha.TRAIN_DEP
class Tree(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _CaboCha.Tree_swiginit(self, _CaboCha.new_Tree())
    __swig_destroy__ = _CaboCha.delete_Tree
Tree.set_sentence = new_instancemethod(_CaboCha.Tree_set_sentence, None, Tree)
Tree.sentence = new_instancemethod(_CaboCha.Tree_sentence, None, Tree)
Tree.sentence_size = new_instancemethod(_CaboCha.Tree_sentence_size, None, Tree)
Tree.chunk = new_instancemethod(_CaboCha.Tree_chunk, None, Tree)
Tree.token = new_instancemethod(_CaboCha.Tree_token, None, Tree)
Tree.read = new_instancemethod(_CaboCha.Tree_read, None, Tree)
Tree.empty = new_instancemethod(_CaboCha.Tree_empty, None, Tree)
Tree.clear = new_instancemethod(_CaboCha.Tree_clear, None, Tree)
Tree.clear_chunk = new_instancemethod(_CaboCha.Tree_clear_chunk, None, Tree)
Tree.chunk_size = new_instancemethod(_CaboCha.Tree_chunk_size, None, Tree)
Tree.token_size = new_instancemethod(_CaboCha.Tree_token_size, None, Tree)
Tree.size = new_instancemethod(_CaboCha.Tree_size, None, Tree)
Tree.toString = new_instancemethod(_CaboCha.Tree_toString, None, Tree)
Tree.charset = new_instancemethod(_CaboCha.Tree_charset, None, Tree)
Tree.set_charset = new_instancemethod(_CaboCha.Tree_set_charset, None, Tree)
Tree.posset = new_instancemethod(_CaboCha.Tree_posset, None, Tree)
Tree.set_posset = new_instancemethod(_CaboCha.Tree_set_posset, None, Tree)
Tree.output_layer = new_instancemethod(_CaboCha.Tree_output_layer, None, Tree)
Tree.set_output_layer = new_instancemethod(_CaboCha.Tree_set_output_layer, None, Tree)
Tree.what = new_instancemethod(_CaboCha.Tree_what, None, Tree)
Tree_swigregister = _CaboCha.Tree_swigregister
Tree_swigregister(Tree)

class Parser(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = staticmethod(_CaboCha.Parser_version)
    __swig_destroy__ = _CaboCha.delete_Parser

    def __init__(self, *args):
        _CaboCha.Parser_swiginit(self, _CaboCha.new_Parser(*args))
Parser.parseToString = new_instancemethod(_CaboCha.Parser_parseToString, None, Parser)
Parser.parse = new_instancemethod(_CaboCha.Parser_parse, None, Parser)
Parser.what = new_instancemethod(_CaboCha.Parser_what, None, Parser)
Parser_swigregister = _CaboCha.Parser_swigregister
Parser_swigregister(Parser)

def Parser_version():
    return _CaboCha.Parser_version()
Parser_version = _CaboCha.Parser_version


def getLastError():
    return _CaboCha.getLastError()
getLastError = _CaboCha.getLastError

def runDependencyTraining(train_file, model_file, prev_model_file, charset, posset, cost, freq):
    return _CaboCha.runDependencyTraining(train_file, model_file, prev_model_file, charset, posset, cost, freq)
runDependencyTraining = _CaboCha.runDependencyTraining

def runChunkingTraining(train_file, model_file, prev_model_file, charset, posset, cost, freq):
    return _CaboCha.runChunkingTraining(train_file, model_file, prev_model_file, charset, posset, cost, freq)
runChunkingTraining = _CaboCha.runChunkingTraining

def runNETraining(train_file, model_file, prev_model_file, charset, posset, cost, freq):
    return _CaboCha.runNETraining(train_file, model_file, prev_model_file, charset, posset, cost, freq)
runNETraining = _CaboCha.runNETraining
VERSION = _CaboCha.VERSION


