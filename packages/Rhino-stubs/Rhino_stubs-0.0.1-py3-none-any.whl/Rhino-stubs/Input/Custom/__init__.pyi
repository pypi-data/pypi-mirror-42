from typing import Tuple, Set, Iterable, List

class GetArc:
    def __init__(self): ...
    def Dispose (self): ...
    @property
    def AllowDeformable (self) -> bool: ...
    @AllowDeformable.setter
    def AllowDeformable (self, value : bool): ...
    @property
    def Deformable (self) -> bool: ...
    @Deformable.setter
    def Deformable (self, value : bool): ...
    @property
    def DeformablePointCount (self) -> int: ...
    @DeformablePointCount.setter
    def DeformablePointCount (self, value : int): ...
    @property
    def DeformableDegree (self) -> int: ...
    @DeformableDegree.setter
    def DeformableDegree (self, value : int): ...
    @property
    def DefaultRadius (self) -> float: ...
    @DefaultRadius.setter
    def DefaultRadius (self, value : float): ...
    def Get (self) -> Tuple(Result, Arc): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetCircle:
    def __init__(self): ...
    def Dispose (self): ...
    @property
    def AllowDeformable (self) -> bool: ...
    @AllowDeformable.setter
    def AllowDeformable (self, value : bool): ...
    @property
    def Deformable (self) -> bool: ...
    @Deformable.setter
    def Deformable (self, value : bool): ...
    @property
    def DeformablePointCount (self) -> int: ...
    @DeformablePointCount.setter
    def DeformablePointCount (self, value : int): ...
    @property
    def DeformableDegree (self) -> int: ...
    @DeformableDegree.setter
    def DeformableDegree (self, value : int): ...
    @property
    def DefaultSize (self) -> float: ...
    @DefaultSize.setter
    def DefaultSize (self, value : float): ...
    @property
    def InDiameterMode (self) -> bool: ...
    @InDiameterMode.setter
    def InDiameterMode (self, value : bool): ...
    def Get (self) -> Tuple(Result, Circle): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class ConeConstraint:
    None = 0
    Vertical = 1
    AroundCurve = 2
class GetCone:
    def __init__(self): ...
    def Dispose (self): ...
    @property
    def ConeConstraint (self) -> ConeConstraint: ...
    @ConeConstraint.setter
    def ConeConstraint (self, value : ConeConstraint): ...
    @property
    def DefaultSize (self) -> float: ...
    @DefaultSize.setter
    def DefaultSize (self, value : float): ...
    @property
    def InDiameterMode (self) -> bool: ...
    @InDiameterMode.setter
    def InDiameterMode (self, value : bool): ...
    @property
    def ApexAngleDegrees (self) -> float: ...
    @ApexAngleDegrees.setter
    def ApexAngleDegrees (self, value : float): ...
    @property
    def BaseAngleDegrees (self) -> float: ...
    @BaseAngleDegrees.setter
    def BaseAngleDegrees (self, value : float): ...
    @property
    def Height (self) -> float: ...
    @Height.setter
    def Height (self, value : float): ...
    @property
    def Cap (self) -> bool: ...
    @Cap.setter
    def Cap (self, value : bool): ...
    @property
    def AllowInputAngle (self) -> bool: ...
    @AllowInputAngle.setter
    def AllowInputAngle (self, value : bool): ...
    def Get (self) -> Tuple(Result, Cone): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class CylinderConstraint:
    None = 0
    Vertical = 1
    AroundCurve = 2
class GetCylinder:
    def __init__(self): ...
    def Dispose (self): ...
    @property
    def CylinderConstraint (self) -> CylinderConstraint: ...
    @CylinderConstraint.setter
    def CylinderConstraint (self, value : CylinderConstraint): ...
    @property
    def DefaultSize (self) -> float: ...
    @DefaultSize.setter
    def DefaultSize (self, value : float): ...
    @property
    def InDiameterMode (self) -> bool: ...
    @InDiameterMode.setter
    def InDiameterMode (self, value : bool): ...
    @property
    def BothSidesOption (self) -> bool: ...
    @BothSidesOption.setter
    def BothSidesOption (self, value : bool): ...
    @property
    def Height (self) -> float: ...
    @Height.setter
    def Height (self, value : float): ...
    @property
    def Cap (self) -> bool: ...
    @Cap.setter
    def Cap (self, value : bool): ...
    def Get (self) -> Tuple(Result, Cylinder): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetLineMode:
    TwoPoint = 0
    SurfaceNormal = 1
    Angled = 2
    Vertical = 3
    FourPoint = 4
    Bisector = 5
    Perpendicular = 6
    Tangent = 7
    CurveEnd = 8
    CPlaneNormalVector = 9
class GetLine:
    def __init__(self): ...
    def Dispose (self): ...
    def Get (self) -> Tuple(Result, Line): ...
    @property
    def FirstPointPrompt (self) -> str: ...
    @FirstPointPrompt.setter
    def FirstPointPrompt (self, value : str): ...
    @property
    def MidPointPrompt (self) -> str: ...
    @MidPointPrompt.setter
    def MidPointPrompt (self, value : str): ...
    @property
    def SecondPointPrompt (self) -> str: ...
    @SecondPointPrompt.setter
    def SecondPointPrompt (self, value : str): ...
    @property
    def AcceptZeroLengthLine (self) -> bool: ...
    @AcceptZeroLengthLine.setter
    def AcceptZeroLengthLine (self, value : bool): ...
    @property
    def HaveFeedbackColor (self) -> bool: ...
    @property
    def FeedbackColor (self) -> Color: ...
    @FeedbackColor.setter
    def FeedbackColor (self, value : Color): ...
    @property
    def FixedLength (self) -> float: ...
    @FixedLength.setter
    def FixedLength (self, value : float): ...
    def EnableFromBothSidesOption (self, on : bool): ...
    def EnableFromMidPointOption (self, on : bool): ...
    def EnableAllVariations (self, on : bool): ...
    def SetFirstPoint (self, point : Point3d): ...
    @property
    def GetLineMode (self) -> GetLineMode: ...
    @GetLineMode.setter
    def GetLineMode (self, value : GetLineMode): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetPolyline:
    def __init__(self): ...
    def Dispose (self): ...
    def Get (self) -> Tuple(Result, Polyline): ...
    @property
    def FirstPointPrompt (self) -> str: ...
    @FirstPointPrompt.setter
    def FirstPointPrompt (self, value : str): ...
    @property
    def SecondPointPrompt (self) -> str: ...
    @SecondPointPrompt.setter
    def SecondPointPrompt (self, value : str): ...
    @property
    def ThirdPointPrompt (self) -> str: ...
    @ThirdPointPrompt.setter
    def ThirdPointPrompt (self, value : str): ...
    @property
    def FourthPointPrompt (self) -> str: ...
    @FourthPointPrompt.setter
    def FourthPointPrompt (self, value : str): ...
    @property
    def MinPointCount (self) -> int: ...
    @MinPointCount.setter
    def MinPointCount (self, value : int): ...
    @property
    def MaxPointCount (self) -> int: ...
    @MaxPointCount.setter
    def MaxPointCount (self, value : int): ...
    def SetFirstPoint (self, point : Point3d): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetTransform:
    def AddTransformObjects (self, list : TransformObjectList): ...
    def CalculateTransform (self, viewport : RhinoViewport, point : Point3d) -> Transform: ...
    @property
    def HaveTransform (self) -> bool: ...
    @HaveTransform.setter
    def HaveTransform (self, value : bool): ...
    @property
    def Transform (self) -> Transform: ...
    @Transform.setter
    def Transform (self, value : Transform): ...
    @property
    def ObjectList (self) -> TransformObjectList: ...
    def GetXform (self) -> GetResult: ...
    def SetBasePoint (self, basePoint : Point3d, showDistanceInStatusBar : bool): ...
    def TryGetBasePoint (self) -> Tuple(bool, Point3d): ...
    def GetPlanarConstraint (self, vp : RhinoViewport) -> Tuple(bool, RhinoViewport, Plane): ...
    def ConstrainDistanceFromBasePoint (self, distance : float): ...
    @property
    def DynamicDrawColor (self) -> Color: ...
    @DynamicDrawColor.setter
    def DynamicDrawColor (self, value : Color): ...
    def SetCursor (self, cursor : CursorStyle): ...
    def EnableObjectSnapCursors (self, enable : bool): ...
    def DrawLineFromPoint (self, startPoint : Point3d, showDistanceInStatusBar : bool): ...
    def EnableDrawLineFromPoint (self, enable : bool): ...
    def EnableNoRedrawOnExit (self, noRedraw : bool): ...
    def PermitOrthoSnap (self, permit : bool): ...
    def PermitFromOption (self, permit : bool): ...
    def PermitConstraintOptions (self, permit : bool): ...
    def PermitTabMode (self, permit : bool): ...
    def PermitElevatorMode (self, permitMode : int): ...
    def PermitObjectSnap (self, permit : bool): ...
    def AddSnapPoint (self, point : Point3d) -> int: ...
    def AddSnapPoints (self, points : Set(Point3d)) -> int: ...
    def AddConstructionPoint (self, point : Point3d) -> int: ...
    def AddConstructionPoints (self, points : Set(Point3d)) -> int: ...
    def ClearSnapPoints (self): ...
    def ClearConstructionPoints (self): ...
    def GetSnapPoints (self) -> Set(Point3d): ...
    def GetConstructionPoints (self) -> Set(Point3d): ...
    def EnableCurveSnapTangentBar (self, drawTangentBarAtSnapPoint : bool, drawEndPoints : bool): ...
    def EnableCurveSnapPerpBar (self, drawPerpBarAtSnapPoint : bool, drawEndPoints : bool): ...
    def EnableCurveSnapArrow (self, drawDirectionArrowAtSnapPoint : bool, reverseArrow : bool): ...
    def EnableSnapToCurves (self, enable : bool): ...
    def Constrain (self, from_ : Point3d, to : Point3d) -> bool: ...
    def Constrain (self, line : Line) -> bool: ...
    def Constrain (self, arc : Arc) -> bool: ...
    def Constrain (self, circle : Circle) -> bool: ...
    def Constrain (self, plane : Plane, allowElevator : bool) -> bool: ...
    def Constrain (self, sphere : Sphere) -> bool: ...
    def Constrain (self, cylinder : Cylinder) -> bool: ...
    def Constrain (self, curve : Curve, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, surface : Surface, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, brep : Brep, wireDensity : int, faceIndex : int, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, mesh : Mesh, allowPickingPointOffObject : bool) -> bool: ...
    def ConstrainToConstructionPlane (self, throughBasePoint : bool) -> bool: ...
    def ConstrainToTargetPlane (self): ...
    def ConstrainToVirtualCPlaneIntersection (self, plane : Plane) -> bool: ...
    def ClearConstraints (self): ...
    def InterruptMouseMove (self) -> bool: ...
    def add_MouseMove (self, value : EventHandler): ...
    def remove_MouseMove (self, value : EventHandler): ...
    @property
    def Tag (self) -> Object: ...
    @Tag.setter
    def Tag (self, value : Object): ...
    def add_MouseDown (self, value : EventHandler): ...
    def remove_MouseDown (self, value : EventHandler): ...
    def add_DynamicDraw (self, value : EventHandler): ...
    def remove_DynamicDraw (self, value : EventHandler): ...
    @property
    def FullFrameRedrawDuringGet (self) -> bool: ...
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet (self, value : bool): ...
    def add_PostDrawObjects (self, value : EventHandler): ...
    def remove_PostDrawObjects (self, value : EventHandler): ...
    def Get (self, onMouseUp : bool) -> GetResult: ...
    def Get (self, onMouseUp : bool, get2DPoint : bool) -> GetResult: ...
    def Get (self) -> GetResult: ...
    def PointOnObject (self) -> ObjRef: ...
    def PointOnCurve (self) -> Tuple(Curve, float): ...
    def PointOnSurface (self) -> Tuple(Surface, float, float): ...
    def PointOnBrep (self) -> Tuple(BrepFace, float, float): ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class PickStyle:
    None = 0
    PointPick = 1
    WindowPick = 2
    CrossingPick = 3
class PickMode:
    Wireframe = 1
    Shaded = 2
class PickContext:
    def __init__(self): ...
    def Dispose (self): ...
    @property
    def View (self) -> RhinoView: ...
    @View.setter
    def View (self, value : RhinoView): ...
    @property
    def PickLine (self) -> Line: ...
    @PickLine.setter
    def PickLine (self, value : Line): ...
    @property
    def PickStyle (self) -> PickStyle: ...
    @PickStyle.setter
    def PickStyle (self, value : PickStyle): ...
    @property
    def PickMode (self) -> PickMode: ...
    @PickMode.setter
    def PickMode (self, value : PickMode): ...
    @property
    def PickGroupsEnabled (self) -> bool: ...
    @PickGroupsEnabled.setter
    def PickGroupsEnabled (self, value : bool): ...
    @property
    def SubObjectSelectionEnabled (self) -> bool: ...
    @SubObjectSelectionEnabled.setter
    def SubObjectSelectionEnabled (self, value : bool): ...
    @property
    def GetObjectUsed (self) -> GetObject: ...
    def SetPickTransform (self, transform : Transform): ...
    def UpdateClippingPlanes (self): ...
    def PickFrustumTest (self, box : BoundingBox) -> Tuple(bool, bool): ...
    def PickFrustumTest (self, point : Point3d) -> Tuple(bool, float, float): ...
    def PickFrustumTest (self, points : Set(Point3d)) -> Tuple(bool, int, float, float): ...
    def PickFrustumTest (self, cloud : PointCloud) -> Tuple(bool, int, float, float): ...
    def PickFrustumTest (self, line : Line) -> Tuple(bool, float, float, float): ...
    def PickFrustumTest (self, bezier : BezierCurve) -> Tuple(bool, float, float, float): ...
    def PickFrustumTest (self, curve : NurbsCurve) -> Tuple(bool, float, float, float): ...
    def PickFrustumTest (self, mesh : Mesh, pickStyle : MeshPickStyle) -> Tuple(bool, Point3d, Point2d, Point2d, float, float, MeshHitFlag, int): ...
    def PickFrustumTest (self, mesh : Mesh, pickStyle : MeshPickStyle) -> Tuple(bool, Point3d, float, float, MeshHitFlag, int): ...
    def PickMeshTopologyVertices (self, mesh : Mesh) -> Set(int): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetFileNameMode:
    Open = 0
    OpenTemplate = 1
    OpenImage = 2
    OpenRhinoOnly = 3
    OpenTextFile = 5
    OpenWorksession = 6
    Import = 7
    Attach = 8
    LoadPlugIn = 9
    Save = 10
    SaveSmall = 11
    SaveTemplate = 12
    SaveImage = 13
    Export = 14
    SaveTextFile = 17
    SaveWorksession = 18
class GetString:
    def __init__(self): ...
    def Get (self) -> GetResult: ...
    def GetLiteralString (self) -> GetResult: ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetOption:
    def __init__(self): ...
    def Get (self) -> GetResult: ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetNumber:
    def __init__(self): ...
    def Get (self) -> GetResult: ...
    def SetLowerLimit (self, lowerLimit : float, strictlyGreaterThan : bool): ...
    def SetUpperLimit (self, upperLimit : float, strictlyLessThan : bool): ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetInteger:
    def __init__(self): ...
    def Get (self) -> GetResult: ...
    def Number (self) -> int: ...
    def SetLowerLimit (self, lowerLimit : int, strictlyGreaterThan : bool): ...
    def SetUpperLimit (self, upperLimit : int, strictlyLessThan : bool): ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetObjectGeometryFilter:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, rhObject : RhinoObject, geometry : GeometryBase, componentIndex : ComponentIndex) -> bool: ...
    def BeginInvoke (self, rhObject : RhinoObject, geometry : GeometryBase, componentIndex : ComponentIndex, callback : AsyncCallback, object : Object) -> IAsyncResult: ...
    def EndInvoke (self, result : IAsyncResult) -> bool: ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class GetObject:
    def __init__(self): ...
    def ActiveGetObject (doc : RhinoDoc) -> GetObject: ...
    @property
    def GeometryFilter (self) -> ObjectType: ...
    @GeometryFilter.setter
    def GeometryFilter (self, value : ObjectType): ...
    @property
    def GeometryAttributeFilter (self) -> GeometryAttributeFilter: ...
    @GeometryAttributeFilter.setter
    def GeometryAttributeFilter (self, value : GeometryAttributeFilter): ...
    def CustomGeometryFilter (self, rhObject : RhinoObject, geometry : GeometryBase, componentIndex : ComponentIndex) -> bool: ...
    def SetCustomGeometryFilter (self, filter : GetObjectGeometryFilter): ...
    def PassesGeometryAttributeFilter (self, rhObject : RhinoObject, geometry : GeometryBase, componentIndex : ComponentIndex) -> bool: ...
    def EnablePreSelect (self, enable : bool, ignoreUnacceptablePreselectedObjects : bool): ...
    def DisablePreSelect (self): ...
    def EnablePostSelect (self, enable : bool): ...
    @property
    def DeselectAllBeforePostSelect (self) -> bool: ...
    @DeselectAllBeforePostSelect.setter
    def DeselectAllBeforePostSelect (self, value : bool): ...
    @property
    def OneByOnePostSelect (self) -> bool: ...
    @OneByOnePostSelect.setter
    def OneByOnePostSelect (self, value : bool): ...
    @property
    def SubObjectSelect (self) -> bool: ...
    @SubObjectSelect.setter
    def SubObjectSelect (self, value : bool): ...
    @property
    def ChooseOneQuestion (self) -> bool: ...
    @ChooseOneQuestion.setter
    def ChooseOneQuestion (self, value : bool): ...
    @property
    def BottomObjectPreference (self) -> bool: ...
    @BottomObjectPreference.setter
    def BottomObjectPreference (self, value : bool): ...
    @property
    def GroupSelect (self) -> bool: ...
    @GroupSelect.setter
    def GroupSelect (self, value : bool): ...
    @property
    def InactiveDetailPickEnabled (self) -> bool: ...
    @InactiveDetailPickEnabled.setter
    def InactiveDetailPickEnabled (self, value : bool): ...
    def EnableSelPrevious (self, enable : bool): ...
    def EnableHighlight (self, enable : bool): ...
    @property
    def ReferenceObjectSelect (self) -> bool: ...
    @ReferenceObjectSelect.setter
    def ReferenceObjectSelect (self, value : bool): ...
    def EnableIgnoreGrips (self, enable : bool): ...
    def EnablePressEnterWhenDonePrompt (self, enable : bool): ...
    def SetPressEnterWhenDonePrompt (self, prompt : str): ...
    @property
    def AlreadySelectedObjectSelect (self) -> bool: ...
    @AlreadySelectedObjectSelect.setter
    def AlreadySelectedObjectSelect (self, value : bool): ...
    def Get (self) -> GetResult: ...
    def GetMultiple (self, minimumNumber : int, maximumNumber : int) -> GetResult: ...
    @property
    def ObjectCount (self) -> int: ...
    def Object (self, index : int) -> ObjRef: ...
    def Objects (self) -> Set(ObjRef): ...
    @property
    def ObjectsWerePreselected (self) -> bool: ...
    @property
    def SerialNumber (self) -> UInt32: ...
    def EnableClearObjectsOnEntry (self, enable : bool): ...
    def EnableUnselectObjectsOnExit (self, enable : bool): ...
    def AppendToPickList (self, objref : ObjRef): ...
    def ClearObjects (self): ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GeometryAttributeFilter:
    WireCurve = 1
    EdgeCurve = 2
    ClosedCurve = 4
    OpenCurve = 8
    SeamEdge = 16
    ManifoldEdge = 32
    NonmanifoldEdge = 64
    MatedEdge = 112
    SurfaceBoundaryEdge = 128
    TrimmingBoundaryEdge = 256
    BoundaryEdge = 384
    ClosedSurface = 512
    OpenSurface = 1024
    TrimmedSurface = 2048
    UntrimmedSurface = 4096
    SubSurface = 8192
    TopSurface = 16384
    ManifoldPolysrf = 32768
    NonmanifoldPolysrf = 65536
    ClosedPolysrf = 131072
    OpenPolysrf = 262144
    ClosedMesh = 524288
    OpenMesh = 1048576
    BoundaryInnerLoop = 2097152
    MatedInnerLoop = 4194304
    InnerLoop = 6291456
    BoundaryOuterLoop = 8388608
    MatedOuterLoop = 16777216
    OuterLoop = 25165824
    SpecialLoop = 33554432
    AcceptAllAttributes = 4294967295
class GetPoint:
    def __init__(self): ...
    def SetBasePoint (self, basePoint : Point3d, showDistanceInStatusBar : bool): ...
    def TryGetBasePoint (self) -> Tuple(bool, Point3d): ...
    def GetPlanarConstraint (self, vp : RhinoViewport) -> Tuple(bool, RhinoViewport, Plane): ...
    def ConstrainDistanceFromBasePoint (self, distance : float): ...
    @property
    def DynamicDrawColor (self) -> Color: ...
    @DynamicDrawColor.setter
    def DynamicDrawColor (self, value : Color): ...
    def SetCursor (self, cursor : CursorStyle): ...
    def EnableObjectSnapCursors (self, enable : bool): ...
    def DrawLineFromPoint (self, startPoint : Point3d, showDistanceInStatusBar : bool): ...
    def EnableDrawLineFromPoint (self, enable : bool): ...
    def EnableNoRedrawOnExit (self, noRedraw : bool): ...
    def PermitOrthoSnap (self, permit : bool): ...
    def PermitFromOption (self, permit : bool): ...
    def PermitConstraintOptions (self, permit : bool): ...
    def PermitTabMode (self, permit : bool): ...
    def PermitElevatorMode (self, permitMode : int): ...
    def PermitObjectSnap (self, permit : bool): ...
    def AddSnapPoint (self, point : Point3d) -> int: ...
    def AddSnapPoints (self, points : Set(Point3d)) -> int: ...
    def AddConstructionPoint (self, point : Point3d) -> int: ...
    def AddConstructionPoints (self, points : Set(Point3d)) -> int: ...
    def ClearSnapPoints (self): ...
    def ClearConstructionPoints (self): ...
    def GetSnapPoints (self) -> Set(Point3d): ...
    def GetConstructionPoints (self) -> Set(Point3d): ...
    def EnableCurveSnapTangentBar (self, drawTangentBarAtSnapPoint : bool, drawEndPoints : bool): ...
    def EnableCurveSnapPerpBar (self, drawPerpBarAtSnapPoint : bool, drawEndPoints : bool): ...
    def EnableCurveSnapArrow (self, drawDirectionArrowAtSnapPoint : bool, reverseArrow : bool): ...
    def EnableSnapToCurves (self, enable : bool): ...
    def Constrain (self, from_ : Point3d, to : Point3d) -> bool: ...
    def Constrain (self, line : Line) -> bool: ...
    def Constrain (self, arc : Arc) -> bool: ...
    def Constrain (self, circle : Circle) -> bool: ...
    def Constrain (self, plane : Plane, allowElevator : bool) -> bool: ...
    def Constrain (self, sphere : Sphere) -> bool: ...
    def Constrain (self, cylinder : Cylinder) -> bool: ...
    def Constrain (self, curve : Curve, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, surface : Surface, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, brep : Brep, wireDensity : int, faceIndex : int, allowPickingPointOffObject : bool) -> bool: ...
    def Constrain (self, mesh : Mesh, allowPickingPointOffObject : bool) -> bool: ...
    def ConstrainToConstructionPlane (self, throughBasePoint : bool) -> bool: ...
    def ConstrainToTargetPlane (self): ...
    def ConstrainToVirtualCPlaneIntersection (self, plane : Plane) -> bool: ...
    def ClearConstraints (self): ...
    def InterruptMouseMove (self) -> bool: ...
    def add_MouseMove (self, value : EventHandler): ...
    def remove_MouseMove (self, value : EventHandler): ...
    @property
    def Tag (self) -> Object: ...
    @Tag.setter
    def Tag (self, value : Object): ...
    def add_MouseDown (self, value : EventHandler): ...
    def remove_MouseDown (self, value : EventHandler): ...
    def add_DynamicDraw (self, value : EventHandler): ...
    def remove_DynamicDraw (self, value : EventHandler): ...
    @property
    def FullFrameRedrawDuringGet (self) -> bool: ...
    @FullFrameRedrawDuringGet.setter
    def FullFrameRedrawDuringGet (self, value : bool): ...
    def add_PostDrawObjects (self, value : EventHandler): ...
    def remove_PostDrawObjects (self, value : EventHandler): ...
    def Get (self, onMouseUp : bool) -> GetResult: ...
    def Get (self, onMouseUp : bool, get2DPoint : bool) -> GetResult: ...
    def Get (self) -> GetResult: ...
    def PointOnObject (self) -> ObjRef: ...
    def PointOnCurve (self) -> Tuple(Curve, float): ...
    def PointOnSurface (self) -> Tuple(Surface, float, float): ...
    def PointOnBrep (self) -> Tuple(BrepFace, float, float): ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetPointDrawEventArgs:
    @property
    def CurrentPoint (self) -> Point3d: ...
    @property
    def Source (self) -> GetPoint: ...
    @property
    def Viewport (self) -> RhinoViewport: ...
    @property
    def Display (self) -> DisplayPipeline: ...
    @property
    def RhinoDoc (self) -> RhinoDoc: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetPointMouseEventArgs:
    @property
    def Source (self) -> GetPoint: ...
    @property
    def Viewport (self) -> RhinoViewport: ...
    @property
    def Point (self) -> Point3d: ...
    @property
    def WindowPoint (self) -> Point: ...
    @property
    def LeftButtonDown (self) -> bool: ...
    @property
    def RightButtonDown (self) -> bool: ...
    @property
    def ShiftKeyDown (self) -> bool: ...
    @property
    def ControlKeyDown (self) -> bool: ...
    @property
    def MiddleButtonDown (self) -> bool: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetBaseClass:
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def PostCustomMessage (messageData : Object): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class CommandLineOption:
    def IsValidOptionName (optionName : str) -> bool: ...
    def IsValidOptionValueName (optionValue : str) -> bool: ...
    @property
    def Index (self) -> int: ...
    @property
    def CurrentListOptionIndex (self) -> int: ...
    @property
    def EnglishName (self) -> str: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class OptionToggle:
    def __init__(self, initialValue : bool, offValue : str, onValue : str): ...
    def __init__(self, initialValue : bool, offValue : LocalizeStringPair, onValue : LocalizeStringPair): ...
    def Dispose (self): ...
    @property
    def CurrentValue (self) -> bool: ...
    @CurrentValue.setter
    def CurrentValue (self, value : bool): ...
    @property
    def InitialValue (self) -> bool: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class OptionDouble:
    def __init__(self, initialValue : float): ...
    def __init__(self, initialValue : float, lowerLimit : float, upperLimit : float): ...
    def __init__(self, initialValue : float, setLowerLimit : bool, limit : float): ...
    def Dispose (self): ...
    @property
    def CurrentValue (self) -> float: ...
    @CurrentValue.setter
    def CurrentValue (self, value : float): ...
    @property
    def InitialValue (self) -> float: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class OptionInteger:
    def __init__(self, initialValue : int): ...
    def __init__(self, initialValue : int, lowerLimit : int, upperLimit : int): ...
    def __init__(self, initialValue : int, setLowerLimit : bool, limit : int): ...
    def Dispose (self): ...
    @property
    def CurrentValue (self) -> int: ...
    @CurrentValue.setter
    def CurrentValue (self, value : int): ...
    @property
    def InitialValue (self) -> int: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class OptionColor:
    def __init__(self, initialValue : Color): ...
    def Dispose (self): ...
    @property
    def CurrentValue (self) -> Color: ...
    @CurrentValue.setter
    def CurrentValue (self, value : Color): ...
    @property
    def InitialValue (self) -> Color: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class TaskCompleteEventArgs:
    def __init__(self, task : Task, doc : RhinoDoc): ...
    @property
    def Task (self) -> Task: ...
    @Task.setter
    def Task (self, value : Task): ...
    @property
    def Doc (self) -> RhinoDoc: ...
    @Doc.setter
    def Doc (self, value : RhinoDoc): ...
    @property
    def Redraw (self) -> bool: ...
    @Redraw.setter
    def Redraw (self, value : bool): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class GetCancel:
    def __init__(self): ...
    @property
    def Token (self) -> CancellationToken: ...
    def add_TaskCompleted (self, value : EventHandler): ...
    def remove_TaskCompleted (self, value : EventHandler): ...
    @property
    def ProgressReporting (self) -> bool: ...
    @ProgressReporting.setter
    def ProgressReporting (self, value : bool): ...
    @property
    def ProgressMessage (self) -> str: ...
    @ProgressMessage.setter
    def ProgressMessage (self, value : str): ...
    def Wait (self, task : Task, doc : RhinoDoc) -> Result: ...
    def WaitAll (self, tasks : Iterable(Task), doc : RhinoDoc) -> Result: ...
    @property
    def Progress (self) -> IProgress: ...
    def Dispose (self): ...
    def SetCommandPrompt (self, prompt : str): ...
    def SetCommandPromptDefault (self, defaultValue : str): ...
    def SetDefaultPoint (self, point : Point3d): ...
    def SetDefaultNumber (self, defaultNumber : float): ...
    def SetDefaultInteger (self, defaultValue : int): ...
    def SetDefaultString (self, defaultValue : str): ...
    def SetDefaultColor (self, defaultColor : Color): ...
    def SetWaitDuration (self, milliseconds : int): ...
    def ClearDefault (self): ...
    def GotDefault (self) -> bool: ...
    def AddOption (self, englishOption : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str) -> int: ...
    def AddOption (self, englishOption : str, englishOptionValue : str, hiddenOption : bool) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair) -> int: ...
    def AddOption (self, optionName : LocalizeStringPair, optionValue : LocalizeStringPair, hiddenOption : bool) -> int: ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble, prompt : str) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, englishName : str, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionDouble (self, optionName : LocalizeStringPair, numberValue : OptionDouble) -> Tuple(int, OptionDouble): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger, prompt : str) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, englishName : str, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionInteger (self, optionName : LocalizeStringPair, intValue : OptionInteger) -> Tuple(int, OptionInteger): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, optionName : LocalizeStringPair, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor, prompt : str) -> Tuple(int, OptionColor): ...
    def AddOptionColor (self, englishName : str, colorValue : OptionColor) -> Tuple(int, OptionColor): ...
    def AddOptionToggle (self, englishName : str, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionToggle (self, optionName : LocalizeStringPair, toggleValue : OptionToggle) -> Tuple(int, OptionToggle): ...
    def AddOptionList (self, englishOptionName : str, listValues : Iterable(str), listCurrentIndex : int) -> int: ...
    def AddOptionList (self, optionName : LocalizeStringPair, listValues : Iterable(LocalizeStringPair), listCurrentIndex : int) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T) -> int: ...
    def AddOptionEnumList (self, englishOptionName : str, defaultValue : T, include : Set(T)) -> int: ...
    def AddOptionEnumSelectionList (self, englishOptionName : str, enumSelection : Iterable(T), listCurrentIndex : int) -> int: ...
    def GetSelectedEnumValue (self) -> T: ...
    def GetSelectedEnumValueFromSelectionList (self, selectionList : Iterable(T)) -> T: ...
    def ClearCommandOptions (self): ...
    def EnableTransparentCommands (self, enable : bool): ...
    def AcceptNothing (self, enable : bool): ...
    def AcceptUndo (self, enable : bool): ...
    def AcceptEnterWhenDone (self, enable : bool): ...
    def AcceptNumber (self, enable : bool, acceptZero : bool): ...
    def AcceptPoint (self, enable : bool): ...
    def AcceptColor (self, enable : bool): ...
    def AcceptString (self, enable : bool): ...
    def AcceptCustomMessage (self, enable : bool): ...
    def CustomMessage (self) -> Object: ...
    def Result (self) -> GetResult: ...
    def CommandResult (self) -> Result: ...
    def Option (self) -> CommandLineOption: ...
    def OptionIndex (self) -> int: ...
    def Number (self) -> float: ...
    def StringResult (self) -> str: ...
    def Point (self) -> Point3d: ...
    def Vector (self) -> Vector3d: ...
    def Color (self) -> Color: ...
    def View (self) -> RhinoView: ...
    def PickRectangle (self) -> Rectangle: ...
    def Point2d (self) -> Point: ...
    def Rectangle2d (self) -> Rectangle: ...
    def Line2d (self) -> Set(Point): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class MeshPickStyle:
    WireframePicking = 0
    ShadedModePicking = 1
    VertexOnlyPicking = 2
class MeshHitFlag:
    Vertex = 0
    Edge = 1
    Face = 2
    Invalid = -1
