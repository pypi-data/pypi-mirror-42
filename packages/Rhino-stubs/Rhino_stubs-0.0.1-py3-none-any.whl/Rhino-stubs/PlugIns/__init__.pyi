from typing import Tuple, Set, Iterable, List

class DescriptionType:
    Organization = 0
    Address = 1
    Country = 2
    Phone = 3
    WebSite = 4
    Email = 5
    UpdateUrl = 6
    Fax = 7
    Icon = 8
class LoadReturnCode:
    ErrorShowDialog = 0
    Success = 1
    ErrorNoDialog = -1
class PlugInDescriptionAttribute:
    def __init__(self, descriptionType : DescriptionType, value : str): ...
    @property
    def DescriptionType (self) -> DescriptionType: ...
    @property
    def Value (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    @property
    def TypeId (self) -> Object: ...
    def Match (self, obj : Object) -> bool: ...
    def IsDefaultAttribute (self) -> bool: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class LicenseIdAttribute:
    def __init__(self, value : str): ...
    @property
    def Value (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    @property
    def TypeId (self) -> Object: ...
    def Match (self, obj : Object) -> bool: ...
    def IsDefaultAttribute (self) -> bool: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class PlugInLoadTime:
    Disabled = 0
    AtStartup = 1
    WhenNeeded = 2
    WhenNeededIgnoreDockingBars = 6
    WhenNeededOrOptionsDialog = 10
    WhenNeededOrTabbedDockBar = 18
class PlugInType:
    None = 0
    Render = 1
    FileImport = 2
    FileExport = 4
    Digitizer = 8
    Utility = 16
    DisplayPipeline = 32
    DisplayEngine = 64
    Any = 127
class LoadPlugInResult:
    Success = 0
    SuccessAlreadyLoaded = 1
    ErrorUnknown = 2
class LicenseChangedEventArgs:
    def __init__(self): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class PlugIn:
    def LoadPlugIn (pluginId : Guid, loadQuietly : bool, forceLoad : bool) -> bool: ...
    def GetEnglishCommandNames (pluginId : Guid) -> Set(str): ...
    def SetLoadProtection (pluginId : Guid, loadSilently : bool): ...
    def GetLoadProtection (pluginId : Guid) -> Tuple(bool, bool): ...
    def LoadPlugIn (path : str) -> Tuple(LoadPlugInResult, Guid): ...
    def Find (pluginAssembly : Assembly) -> PlugIn: ...
    def Find (plugInId : Guid) -> PlugIn: ...
    def GetPluginSettings (plugInId : Guid, load : bool) -> PersistentSettings: ...
    def SavePluginSettings (plugInId : Guid): ...
    def RaiseOnPlugInSettingsSavedEvent (): ...
    def FlushSettingsSavedQueue (): ...
    @property
    def Assembly (self) -> Assembly: ...
    @property
    def Id (self) -> Guid: ...
    @property
    def LicenseId (self) -> Guid: ...
    @property
    def Name (self) -> str: ...
    @property
    def Version (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def Description (self) -> str: ...
    def GetCommands (self) -> Set(Command): ...
    @property
    def LoadAtStartup (self) -> bool: ...
    @property
    def LoadTime (self) -> PlugInLoadTime: ...
    def GetPlugInObject (self) -> Object: ...
    @property
    def SettingsDirectoryAllUsers (self) -> str: ...
    @property
    def SettingsDirectory (self) -> str: ...
    def add_SettingsSaved (self, value : EventHandler): ...
    def remove_SettingsSaved (self, value : EventHandler): ...
    def SaveSettings (self): ...
    @property
    def Settings (self) -> PersistentSettings: ...
    @property
    def WindowPositionSettings (self) -> PersistentSettings: ...
    def CommandSettings (self, name : str) -> PersistentSettings: ...
    def GetPlugInInfo (pluginId : Guid) -> PlugInInfo: ...
    @property
    def AskOnLoadProtection () -> bool: ...
    @AskOnLoadProtection.setter
    def AskOnLoadProtection (value : bool): ...
    @property
    def InstalledPlugInCount () -> int: ...
    def PlugInExists (id : Guid) -> Tuple(bool, bool, bool): ...
    def GetInstalledPlugIns () -> Dictionary: ...
    def GetInstalledPlugInNames () -> Set(str): ...
    def GetInstalledPlugInNames (typeFilter : PlugInType, loaded : bool, unloaded : bool) -> Set(str): ...
    def GetInstalledPlugInFolders () -> Set(str): ...
    def NameFromPath (pluginPath : str) -> str: ...
    def PathFromName (pluginName : str) -> str: ...
    def PathFromId (pluginId : Guid) -> str: ...
    def IdFromPath (pluginPath : str) -> Guid: ...
    def IdFromName (pluginName : str) -> Guid: ...
    def LoadPlugIn (pluginId : Guid) -> bool: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class PlugInInfo:
    @property
    def Id (self) -> Guid: ...
    @property
    def RegistryPath (self) -> str: ...
    @property
    def Name (self) -> str: ...
    @property
    def Description (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def FileName (self) -> str: ...
    @property
    def Version (self) -> str: ...
    @property
    def Organization (self) -> str: ...
    @property
    def Address (self) -> str: ...
    @property
    def Country (self) -> str: ...
    @property
    def Email (self) -> str: ...
    @property
    def Phone (self) -> str: ...
    @property
    def Fax (self) -> str: ...
    @property
    def WebSite (self) -> str: ...
    @property
    def UpdateUrl (self) -> str: ...
    @property
    def PlugInType (self) -> PlugInType: ...
    @property
    def PlugInLoadTime (self) -> PlugInLoadTime: ...
    @property
    def IsLoaded (self) -> bool: ...
    def IsLoadProtected (self) -> Tuple(bool, bool): ...
    @property
    def ShipsWithRhino (self) -> bool: ...
    @property
    def IsDotNet (self) -> bool: ...
    @property
    def CommandNames (self) -> Set(str): ...
    @property
    def FileTypeDescriptions (self) -> Set(str): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class FileTypeList:
    def __init__(self): ...
    def __init__(self, description : str, extension : str): ...
    def __init__(self, description : str, extension : str, showOptionsButtonInFileDialog : bool): ...
    def AddFileType (self, description : str, extension : str) -> int: ...
    def AddFileType (self, description : str, extension : str, showOptionsButtonInFileDialog : bool) -> int: ...
    def AddFileType (self, description : str, extension1 : str, extension2 : str) -> int: ...
    def AddFileType (self, description : str, extension1 : str, extension2 : str, showOptionsButtonInFileDialog : bool) -> int: ...
    def AddFileType (self, description : str, extensions : Iterable(str)) -> int: ...
    def AddFileType (self, description : str, extensions : Iterable(str), showOptionsButtonInFileDialog : bool) -> int: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class FileImportPlugIn:
    @property
    def Assembly (self) -> Assembly: ...
    @property
    def Id (self) -> Guid: ...
    @property
    def LicenseId (self) -> Guid: ...
    @property
    def Name (self) -> str: ...
    @property
    def Version (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def Description (self) -> str: ...
    def GetCommands (self) -> Set(Command): ...
    @property
    def LoadAtStartup (self) -> bool: ...
    @property
    def LoadTime (self) -> PlugInLoadTime: ...
    def GetPlugInObject (self) -> Object: ...
    @property
    def SettingsDirectoryAllUsers (self) -> str: ...
    @property
    def SettingsDirectory (self) -> str: ...
    def add_SettingsSaved (self, value : EventHandler): ...
    def remove_SettingsSaved (self, value : EventHandler): ...
    def SaveSettings (self): ...
    @property
    def Settings (self) -> PersistentSettings: ...
    @property
    def WindowPositionSettings (self) -> PersistentSettings: ...
    def CommandSettings (self, name : str) -> PersistentSettings: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class WriteFileResult:
    Failure = 0
    Success = 1
    Cancel = -1
class FileExportPlugIn:
    @property
    def Assembly (self) -> Assembly: ...
    @property
    def Id (self) -> Guid: ...
    @property
    def LicenseId (self) -> Guid: ...
    @property
    def Name (self) -> str: ...
    @property
    def Version (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def Description (self) -> str: ...
    def GetCommands (self) -> Set(Command): ...
    @property
    def LoadAtStartup (self) -> bool: ...
    @property
    def LoadTime (self) -> PlugInLoadTime: ...
    def GetPlugInObject (self) -> Object: ...
    @property
    def SettingsDirectoryAllUsers (self) -> str: ...
    @property
    def SettingsDirectory (self) -> str: ...
    def add_SettingsSaved (self, value : EventHandler): ...
    def remove_SettingsSaved (self, value : EventHandler): ...
    def SaveSettings (self): ...
    @property
    def Settings (self) -> PersistentSettings: ...
    @property
    def WindowPositionSettings (self) -> PersistentSettings: ...
    def CommandSettings (self, name : str) -> PersistentSettings: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class PreviewNotification:
    def NotifyIntermediateUpdate (self, rw : RenderWindow): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class RenderPlugIn:
    def CurrentRendererSupportsFeature (feature : RenderFeature) -> bool: ...
    @property
    def PerferBasicContent (self) -> bool: ...
    @PerferBasicContent.setter
    def PerferBasicContent (self, value : bool): ...
    def OnAssignMaterial (self, parent : IntPtr, doc : RhinoDoc, material : Material) -> Tuple(bool, Material): ...
    def EnableAssignMaterialButton (self) -> bool: ...
    def OnEditMaterial (self, parent : IntPtr, doc : RhinoDoc, material : Material) -> Tuple(bool, Material): ...
    def EnableEditMaterialButton (self, doc : RhinoDoc, material : Material) -> bool: ...
    def OnCreateMaterial (self, parent : IntPtr, doc : RhinoDoc, material : Material) -> Tuple(bool, Material): ...
    def EnableCreateMaterialButton (self) -> bool: ...
    def SunCustomSections (self, sections : List): ...
    def RenderSettingsCustomSections (self, sections : List): ...
    @property
    def Assembly (self) -> Assembly: ...
    @property
    def Id (self) -> Guid: ...
    @property
    def LicenseId (self) -> Guid: ...
    @property
    def Name (self) -> str: ...
    @property
    def Version (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def Description (self) -> str: ...
    def GetCommands (self) -> Set(Command): ...
    @property
    def LoadAtStartup (self) -> bool: ...
    @property
    def LoadTime (self) -> PlugInLoadTime: ...
    def GetPlugInObject (self) -> Object: ...
    @property
    def SettingsDirectoryAllUsers (self) -> str: ...
    @property
    def SettingsDirectory (self) -> str: ...
    def add_SettingsSaved (self, value : EventHandler): ...
    def remove_SettingsSaved (self, value : EventHandler): ...
    def SaveSettings (self): ...
    @property
    def Settings (self) -> PersistentSettings: ...
    @property
    def WindowPositionSettings (self) -> PersistentSettings: ...
    def CommandSettings (self, name : str) -> PersistentSettings: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class CustomRenderSaveFileTypes:
    def RegisterFileType (self, extensions : Iterable(str), description : str, saveFileHandler : SaveFileHandler): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class DigitizerPlugIn:
    def SendPoint (self, point : Point3d, mousebuttons : MouseButton, shiftKey : bool, controlKey : bool): ...
    def SendRay (self, ray : Ray3d, mousebuttons : MouseButton, shiftKey : bool, controlKey : bool): ...
    @property
    def Assembly (self) -> Assembly: ...
    @property
    def Id (self) -> Guid: ...
    @property
    def LicenseId (self) -> Guid: ...
    @property
    def Name (self) -> str: ...
    @property
    def Version (self) -> str: ...
    def Icon (self, size : Size) -> Bitmap: ...
    @property
    def Description (self) -> str: ...
    def GetCommands (self) -> Set(Command): ...
    @property
    def LoadAtStartup (self) -> bool: ...
    @property
    def LoadTime (self) -> PlugInLoadTime: ...
    def GetPlugInObject (self) -> Object: ...
    @property
    def SettingsDirectoryAllUsers (self) -> str: ...
    @property
    def SettingsDirectory (self) -> str: ...
    def add_SettingsSaved (self, value : EventHandler): ...
    def remove_SettingsSaved (self, value : EventHandler): ...
    def SaveSettings (self): ...
    @property
    def Settings (self) -> PersistentSettings: ...
    @property
    def WindowPositionSettings (self) -> PersistentSettings: ...
    def CommandSettings (self, name : str) -> PersistentSettings: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class LicenseUtils:
    def Initialize () -> bool: ...
    def ShowRhinoExpiredMessage (mode : Mode, result : int) -> Tuple(bool, int): ...
    def Echo (message : str) -> str: ...
    def ShowLicenseValidationUi (cdkey : str) -> bool: ...
    def GetLicense (validateProductKeyDelegate : ValidateProductKeyDelegate, leaseChangedDelegate : OnLeaseChangedDelegate, verifyLicenseKeyDelegate : VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate : VerifyPreviousVersionLicenseDelegate, product_type : int, capabilities : int, textMask : str, product_path : str, product_title : str, pluginId : Guid, licenseId : Guid) -> bool: ...
    def GetLicense (validateProductKeyDelegate : ValidateProductKeyDelegate, leaseChangedDelegate : OnLeaseChangedDelegate, product_type : int, capabilities : int, textMask : str, product_path : str, product_title : str, pluginId : Guid, licenseId : Guid) -> bool: ...
    def AskUserForLicense (productType : int, standAlone : bool, parentWindow : Object, textMask : str, validateProductKeyDelegate : ValidateProductKeyDelegate, onLeaseChangedDelegate : OnLeaseChangedDelegate, verifyLicenseKeyDelegate : VerifyLicenseKeyDelegate, verifyPreviousVersionLicenseKeyDelegate : VerifyPreviousVersionLicenseDelegate, product_path : str, product_title : str, pluginId : Guid, licenseId : Guid, capabilities : LicenseCapabilities) -> bool: ...
    def AskUserForLicense (productType : int, standAlone : bool, parentWindow : Object, textMask : str, validateProductKeyDelegate : ValidateProductKeyDelegate, onLeaseChangedDelegate : OnLeaseChangedDelegate, product_path : str, product_title : str, pluginId : Guid, licenseId : Guid, capabilities : LicenseCapabilities) -> bool: ...
    def ReturnLicense (productId : Guid) -> bool: ...
    def CheckOutLicense (productId : Guid) -> bool: ...
    def CheckInLicense (productId : Guid) -> bool: ...
    def ConvertLicense (productId : Guid) -> bool: ...
    def DeleteLicense (productId : Guid) -> bool: ...
    def GetLicenseType (productId : Guid) -> int: ...
    def IsCheckOutEnabled () -> bool: ...
    def GetLicenseStatus () -> Set(LicenseStatus): ...
    def GetOneLicenseStatus (productid : Guid) -> LicenseStatus: ...
    def GetLicenseCapabilities (filter : int) -> LicenseCapabilities: ...
    def LicenseOptionsHandler (pluginId : Guid, licenseId : Guid, productTitle : str, standAlone : bool) -> bool: ...
    def ShowBuyLicenseUi (productId : Guid): ...
    def LoginToCloudZoo () -> bool: ...
    def LogoutOfCloudZoo () -> bool: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class ValidateResult:
    ErrorShowMessage = 0
    Success = 1
    ErrorHideMessage = -1
class ValidateProductKeyDelegate:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, productKey : str) -> Tuple(ValidateResult, LicenseData): ...
    def BeginInvoke (self, productKey : str, callback : AsyncCallback, object : Object) -> Tuple(IAsyncResult, LicenseData): ...
    def EndInvoke (self, result : IAsyncResult) -> Tuple(ValidateResult, LicenseData): ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class VerifyLicenseKeyDelegate:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, licenseKey : str, validationCode : str, validationCodeInstallDate : DateTime, gracePeriodExpired : bool) -> Tuple(ValidateResult, LicenseData): ...
    def BeginInvoke (self, licenseKey : str, validationCode : str, validationCodeInstallDate : DateTime, gracePeriodExpired : bool, callback : AsyncCallback, object : Object) -> Tuple(IAsyncResult, LicenseData): ...
    def EndInvoke (self, result : IAsyncResult) -> Tuple(ValidateResult, LicenseData): ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class OnLeaseChangedDelegate:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, args : LicenseLeaseChangedEventArgs) -> Tuple(Icon): ...
    def BeginInvoke (self, args : LicenseLeaseChangedEventArgs, callback : AsyncCallback, object : Object) -> Tuple(IAsyncResult, Icon): ...
    def EndInvoke (self, result : IAsyncResult) -> Tuple(Icon): ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class VerifyPreviousVersionLicenseDelegate:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, license : str, previousVersionLicense : str) -> Tuple(bool, str): ...
    def BeginInvoke (self, license : str, previousVersionLicense : str, callback : AsyncCallback, object : Object) -> Tuple(IAsyncResult, str): ...
    def EndInvoke (self, result : IAsyncResult) -> Tuple(bool, str): ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
class LicenseBuildType:
    Unspecified = 0
    Release = 100
    Evaluation = 200
    Beta = 300
class LicenseCapabilities:
    NoCapabilities = 0
    CanBePurchased = 1
    CanBeSpecified = 2
    CanBeEvaluated = 4
    EvaluationIsExpired = 8
    SupportsRhinoAccounts = 16
class LicenseLease:
    def __init__(self, unmanagedPointer : IntPtr): ...
    def __init__(self, productId : str, groupName : str, groupId : str, userName : str, userId : str, productTitle : str, productVersion : str, productEdition : str, leaseId : str, iat : DateTime, exp : DateTime): ...
    def __init__(self, productId : str, groupName : str, groupId : str, userName : str, userId : str, productTitle : str, productVersion : str, productEdition : str, leaseId : str, iat : DateTime, exp : DateTime, renewable_until : DateTime): ...
    @property
    def ProductId (self) -> str: ...
    @property
    def GroupName (self) -> str: ...
    @property
    def GroupId (self) -> str: ...
    @property
    def UserName (self) -> str: ...
    @property
    def UserId (self) -> str: ...
    @property
    def ProductTitle (self) -> str: ...
    @property
    def ProductVersion (self) -> str: ...
    @property
    def ProductEdition (self) -> str: ...
    @property
    def LeaseId (self) -> str: ...
    @property
    def IssuedAt (self) -> DateTime: ...
    @property
    def Expiration (self) -> DateTime: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class LicenseLeaseChangedEventArgs:
    def __init__(self, lease : LicenseLease): ...
    @property
    def Lease (self) -> LicenseLease: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class LicenseData:
    def __init__(self): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str, buildType : LicenseBuildType): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str, buildType : LicenseBuildType, licenseCount : int): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str, buildType : LicenseBuildType, licenseCount : int, expirationDate : Nullable): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str, buildType : LicenseBuildType, licenseCount : int, expirationDate : Nullable, productIcon : Icon): ...
    def __init__(self, productLicense : str, serialNumber : str, licenseTitle : str, buildType : LicenseBuildType, licenseCount : int, expirationDate : Nullable, productIcon : Icon, requiresOnlineValidation : bool, isUpgradeFromPreviousVersion : bool): ...
    def IsValid (self) -> bool: ...
    def IsValid (self, ignoreExpirationDate : bool) -> bool: ...
    def Dispose (self): ...
    @property
    def ProductLicense (self) -> str: ...
    @ProductLicense.setter
    def ProductLicense (self, value : str): ...
    @property
    def SerialNumber (self) -> str: ...
    @SerialNumber.setter
    def SerialNumber (self, value : str): ...
    @property
    def LicenseTitle (self) -> str: ...
    @LicenseTitle.setter
    def LicenseTitle (self, value : str): ...
    @property
    def BuildType (self) -> LicenseBuildType: ...
    @BuildType.setter
    def BuildType (self, value : LicenseBuildType): ...
    @property
    def LicenseCount (self) -> int: ...
    @LicenseCount.setter
    def LicenseCount (self, value : int): ...
    @property
    def DateToExpire (self) -> Nullable: ...
    @DateToExpire.setter
    def DateToExpire (self, value : Nullable): ...
    @property
    def RequiresOnlineValidation (self) -> bool: ...
    @RequiresOnlineValidation.setter
    def RequiresOnlineValidation (self, value : bool): ...
    @property
    def IsUpgradeFromPreviousVersion (self) -> bool: ...
    @IsUpgradeFromPreviousVersion.setter
    def IsUpgradeFromPreviousVersion (self, value : bool): ...
    @property
    def ErrorMessage (self) -> str: ...
    @ErrorMessage.setter
    def ErrorMessage (self, value : str): ...
    @property
    def ProductIcon (self) -> Icon: ...
    @ProductIcon.setter
    def ProductIcon (self, value : Icon): ...
    @property
    def LicenseExpires (self) -> bool: ...
    def IsNotValid (data : LicenseData) -> bool: ...
    def IsValid (data : LicenseData) -> bool: ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class LicenseType:
    Standalone = 0
    Network = 1
    NetworkLoanedOut = 2
    NetworkCheckedOut = 3
    CloudZoo = 4
class LicenseStatus:
    def __init__(self): ...
    @property
    def PluginId (self) -> Guid: ...
    @PluginId.setter
    def PluginId (self, value : Guid): ...
    @property
    def ProductId (self) -> Guid: ...
    @ProductId.setter
    def ProductId (self, value : Guid): ...
    @property
    def BuildType (self) -> LicenseBuildType: ...
    @BuildType.setter
    def BuildType (self, value : LicenseBuildType): ...
    @property
    def LicenseTitle (self) -> str: ...
    @LicenseTitle.setter
    def LicenseTitle (self, value : str): ...
    @property
    def SerialNumber (self) -> str: ...
    @SerialNumber.setter
    def SerialNumber (self, value : str): ...
    @property
    def LicenseType (self) -> LicenseType: ...
    @LicenseType.setter
    def LicenseType (self, value : LicenseType): ...
    @property
    def ExpirationDate (self) -> Nullable: ...
    @ExpirationDate.setter
    def ExpirationDate (self, value : Nullable): ...
    @property
    def CheckOutExpirationDate (self) -> Nullable: ...
    @CheckOutExpirationDate.setter
    def CheckOutExpirationDate (self, value : Nullable): ...
    @property
    def RegisteredOwner (self) -> str: ...
    @RegisteredOwner.setter
    def RegisteredOwner (self, value : str): ...
    @property
    def RegisteredOrganization (self) -> str: ...
    @RegisteredOrganization.setter
    def RegisteredOrganization (self, value : str): ...
    @property
    def ProductIcon (self) -> Icon: ...
    @ProductIcon.setter
    def ProductIcon (self, value : Icon): ...
    @property
    def CloudZooLeaseIsValid (self) -> bool: ...
    @CloudZooLeaseIsValid.setter
    def CloudZooLeaseIsValid (self, value : bool): ...
    @property
    def CloudZooLeaseExpiration (self) -> Nullable: ...
    @CloudZooLeaseExpiration.setter
    def CloudZooLeaseExpiration (self, value : Nullable): ...
    def ToString (self) -> str: ...
    def Equals (self, obj : Object) -> bool: ...
    def GetHashCode (self) -> int: ...
    def GetType (self) -> Type: ...
class RenderFeature:
    Materials = 0
    Environments = 1
    Textures = 2
    PostEffects = 3
    Sun = 4
    CustomRenderMeshes = 5
    Decals = 6
    GroundPlane = 7
    SkyLight = 8
    CustomDecalProperties = 9
    LinearWorkflow = 10
    Exposure = 11
    ShadowOnlyGroundPlane = 12
    RenderBlowup = 13
    RenderWindow = 14
    RenderInWindow = 15
    FocalBlur = 17
    RenderArctic = 18
    RenderViewSource = 19
    CustomSkylightEnvironment = 20
    CustomReflectionEnvironment = 21
class PreviewRenderTypes:
    None = 0
    ThreeSeparateImages = 1
    SingleImage = 2
    Progressive = 3
class SaveFileHandler:
    def __init__(self, object : Object, method : IntPtr): ...
    def Invoke (self, fileName : str, includeAlpha : bool, renderWindow : RenderWindow) -> bool: ...
    def BeginInvoke (self, fileName : str, includeAlpha : bool, renderWindow : RenderWindow, callback : AsyncCallback, object : Object) -> IAsyncResult: ...
    def EndInvoke (self, result : IAsyncResult) -> bool: ...
    def GetObjectData (self, info : SerializationInfo, context : StreamingContext): ...
    def Equals (self, obj : Object) -> bool: ...
    def GetInvocationList (self) -> Set(Delegate): ...
    def GetHashCode (self) -> int: ...
    def DynamicInvoke (self, args : Set(Object)) -> Object: ...
    @property
    def Method (self) -> MethodInfo: ...
    @property
    def Target (self) -> Object: ...
    def Clone (self) -> Object: ...
    def ToString (self) -> str: ...
    def GetType (self) -> Type: ...
