import os
import sys
import argparse

from main import run
from defaults import *


MODES = ["CreatMetrics","FilterBias"]

if sys.version_info[0] != 2 or sys.version_info[1] < 7 or sys.version_info[2] < 5:
    print("This script requires Python version 2.7.5 or higher within major version 2")
    sys.exit(1)

def parseArg():
    main_parser = argparse.ArgumentParser(description="Run Artifact DNA damage filter",)
    mode_parser = main_parser.add_argument_group("Mode input options")
    mode_parser.add_argument("mode",  metavar="Mode", help="Mode to run the filter. Choose from %s"%list(MODES), choices=MODES)    
    args = main_parser.parse_args(sys.argv[1:2])
    mode = args.mode   
    parser = argparse.ArgumentParser(description="Run Artifact DNA damage filter in %s mode"%mode, prog= " ".join(sys.argv[0:2]))                                     
    general_parser = parser.add_argument_group("General options")
    general_parser.add_argument("mode", metavar=mode, choices=MODES)
    general_parser.add_argument("-o","--outdir" , help="Output directory, default: ./", default=os.getcwd(),metavar="outdir")                                   
    if mode == "CreatMetrics":
        metrice_parser = parser.add_argument_group("Creat Sequencing Artifact Metrics options")
        metrice_parser.add_argument("-i","--input",type=str,help="the input bam file",required=True,metavar="bam")
        metrice_parser.add_argument("-r","--ref",type=str,help="reference fasta sequence",required=True,metavar="fasta")
        metrice_parser.add_argument("-p","--prefix",type=str,help="prefix of output metrics file name",metavar="prefix",default="out")        
    if mode == "FilterBias":
        filter_parser = parser.add_argument_group("Filter orientation_bias options")
        filter_parser.add_argument("-v","--vcfile",type=str,help="input you vcf file")
        filter_parser.add_argument("-t","--type",type=str,help="artifact_modes types, like 'G/T' ...",nargs="+", metavar="mode",required=True)
        filter_parser.add_argument("-m","--metrics",type=str,help="detail metrics file. generated by 'picard CollectSequencingArtifactMetrics' or '%(prog)s CreatMetrics'.",required = True,metavar="metrics_file")
        filter_parser.add_argument("-n","--name",type=str,help="output vcf file name",metavar="name",required = True)       
    return parser.parse_args(),parser
        
def main():
    sys.exit(run(*parseArg()))
        
if __name__ =="__main__":
    main()
    
