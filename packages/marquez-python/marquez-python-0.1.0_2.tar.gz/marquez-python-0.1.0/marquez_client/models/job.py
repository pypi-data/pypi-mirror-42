# coding: utf-8

"""
    Marquez

    Marquez is an open source **metadata service** for the **collection**, **aggregation**, and **visualization** of a data ecosystem's metadata.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'input_dataset_urns': 'list[str]',
        'output_dataset_urns': 'list[str]',
        'location': 'str',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'input_dataset_urns': 'inputDatasetUrns',
        'output_dataset_urns': 'outputDatasetUrns',
        'location': 'location',
        'description': 'description'
    }

    def __init__(self, name=None, created_at=None, updated_at=None, input_dataset_urns=None, output_dataset_urns=None, location=None, description=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._created_at = None
        self._updated_at = None
        self._input_dataset_urns = None
        self._output_dataset_urns = None
        self._location = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if input_dataset_urns is not None:
            self.input_dataset_urns = input_dataset_urns
        if output_dataset_urns is not None:
            self.output_dataset_urns = output_dataset_urns
        if location is not None:
            self.location = location
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        The name of the job.  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        The name of the job.  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was created.  # noqa: E501

        :return: The created_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was created.  # noqa: E501

        :param created_at: The created_at of this Job.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.  # noqa: E501

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was updated.  # noqa: E501

        :return: The updated_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job was updated.  # noqa: E501

        :param updated_at: The updated_at of this Job.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def input_dataset_urns(self):
        """Gets the input_dataset_urns of this Job.  # noqa: E501

        The URN list of input datasets.  # noqa: E501

        :return: The input_dataset_urns of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_dataset_urns

    @input_dataset_urns.setter
    def input_dataset_urns(self, input_dataset_urns):
        """Sets the input_dataset_urns of this Job.

        The URN list of input datasets.  # noqa: E501

        :param input_dataset_urns: The input_dataset_urns of this Job.  # noqa: E501
        :type: list[str]
        """

        self._input_dataset_urns = input_dataset_urns

    @property
    def output_dataset_urns(self):
        """Gets the output_dataset_urns of this Job.  # noqa: E501

        The URN list of output datasets.  # noqa: E501

        :return: The output_dataset_urns of this Job.  # noqa: E501
        :rtype: list[str]
        """
        return self._output_dataset_urns

    @output_dataset_urns.setter
    def output_dataset_urns(self, output_dataset_urns):
        """Sets the output_dataset_urns of this Job.

        The URN list of output datasets.  # noqa: E501

        :param output_dataset_urns: The output_dataset_urns of this Job.  # noqa: E501
        :type: list[str]
        """

        self._output_dataset_urns = output_dataset_urns

    @property
    def location(self):
        """Gets the location of this Job.  # noqa: E501

        The URI of the job source or artifact.  # noqa: E501

        :return: The location of this Job.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Job.

        The URI of the job source or artifact.  # noqa: E501

        :param location: The location of this Job.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def description(self):
        """Gets the description of this Job.  # noqa: E501

        The description of the job.  # noqa: E501

        :return: The description of this Job.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        The description of the job.  # noqa: E501

        :param description: The description of this Job.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
