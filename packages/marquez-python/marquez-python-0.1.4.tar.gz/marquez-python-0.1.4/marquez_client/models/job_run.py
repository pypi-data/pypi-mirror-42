# coding: utf-8

"""
    Marquez

    Marquez is an open source **metadata service** for the **collection**, **aggregation**, and **visualization** of a data ecosystem's metadata.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JobRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nominal_start_time': 'datetime',
        'nominal_end_time': 'datetime',
        'run_id': 'str',
        'run_state': 'str',
        'run_args': 'str',
        'started_at': 'datetime',
        'ended_at': 'datetime'
    }

    attribute_map = {
        'nominal_start_time': 'nominalStartTime',
        'nominal_end_time': 'nominalEndTime',
        'run_id': 'runId',
        'run_state': 'runState',
        'run_args': 'runArgs',
        'started_at': 'startedAt',
        'ended_at': 'endedAt'
    }

    def __init__(self, nominal_start_time=None, nominal_end_time=None, run_id=None, run_state=None, run_args=None, started_at=None, ended_at=None):  # noqa: E501
        """JobRun - a model defined in OpenAPI"""  # noqa: E501

        self._nominal_start_time = None
        self._nominal_end_time = None
        self._run_id = None
        self._run_state = None
        self._run_args = None
        self._started_at = None
        self._ended_at = None
        self.discriminator = None

        if nominal_start_time is not None:
            self.nominal_start_time = nominal_start_time
        if nominal_end_time is not None:
            self.nominal_end_time = nominal_end_time
        if run_id is not None:
            self.run_id = run_id
        if run_state is not None:
            self.run_state = run_state
        if run_args is not None:
            self.run_args = run_args
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at

    @property
    def nominal_start_time(self):
        """Gets the nominal_start_time of this JobRun.  # noqa: E501

        The nominal start time of the job.  # noqa: E501

        :return: The nominal_start_time of this JobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._nominal_start_time

    @nominal_start_time.setter
    def nominal_start_time(self, nominal_start_time):
        """Sets the nominal_start_time of this JobRun.

        The nominal start time of the job.  # noqa: E501

        :param nominal_start_time: The nominal_start_time of this JobRun.  # noqa: E501
        :type: datetime
        """

        self._nominal_start_time = nominal_start_time

    @property
    def nominal_end_time(self):
        """Gets the nominal_end_time of this JobRun.  # noqa: E501

        The nominal end time of the job.  # noqa: E501

        :return: The nominal_end_time of this JobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._nominal_end_time

    @nominal_end_time.setter
    def nominal_end_time(self, nominal_end_time):
        """Sets the nominal_end_time of this JobRun.

        The nominal end time of the job.  # noqa: E501

        :param nominal_end_time: The nominal_end_time of this JobRun.  # noqa: E501
        :type: datetime
        """

        self._nominal_end_time = nominal_end_time

    @property
    def run_id(self):
        """Gets the run_id of this JobRun.  # noqa: E501

        The unique ID assigned to the run.  # noqa: E501

        :return: The run_id of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this JobRun.

        The unique ID assigned to the run.  # noqa: E501

        :param run_id: The run_id of this JobRun.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def run_state(self):
        """Gets the run_state of this JobRun.  # noqa: E501

        The current state of the job [\"RUNNING\", \"ABORTED\", \"FAILED\",\"COMPLETED\"].  # noqa: E501

        :return: The run_state of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._run_state

    @run_state.setter
    def run_state(self, run_state):
        """Sets the run_state of this JobRun.

        The current state of the job [\"RUNNING\", \"ABORTED\", \"FAILED\",\"COMPLETED\"].  # noqa: E501

        :param run_state: The run_state of this JobRun.  # noqa: E501
        :type: str
        """

        self._run_state = run_state

    @property
    def run_args(self):
        """Gets the run_args of this JobRun.  # noqa: E501

        The runtime arguments of the job. JSON encoded.  # noqa: E501

        :return: The run_args of this JobRun.  # noqa: E501
        :rtype: str
        """
        return self._run_args

    @run_args.setter
    def run_args(self, run_args):
        """Sets the run_args of this JobRun.

        The runtime arguments of the job. JSON encoded.  # noqa: E501

        :param run_args: The run_args of this JobRun.  # noqa: E501
        :type: str
        """

        self._run_args = run_args

    @property
    def started_at(self):
        """Gets the started_at of this JobRun.  # noqa: E501

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job started.  # noqa: E501

        :return: The started_at of this JobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this JobRun.

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job started.  # noqa: E501

        :param started_at: The started_at of this JobRun.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this JobRun.  # noqa: E501

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job ended.  # noqa: E501

        :return: The ended_at of this JobRun.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this JobRun.

        An [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp representing the date/time the job ended.  # noqa: E501

        :param ended_at: The ended_at of this JobRun.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
