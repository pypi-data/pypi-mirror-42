# coding: utf-8

"""
    Marquez

    Marquez is an open source **metadata service** for the **collection**, **aggregation**, and **visualization** of a data ecosystem's metadata.  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DB(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'Enum',
        'connection_url': 'str',
        'schema': 'str',
        'table': 'str',
        'description': 'str'
    }

    attribute_map = {
        'type': 'type',
        'connection_url': 'connectionUrl',
        'schema': 'schema',
        'table': 'table',
        'description': 'description'
    }

    def __init__(self, type=None, connection_url=None, schema=None, table=None, description=None):  # noqa: E501
        """DB - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._connection_url = None
        self._schema = None
        self._table = None
        self._description = None
        self.discriminator = None

        self.type = type
        self.connection_url = connection_url
        self.schema = schema
        self.table = table
        if description is not None:
            self.description = description

    @property
    def type(self):
        """Gets the type of this DB.  # noqa: E501

        The output dataset type.  # noqa: E501

        :return: The type of this DB.  # noqa: E501
        :rtype: Enum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DB.

        The output dataset type.  # noqa: E501

        :param type: The type of this DB.  # noqa: E501
        :type: Enum
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def connection_url(self):
        """Gets the connection_url of this DB.  # noqa: E501

        The URL to connect to the database.  # noqa: E501

        :return: The connection_url of this DB.  # noqa: E501
        :rtype: str
        """
        return self._connection_url

    @connection_url.setter
    def connection_url(self, connection_url):
        """Sets the connection_url of this DB.

        The URL to connect to the database.  # noqa: E501

        :param connection_url: The connection_url of this DB.  # noqa: E501
        :type: str
        """
        if connection_url is None:
            raise ValueError("Invalid value for `connection_url`, must not be `None`")  # noqa: E501

        self._connection_url = connection_url

    @property
    def schema(self):
        """Gets the schema of this DB.  # noqa: E501

        The name of the database schema.  # noqa: E501

        :return: The schema of this DB.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DB.

        The name of the database schema.  # noqa: E501

        :param schema: The schema of this DB.  # noqa: E501
        :type: str
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def table(self):
        """Gets the table of this DB.  # noqa: E501

        The name of the table.  # noqa: E501

        :return: The table of this DB.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DB.

        The name of the table.  # noqa: E501

        :param table: The table of this DB.  # noqa: E501
        :type: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501

        self._table = table

    @property
    def description(self):
        """Gets the description of this DB.  # noqa: E501

        The description of the output dataset.  # noqa: E501

        :return: The description of this DB.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DB.

        The description of the output dataset.  # noqa: E501

        :param description: The description of this DB.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DB):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
