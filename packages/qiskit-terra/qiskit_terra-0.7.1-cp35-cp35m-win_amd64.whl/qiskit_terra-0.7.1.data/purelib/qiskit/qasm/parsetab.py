
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "mainNNINTEGER BARRIER OPAQUE RESET IF REAL QREG CREG GATE PI CX U MEASURE MAGIC ASSIGN MATCHES ID STRING\n            main : program\n        \n           program : statement\n        \n           program : program statement\n        \n           statement : decl\n                     | quantum_op ';'\n                     | magic ';'\n                     | ignore\n                     | quantum_op error\n                     | magic error\n        \n           magic : MAGIC REAL\n        \n           magic : MAGIC error\n        \n           id : ID\n        \n           id : error\n        \n           indexed_id : id '[' NNINTEGER ']'\n                      | id '[' NNINTEGER error\n                      | id '[' error\n        \n           primary : id\n                   | indexed_id\n        \n           id_list : id\n        \n           id_list : id_list ',' id\n        \n           gate_id_list : id\n        \n           gate_id_list : gate_id_list ',' id\n        \n           bit_list : id\n        \n           bit_list : bit_list ',' id\n        \n           primary_list : primary\n        \n           primary_list : primary_list ',' primary\n        \n           decl : qreg_decl ';'\n                | creg_decl ';'\n                | qreg_decl error\n                | creg_decl error\n                | gate_decl\n        \n           qreg_decl : QREG indexed_id\n        \n           qreg_decl : QREG error\n        \n           creg_decl : CREG indexed_id\n        \n           creg_decl : CREG error\n        \n           gate_decl : GATE id gate_scope bit_list gate_body\n        \n           gate_decl : GATE id gate_scope '(' ')' bit_list gate_body\n        \n        gate_decl : GATE id gate_scope '(' gate_id_list ')' bit_list gate_body\n        \n           gate_scope :\n        \n           gate_body : '{' '}'\n        \n           gate_body : '{' gate_op_list '}'\n        \n            gate_op_list : gate_op\n        \n            gate_op_list : gate_op_list gate_op\n        \n          unitary_op : U '(' exp_list ')' primary\n        \n        unitary_op : CX primary ',' primary\n        \n        unitary_op : id primary_list\n        \n        unitary_op : id '(' ')' primary_list\n        \n        unitary_op : id '(' exp_list ')' primary_list\n        \n        gate_op : U '(' exp_list ')' id ';'\n        \n        gate_op : U '(' exp_list ')' error\n        \n        gate_op : U '(' exp_list error\n        \n        gate_op : CX id ',' id ';'\n        \n        gate_op : CX error\n        \n        gate_op : CX id ',' error\n        \n        gate_op : id id_list ';'\n        \n        gate_op : id  id_list error\n        \n        gate_op : id '(' ')' id_list ';'\n        \n        gate_op : id '(' exp_list ')' id_list ';'\n        \n        gate_op : id '(' ')'  error\n        \n        gate_op : id '('   error\n        \n        gate_op : BARRIER id_list ';'\n        \n        gate_op : BARRIER error\n        \n           opaque : OPAQUE id gate_scope bit_list\n        \n           opaque : OPAQUE id gate_scope '(' ')' bit_list\n        \n           opaque : OPAQUE id gate_scope '(' gate_id_list ')' bit_list\n        \n           opaque : OPAQUE id gate_scope '(' error\n        \n           measure : MEASURE primary ASSIGN primary\n        \n           measure : MEASURE primary error\n        \n        barrier : BARRIER primary_list\n        \n        reset : RESET primary\n        \n        if : IF '(' id MATCHES NNINTEGER ')' quantum_op\n        if : IF '(' id error\n        if : IF '(' id MATCHES error\n        if : IF '(' id MATCHES NNINTEGER error\n        if : IF error\n        \n            quantum_op : unitary_op\n                       | opaque\n                       | measure\n                       | barrier\n                       | reset\n                       | if\n        \n           unary : NNINTEGER\n        \n           unary : REAL\n        \n           unary : PI\n        \n           unary : id\n        \n           unary : '(' expression ')'\n        \n           unary : id '(' expression ')'\n        \n           prefix_expression : unary\n        \n           prefix_expression : '+' prefix_expression\n                             | '-' prefix_expression\n        \n            additive_expression : prefix_expression\n        \n            additive_expression : additive_expression '+' prefix_expression\n                                | additive_expression '-' prefix_expression\n        \n            multiplicative_expression : additive_expression\n        \n        multiplicative_expression : multiplicative_expression '*' additive_expression\n                                  | multiplicative_expression '/' additive_expression\n        \n            expression : multiplicative_expression\n        \n            expression : expression '^' multiplicative_expression\n        \n           exp_list : expression\n        \n           exp_list : exp_list ',' expression\n        \n           ignore : STRING\n        "
    
_lr_action_items = {'MAGIC':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[18,18,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),'STRING':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[19,19,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),'QREG':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[20,20,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),'CREG':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[21,21,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),'GATE':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[22,22,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),'U':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,114,134,135,136,147,149,150,156,158,159,165,166,170,172,173,175,178,181,183,184,186,187,188,],[24,24,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,137,-40,137,-42,24,-41,-43,-53,-62,-37,-55,-56,-60,-61,-38,-51,-59,-54,-50,-57,-52,-49,-58,]),'CX':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,114,134,135,136,147,149,150,156,158,159,165,166,170,172,173,175,178,181,183,184,186,187,188,],[25,25,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,139,-40,139,-42,25,-41,-43,-53,-62,-37,-55,-56,-60,-61,-38,-51,-59,-54,-50,-57,-52,-49,-58,]),'OPAQUE':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,147,149,159,173,],[26,26,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,26,-41,-37,-38,]),'MEASURE':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,147,149,159,173,],[27,27,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,27,-41,-37,-38,]),'BARRIER':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,114,134,135,136,147,149,150,156,158,159,165,166,170,172,173,175,178,181,183,184,186,187,188,],[28,28,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,140,-40,140,-42,28,-41,-43,-53,-62,-37,-55,-56,-60,-61,-38,-51,-59,-54,-50,-57,-52,-49,-58,]),'RESET':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,147,149,159,173,],[29,29,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,29,-41,-37,-38,]),'IF':([0,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,147,149,159,173,],[30,30,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,30,-41,-37,-38,]),'ID':([0,2,3,4,7,8,11,19,20,21,22,23,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,48,51,54,56,60,63,64,66,67,73,74,80,81,82,89,91,94,95,96,97,98,99,100,103,106,112,113,114,116,128,134,135,136,138,139,140,142,143,146,147,149,150,151,154,156,158,159,165,166,167,168,170,171,172,173,174,175,178,179,181,183,184,186,187,188,],[31,31,-2,-4,-7,-13,-31,-101,31,31,31,31,31,31,31,31,31,-12,-3,-5,-8,-6,-9,-27,-29,-28,-30,-39,31,31,-39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-36,31,31,31,31,-40,31,-42,31,31,31,31,31,31,31,-41,-43,31,31,-53,-62,-37,-55,-56,31,31,-60,31,-61,-38,31,-51,-59,31,-54,-50,-57,-52,-49,-58,]),'error':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,135,136,138,139,140,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,159,162,163,164,165,166,167,168,170,171,172,173,174,175,176,178,179,181,183,184,186,187,188,],[8,8,-2,-4,34,36,-7,-13,38,40,-31,-76,-77,-78,-79,-80,-81,42,-101,44,47,8,8,8,8,8,8,8,61,-12,-3,-5,-8,-6,-9,-27,-29,-28,-30,-10,-11,-32,-33,-34,-35,-39,-17,-46,8,-25,-18,8,-39,83,-69,-70,8,-75,86,8,8,-85,8,8,-99,-97,-94,-91,8,8,-88,-82,-83,-84,8,8,8,-68,109,111,-16,-23,8,-26,8,-47,8,8,8,8,8,8,8,-89,-90,8,-45,-63,130,-67,132,-72,-14,-15,-36,8,8,8,-86,-48,-100,-98,-95,-96,-92,-93,-44,8,-66,148,-73,-24,-40,8,-42,8,156,158,8,8,-87,-64,8,8,-74,-41,-43,8,-19,166,170,-53,-62,-37,-65,-71,175,-55,-56,8,178,-60,181,-61,-38,183,-51,-20,-59,8,-54,-50,-57,-52,-49,-58,]),'$end':([1,2,3,4,7,11,19,32,33,34,35,36,37,38,39,40,112,134,149,159,173,],[0,-1,-2,-4,-7,-31,-101,-3,-5,-8,-6,-9,-27,-29,-28,-30,-36,-40,-41,-37,-38,]),';':([5,6,8,9,10,12,13,14,15,16,17,31,41,42,43,44,46,47,49,50,52,53,58,59,61,83,86,87,90,93,104,105,107,109,110,111,120,127,130,132,133,145,148,152,153,157,158,162,163,176,177,178,180,181,182,183,185,],[33,35,-13,37,39,-76,-77,-78,-79,-80,-81,-12,-10,-11,-32,-33,-34,-35,-17,-46,-25,-18,-69,-70,-75,-68,-16,-23,-26,-47,-45,-63,-67,-72,-14,-15,-48,-44,-66,-73,-24,-64,-74,-19,165,172,-13,-65,-71,-20,184,-13,186,-13,187,-13,188,]),'(':([8,23,24,30,31,48,51,54,56,63,65,66,73,74,81,91,95,96,97,98,99,100,137,138,151,154,170,],[-13,51,54,60,-12,-39,66,66,-39,89,91,66,66,66,106,66,66,66,66,66,66,66,151,154,66,66,-13,]),'[':([8,31,44,45,47,49,],[-13,-12,-13,62,-13,62,]),',':([8,31,49,50,52,53,55,58,65,68,69,70,71,72,75,76,77,78,79,86,87,88,90,93,101,102,105,110,111,115,117,119,120,121,122,123,124,125,126,129,130,133,141,144,145,152,153,155,156,157,158,160,161,162,164,169,170,176,177,178,185,],[-13,-12,-17,64,-25,-18,80,64,-85,95,-99,-97,-94,-91,-88,-82,-83,-84,95,-16,-23,113,-26,64,-89,-90,113,-14,-15,-21,143,-86,64,-100,-98,-95,-96,-92,-93,143,-13,-24,113,-87,113,-19,167,171,-13,167,-13,113,-22,113,95,95,-13,-20,167,-13,167,]),'ASSIGN':([8,31,49,53,57,86,110,111,],[-13,-12,-17,-18,82,-16,-14,-15,]),'+':([8,31,51,54,65,66,71,72,73,74,75,76,77,78,91,95,96,97,98,99,100,101,102,119,123,124,125,126,144,151,154,170,],[-13,-12,73,73,-85,73,99,-91,73,73,-88,-82,-83,-84,73,73,73,73,73,73,73,-89,-90,-86,99,99,-92,-93,-87,73,73,-13,]),'-':([8,31,51,54,65,66,71,72,73,74,75,76,77,78,91,95,96,97,98,99,100,101,102,119,123,124,125,126,144,151,154,170,],[-13,-12,74,74,-85,74,100,-91,74,74,-88,-82,-83,-84,74,74,74,74,74,74,74,-89,-90,-86,100,100,-92,-93,-87,74,74,-13,]),'*':([8,31,65,70,71,72,75,76,77,78,101,102,119,122,123,124,125,126,144,170,],[-13,-12,-85,97,-94,-91,-88,-82,-83,-84,-89,-90,-86,97,-95,-96,-92,-93,-87,-13,]),'/':([8,31,65,70,71,72,75,76,77,78,101,102,119,122,123,124,125,126,144,170,],[-13,-12,-85,98,-94,-91,-88,-82,-83,-84,-89,-90,-86,98,-95,-96,-92,-93,-87,-13,]),'^':([8,31,65,69,70,71,72,75,76,77,78,92,101,102,118,119,121,122,123,124,125,126,144,170,],[-13,-12,-85,96,-97,-94,-91,-88,-82,-83,-84,96,-89,-90,96,-86,96,-98,-95,-96,-92,-93,-87,-13,]),')':([8,31,51,65,68,69,70,71,72,75,76,77,78,79,89,92,101,102,106,115,117,118,119,121,122,123,124,125,126,129,130,131,144,154,161,164,169,170,],[-13,-12,67,-85,94,-99,-97,-94,-91,-88,-82,-83,-84,103,116,119,-89,-90,128,-21,142,144,-86,-100,-98,-95,-96,-92,-93,146,-13,147,-87,168,-22,174,179,-13,]),'MATCHES':([8,31,84,],[-13,-12,108,]),'{':([8,31,87,88,133,141,160,],[-13,-12,-23,114,-24,114,114,]),'REAL':([18,51,54,66,73,74,91,95,96,97,98,99,100,151,154,],[41,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'NNINTEGER':([51,54,62,66,73,74,91,95,96,97,98,99,100,108,151,154,],[76,76,85,76,76,76,76,76,76,76,76,76,76,131,76,76,]),'PI':([51,54,66,73,74,91,95,96,97,98,99,100,151,154,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),']':([85,],[110,]),'}':([114,135,136,150,156,158,165,166,170,172,175,178,181,183,184,186,187,188,],[134,149,-42,-43,-53,-62,-55,-56,-60,-61,-51,-59,-54,-50,-57,-52,-49,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'main':([0,],[1,]),'program':([0,],[2,]),'statement':([0,2,],[3,32,]),'decl':([0,2,],[4,4,]),'quantum_op':([0,2,147,],[5,5,163,]),'magic':([0,2,],[6,6,]),'ignore':([0,2,],[7,7,]),'qreg_decl':([0,2,],[9,9,]),'creg_decl':([0,2,],[10,10,]),'gate_decl':([0,2,],[11,11,]),'unitary_op':([0,2,147,],[12,12,12,]),'opaque':([0,2,147,],[13,13,13,]),'measure':([0,2,147,],[14,14,14,]),'barrier':([0,2,147,],[15,15,15,]),'reset':([0,2,147,],[16,16,16,]),'if':([0,2,147,],[17,17,17,]),'id':([0,2,20,21,22,23,25,26,27,28,29,51,54,60,63,64,66,67,73,74,80,81,82,89,91,94,95,96,97,98,99,100,103,106,113,114,116,128,135,138,139,140,142,143,146,147,151,154,167,168,171,174,179,],[23,23,45,45,48,49,49,56,49,49,49,65,65,84,87,49,65,49,65,65,49,87,49,115,65,49,65,65,65,65,65,65,49,115,133,138,87,87,138,152,155,152,87,161,87,23,65,65,176,152,180,182,152,]),'indexed_id':([20,21,23,25,27,28,29,64,67,80,82,94,103,],[43,46,53,53,53,53,53,53,53,53,53,53,53,]),'primary_list':([23,28,67,94,],[50,58,93,120,]),'primary':([23,25,27,28,29,64,67,80,82,94,103,],[52,55,57,52,59,90,52,104,107,52,127,]),'gate_scope':([48,56,],[63,81,]),'exp_list':([51,54,151,154,],[68,79,164,169,]),'expression':([51,54,66,91,95,151,154,],[69,69,92,118,121,69,69,]),'multiplicative_expression':([51,54,66,91,95,96,151,154,],[70,70,70,70,70,122,70,70,]),'additive_expression':([51,54,66,91,95,96,97,98,151,154,],[71,71,71,71,71,71,123,124,71,71,]),'prefix_expression':([51,54,66,73,74,91,95,96,97,98,99,100,151,154,],[72,72,72,101,102,72,72,72,72,72,125,126,72,72,]),'unary':([51,54,66,73,74,91,95,96,97,98,99,100,151,154,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'bit_list':([63,81,116,128,142,146,],[88,105,141,145,160,162,]),'gate_body':([88,141,160,],[112,159,173,]),'gate_id_list':([89,106,],[117,129,]),'gate_op_list':([114,],[135,]),'gate_op':([114,135,],[136,150,]),'id_list':([138,140,168,179,],[153,157,177,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> main","S'",1,None,None,None),
  ('main -> program','main',1,'p_main','_qasmparser.py',252),
  ('program -> statement','program',1,'p_program_0','_qasmparser.py',262),
  ('program -> program statement','program',2,'p_program_1','_qasmparser.py',268),
  ('statement -> decl','statement',1,'p_statement','_qasmparser.py',280),
  ('statement -> quantum_op ;','statement',2,'p_statement','_qasmparser.py',281),
  ('statement -> magic ;','statement',2,'p_statement','_qasmparser.py',282),
  ('statement -> ignore','statement',1,'p_statement','_qasmparser.py',283),
  ('statement -> quantum_op error','statement',2,'p_statement','_qasmparser.py',284),
  ('statement -> magic error','statement',2,'p_statement','_qasmparser.py',285),
  ('magic -> MAGIC REAL','magic',2,'p_magic','_qasmparser.py',295),
  ('magic -> MAGIC error','magic',2,'p_magic_0','_qasmparser.py',301),
  ('id -> ID','id',1,'p_id','_qasmparser.py',312),
  ('id -> error','id',1,'p_id_e','_qasmparser.py',318),
  ('indexed_id -> id [ NNINTEGER ]','indexed_id',4,'p_indexed_id','_qasmparser.py',328),
  ('indexed_id -> id [ NNINTEGER error','indexed_id',4,'p_indexed_id','_qasmparser.py',329),
  ('indexed_id -> id [ error','indexed_id',3,'p_indexed_id','_qasmparser.py',330),
  ('primary -> id','primary',1,'p_primary','_qasmparser.py',346),
  ('primary -> indexed_id','primary',1,'p_primary','_qasmparser.py',347),
  ('id_list -> id','id_list',1,'p_id_list_0','_qasmparser.py',357),
  ('id_list -> id_list , id','id_list',3,'p_id_list_1','_qasmparser.py',363),
  ('gate_id_list -> id','gate_id_list',1,'p_gate_id_list_0','_qasmparser.py',374),
  ('gate_id_list -> gate_id_list , id','gate_id_list',3,'p_gate_id_list_1','_qasmparser.py',381),
  ('bit_list -> id','bit_list',1,'p_bit_list_0','_qasmparser.py',393),
  ('bit_list -> bit_list , id','bit_list',3,'p_bit_list_1','_qasmparser.py',401),
  ('primary_list -> primary','primary_list',1,'p_primary_list_0','_qasmparser.py',414),
  ('primary_list -> primary_list , primary','primary_list',3,'p_primary_list_1','_qasmparser.py',420),
  ('decl -> qreg_decl ;','decl',2,'p_decl','_qasmparser.py',432),
  ('decl -> creg_decl ;','decl',2,'p_decl','_qasmparser.py',433),
  ('decl -> qreg_decl error','decl',2,'p_decl','_qasmparser.py',434),
  ('decl -> creg_decl error','decl',2,'p_decl','_qasmparser.py',435),
  ('decl -> gate_decl','decl',1,'p_decl','_qasmparser.py',436),
  ('qreg_decl -> QREG indexed_id','qreg_decl',2,'p_qreg_decl','_qasmparser.py',449),
  ('qreg_decl -> QREG error','qreg_decl',2,'p_qreg_decl_e','_qasmparser.py',461),
  ('creg_decl -> CREG indexed_id','creg_decl',2,'p_creg_decl','_qasmparser.py',471),
  ('creg_decl -> CREG error','creg_decl',2,'p_creg_decl_e','_qasmparser.py',483),
  ('gate_decl -> GATE id gate_scope bit_list gate_body','gate_decl',5,'p_gate_decl_0','_qasmparser.py',500),
  ('gate_decl -> GATE id gate_scope ( ) bit_list gate_body','gate_decl',7,'p_gate_decl_1','_qasmparser.py',511),
  ('gate_decl -> GATE id gate_scope ( gate_id_list ) bit_list gate_body','gate_decl',8,'p_gate_decl_2','_qasmparser.py',522),
  ('gate_scope -> <empty>','gate_scope',0,'p_gate_scope','_qasmparser.py',534),
  ('gate_body -> { }','gate_body',2,'p_gate_body_0','_qasmparser.py',550),
  ('gate_body -> { gate_op_list }','gate_body',3,'p_gate_body_1','_qasmparser.py',559),
  ('gate_op_list -> gate_op','gate_op_list',1,'p_gate_op_list_0','_qasmparser.py',572),
  ('gate_op_list -> gate_op_list gate_op','gate_op_list',2,'p_gate_op_list_1','_qasmparser.py',578),
  ('unitary_op -> U ( exp_list ) primary','unitary_op',5,'p_unitary_op_0','_qasmparser.py',598),
  ('unitary_op -> CX primary , primary','unitary_op',4,'p_unitary_op_1','_qasmparser.py',606),
  ('unitary_op -> id primary_list','unitary_op',2,'p_unitary_op_2','_qasmparser.py',617),
  ('unitary_op -> id ( ) primary_list','unitary_op',4,'p_unitary_op_3','_qasmparser.py',626),
  ('unitary_op -> id ( exp_list ) primary_list','unitary_op',5,'p_unitary_op_4','_qasmparser.py',635),
  ('gate_op -> U ( exp_list ) id ;','gate_op',6,'p_gate_op_0','_qasmparser.py',656),
  ('gate_op -> U ( exp_list ) error','gate_op',5,'p_gate_op_0e1','_qasmparser.py',664),
  ('gate_op -> U ( exp_list error','gate_op',4,'p_gate_op_0e2','_qasmparser.py',671),
  ('gate_op -> CX id , id ;','gate_op',5,'p_gate_op_1','_qasmparser.py',677),
  ('gate_op -> CX error','gate_op',2,'p_gate_op_1e1','_qasmparser.py',686),
  ('gate_op -> CX id , error','gate_op',4,'p_gate_op_1e2','_qasmparser.py',694),
  ('gate_op -> id id_list ;','gate_op',3,'p_gate_op_2','_qasmparser.py',702),
  ('gate_op -> id id_list error','gate_op',3,'p_gate_op_2e','_qasmparser.py',714),
  ('gate_op -> id ( ) id_list ;','gate_op',5,'p_gate_op_3','_qasmparser.py',720),
  ('gate_op -> id ( exp_list ) id_list ;','gate_op',6,'p_gate_op_4','_qasmparser.py',729),
  ('gate_op -> id ( ) error','gate_op',4,'p_gate_op_4e0','_qasmparser.py',739),
  ('gate_op -> id ( error','gate_op',3,'p_gate_op_4e1','_qasmparser.py',746),
  ('gate_op -> BARRIER id_list ;','gate_op',3,'p_gate_op_5','_qasmparser.py',753),
  ('gate_op -> BARRIER error','gate_op',2,'p_gate_op_5e','_qasmparser.py',761),
  ('opaque -> OPAQUE id gate_scope bit_list','opaque',4,'p_opaque_0','_qasmparser.py',774),
  ('opaque -> OPAQUE id gate_scope ( ) bit_list','opaque',6,'p_opaque_1','_qasmparser.py',786),
  ('opaque -> OPAQUE id gate_scope ( gate_id_list ) bit_list','opaque',7,'p_opaque_2','_qasmparser.py',794),
  ('opaque -> OPAQUE id gate_scope ( error','opaque',5,'p_opaque_1e','_qasmparser.py',805),
  ('measure -> MEASURE primary ASSIGN primary','measure',4,'p_measure','_qasmparser.py',814),
  ('measure -> MEASURE primary error','measure',3,'p_measure_e','_qasmparser.py',822),
  ('barrier -> BARRIER primary_list','barrier',2,'p_barrier','_qasmparser.py',834),
  ('reset -> RESET primary','reset',2,'p_reset','_qasmparser.py',845),
  ('if -> IF ( id MATCHES NNINTEGER ) quantum_op','if',7,'p_if','_qasmparser.py',855),
  ('if -> IF ( id error','if',4,'p_if','_qasmparser.py',856),
  ('if -> IF ( id MATCHES error','if',5,'p_if','_qasmparser.py',857),
  ('if -> IF ( id MATCHES NNINTEGER error','if',6,'p_if','_qasmparser.py',858),
  ('if -> IF error','if',2,'p_if','_qasmparser.py',859),
  ('quantum_op -> unitary_op','quantum_op',1,'p_quantum_op','_qasmparser.py',892),
  ('quantum_op -> opaque','quantum_op',1,'p_quantum_op','_qasmparser.py',893),
  ('quantum_op -> measure','quantum_op',1,'p_quantum_op','_qasmparser.py',894),
  ('quantum_op -> barrier','quantum_op',1,'p_quantum_op','_qasmparser.py',895),
  ('quantum_op -> reset','quantum_op',1,'p_quantum_op','_qasmparser.py',896),
  ('quantum_op -> if','quantum_op',1,'p_quantum_op','_qasmparser.py',897),
  ('unary -> NNINTEGER','unary',1,'p_unary_0','_qasmparser.py',913),
  ('unary -> REAL','unary',1,'p_unary_1','_qasmparser.py',919),
  ('unary -> PI','unary',1,'p_unary_2','_qasmparser.py',925),
  ('unary -> id','unary',1,'p_unary_3','_qasmparser.py',931),
  ('unary -> ( expression )','unary',3,'p_unary_4','_qasmparser.py',937),
  ('unary -> id ( expression )','unary',4,'p_unary_6','_qasmparser.py',943),
  ('prefix_expression -> unary','prefix_expression',1,'p_prefix_expression_0','_qasmparser.py',956),
  ('prefix_expression -> + prefix_expression','prefix_expression',2,'p_prefix_expression_1','_qasmparser.py',962),
  ('prefix_expression -> - prefix_expression','prefix_expression',2,'p_prefix_expression_1','_qasmparser.py',963),
  ('additive_expression -> prefix_expression','additive_expression',1,'p_additive_expression_0','_qasmparser.py',969),
  ('additive_expression -> additive_expression + prefix_expression','additive_expression',3,'p_additive_expression_1','_qasmparser.py',975),
  ('additive_expression -> additive_expression - prefix_expression','additive_expression',3,'p_additive_expression_1','_qasmparser.py',976),
  ('multiplicative_expression -> additive_expression','multiplicative_expression',1,'p_multiplicative_expression_0','_qasmparser.py',982),
  ('multiplicative_expression -> multiplicative_expression * additive_expression','multiplicative_expression',3,'p_multiplicative_expression_1','_qasmparser.py',988),
  ('multiplicative_expression -> multiplicative_expression / additive_expression','multiplicative_expression',3,'p_multiplicative_expression_1','_qasmparser.py',989),
  ('expression -> multiplicative_expression','expression',1,'p_expression_0','_qasmparser.py',995),
  ('expression -> expression ^ multiplicative_expression','expression',3,'p_expression_1','_qasmparser.py',1001),
  ('exp_list -> expression','exp_list',1,'p_exp_list_0','_qasmparser.py',1011),
  ('exp_list -> exp_list , expression','exp_list',3,'p_exp_list_1','_qasmparser.py',1017),
  ('ignore -> STRING','ignore',1,'p_ignore','_qasmparser.py',1024),
]
