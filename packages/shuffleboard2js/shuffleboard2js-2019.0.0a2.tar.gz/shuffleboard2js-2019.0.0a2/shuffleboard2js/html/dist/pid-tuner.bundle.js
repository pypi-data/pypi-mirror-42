!function(e){var t={};function o(l){if(t[l])return t[l].exports;var r=t[l]={i:l,l:!1,exports:{}};return e[l].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,l){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(o.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(l,r,function(t){return e[t]}.bind(null,r));return l},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=438)}({163:function(e,t,o){e.exports=o.p+"assets/media/pig.png"},2:function(e,t){e.exports=riot},438:function(e,t,o){e.exports=o(439)},439:function(e,t,o){"use strict";o.r(t);o(440);var l=o(163),r=o.n(l);dashboard.registerWidget("pid-tuner",{label:"PID Tuner",category:"Sensors",acceptedTypes:["PIDController"],image:r.a,minX:3,minY:3})},440:function(e,t,o){o(2).tag2("pid-tuner",'<form> <div class="form-group row"> <label for="inputP" class="col-sm-2 col-form-label">p</label> <div class="col-sm-10"> <input onchange="{onPChange}" class="form-control" riot-value="{opts.table.p}" id="inputP" placeholder="Imput Value" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="inputI" class="col-sm-2 col-form-label">I</label> <div class="col-sm-10"> <input onchange="{onIChange}" class="form-control" riot-value="{opts.table.i}" id="inputI" placeholder="Imput Value" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="inputD" class="col-sm-2 col-form-label">D</label> <div class="col-sm-10"> <input onchange="{onDChange}" class="form-control" riot-value="{opts.table.d}" id="inputD" placeholder="Imput Value" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="inputF" class="col-sm-2 col-form-label">F</label> <div class="col-sm-10"> <input onchange="{onFChange}" class="form-control" riot-value="{opts.table.f}" id="inputF" placeholder="Imput Value" type="{\'number\'}"> </div> </div> <div class="form-group"> <div class="form-check"> <input class="form-check-input" type="checkbox" value="" id="defaultCheck1"> <label class="form-check-label" for="defaultCheck1"> Default checkbox </label> </div> </div> </form>','pid-tuner li,[data-is="pid-tuner"] li{ margin-bottom: 47px; }',"",function(e){this.onPChange=(e=>{NetworkTables.putValue(this.opts.ntRoot+"p",parseFloat(e.target.value))}),this.onIChange=(e=>{NetworkTables.putValue(this.opts.ntRoot+"i",parseFloat(e.target.value))}),this.onDChange=(e=>{NetworkTables.putValue(this.opts.ntRoot+"d",parseFloat(e.target.value))}),this.onFChange=(e=>{NetworkTables.putValue(this.opts.ntRoot+"f",parseFloat(e.target.value))})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,