# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from .operations.getvversionoffersoffer_operations import GetvversionoffersofferOperations
from .operations.getvversioncustomerscustomer_operations import GetvversioncustomerscustomerOperations
from .operations.postvversioncustomerscustomer_operations import PostvversioncustomerscustomerOperations
from .operations.getvversioncustomersfilterfilter_operations import GetvversioncustomersfilterfilterOperations
from .operations.deletevversioncustomerscustomer_operations import DeletevversioncustomerscustomerOperations
from .operations.patchvversioncustomerscustomer_operations import PatchvversioncustomerscustomerOperations
from .operations.putvversioncustomerscustomer_operations import PutvversioncustomerscustomerOperations
from .operations.postvversiondomainsdomaincustomer_operations import PostvversiondomainsdomaincustomerOperations
from .operations.headvversioncustomerscustomer_operations import HeadvversioncustomerscustomerOperations
from .operations.putvversionusersuser_operations import PutvversionusersuserOperations
from .operations.getvversionusersuser_operations import GetvversionusersuserOperations
from .operations.getvversionofferscountrycountry_operations import GetvversionofferscountrycountryOperations
from .operations.getvversionoffercategoriescountrycountry_operations import GetvversionoffercategoriescountrycountryOperations
from .operations.getvversionprofileslegalbusinessvetting_versionvetting_version_operations import GetvversionprofileslegalbusinessvettingVersionvettingVersionOperations
from .operations.getvversionprofilespartnernetworkprofilempn_idmpn_id_operations import GetvversionprofilespartnernetworkprofilempnIdmpnIdOperations
from .operations.getvversionprofilesmpnmpn_idmpn_id_operations import GetvversionprofilesmpnmpnIdmpnIdOperations
from .operations.getvversionrelationshipsrelationship_operations import GetvversionrelationshipsrelationshipOperations
from .operations.getvversionrelationshipspartner_operations import GetvversionrelationshipspartnerOperations
from .operations.patchvversionrelationshipspartner_operations import PatchvversionrelationshipspartnerOperations
from .operations.getvversionratecardsazurecurrencycurrency_operations import GetvversionratecardsazurecurrencycurrencyOperations
from .operations.getvversionratecardsazure_sharedcurrencycurrency_operations import GetvversionratecardsazureSharedcurrencycurrencyOperations
from .operations.getvversioncustomersrelationshiprequestsindirect_cloud_solution_provider_idindirect_cloud_solution_provider_id_operations import GetvversioncustomersrelationshiprequestsindirectCloudSolutionProviderIdindirectCloudSolutionProviderIdOperations
from .operations.getvversionrolesrole_operations import GetvversionrolesroleOperations
from .operations.postvversionrolesrole_operations import PostvversionrolesroleOperations
from .operations.deletevversionrolesrole_operations import DeletevversionrolesroleOperations
from .operations.getvversionserviceincidentsofficefilterfilter_operations import GetvversionserviceincidentsofficefilterfilterOperations
from .operations.getvversionserviceincidentsofficecountfilterfilter_operations import GetvversionserviceincidentsofficecountfilterfilterOperations
from .operations.getvversionservicerequestsfilterfilter_operations import GetvversionservicerequestsfilterfilterOperations
from .operations.getvversionservicerequestsservice_operations import GetvversionservicerequestsserviceOperations
from .operations.patchvversionservicerequestsservice_operations import PatchvversionservicerequestsserviceOperations
from .operations.postvversionservicerequestsagent_operations import PostvversionservicerequestsagentOperations
from .operations.getvversionvalidationscheckdomainavailabilitydomain_operations import GetvversionvalidationscheckdomainavailabilitydomainOperations
from . import models


class MicrosoftPartnerStoreApisConfiguration(AzureConfiguration):
    """Configuration for MicrosoftPartnerStoreApis
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'https://api.partnercenter.microsoft.com'

        super(MicrosoftPartnerStoreApisConfiguration, self).__init__(base_url)

        self.add_user_agent('partnercenterservices/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials


class MicrosoftPartnerStoreApis(object):
    """APIs for Cloud Solution Provider partners that manage customer accounts, place orders, manage subscriptions, and handle support requests.

    :ivar config: Configuration for client.
    :vartype config: MicrosoftPartnerStoreApisConfiguration

    :ivar getvversionoffersoffer: Getvversionoffersoffer operations
    :vartype getvversionoffersoffer: microsoft.store.partnercenterservices.operations.GetvversionoffersofferOperations
    :ivar getvversioncustomerscustomer: Getvversioncustomerscustomer operations
    :vartype getvversioncustomerscustomer: microsoft.store.partnercenterservices.operations.GetvversioncustomerscustomerOperations
    :ivar postvversioncustomerscustomer: Postvversioncustomerscustomer operations
    :vartype postvversioncustomerscustomer: microsoft.store.partnercenterservices.operations.PostvversioncustomerscustomerOperations
    :ivar getvversioncustomersfilterfilter: Getvversioncustomersfilterfilter operations
    :vartype getvversioncustomersfilterfilter: microsoft.store.partnercenterservices.operations.GetvversioncustomersfilterfilterOperations
    :ivar deletevversioncustomerscustomer: Deletevversioncustomerscustomer operations
    :vartype deletevversioncustomerscustomer: microsoft.store.partnercenterservices.operations.DeletevversioncustomerscustomerOperations
    :ivar patchvversioncustomerscustomer: Patchvversioncustomerscustomer operations
    :vartype patchvversioncustomerscustomer: microsoft.store.partnercenterservices.operations.PatchvversioncustomerscustomerOperations
    :ivar putvversioncustomerscustomer: Putvversioncustomerscustomer operations
    :vartype putvversioncustomerscustomer: microsoft.store.partnercenterservices.operations.PutvversioncustomerscustomerOperations
    :ivar postvversiondomainsdomaincustomer: Postvversiondomainsdomaincustomer operations
    :vartype postvversiondomainsdomaincustomer: microsoft.store.partnercenterservices.operations.PostvversiondomainsdomaincustomerOperations
    :ivar headvversioncustomerscustomer: Headvversioncustomerscustomer operations
    :vartype headvversioncustomerscustomer: microsoft.store.partnercenterservices.operations.HeadvversioncustomerscustomerOperations
    :ivar putvversionusersuser: Putvversionusersuser operations
    :vartype putvversionusersuser: microsoft.store.partnercenterservices.operations.PutvversionusersuserOperations
    :ivar getvversionusersuser: Getvversionusersuser operations
    :vartype getvversionusersuser: microsoft.store.partnercenterservices.operations.GetvversionusersuserOperations
    :ivar getvversionofferscountrycountry: Getvversionofferscountrycountry operations
    :vartype getvversionofferscountrycountry: microsoft.store.partnercenterservices.operations.GetvversionofferscountrycountryOperations
    :ivar getvversionoffercategoriescountrycountry: Getvversionoffercategoriescountrycountry operations
    :vartype getvversionoffercategoriescountrycountry: microsoft.store.partnercenterservices.operations.GetvversionoffercategoriescountrycountryOperations
    :ivar getvversionprofileslegalbusinessvetting_versionvetting_version: GetvversionprofileslegalbusinessvettingVersionvettingVersion operations
    :vartype getvversionprofileslegalbusinessvetting_versionvetting_version: microsoft.store.partnercenterservices.operations.GetvversionprofileslegalbusinessvettingVersionvettingVersionOperations
    :ivar getvversionprofilespartnernetworkprofilempn_idmpn_id: GetvversionprofilespartnernetworkprofilempnIdmpnId operations
    :vartype getvversionprofilespartnernetworkprofilempn_idmpn_id: microsoft.store.partnercenterservices.operations.GetvversionprofilespartnernetworkprofilempnIdmpnIdOperations
    :ivar getvversionprofilesmpnmpn_idmpn_id: GetvversionprofilesmpnmpnIdmpnId operations
    :vartype getvversionprofilesmpnmpn_idmpn_id: microsoft.store.partnercenterservices.operations.GetvversionprofilesmpnmpnIdmpnIdOperations
    :ivar getvversionrelationshipsrelationship: Getvversionrelationshipsrelationship operations
    :vartype getvversionrelationshipsrelationship: microsoft.store.partnercenterservices.operations.GetvversionrelationshipsrelationshipOperations
    :ivar getvversionrelationshipspartner: Getvversionrelationshipspartner operations
    :vartype getvversionrelationshipspartner: microsoft.store.partnercenterservices.operations.GetvversionrelationshipspartnerOperations
    :ivar patchvversionrelationshipspartner: Patchvversionrelationshipspartner operations
    :vartype patchvversionrelationshipspartner: microsoft.store.partnercenterservices.operations.PatchvversionrelationshipspartnerOperations
    :ivar getvversionratecardsazurecurrencycurrency: Getvversionratecardsazurecurrencycurrency operations
    :vartype getvversionratecardsazurecurrencycurrency: microsoft.store.partnercenterservices.operations.GetvversionratecardsazurecurrencycurrencyOperations
    :ivar getvversionratecardsazure_sharedcurrencycurrency: GetvversionratecardsazureSharedcurrencycurrency operations
    :vartype getvversionratecardsazure_sharedcurrencycurrency: microsoft.store.partnercenterservices.operations.GetvversionratecardsazureSharedcurrencycurrencyOperations
    :ivar getvversioncustomersrelationshiprequestsindirect_cloud_solution_provider_idindirect_cloud_solution_provider_id: GetvversioncustomersrelationshiprequestsindirectCloudSolutionProviderIdindirectCloudSolutionProviderId operations
    :vartype getvversioncustomersrelationshiprequestsindirect_cloud_solution_provider_idindirect_cloud_solution_provider_id: microsoft.store.partnercenterservices.operations.GetvversioncustomersrelationshiprequestsindirectCloudSolutionProviderIdindirectCloudSolutionProviderIdOperations
    :ivar getvversionrolesrole: Getvversionrolesrole operations
    :vartype getvversionrolesrole: microsoft.store.partnercenterservices.operations.GetvversionrolesroleOperations
    :ivar postvversionrolesrole: Postvversionrolesrole operations
    :vartype postvversionrolesrole: microsoft.store.partnercenterservices.operations.PostvversionrolesroleOperations
    :ivar deletevversionrolesrole: Deletevversionrolesrole operations
    :vartype deletevversionrolesrole: microsoft.store.partnercenterservices.operations.DeletevversionrolesroleOperations
    :ivar getvversionserviceincidentsofficefilterfilter: Getvversionserviceincidentsofficefilterfilter operations
    :vartype getvversionserviceincidentsofficefilterfilter: microsoft.store.partnercenterservices.operations.GetvversionserviceincidentsofficefilterfilterOperations
    :ivar getvversionserviceincidentsofficecountfilterfilter: Getvversionserviceincidentsofficecountfilterfilter operations
    :vartype getvversionserviceincidentsofficecountfilterfilter: microsoft.store.partnercenterservices.operations.GetvversionserviceincidentsofficecountfilterfilterOperations
    :ivar getvversionservicerequestsfilterfilter: Getvversionservicerequestsfilterfilter operations
    :vartype getvversionservicerequestsfilterfilter: microsoft.store.partnercenterservices.operations.GetvversionservicerequestsfilterfilterOperations
    :ivar getvversionservicerequestsservice: Getvversionservicerequestsservice operations
    :vartype getvversionservicerequestsservice: microsoft.store.partnercenterservices.operations.GetvversionservicerequestsserviceOperations
    :ivar patchvversionservicerequestsservice: Patchvversionservicerequestsservice operations
    :vartype patchvversionservicerequestsservice: microsoft.store.partnercenterservices.operations.PatchvversionservicerequestsserviceOperations
    :ivar postvversionservicerequestsagent: Postvversionservicerequestsagent operations
    :vartype postvversionservicerequestsagent: microsoft.store.partnercenterservices.operations.PostvversionservicerequestsagentOperations
    :ivar getvversionvalidationscheckdomainavailabilitydomain: Getvversionvalidationscheckdomainavailabilitydomain operations
    :vartype getvversionvalidationscheckdomainavailabilitydomain: microsoft.store.partnercenterservices.operations.GetvversionvalidationscheckdomainavailabilitydomainOperations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = MicrosoftPartnerStoreApisConfiguration(credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v1'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.getvversionoffersoffer = GetvversionoffersofferOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversioncustomerscustomer = GetvversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.postvversioncustomerscustomer = PostvversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversioncustomersfilterfilter = GetvversioncustomersfilterfilterOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.deletevversioncustomerscustomer = DeletevversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.patchvversioncustomerscustomer = PatchvversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.putvversioncustomerscustomer = PutvversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.postvversiondomainsdomaincustomer = PostvversiondomainsdomaincustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.headvversioncustomerscustomer = HeadvversioncustomerscustomerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.putvversionusersuser = PutvversionusersuserOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionusersuser = GetvversionusersuserOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionofferscountrycountry = GetvversionofferscountrycountryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionoffercategoriescountrycountry = GetvversionoffercategoriescountrycountryOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionprofileslegalbusinessvetting_versionvetting_version = GetvversionprofileslegalbusinessvettingVersionvettingVersionOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionprofilespartnernetworkprofilempn_idmpn_id = GetvversionprofilespartnernetworkprofilempnIdmpnIdOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionprofilesmpnmpn_idmpn_id = GetvversionprofilesmpnmpnIdmpnIdOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionrelationshipsrelationship = GetvversionrelationshipsrelationshipOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionrelationshipspartner = GetvversionrelationshipspartnerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.patchvversionrelationshipspartner = PatchvversionrelationshipspartnerOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionratecardsazurecurrencycurrency = GetvversionratecardsazurecurrencycurrencyOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionratecardsazure_sharedcurrencycurrency = GetvversionratecardsazureSharedcurrencycurrencyOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversioncustomersrelationshiprequestsindirect_cloud_solution_provider_idindirect_cloud_solution_provider_id = GetvversioncustomersrelationshiprequestsindirectCloudSolutionProviderIdindirectCloudSolutionProviderIdOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionrolesrole = GetvversionrolesroleOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.postvversionrolesrole = PostvversionrolesroleOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.deletevversionrolesrole = DeletevversionrolesroleOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionserviceincidentsofficefilterfilter = GetvversionserviceincidentsofficefilterfilterOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionserviceincidentsofficecountfilterfilter = GetvversionserviceincidentsofficecountfilterfilterOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionservicerequestsfilterfilter = GetvversionservicerequestsfilterfilterOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionservicerequestsservice = GetvversionservicerequestsserviceOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.patchvversionservicerequestsservice = PatchvversionservicerequestsserviceOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.postvversionservicerequestsagent = PostvversionservicerequestsagentOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.getvversionvalidationscheckdomainavailabilitydomain = GetvversionvalidationscheckdomainavailabilitydomainOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def getvversioncountryvalidationrulescountry(
            self, country, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the market validation data.

        :param country: The country.
        :type country: str
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1CountryValidationRules or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1CountryValidationRules
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversioncountryvalidationrulescountry.metadata['url']
        path_format_arguments = {
            'country': self._serialize.url("country", country, 'str'),
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1CountryValidationRules', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversioncountryvalidationrulescountry.metadata = {'url': '/v{version}/countryvalidationrules/{country}'}

    def postvversioncustomers(
            self, customer_profile, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Creates the customer profile.

        :param customer_profile: The new customer information.
        :type customer_profile:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1Customer
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1Customer or ClientRawResponse
         if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1Customer
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.postvversioncustomers.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(customer_profile, 'MicrosoftPartnerSdkContractsV1Customer')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1Customer', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    postvversioncustomers.metadata = {'url': '/v{version}/customers'}

    def getvversioncustomersusagerecords(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Retrieves the usage records of customers for a partner.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsV1CollectionsPagedResourceCollectionMicrosoftPartnerSdkContractsV1UsageManagementCustomerMonthlyUsageRecord
         or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1CollectionsPagedResourceCollectionMicrosoftPartnerSdkContractsV1UsageManagementCustomerMonthlyUsageRecord
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversioncustomersusagerecords.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1CollectionsPagedResourceCollectionMicrosoftPartnerSdkContractsV1UsageManagementCustomerMonthlyUsageRecord', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversioncustomersusagerecords.metadata = {'url': '/v{version}/customers/usagerecords'}

    def headvversiondomainsdomain(
            self, domain, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Determine if the domain is available.

        :param domain: Domain.
        :type domain: str
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: bool or ClientRawResponse if raw=true
        :rtype: bool or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.headvversiondomainsdomain.metadata['url']
        path_format_arguments = {
            'domain': self._serialize.url("domain", domain, 'str'),
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.head(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('bool', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    headvversiondomainsdomain.metadata = {'url': '/v{version}/domains/{domain}'}

    def getvversioninsiderprograms(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """gets the list of insider programs available for a user.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1FlightInsiderProgram or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1FlightInsiderProgram
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversioninsiderprograms.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1FlightInsiderProgram', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversioninsiderprograms.metadata = {'url': '/v{version}/insiderprograms'}

    def putvversioninsiderprograms(
            self, insider_program, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Updates the insider programs preferences for a user.

        :param insider_program: Program to be opted in/out of
        :type insider_program:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1FlightInsiderProgram
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1FlightInsiderProgram or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1FlightInsiderProgram
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversioninsiderprograms.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(insider_program, 'MicrosoftPartnerSdkContractsV1FlightInsiderProgram')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1FlightInsiderProgram', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversioninsiderprograms.metadata = {'url': '/v{version}/insiderprograms'}

    def postvversionmigrationssyndication(
            self, migration_batch, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Creates the batch for migrating customers from Syndication to CSP.

        :param migration_batch: Migration batch to be created.
        :type migration_batch:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration
         or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.postvversionmigrationssyndication.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(migration_batch, 'MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 202, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration', response)
        if response.status_code == 202:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1MigrationSyndicationMigration', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    postvversionmigrationssyndication.metadata = {'url': '/v{version}/migrations/syndication'}

    def getvversionmigrationssyndicationmigration_batch_id(
            self, migration_batch_id, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the status of a migration batch from Syndication to CSP.

        :param migration_batch_id: ID of the migration batch
        :type migration_batch_id: str
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionmigrationssyndicationmigration_batch_id.metadata['url']
        path_format_arguments = {
            'migrationBatchId': self._serialize.url("migration_batch_id", migration_batch_id, 'str'),
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionmigrationssyndicationmigration_batch_id.metadata = {'url': '/v{version}/migrations/syndication/{migrationBatchId}'}

    def getvversionmigrationssyndicationmigration_batch_idmosi_customer_id(
            self, migration_batch_id, mosi_customer_id, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the status of a migration batch from Syndication to CSP by
        customer.

        :param migration_batch_id: ID of the migration batch
        :type migration_batch_id: str
        :param mosi_customer_id: Filter can be customer ID
        :type mosi_customer_id: str
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionmigrationssyndicationmigration_batch_idmosi_customer_id.metadata['url']
        path_format_arguments = {
            'migrationBatchId': self._serialize.url("migration_batch_id", migration_batch_id, 'str'),
            'mosiCustomerId': self._serialize.url("mosi_customer_id", mosi_customer_id, 'str'),
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1MigrationSyndicationMigrationStatus', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionmigrationssyndicationmigration_batch_idmosi_customer_id.metadata = {'url': '/v{version}/migrations/syndication/{migrationBatchId}/{mosiCustomerId}'}

    def getvversionanalyticslicensesdeployment(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Returns the deployment insights of partner's all licenses.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesDeploymentInsights
         or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesDeploymentInsights
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionanalyticslicensesdeployment.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesDeploymentInsights', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionanalyticslicensesdeployment.metadata = {'url': '/v{version}/analytics/licenses/deployment'}

    def getvversionanalyticslicensesusage(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Returns usage insights of partner's all licenses.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesUsageInsights or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesUsageInsights
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionanalyticslicensesusage.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsAnalyticsPartnerLicensesUsageInsights', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionanalyticslicensesusage.metadata = {'url': '/v{version}/analytics/licenses/usage'}

    def getvversionprofilesorganization(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the organization profile.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1OrganizationProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1OrganizationProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionprofilesorganization.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1OrganizationProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionprofilesorganization.metadata = {'url': '/v{version}/profiles/organization'}

    def putvversionprofilesorganization(
            self, organization_profile, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Updates the organization profile.

        :param organization_profile: organization profile to update
        :type organization_profile:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1OrganizationProfile
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1OrganizationProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1OrganizationProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversionprofilesorganization.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(organization_profile, 'MicrosoftPartnerSdkContractsV1OrganizationProfile')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1OrganizationProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversionprofilesorganization.metadata = {'url': '/v{version}/profiles/organization'}

    def putvversionprofileslegalbusiness(
            self, legal_business_profile, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Updates the legal business profile.

        :param legal_business_profile: Legal business profile to update
        :type legal_business_profile:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1LegalBusinessProfile
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1LegalBusinessProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1LegalBusinessProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversionprofileslegalbusiness.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(legal_business_profile, 'MicrosoftPartnerSdkContractsV1LegalBusinessProfile')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1LegalBusinessProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversionprofileslegalbusiness.metadata = {'url': '/v{version}/profiles/legalbusiness'}

    def getvversionprofilessupport(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the partner support profile.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1SupportProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1SupportProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionprofilessupport.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1SupportProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionprofilessupport.metadata = {'url': '/v{version}/profiles/support'}

    def putvversionprofilessupport(
            self, support_profile, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Updates the partner support profile.

        :param support_profile: Support profile to update
        :type support_profile:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1SupportProfile
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1SupportProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1SupportProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversionprofilessupport.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(support_profile, 'MicrosoftPartnerSdkContractsV1SupportProfile')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1SupportProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversionprofilessupport.metadata = {'url': '/v{version}/profiles/support'}

    def getvversionprofilesbilling(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets the billing profile.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1BillingProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1BillingProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionprofilesbilling.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1BillingProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionprofilesbilling.metadata = {'url': '/v{version}/profiles/billing'}

    def putvversionprofilesbilling(
            self, billing_profile, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Updates the billing profile.

        :param billing_profile: Billing profile to update
        :type billing_profile:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1BillingProfile
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: MicrosoftPartnerSdkContractsV1BillingProfile or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1BillingProfile
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversionprofilesbilling.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(billing_profile, 'MicrosoftPartnerSdkContractsV1BillingProfile')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1BillingProfile', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversionprofilesbilling.metadata = {'url': '/v{version}/profiles/billing'}

    def getvversionusagesummary(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Retrieves the usage summary of a partner.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsV1UsageManagementPartnerUsageSummary or
         ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1UsageManagementPartnerUsageSummary
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionusagesummary.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1UsageManagementPartnerUsageSummary', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionusagesummary.metadata = {'url': '/v{version}/usagesummary'}

    def getvversionpreferencescatalogoffers(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Retrieves all preferred offer ids for a partner.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionpreferencescatalogoffers.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionpreferencescatalogoffers.metadata = {'url': '/v{version}/preferences/catalog/offers'}

    def putvversionpreferencescatalogoffers(
            self, offer_ids, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Sets the preferred offer ids for a partner.

        :param offer_ids: The collection preferred offer ids to persist.
        :type offer_ids: list[str]
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.putvversionpreferencescatalogoffers.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(offer_ids, '[str]')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    putvversionpreferencescatalogoffers.metadata = {'url': '/v{version}/preferences/catalog/offers'}

    def getvversionservicerequestssupporttopics(
            self, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Gets a list of support topics.

        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return:
         MicrosoftPartnerSdkContractsV1CollectionsResourceCollectionMicrosoftPartnerSdkContractsV1SupportTopic
         or ClientRawResponse if raw=true
        :rtype:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1CollectionsResourceCollectionMicrosoftPartnerSdkContractsV1SupportTopic
         or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.getvversionservicerequestssupporttopics.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code in [200, 201]:
            deserialized = self._deserialize('MicrosoftPartnerSdkContractsV1CollectionsResourceCollectionMicrosoftPartnerSdkContractsV1SupportTopic', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    getvversionservicerequestssupporttopics.metadata = {'url': '/v{version}/servicerequests/supporttopics'}

    def postgeneratetoken(
            self, grant_type, custom_headers=None, raw=False, **operation_config):
        """Generates a token required for accessing partner api resources.

        Generates an authentication token required for accessing partner APIs.

        :param grant_type: Only supports grant_type =jwt_token
        :type grant_type: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.postgeneratetoken.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(grant_type, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    postgeneratetoken.metadata = {'url': '/generatetoken'}

    def postvversionvalidationsaddress(
            self, address, version, ms_correlation_id=None, ms_request_id=None, custom_headers=None, raw=False, **operation_config):
        """Determine if the address is valid.

        :param address: The address.
        :type address:
         ~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkContractsV1Address
        :param version: Possible values include: '1.0', '1'
        :type version: str
        :param ms_correlation_id: A unique identifier for the call, useful in
         logs and network traces for troubleshooting errors. The value should
         be reset for every call. All operations should include this header.
        :type ms_correlation_id: str
        :param ms_request_id: A unique identifier for the call, used to ensure
         idempotency. In the case of a timeout, the retry call should include
         the same value. Upon receiving a response (success or business
         failure), the value should be reset for the next call.
        :type ms_request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.postvversionvalidationsaddress.metadata['url']
        path_format_arguments = {
            'version': self._serialize.url("version", version, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if ms_correlation_id is not None:
            header_parameters['MS-CorrelationId'] = self._serialize.header("ms_correlation_id", ms_correlation_id, 'str')
        if ms_request_id is not None:
            header_parameters['MS-RequestId'] = self._serialize.header("ms_request_id", ms_request_id, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(address, 'MicrosoftPartnerSdkContractsV1Address')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 201, 400, 401, 403, 404, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    postvversionvalidationsaddress.metadata = {'url': '/v{version}/validations/address'}
