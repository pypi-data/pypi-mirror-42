# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MicrosoftPartnerSdkInternalContractsAnalyticsLicenseServiceProduct(Model):
    """Business object model that represents products for a service.

    :param product_id: Product Id.
     Needed to query usage for the product
    :type product_id: str
    :param product_name: Product Name
     TODO : figure out locale for the names. Identify if they can come from
     catalog
    :type product_name: str
    :param service_name: Service Name like O365
     ToDo: get right terminology from Graph/crest apis
    :type service_name: str
    :param licenses_sold: License/seats sold as of processed date
     ToDo: get right terminology from Graph/crest apis
    :type licenses_sold: long
    :param licenses_sold_all_channel_all_partner: License/seats customer sold
     as of processed date
     ToDo: get right terminology from Graph/crest apis
    :type licenses_sold_all_channel_all_partner: long
    :param licenses_deployed_all_channel_all_partner: License/seats deployed
     as of processed date
     ToDo: get right terminology from Graph/crest apis
    :type licenses_deployed_all_channel_all_partner: long
    :param licensed_workloads: Workload insights of a customer scoped under a
     given partner, service
     and product.
     ToDo: get right terminology from Graph/crest apis
    :type licensed_workloads:
     list[~microsoft.store.partnercenterservices.models.MicrosoftPartnerSdkInternalContractsAnalyticsLicenseWorkload]
    """

    _attribute_map = {
        'product_id': {'key': 'productId', 'type': 'str'},
        'product_name': {'key': 'productName', 'type': 'str'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'licenses_sold': {'key': 'licensesSold', 'type': 'long'},
        'licenses_sold_all_channel_all_partner': {'key': 'licensesSoldAllChannelAllPartner', 'type': 'long'},
        'licenses_deployed_all_channel_all_partner': {'key': 'licensesDeployedAllChannelAllPartner', 'type': 'long'},
        'licensed_workloads': {'key': 'licensedWorkloads', 'type': '[MicrosoftPartnerSdkInternalContractsAnalyticsLicenseWorkload]'},
    }

    def __init__(self, product_id=None, product_name=None, service_name=None, licenses_sold=None, licenses_sold_all_channel_all_partner=None, licenses_deployed_all_channel_all_partner=None, licensed_workloads=None):
        super(MicrosoftPartnerSdkInternalContractsAnalyticsLicenseServiceProduct, self).__init__()
        self.product_id = product_id
        self.product_name = product_name
        self.service_name = service_name
        self.licenses_sold = licenses_sold
        self.licenses_sold_all_channel_all_partner = licenses_sold_all_channel_all_partner
        self.licenses_deployed_all_channel_all_partner = licenses_deployed_all_channel_all_partner
        self.licensed_workloads = licensed_workloads
