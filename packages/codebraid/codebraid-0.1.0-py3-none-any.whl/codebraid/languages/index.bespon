# Index of all supported languages, in bespon format (https://bespon.org/).
# This maps languages to the files in which they are defined.
# The definition files contain maps of language names to definitions.
#
# General form of language definition:
# ----------------------------------------------------------------------------
# |=== <name>
# language =
#     optional string, default <name>
#     for when <name> is really a custom task rather than language, etc.
#
# executable =
#     string, default <name>
#     program that is called to process source
#
# extension =
#     string
#     file extension without leading period
#
# pre_run_commands =
#     optional string or list of strings
#     commands run before code
#
# pre_run_encoding =
#     optional encoding for stdout and stderr of pre_run_command
#     defaults to best guess, with \xNN escapes of invalid bytes
#
# run_command =
#     optional string, default '{executable} {source}'
#
# run_encoding =
#     optional encoding for stdout and stderr of run_command
#     defaults to best guess, with \xNN escapes of invalid bytes
#
# post_run_commands =
#     optional string or list of strings
#     commands run after code
#
# post_run_encoding =
#     optional encoding for stdout and stderr of post_run_command
#     defaults to best guess, with \xNN escapes of invalid bytes
#
# source_start =
#     optional string
#     start of source template
#
# source_end =
#     optional string
#     end of source template
#
# chunk_wrapper =
#     string
#     template for code chunk
#     must contain fields {stdoutdelim}, {stderrdelim}, {code}
#     must write delims to output streams with a single leading and trailing \n
#
# inline_expression_formatter =
#     string
#     converts inline expressions into strings when show='expression'
#     must contain fields {stdoutdelim}, {stderrdelim}, {code}
#     must perform these tasks (or tasks that result in identical output):
#         1.  convert {code} to a string
#         2.  store the string in a tempory variable (to avoid collisions and
#             prevent user code from accessing the variable, its name can end
#             in {tempsuffix}, which will be replaced by a lowercase ASCII
#             alphanumeric sequence derived from a hash of the current session)
#         3.  write delims to output streams with a single leading and
#             trailing \n (this allows any output that occurs during string
#             conversion to be distinguished from the string itself)
#
# error_patterns =
#     string or list of strings
#     literal patterns used to identify errors in stderr
#
# warning_patterns =
#     string or list of strings
#     literal patterns used to identify warnings in stderr
#
# line_number_patterns =
#     string or list of strings
#     used to identify line numbers in stderr
#     must contain field {number}; otherwise treated as literal patterns
#-----------------------------------------------------------------------------
#

python = "python.bespon"

