# coding: utf-8

"""
    Nomad Pilot

    This is the API descriptor for the Nomad Pilot API, responsible for shipping and logistics processing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: paul@samarkand.global
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nomad_pilot_cli.models.package_goldjet import PackageGoldjet  # noqa: F401,E501


class PackageItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'barcode': 'str',
        'quantity': 'int',
        'price': 'float',
        'brand': 'str',
        'quantity_uom': 'str',
        'hs_code': 'str',
        'country_of_origin': 'str',
        'goldjet': 'PackageGoldjet'
    }

    attribute_map = {
        'name': 'name',
        'barcode': 'barcode',
        'quantity': 'quantity',
        'price': 'price',
        'brand': 'brand',
        'quantity_uom': 'quantityUom',
        'hs_code': 'hsCode',
        'country_of_origin': 'countryOfOrigin',
        'goldjet': 'goldjet'
    }

    def __init__(self, name=None, barcode=None, quantity=None, price=None, brand=None, quantity_uom=None, hs_code=None, country_of_origin=None, goldjet=None):  # noqa: E501
        """PackageItems - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._barcode = None
        self._quantity = None
        self._price = None
        self._brand = None
        self._quantity_uom = None
        self._hs_code = None
        self._country_of_origin = None
        self._goldjet = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if barcode is not None:
            self.barcode = barcode
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if brand is not None:
            self.brand = brand
        if quantity_uom is not None:
            self.quantity_uom = quantity_uom
        if hs_code is not None:
            self.hs_code = hs_code
        if country_of_origin is not None:
            self.country_of_origin = country_of_origin
        if goldjet is not None:
            self.goldjet = goldjet

    @property
    def name(self):
        """Gets the name of this PackageItems.  # noqa: E501


        :return: The name of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageItems.


        :param name: The name of this PackageItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def barcode(self):
        """Gets the barcode of this PackageItems.  # noqa: E501


        :return: The barcode of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this PackageItems.


        :param barcode: The barcode of this PackageItems.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def quantity(self):
        """Gets the quantity of this PackageItems.  # noqa: E501


        :return: The quantity of this PackageItems.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PackageItems.


        :param quantity: The quantity of this PackageItems.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this PackageItems.  # noqa: E501


        :return: The price of this PackageItems.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PackageItems.


        :param price: The price of this PackageItems.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def brand(self):
        """Gets the brand of this PackageItems.  # noqa: E501


        :return: The brand of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PackageItems.


        :param brand: The brand of this PackageItems.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def quantity_uom(self):
        """Gets the quantity_uom of this PackageItems.  # noqa: E501


        :return: The quantity_uom of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._quantity_uom

    @quantity_uom.setter
    def quantity_uom(self, quantity_uom):
        """Sets the quantity_uom of this PackageItems.


        :param quantity_uom: The quantity_uom of this PackageItems.  # noqa: E501
        :type: str
        """

        self._quantity_uom = quantity_uom

    @property
    def hs_code(self):
        """Gets the hs_code of this PackageItems.  # noqa: E501


        :return: The hs_code of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._hs_code

    @hs_code.setter
    def hs_code(self, hs_code):
        """Sets the hs_code of this PackageItems.


        :param hs_code: The hs_code of this PackageItems.  # noqa: E501
        :type: str
        """

        self._hs_code = hs_code

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this PackageItems.  # noqa: E501


        :return: The country_of_origin of this PackageItems.  # noqa: E501
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this PackageItems.


        :param country_of_origin: The country_of_origin of this PackageItems.  # noqa: E501
        :type: str
        """

        self._country_of_origin = country_of_origin

    @property
    def goldjet(self):
        """Gets the goldjet of this PackageItems.  # noqa: E501


        :return: The goldjet of this PackageItems.  # noqa: E501
        :rtype: PackageGoldjet
        """
        return self._goldjet

    @goldjet.setter
    def goldjet(self, goldjet):
        """Sets the goldjet of this PackageItems.


        :param goldjet: The goldjet of this PackageItems.  # noqa: E501
        :type: PackageGoldjet
        """

        self._goldjet = goldjet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
