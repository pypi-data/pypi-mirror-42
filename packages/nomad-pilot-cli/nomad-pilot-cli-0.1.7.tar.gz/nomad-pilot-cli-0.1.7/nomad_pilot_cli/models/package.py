# coding: utf-8

"""
    Nomad Pilot

    This is the API descriptor for the Nomad Pilot API, responsible for shipping and logistics processing.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: paul@samarkand.global
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nomad_pilot_cli.models.address import Address  # noqa: F401,E501
from nomad_pilot_cli.models.package_dimension import PackageDimension  # noqa: F401,E501
from nomad_pilot_cli.models.package_items import PackageItems  # noqa: F401,E501


class Package(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension': 'PackageDimension',
        'items': 'list[PackageItems]',
        'ship_from': 'Address',
        'ship_to': 'Address',
        'bill': 'Address',
        'order_ref': 'str',
        'seller_order_ref': 'str'
    }

    attribute_map = {
        'dimension': 'dimension',
        'items': 'items',
        'ship_from': 'shipFrom',
        'ship_to': 'shipTo',
        'bill': 'bill',
        'order_ref': 'orderRef',
        'seller_order_ref': 'sellerOrderRef'
    }

    def __init__(self, dimension=None, items=None, ship_from=None, ship_to=None, bill=None, order_ref=None, seller_order_ref=None):  # noqa: E501
        """Package - a model defined in Swagger"""  # noqa: E501

        self._dimension = None
        self._items = None
        self._ship_from = None
        self._ship_to = None
        self._bill = None
        self._order_ref = None
        self._seller_order_ref = None
        self.discriminator = None

        if dimension is not None:
            self.dimension = dimension
        if items is not None:
            self.items = items
        if ship_from is not None:
            self.ship_from = ship_from
        if ship_to is not None:
            self.ship_to = ship_to
        if bill is not None:
            self.bill = bill
        if order_ref is not None:
            self.order_ref = order_ref
        if seller_order_ref is not None:
            self.seller_order_ref = seller_order_ref

    @property
    def dimension(self):
        """Gets the dimension of this Package.  # noqa: E501


        :return: The dimension of this Package.  # noqa: E501
        :rtype: PackageDimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this Package.


        :param dimension: The dimension of this Package.  # noqa: E501
        :type: PackageDimension
        """

        self._dimension = dimension

    @property
    def items(self):
        """Gets the items of this Package.  # noqa: E501

        Contents of package  # noqa: E501

        :return: The items of this Package.  # noqa: E501
        :rtype: list[PackageItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Package.

        Contents of package  # noqa: E501

        :param items: The items of this Package.  # noqa: E501
        :type: list[PackageItems]
        """

        self._items = items

    @property
    def ship_from(self):
        """Gets the ship_from of this Package.  # noqa: E501


        :return: The ship_from of this Package.  # noqa: E501
        :rtype: Address
        """
        return self._ship_from

    @ship_from.setter
    def ship_from(self, ship_from):
        """Sets the ship_from of this Package.


        :param ship_from: The ship_from of this Package.  # noqa: E501
        :type: Address
        """

        self._ship_from = ship_from

    @property
    def ship_to(self):
        """Gets the ship_to of this Package.  # noqa: E501


        :return: The ship_to of this Package.  # noqa: E501
        :rtype: Address
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """Sets the ship_to of this Package.


        :param ship_to: The ship_to of this Package.  # noqa: E501
        :type: Address
        """

        self._ship_to = ship_to

    @property
    def bill(self):
        """Gets the bill of this Package.  # noqa: E501


        :return: The bill of this Package.  # noqa: E501
        :rtype: Address
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this Package.


        :param bill: The bill of this Package.  # noqa: E501
        :type: Address
        """

        self._bill = bill

    @property
    def order_ref(self):
        """Gets the order_ref of this Package.  # noqa: E501


        :return: The order_ref of this Package.  # noqa: E501
        :rtype: str
        """
        return self._order_ref

    @order_ref.setter
    def order_ref(self, order_ref):
        """Sets the order_ref of this Package.


        :param order_ref: The order_ref of this Package.  # noqa: E501
        :type: str
        """

        self._order_ref = order_ref

    @property
    def seller_order_ref(self):
        """Gets the seller_order_ref of this Package.  # noqa: E501


        :return: The seller_order_ref of this Package.  # noqa: E501
        :rtype: str
        """
        return self._seller_order_ref

    @seller_order_ref.setter
    def seller_order_ref(self, seller_order_ref):
        """Sets the seller_order_ref of this Package.


        :param seller_order_ref: The seller_order_ref of this Package.  # noqa: E501
        :type: str
        """

        self._seller_order_ref = seller_order_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Package, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
