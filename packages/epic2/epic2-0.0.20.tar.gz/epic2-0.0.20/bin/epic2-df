#!/usr/bin/env python

from __future__ import print_function

from sys import argv
import sys
import operator
from collections import defaultdict

import numpy as np
from scipy.stats import poisson, rankdata, spearmanr, pearsonr
from recordclass import recordclass

from epic2.main import _main

from epic2.version import __version__
from epic2.src.reads_to_bins import files_to_bin_counts
from epic2.src.SICER_stats import compute_score_threshold
from epic2.src.find_islands import find_islands, compute_fdr, write_islands, add_chip_count_to_islands
from epic2.src.genome_info import egl_and_chromsizes

from collections import OrderedDict
import argparse
import os

required_args = False if ("--version" in sys.argv or "-v" in sys.argv or "-ex" in sys.argv or "--example" in sys.argv) else True

parser = argparse.ArgumentParser(
    description="""epic2, version: {}
(Visit github.com/endrebak/epic2 for examples and help. Run epic2-example for a simple example command.)
    """.format(__version__),
    prog=os.path.basename(__file__))

parser.add_argument(
    '--treatment-knockout',
    '-tk',
    required=required_args,
    type=str,
    nargs='+',
    help='''Treatment (pull-down) file(s) for knockout in one of these formats: bed, bedpe, bed.gz, bedpe.gz or (single-end) bam, sam. Mixing file formats is allowed.''')

parser.add_argument(
    '--control-knockout',
    '-ck',
    required=False,
    type=str,
    nargs='+',
    help='''Control (input) file(s) for knockout in one of these formats: bed, bedpe, bed.gz, bedpe.gz or (single-end) bam, sam. Mixing file formats is allowed.''')


parser.add_argument(
    '--treatment-wildtype',
    '-tw',
    required=required_args,
    type=str,
    nargs='+',
    help='''Treatment (pull-down) file(s) for wildtype in one of these formats: bed, bedpe, bed.gz, bedpe.gz or (single-end) bam, sam. Mixing file formats is allowed.''')

parser.add_argument(
    '--control-wildtype',
    '-cw',
    required=False,
    type=str,
    nargs='+',
    help='''Control (input) file(s) for wildtype in one of these formats: bed, bedpe, bed.gz, bedpe.gz or (single-end) bam, sam. Mixing file formats is allowed.''')


parser.add_argument('--genome',
                    '-gn',
                    required=False,
                    default="hg19",
                    type=str,
                    help='''Which genome to analyze. Default: hg19. If --chromsizes and --egf flag is given, --genome is not required.''')

parser.add_argument(
    '--keep-duplicates',
    '-kd',
    required=False,
    default=False,
    action='store_true',
    help=
    '''Keep reads mapping to the same position on the same strand within a library. Default: False.
                   ''')


parser.add_argument(
    '--original-algorithm',
    '-oa',
    required=False,
    default=False,
    action='store_true',
    help=
    '''Use the original SICER algorithm, without the epic2 fix. This will use all reads in your files to compute the p-values, including those falling outside the genome boundaries.''')


parser.add_argument(
    '--bin-size',
    '-bin',
    required=False,
    default=200,
    type=int,
    help=
    '''Size of the windows to scan the genome. BIN-SIZE is the smallest possible island. Default 200.
                   ''')

parser.add_argument(
    '--gaps-allowed',
    '-g',
    required=False,
    default=3,
    type=int,
    help=
    '''This number is multiplied by the window size to determine the number of gaps
                   (ineligible windows) allowed between two eligible windows.
                   Must be an integer. Default: 3. ''')

parser.add_argument(
    '--fragment-size',
    '-fs',
    required=False,
    default=150,
    type=int,
    help=
    '''(Single end reads only) Size of the sequenced fragment. Each read is extended half the fragment size from the 5' end. Default 150 (i.e. extend by 75).''')

parser.add_argument(
    '--false-discovery-rate-cutoff',
    '-fdr',
    required=False,
    default=0.05,
    type=float,
    help=
    '''Remove all islands with an FDR above cutoff. Default 0.05.
                   ''')

parser.add_argument(
    '--effective-genome-fraction',
    '-egf',
    required=False,
    type=float,
    help=
    '''Use a different effective genome fraction than the one included in epic2. The default value depends on the genome and readlength, but is a number between 0 and 1.''')


parser.add_argument(
    '--chromsizes',
    '-cs',
    required=False,
    type=str,
    help=
    '''Set the chromosome lengths yourself in a file with two columns: chromosome names and sizes. Useful to analyze custom genomes, assemblies or simulated data. Only chromosomes included in the file will be analyzed.''')


parser.add_argument(
    '--e-value',
    '-e',
    required=False,
    default=1000,
    type=int,
    help=
    '''The E-value controls the genome-wide error rate of identified islands under the random background assumption. Should be used when not using a control library. Default: 1000.''')

parser.add_argument('--required-flag', '-f',
                   required=False,
                   default=0,
                   type= int,
                   help='''(bam only.) Keep reads with these bits set in flag. Same as `samtools view -f`. Default 0
                   ''')

parser.add_argument('--filter-flag', '-F',
                   required=False,
                   default=1540,
                   type= int,
                   help='''(bam only.) Discard reads with these bits set in flag. Same as `samtools view -F`. Default 1540 (hex: 0x604).
See https://broadinstitute.github.io/picard/explain-flags.html for more info.
                   ''')

parser.add_argument('--mapq', '-m',
                   required=False,
                   default=5,
                   type= int,
                   help='''(bam only.) Discard reads with mapping quality lower than this. Default 5.
                   ''')

parser.add_argument('--autodetect-chroms', '-a',
                    required=False,
                    default=False,
                    action="store_true",
                    help='''(bam only.) Autodetect chromosomes from bam file. Use with --discard-chromosomes flag to avoid non-canonical chromosomes.''')


parser.add_argument('--discard-chromosomes-pattern', '-d',
                   required=False,
                   default="_",
                   type=str,
                   help='''(bam only.) Discard reads from chromosomes matching this pattern. Default
                   '_'. Note that if you are not interested in the results from
                   non-canonical chromosomes, you should ensure they are
                   removed with this flag, otherwise they will make the
                   statistical analysis too stringent.''')

parser.add_argument(
    '--output-knockout',
    '-ok',
    required=required_args,
    type=str,
    help=
    '''File to write knockout results to.''')

parser.add_argument(
    '--output-wildtype',
    '-ow',
    required=required_args,
    type=str,
    help=
    '''File to write wildtype results to.''')


parser.add_argument(
    '--quiet',
    '-q',
    required=False,
    default=False,
    action="store_true",
    help=
    '''Do not write output messages to stderr.''')

parser.add_argument(
    '--example',
    '-ex',
    required=False,
    default=False,
    action="store_true",
    help=
    '''Show the paths of the example data and an example command.''')


def _pvalue(chip_read_count, control_read_count, scaling_factor):
    if control_read_count > 0:
    	average = control_read_count * scaling_factor;
    else:
    	average = 1 * scaling_factor

    if  chip_read_count > average:
    	pvalue = poisson.sf(chip_read_count, average)
    else:
    	pvalue = 1;

    return pvalue;


def process_file(f, tag, background=True):
    h = open(f)
    h.readline() # skip header
    islands = []

    if background:
        getdata = operator.itemgetter(0, 1, 2, 6)
    else:
        getdata = operator.itemgetter(0, 1, 2, 3)

    for l in h:
        c, s, e, count = getdata(l.split())

        island = Island(c, s, e, count, tag)
        islands.append(island)

    return islands


if __name__ == "__main__":

    args = vars(parser.parse_args())

    if args["example"]:

        import pkg_resources
        treatment = pkg_resources.resource_filename("epic2", "examples/test.bed.gz")
        control = pkg_resources.resource_filename("epic2", "examples/control.bed.gz")
        print("Knockout: " + treatment)
        print("Wildtype: " + control)
        print("Example command: epic2-df -tk {} -tw {} -ok deleteme_ko.txt -ow deleteme_wt.txt > deleteme.txt".format(treatment, control))
        sys.exit(0)


    args["treatment"] = args["treatment_knockout"]
    args["control"] = args["control_knockout"]
    args["output"] = args["output_knockout"]

    counts_knockout = _main(args)

    args["treatment"] = args["treatment_wildtype"]
    args["control"] = args["control_wildtype"]
    args["output"] = args["output_wildtype"]

    counts_wildtype = _main(args)

    Island = recordclass("Island", "Chromosome Start End Count Tag".split())
    MergedIsland = recordclass("MergedIsland", "Chromosome Start End WT KO WTFC KOFC".split())

    knockout = process_file(args["output_knockout"], "ko", args["control_knockout"])
    wildtype = process_file(args["output_wildtype"], "wt", args["control_wildtype"])

    islands = (knockout + wildtype)
    islands.sort(key=operator.itemgetter(0, 1, 2))

    current = islands[0]
    counts = defaultdict(int)
    counts[current.Tag] += int(current.Count)

    scaling_factor = counts_knockout / counts_wildtype

    p_values_ko = []
    p_values_wt = []

    merged_islands = []
    for compare in islands[1:]:
        if compare.Chromosome == current.Chromosome and compare.Start <= current.End:
            current.End = compare.End
            counts[compare.Tag] += int(compare.Count)
        else:
            fc_ko = ((counts_knockout + 1) / (counts_wildtype + 1)) / scaling_factor
            fc_wt = ((counts_wildtype + 1) / (counts_knockout + 1)) * scaling_factor

            mi = MergedIsland(current.Chromosome, current.Start, current.End, counts["wt"], counts["ko"], fc_wt, fc_ko)
# chip_read_count, control_read_count, scaling_factor, pseudo_count
            p_value_ko_vs_wt = _pvalue(counts["ko"], counts["wt"], scaling_factor)
            p_value_wt_vs_ko = _pvalue(counts["wt"], counts["ko"], scaling_factor)


            p_values_ko.append(p_value_ko_vs_wt)
            p_values_wt.append(p_value_wt_vs_ko)

            merged_islands.append(mi)
            counts = defaultdict(int)
            counts[compare.Tag] = int(compare.Count)
            current = compare

    fdr_ko = np.array(p_values_ko) * len(p_values_ko) / rankdata(p_values_ko)
    fdr_wt = np.array(p_values_wt) * len(p_values_wt) / rankdata(p_values_wt)
    fdr_ko[fdr_ko > 1] = 1
    fdr_wt[fdr_wt > 1] = 1

    output = sys.stdout
    count_ko, count_wt = [], []
    print("#Chromosome	Start	End	KO_Count	WT_Count	KO_FC	WT_FC	FDR_WT	FDR_KO", file=output)
    for i, mi in enumerate(merged_islands):
        print(mi.Chromosome, mi.Start, mi.End, mi.KO, mi.WT, mi.KOFC, mi.WTFC, fdr_wt[i], fdr_ko[i], file=output, sep="\t")
        count_ko.append(mi.KO)
        count_wt.append(mi.WT)

    p = pearsonr(count_ko, count_wt)
    s = spearmanr(count_ko, count_wt)
    print("Pearson's correlation is:", p[0], "and the p-value is", p[1], file=sys.stderr)
    print("Spearman's correlation is:", s[0], "and the p-value is", s[1], file=sys.stderr)
