# coding: utf-8

"""
    ApproveAPISwagger

    The simple API to request a user's approval on anything via email + sms.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: dev@approveapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreatePromptRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'str',
        'user': 'str',
        'title': 'str',
        'reject_text': 'str',
        'approve_text': 'str',
        'metadata': 'PromptMetadata',
        'long_poll': 'bool'
    }

    attribute_map = {
        'body': 'body',
        'user': 'user',
        'title': 'title',
        'reject_text': 'reject_text',
        'approve_text': 'approve_text',
        'metadata': 'metadata',
        'long_poll': 'long_poll'
    }

    def __init__(self, body=None, user=None, title=None, reject_text=None, approve_text=None, metadata=None, long_poll=None):  # noqa: E501
        """CreatePromptRequest - a model defined in OpenAPI"""  # noqa: E501

        self._body = None
        self._user = None
        self._title = None
        self._reject_text = None
        self._approve_text = None
        self._metadata = None
        self._long_poll = None
        self.discriminator = None

        self.body = body
        self.user = user
        if title is not None:
            self.title = title
        if reject_text is not None:
            self.reject_text = reject_text
        if approve_text is not None:
            self.approve_text = approve_text
        if metadata is not None:
            self.metadata = metadata
        if long_poll is not None:
            self.long_poll = long_poll

    @property
    def body(self):
        """Gets the body of this CreatePromptRequest.  # noqa: E501

        The body of the approval request to show the user.  # noqa: E501

        :return: The body of this CreatePromptRequest.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CreatePromptRequest.

        The body of the approval request to show the user.  # noqa: E501

        :param body: The body of this CreatePromptRequest.  # noqa: E501
        :type: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def user(self):
        """Gets the user of this CreatePromptRequest.  # noqa: E501

        The user to send the approval request to. Can be either an email address or a phone number.  # noqa: E501

        :return: The user of this CreatePromptRequest.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreatePromptRequest.

        The user to send the approval request to. Can be either an email address or a phone number.  # noqa: E501

        :param user: The user of this CreatePromptRequest.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def title(self):
        """Gets the title of this CreatePromptRequest.  # noqa: E501

        The title of an approval request. Defaults to an empty string.  # noqa: E501

        :return: The title of this CreatePromptRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreatePromptRequest.

        The title of an approval request. Defaults to an empty string.  # noqa: E501

        :param title: The title of this CreatePromptRequest.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def reject_text(self):
        """Gets the reject_text of this CreatePromptRequest.  # noqa: E501

        The reject action text. Defaults to 'Reject'.  # noqa: E501

        :return: The reject_text of this CreatePromptRequest.  # noqa: E501
        :rtype: str
        """
        return self._reject_text

    @reject_text.setter
    def reject_text(self, reject_text):
        """Sets the reject_text of this CreatePromptRequest.

        The reject action text. Defaults to 'Reject'.  # noqa: E501

        :param reject_text: The reject_text of this CreatePromptRequest.  # noqa: E501
        :type: str
        """

        self._reject_text = reject_text

    @property
    def approve_text(self):
        """Gets the approve_text of this CreatePromptRequest.  # noqa: E501

        The approve action text. Defaults to 'Approve'.  # noqa: E501

        :return: The approve_text of this CreatePromptRequest.  # noqa: E501
        :rtype: str
        """
        return self._approve_text

    @approve_text.setter
    def approve_text(self, approve_text):
        """Sets the approve_text of this CreatePromptRequest.

        The approve action text. Defaults to 'Approve'.  # noqa: E501

        :param approve_text: The approve_text of this CreatePromptRequest.  # noqa: E501
        :type: str
        """

        self._approve_text = approve_text

    @property
    def metadata(self):
        """Gets the metadata of this CreatePromptRequest.  # noqa: E501


        :return: The metadata of this CreatePromptRequest.  # noqa: E501
        :rtype: PromptMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreatePromptRequest.


        :param metadata: The metadata of this CreatePromptRequest.  # noqa: E501
        :type: PromptMetadata
        """

        self._metadata = metadata

    @property
    def long_poll(self):
        """Gets the long_poll of this CreatePromptRequest.  # noqa: E501

        If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.  # noqa: E501

        :return: The long_poll of this CreatePromptRequest.  # noqa: E501
        :rtype: bool
        """
        return self._long_poll

    @long_poll.setter
    def long_poll(self, long_poll):
        """Sets the long_poll of this CreatePromptRequest.

        If true, the request waits (long-polls) until the user responds to the prompt or more than 10 minutes pass. Defaults to false.  # noqa: E501

        :param long_poll: The long_poll of this CreatePromptRequest.  # noqa: E501
        :type: bool
        """

        self._long_poll = long_poll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePromptRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
