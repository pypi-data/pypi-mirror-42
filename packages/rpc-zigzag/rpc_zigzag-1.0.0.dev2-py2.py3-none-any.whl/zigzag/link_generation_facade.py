# -*- coding: utf-8 -*-

# ======================================================================================================================
# Imports
# ======================================================================================================================

from __future__ import absolute_import
from future.moves.urllib.parse import urlunsplit
from zigzag.zigzag_error import ZigZagConfigError
import re


class LinkGenerationFacade(object):

    def __init__(self, mediator):
        """Create a LinkGenerationFacade

        Args:
            mediator (ZigZag): the mediator that stores shared data
        """
        self._git_sha = None  # TODO refactor this out
        self._mediator = mediator

    def github_testlog_failure_link(self, test_log):
        """Generates a link to test case failure in GitHub
        The link generated by this method should highlight the line that caused the failure

        Args:
            test_log (ZigZagTestLog): the test log used to generate the link

        Returns:
            str: The string containing the link to the line that failed
        """
        try:
            base_dir = self._mediator.config_dict.get_config('path_to_test_exec_dir')
            base_dir = '/'.join([path for path in base_dir.split('/') if path])  # sanitize the path
            path = "/{fork}/{repo_name}/tree/{sha}/{base_dir}/{test_file}"
            path = path.format(fork=self._mediator.config_dict.get_config('test_fork'),
                               repo_name=self._mediator.config_dict.get_config('test_repo_name'),
                               sha=self._mediator.config_dict.get_config('test_commit'),
                               base_dir=base_dir,
                               test_file=test_log.test_file)
            failure_line_number = self._get_line_number_from_failure_output(test_log)
            line = failure_line_number or test_log.def_line_number or ''
            if line:
                line = "L{}".format(line)
            return urlunsplit(('https', 'github.com', path, '', line))
        except(AttributeError, ZigZagConfigError):
            pass  # If we ask for the failure link and can't determine it we should silently fail

    def github_diff_link(self, upstream_fork, upstream_base):
        """Generates a GitHub compare link based on the attributes of this facade
        This method would be used when we have a last known pass of a given test
        We are making an assumption that the attributes of this facade are children of
        upstream_fork and upstream_base

        GitHub docs describing the compare view
        https://help.github.com/articles/comparing-commits-across-time/

        Args:
            upstream_fork (str): the fork you wish to compare against
            upstream_base (str): the branch or SHA you want to compare against

        Returns:
            str: The string containing the link to the relevant github compare view
        """
        try:
            # These variable names are the language used by GitHub
            base_fork = self._repo_fork
            base = self._git_sha
            head_fork = upstream_fork
            compare = upstream_base
            path = "/{}/{}/compare/{}...{}:{}".format(base_fork,
                                                      self._repo_name,
                                                      base,
                                                      head_fork,
                                                      compare)
            return urlunsplit((self._scheme, self._netloc, path, '', ''))
        except AttributeError:
            return 'Unknown'  # If we ask for the diff link and can't determine it we will supply 'Unknown'

    def _get_line_number_from_failure_output(self, test_log):
        """Attempts to pull the failure line number from failure output

        Args:
            test_log (ZigZagTestLog): the test log to look for failure output on

        Returns:
            str: the line number if found otherwise emptystring
        """

        regex = re.escape(test_log.test_file) + r':(\d+)'
        match = re.search(regex, test_log.full_failure_output)
        if match:
            return match.group(1)
        else:
            return ''

    @property
    def git_sha(self):
        """Gets the git_sha found by this facade

        Returns:
            str: the git_sha discovered by this facade
        """
        return self._git_sha
