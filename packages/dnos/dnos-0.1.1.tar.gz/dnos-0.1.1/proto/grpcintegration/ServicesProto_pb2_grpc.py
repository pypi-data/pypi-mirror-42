# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protobuf.proto.grpcintegration import ControlMessagesProto_pb2 as protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2
from protobuf.proto.grpcintegration import EventNotificationProto_pb2 as protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2
from protobuf.proto.grpcintegration import StatusProto_pb2 as protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2
from protobuf.proto.net.flow import FlowRuleProto_pb2 as protobuf_dot_proto_dot_net_dot_flow_dot_FlowRuleProto__pb2
from protobuf.proto.net.packet import OutboundPacketProto_pb2 as protobuf_dot_proto_dot_net_dot_packet_dot_OutboundPacketProto__pb2
from protobuf.proto.net.topology import TopologyGraphProto_pb2 as protobuf_dot_proto_dot_net_dot_topology_dot_TopologyGraphProto__pb2
from protobuf.proto.net.topology import TopologyProto_pb2 as protobuf_dot_proto_dot_net_dot_topology_dot_TopologyProto__pb2


class PacketOutServiceStub(object):
  """Corresponds to PacketOut service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.emit = channel.unary_unary(
        '/grpcintegration.PacketOutService/emit',
        request_serializer=protobuf_dot_proto_dot_net_dot_packet_dot_OutboundPacketProto__pb2.OutboundPacketProto.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.PacketOutStatus.FromString,
        )


class PacketOutServiceServicer(object):
  """Corresponds to PacketOut service
  """

  def emit(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PacketOutServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'emit': grpc.unary_unary_rpc_method_handler(
          servicer.emit,
          request_deserializer=protobuf_dot_proto_dot_net_dot_packet_dot_OutboundPacketProto__pb2.OutboundPacketProto.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.PacketOutStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpcintegration.PacketOutService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class FlowServiceStub(object):
  """Corresponds to FlowRule service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.addFlow = channel.unary_unary(
        '/grpcintegration.FlowService/addFlow',
        request_serializer=protobuf_dot_proto_dot_net_dot_flow_dot_FlowRuleProto__pb2.FlowRuleProto.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.FlowServiceStatus.FromString,
        )
    self.removeFlow = channel.unary_unary(
        '/grpcintegration.FlowService/removeFlow',
        request_serializer=protobuf_dot_proto_dot_net_dot_flow_dot_FlowRuleProto__pb2.FlowRuleProto.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.FlowServiceStatus.FromString,
        )


class FlowServiceServicer(object):
  """Corresponds to FlowRule service
  """

  def addFlow(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def removeFlow(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FlowServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'addFlow': grpc.unary_unary_rpc_method_handler(
          servicer.addFlow,
          request_deserializer=protobuf_dot_proto_dot_net_dot_flow_dot_FlowRuleProto__pb2.FlowRuleProto.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.FlowServiceStatus.SerializeToString,
      ),
      'removeFlow': grpc.unary_unary_rpc_method_handler(
          servicer.removeFlow,
          request_deserializer=protobuf_dot_proto_dot_net_dot_flow_dot_FlowRuleProto__pb2.FlowRuleProto.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_StatusProto__pb2.FlowServiceStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpcintegration.FlowService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TopoServiceStub(object):
  """Corresponds to Topology service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getGraph = channel.unary_unary(
        '/grpcintegration.TopoService/getGraph',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_net_dot_topology_dot_TopologyGraphProto__pb2.TopologyGraphProto.FromString,
        )
    self.currentTopology = channel.unary_unary(
        '/grpcintegration.TopoService/currentTopology',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_net_dot_topology_dot_TopologyProto__pb2.TopologyProto.FromString,
        )
    self.getPaths = channel.unary_unary(
        '/grpcintegration.TopoService/getPaths',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.getPathRequest.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Paths.FromString,
        )
    self.getHosts = channel.unary_unary(
        '/grpcintegration.TopoService/getHosts',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Hosts.FromString,
        )


class TopoServiceServicer(object):
  """Corresponds to Topology service
  """

  def getGraph(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def currentTopology(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getPaths(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getHosts(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TopoServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getGraph': grpc.unary_unary_rpc_method_handler(
          servicer.getGraph,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.FromString,
          response_serializer=protobuf_dot_proto_dot_net_dot_topology_dot_TopologyGraphProto__pb2.TopologyGraphProto.SerializeToString,
      ),
      'currentTopology': grpc.unary_unary_rpc_method_handler(
          servicer.currentTopology,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.FromString,
          response_serializer=protobuf_dot_proto_dot_net_dot_topology_dot_TopologyProto__pb2.TopologyProto.SerializeToString,
      ),
      'getPaths': grpc.unary_unary_rpc_method_handler(
          servicer.getPaths,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.getPathRequest.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Paths.SerializeToString,
      ),
      'getHosts': grpc.unary_unary_rpc_method_handler(
          servicer.getHosts,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Empty.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_ControlMessagesProto__pb2.Hosts.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpcintegration.TopoService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class EventNotificationStub(object):
  """Corresponds to EventNotification service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register = channel.unary_unary(
        '/grpcintegration.EventNotification/register',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.RegistrationRequest.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.RegistrationResponse.FromString,
        )
    self.onEvent = channel.unary_stream(
        '/grpcintegration.EventNotification/onEvent',
        request_serializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.Topic.SerializeToString,
        response_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.Notification.FromString,
        )


class EventNotificationServicer(object):
  """Corresponds to EventNotification service
  """

  def register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def onEvent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventNotificationServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register': grpc.unary_unary_rpc_method_handler(
          servicer.register,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.RegistrationRequest.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.RegistrationResponse.SerializeToString,
      ),
      'onEvent': grpc.unary_stream_rpc_method_handler(
          servicer.onEvent,
          request_deserializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.Topic.FromString,
          response_serializer=protobuf_dot_proto_dot_grpcintegration_dot_EventNotificationProto__pb2.Notification.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpcintegration.EventNotification', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
