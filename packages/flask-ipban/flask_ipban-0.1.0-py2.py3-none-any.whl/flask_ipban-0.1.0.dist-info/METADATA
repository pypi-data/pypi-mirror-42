Metadata-Version: 2.1
Name: flask-ipban
Version: 0.1.0
Summary: HTTP spam security for Flask.
Home-page: https://github.com/Martlark/flask-ipban
Author: Andrew Rowe
Author-email: rowe.andrew.d@gmail.com
License: Apache Software License
Keywords: flask security https spam url ban
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Operating System :: POSIX
Classifier: Operating System :: MacOS
Classifier: Operating System :: Unix
Requires-Dist: flask (>=1.0.2)

IpBan: HTTP spam security for Flask
=========================================

|PyPI Version|

IpBan is a Flask extension that can help protect against ip locations spamming url requests
against unknown pages.  Often this is to search for security issues.

The default configuration:

- 50 attempts before ban
- 1 hour blocking period

Installation & Basic Usage
--------------------------

Install via `pip <https://pypi.python.org/pypi/pip>`_:

::

    pip install flask-ipban

After installing, wrap your Flask app with a ``IpBan``:

.. code:: python

    from flask import Flask
    from flask_ipban import IpBan

    app = Flask(__name__)
    IpBan(app)


Enclosed is a small example application

Options
-------

-  ``ban_count``, default ``50``, Number of observations before banning
-  ``ban_minutes``, default ``60``, Number of minutes ip address is banned
-  ``ip_ban.block(ip_address, permanent=True)`` - block the specific address forever
-  ``ip_ban.add(reason='spite')`` - increase the observation for the current request ip

Per-view options
~~~~~~~~~~~~~~~~

Sometimes you want to change the policy for a specific view. The
``force_https``, ``frame_options``, ``frame_options_allow_from``, and
``content_security_policy`` options can be changed on a per-view basis.

.. code:: python

    from flask import Flask
    from flask_ipban import IpBan, ALLOW_FROM

    app = Flask(__name__)
    ip_ban = IpBan(app)

    @app.route('/normal')
    def normal():
        return 'Normal'
Licensing
---------

- Apache 2.0

.. |PyPI Version| image:: https://img.shields.io/pypi/v/flask-ipban.svg
   :target: https://pypi.python.org/pypi/flask-ipban


