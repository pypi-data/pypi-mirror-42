# Start of spectra_lexer JSON rules files. File extension is .cson for "commented JSON".
# It is alternately named so that normal JSON parsers won't try to read it (JSON does not support comments).
# These files may also be parsed as valid YAML, but YAML parsers are much slower due to their complexity.
#
# Steno rule format (all fields are strings, * fields are optional):
#   NAME: [KEYS, LETTERS, *FLAGS, *DESCRIPTION, *EXAMPLES]
#
# Legend for NAME field:
#   rule.   = keys on left side
#  .rule.   = keys somewhere around the middle
#  .rule    = keys on right side
#
#   RULE    = soft variants of consonants, long variants of vowels
#
#   rule+,  = stroke required because of conflict with another entry (also resolves key name conflicts)
#
#   rule-   = independent prefix stroke
#   -rule   = independent suffix stroke
#
#   rule~   = for internal use only, should not appear in parsing output
#   X:rule  = determines purpose of an asterisk (or other key) that doesn't contribute to the letters in the word
#
# Legend for LETTERS field:
#  (rule)          = substitute complete translation from other rule
#  [letters|rule]  = don't substitute, only indicate sound or strategy
#
# Legend for FLAGS field (multiple flags are separated with the "|" character):
#   SPEC    = special rule used internally, do not match directly using lexer
#   STRK    = only matches a full stroke (i.e. fingerspelling)
#   WORD    = only matches a full word (i.e. common briefs)
#   RARE    = rarely found in practice, may cause false positives, only use after trying everything else

# Basic steno rules

{
  # left bank
  "s.": ["S",    "s", "",    "left side `s`"],
  "C.": ["S",    "c", "",    "can be soft `c`"],
  "t.": ["T",    "t", "",    "left side `t`"],
  "k.": ["K",    "k", "",    "left side `k`"],
  "c.": ["K",    "c", "",    "can be hard `c`"],
  "q.": ["K",    "q", "",    "can be `q`"],
  "p.": ["P",    "p", "",    "left side `p`"],
  "w.": ["W",    "w", "",    "left side `w`"],
  "h.": ["H",    "h", "",    "left side `h`"],
  "r.": ["R",    "r", "",    "left side `r`"],
  "v.": ["SR",   "v", "",    "left side `v`"],
  "d.": ["TK",   "d", "",    "left side `d`"],
  "f.": ["TP",   "f", "",    "left side `f`"],
  "x.": ["KP",   "x", "",    "left side `x`, but `comp-` prefix has precedence"],
  "b.": ["PW",   "b", "",    "left side `b`"],
  "m.": ["PH",   "m", "",    "left side `m`"],
  "l.": ["HR",   "l", "",    "left side `l`"],
  "n.": ["TPH",  "n", "",    "left side `n`"],
  "y.": ["KWR",  "y", "",    "left side `y`"],
  "j.": ["SKWR", "j", "",    "left side `j`"],
  "G.": ["SKWR", "g", "",    "J can be soft `g`"],
  "g.": ["TKPW", "g", "",    "left side `g`"],
  "z.": ["S*",   "z", "",    "left side `z`"],

  # right bank
  ".f": ["-F",   "f", "",    "right side `f`"],
  ".v": ["-F",   "v", "",    "can be `v`"],
  ".r": ["-R",   "r", "",    "right side `r`"],
  ".p": ["-P",   "p", "",    "right side `p`"],
  ".b": ["-B",   "b", "",    "right side `b`"],
  ".l": ["-L",   "l", "",    "right side `l`"],
  ".g": ["-G",   "g", "",    "right side `g`"],
  ".t": ["-T",   "t", "",    "right side `t`"],
  ".s": ["-S",   "s", "",    "right side `s`"],
  ".C": ["-S",   "c", "",    "can be soft `c`"],
  ".d": ["-D",   "d", "",    "right side `d`"],
  ".z": ["-Z",   "z", "",    "right side `z`"],
  ".s+":["-Z",   "s", "",    "can be `s` to make strokes easier"],
  ".n": ["-PB",  "n", "",    "right side `n`"],
  ".m": ["-PL",  "m", "",    "right side `m`"],
  ".k": ["-BG",  "k", "",    "right side `k`"],
  ".c": ["-BG",  "c", "",    "K can be hard `c`"],
  ".q": ["-BG",  "q", "",    "K can be `q`"],
  ".x": ["-BGS", "x", "",    "right side `x`"],
  ".j": ["-PBLG","j", "",    "right side `j`"],
  ".G": ["-PBLG","g", "",    "J can be soft `g`"],

  # vowels
  "a":  ["A",    "a", "",    "short vowel sound for `a`"],
  "o":  ["O",    "o", "",    "short vowel sound for `o`, or spelling of `o` in single-stroke words"],
  "e":  ["E",    "e", "",    "short vowel sound for `e`"],
  "u":  ["U",    "u", "",    "short vowel sound for `u`"],
  "i":  ["EU",   "i", "",    "short vowel sound for `i`"],
  "A":  ["AEU",  "a", "",    "long vowel sound for `a`"],
  "O":  ["OE",   "o", "",    "long vowel sound for `o`"],
  "E":  ["AOE",  "e", "",    "long vowel sound for `e`"],
  "U":  ["AOU",  "u", "",    "long vowel sound for `u`"],
  "I":  ["AOEU", "i", "",    "long vowel sound for `i`"]
}
