# Command: swig -python -modern -c++ -o dctfromjpg_wrap.cc dctfromjpg.i
# ==============================================================================
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import version_info as _swig_python_version_info

if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dctfromjpg_wrapper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dctfromjpg_wrapper')


    _dctfromjpg_wrapper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dctfromjpg_wrapper', [dirname(__file__)])
        except ImportError:
            import _dctfromjpg_wrapper
            return _dctfromjpg_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_dctfromjpg_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod


    _dctfromjpg_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _dctfromjpg_wrapper
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)

    return set_attr


class band_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dct = _swig_property(_dctfromjpg_wrapper.band_info_dct_get, _dctfromjpg_wrapper.band_info_dct_set)
    dct_h = _swig_property(_dctfromjpg_wrapper.band_info_dct_h_get, _dctfromjpg_wrapper.band_info_dct_h_set)
    dct_w = _swig_property(_dctfromjpg_wrapper.band_info_dct_w_get, _dctfromjpg_wrapper.band_info_dct_w_set)
    dct_b = _swig_property(_dctfromjpg_wrapper.band_info_dct_b_get, _dctfromjpg_wrapper.band_info_dct_b_set)

    def __init__(self):
        this = _dctfromjpg_wrapper.new_band_info()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    __swig_destroy__ = _dctfromjpg_wrapper.delete_band_info
    __del__ = lambda self: None


band_info_swigregister = _dctfromjpg_wrapper.band_info_swigregister
band_info_swigregister(band_info)


def read_dct_coefficients_from_file_(filename, normalized, channels, band1, band2, band3):
    return _dctfromjpg_wrapper.read_dct_coefficients_from_file_(filename, normalized, channels, band1, band2, band3)


read_dct_coefficients_from_file_ = _dctfromjpg_wrapper.read_dct_coefficients_from_file_


def read_dct_coefficients_from_file(filename, normalized, channels):
    return _dctfromjpg_wrapper.read_dct_coefficients_from_file(filename, normalized, channels)


read_dct_coefficients_from_file = _dctfromjpg_wrapper.read_dct_coefficients_from_file


def read_dct_coefficients_from_buffer_(buffer, buffer_len, normalized, channels, band1, band2, band3):
    return _dctfromjpg_wrapper.read_dct_coefficients_from_buffer_(buffer, buffer_len, normalized, channels, band1,
                                                                  band2, band3)


read_dct_coefficients_from_buffer_ = _dctfromjpg_wrapper.read_dct_coefficients_from_buffer_


def read_dct_coefficients_from_buffer(buffer, buffer_len, normalized, channels):
    return _dctfromjpg_wrapper.read_dct_coefficients_from_buffer(buffer, buffer_len, normalized, channels)


read_dct_coefficients_from_buffer = _dctfromjpg_wrapper.read_dct_coefficients_from_buffer
